import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification
import Dependencies
import JsEmitter
import LspHook

build(
    system: NodeSystem
    emitTarget: EmitTarget
    mainPackage: PackagePair
    mainModule: String
    resolvedDependencies: ResolvedDependencies
    compilerModulePath: Option[Path]
    tempPath: Path
    jsOutputPath: Path
    printMeasurements: Bool
): Unit {

    if(tempPath.exists()) {tempPath.delete()}
    tempPath.createDirectory()

    let jsPathFile = tempPath.slash("js")
    jsPathFile.createDirectory(createParentDirectories = True)

    let success = do {
        let compiler = Compiler.make(
            emitTarget
            system.mainTask()
            compilerModulePath
            jsPathFile
            resolvedDependencies
            Map.empty()
            lspHook = LspHook.disabled()
        )
        compiler.emit(mainPackage, mainModule, isMainModule = True)
        if(printMeasurements) {compiler.printMeasurements()}
        resolvedDependencies.packagePaths.each {packagePair, packagePath =>
            resolvedDependencies.packages.get(packagePair).each {packageInfo =>
                processIncludes(jsPathFile, packagePath, packageInfo)
            }
        }
        True
    }

    if(success) {
        if(jsOutputPath.exists()) {jsOutputPath.delete()}
        jsPathFile.renameTo(jsOutputPath)
    }

}

processIncludes(jsPathFile: Path, packagePath: Path, info: PackageInfo): Unit {
    info.includes.each {include =>
        let fromPath = packagePath.slash(".firefly").slash("include").slash(include.path)
        let toPath = jsPathFile.slash(info.package.packagePair.groupName("/")).slash(include.path)
        fromPath.copyTo(toPath)
    }
}

buildViaBuildSystem(system: NodeSystem, fireflyPath: Path, mainFile: String, target: String) {
    let resolvedDependencies = Dependencies.process(system.httpClient(), system.path(mainFile))
    let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair("ff", "core"))) {
        resolvedDependencies.packagePaths
    } else {
        resolvedDependencies.packagePaths.add(PackagePair("ff", "core"), fireflyPath.slash("core"))
    }
    if(target != "browser") {
        panic("buildViaBuildSystem is currently limited to browser target only - the restriction can be lifted")
    }
    build(
        system = system
        emitTarget = EmitBrowser
        mainPackage = resolvedDependencies.mainPackagePair
        mainModule = mainFile.dropLast(".ff".size())
        resolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)
        compilerModulePath = None
        tempPath = system.path(".firefly/temporary")
        jsOutputPath = system.path(".firefly/output").slash(target)
        printMeasurements = False
    )
}

check(
    system: NodeSystem
    fireflyPath: Path
    path: Path
    virtualFiles: Map[String, String]
    lspHook: LspHook
    infer: Bool
) {
    let packages = path.isDirectory().{
        | True => findPackageFiles(path)
        | False {path.endsWith([".firefly", "package.ff"])} => [PackageFiles(path.parent().grab(), Some(path), [])]
        | False => [PackageFiles(path.parent().grab(), None, [path])]
    }

    packages.filter {!_.files.isEmpty()}.each {package => 
        let firstFile = package.files.grabFirst()
        let resolvedDependencies = Dependencies.process(system.httpClient(), firstFile)
        let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair("ff", "core"))) {
            resolvedDependencies.packagePaths
        } else {
            resolvedDependencies.packagePaths.add(PackagePair("ff", "core"), fireflyPath.slash("core"))
        }
        let fixedResolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)
        let compiler = Compiler.make(
            EmitBuild
            system.mainTask() 
            None
            package.root.slash(".firefly").slash("temporary")
            fixedResolvedDependencies
            virtualFiles
            lspHook
        )
        package.files.each {file =>
            let localFile = file.base()
            if(infer) {
                compiler.infer(resolvedDependencies.mainPackagePair, localFile.dropLast(".ff".size()))
            } else {
                compiler.resolve(resolvedDependencies.mainPackagePair, localFile.dropLast(".ff".size()))
            }
        }
    }

}

capability PackageFiles(
    root: Path
    packageFile: Option[Path]
    files: List[Path]
)


findPackageFiles(path: Path): List[PackageFiles] {
    let files = findFireflyFiles(path)
    let split = files.partition {_.endsWith([".firefly", "package.ff"])}
    let packageFiles = split.first
    mutable singleFiles = split.second
    let multiFileProjects = packageFiles.map {packageFile => 
        let projectRoot = packageFile.parent().grab().parent().grab()
        let files = singleFiles.partition {_.isInsideOf(projectRoot)}
        singleFiles = files.second
        PackageFiles(projectRoot, Some(packageFile), files.first)
    }
    let singleFileProjects = singleFiles.map {file => 
        let projectRoot = file.parent().grab()
        PackageFiles(projectRoot, None, [file])
    }
    [...multiFileProjects, ...singleFileProjects]
}

findFireflyFiles(path: Path): List[Path] {
    let split = path.entries().toList().partition {_.isDirectory()}
    let directories = split.first.map {_.path()}.filter {_.base().all {c => 
        c == '.' || c.isAsciiLower() || c.isAsciiDigit()
    }}
    let fireflyFiles = split.second.map {_.path()}.filter {
        _.extension() == ".ff"
    }
    [...fireflyFiles, ...directories.flatMap {findFireflyFiles(_)}]
}

internalCreateExecutable(
    self: BuildSystem
    mainJsFile: Path = ".firefly/output/executable/Main.bundle.js"
    outputPath: Path = ".firefly/output"
    targets: List[String] = ["host"]
    assets: AssetSystem = AssetSystem.create()
): Unit
    target node {
        let assetOutputPath = outputPath.slash("assets")
        assets.files.pairs().each {| Pair(path, makeStream) =>
            let p = assetOutputPath.slash(path)
            p.parent().grab().createDirectory(createParentDirectories = True)
            p.writeStream(makeStream())
        }
        let json = """{
            "name": "main",
            "bin": {
                "firefly-main": "Main.bundle.js"
            },
            "devDependencies": {
                "pkg": "^5.8.0"
            },
            "pkg": {
                "scripts": "Main.bundle.js",
                "outputPath": "bin",
                "assets": ["../assets/**/*"],
                "targets": [
                    "node18-linux-x64",
                    "node18-macos-x64",
                    "node18-win-x64"
                ]
            }
        }"""
        let packageFile = outputPath.slash("executable/package.json")
        packageFile.writeText(json)
        internalCallPkg(self, packageFile, outputPath, targets)
    }

internalCallPkg(
    self: BuildSystem
    packageFile: Path
    outputPath: Path
    targets: List[String]
): Unit
    target node async """
        import * as pkg from 'pkg'
        return await pkg.exec([
            packageFile_,
            '--out-path', outputPath_,
            '--target', targets_.join(',')
        ])
    """
