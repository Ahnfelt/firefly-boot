import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification
import Dependencies
import JsEmitter

build(
    system: NodeSystem,
    emitTarget: EmitTarget
    mainPackage : PackagePair
    mainModule : String
    resolvedDependencies: ResolvedDependencies
    compilerModulePath: Option[String]
    tempPath : String
    jsOutputPath : String
    printMeasurements : Bool
): Unit {

    let fs = system.files()

    if(fs.exists(tempPath)) { deleteDirectory(fs, tempPath) }
    fs.createDirectory(tempPath)

    let jsPathFile = tempPath + "/js"
    fs.createDirectories(jsPathFile)

    let success = do {
        let compiler =
            Compiler.make(emitTarget, fs, system.time(), compilerModulePath, jsPathFile, resolvedDependencies)
        compiler.emit(mainPackage, mainModule, isMainModule = True)
        if(printMeasurements) { compiler.printMeasurements() }
        True
    }

    if(success) {
        if(fs.exists(jsOutputPath)) { deleteDirectory(fs, jsOutputPath) }
        fs.rename(jsPathFile, jsOutputPath)
    }

}

deleteDirectory(fs: FileSystem, outputFile: String): Unit {
    fs.list(outputFile).each { file =>
        if(fs.isDirectory(file)) {
            deleteDirectory(fs, file)
        } else {
            fs.delete(file)
        }
    }
    fs.delete(outputFile)
}

buildViaBuildSystem(system: NodeSystem, fireflyPath: String, mainFile: String, target: String) {
    let resolvedDependencies = Dependencies.process(system.files(), system.fetch(), mainFile)
    let fixedDependencies = resolvedDependencies.ResolvedDependencies(
        packagePaths = resolvedDependencies.packagePaths.add(PackagePair("script", "script"), ".")
    )
    let fixedPackagePaths = if(fixedDependencies.packagePaths.contains(PackagePair("ff", "core"))) {
        fixedDependencies.packagePaths
    } else {
        fixedDependencies.packagePaths.add(PackagePair("ff", "core"), fireflyPath + "/core")
    }
    if(target != "browser") {
        panic("buildViaBuildSystem is currently limited to browser target only - the restriction can be lifted")
    }
    build(
        system = system
        emitTarget = EmitBrowser
        mainPackage = PackagePair("script", "script")
        mainModule = mainFile.dropLast(".ff".size())
        resolvedDependencies = fixedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)
        compilerModulePath = None
        tempPath = ".firefly/temporary"
        jsOutputPath = ".firefly/output/" + target
        printMeasurements = False
    )
}

internalCreateExecutable(
    self: BuildSystem,
    mainJsFile: String = ".firefly/output/executable/Main.bundle.js",
    outputPath: String = ".firefly/output",
    targets: List[String] = ["host"],
    assets: AssetSystem = AssetSystem.create()
): Unit
    target node {
        let fs = internalFileSystem(self)
        let assetOutputPath = outputPath + "/assets"
        assets.files.pairs().each {| Pair(path, stream) =>
            let p = assetOutputPath + path
            fs.createDirectories(p.reverse().dropWhile {_ != '/'}.reverse())
            fs.writeStream(p, stream)
        }
        let json = """{
            "name": "main",
            "bin": {
                "firefly-main": "Main.bundle.js"
            },
            "devDependencies": {
                "pkg": "^5.7.0"
            },
            "pkg": {
                "scripts": "Main.bundle.js",
                "outputPath": "bin",
                "assets": ["../assets/**/*"],
                "targets": [
                    "node18-linux-x64",
                    "node18-macos-x64",
                    "node18-win-x64"
                ]
            }
        }"""
        let packageFile = outputPath + "/executable/package.json"
        fs.writeText(packageFile, json)
        internalCallPkg(self, packageFile, outputPath, targets)
    }

internalCallPkg(
    self: BuildSystem,
    packageFile: String,
    outputPath: String,
    targets: List[String]
): Unit
    target node async """
        import * as pkg from 'pkg'
        return await pkg.exec([
            packageFile_,
            '--out-path', outputPath_,
            '--target', ff_core_List.List_toArray(targets_).join(',')
        ])
    """

internalFileSystem(dummy: BuildSystem): FileSystem
    target node async """
        return null;
    """
