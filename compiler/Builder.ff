import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification
import Dependencies
import JsEmitter
import ModuleCache
import LspHook
import DependencyLock

build(
    system: NodeSystem
    emitTarget: EmitTarget
    mainModules: List[ModuleKey]
    resolvedDependencies: ResolvedDependencies
    compilerModulePath: Option[Path]
    tempPath: Path
    jsOutputPath: Path
    printMeasurements: Bool
    moduleCache: ModuleCache
): Unit {

    if(tempPath.exists()) {tempPath.delete()}
    tempPath.createDirectory()

    let jsPathFile = tempPath.slash("js")
    jsPathFile.createDirectory(createParentDirectories = True)

    let success = do {
        let compiler = Compiler.new(
            emitTarget
            system.mainTask()
            compilerModulePath
            jsPathFile
            resolvedDependencies
            Map.new()
            moduleCache
            lspHook = LspHook.disabled()
        )
        mainModules.each {moduleKey => compiler.emit(moduleKey, isMainModule = True)}
        if(printMeasurements) {compiler.printMeasurements()}
        resolvedDependencies.packagePaths.each {packagePair, packagePath =>
            resolvedDependencies.packages.get(packagePair).each {packageInfo =>
                processNodeModules(system, jsPathFile, packagePath, packageInfo)
                if(emitTarget != EmitBrowser) {
                    try {
                        processIncludes(jsPathFile, packagePath, packageInfo)
                    } catchAny {error => // TODO: Why does this sometimes fail
                        Log.debug("Internal error: processIncludes" + error.message())
                    }
                }
            }
        }
        True
    }

    if(success) {
        if(jsOutputPath.exists()) {jsOutputPath.delete()}
        jsPathFile.renameTo(jsOutputPath)
    }

}

processIncludes(jsPathFile: Path, packagePath: Path, info: PackageInfo) {
    info.includes.each {include =>
        let fromPath = packagePath.slash(".firefly").slash("include").slash(include.path)
        let toPath = jsPathFile.slash(info.package.packagePair.groupName("/")).slash(include.path)
        toPath.createSymlinkTo(fromPath, junction = True)
    }
}

processNodeModules(system: NodeSystem, jsPathFile: Path, packagePath: Path, info: PackageInfo) {
    if(info.includes.any {_.path == "node_modules"}) {
        let includePath = packagePath.slash(".firefly").slash("include")
        let nodeModules = includePath.slash("node_modules")
        let packageJson = includePath.slash("package.json")
        if(!nodeModules.exists() && packageJson.exists()) {
            system.writeErrorLine("Running npm install --no-bin-links in " + includePath.absolute())
            let result = system.execute("npm", [
                "install", "--no-bin-links"
            ], directory = Some(includePath), shell = True)
            if(result.exitCode != 0) {
                system.writeErrorLine("Running npm failed with exit code " + result.exitCode + ":")
                system.writeErrorBuffer(result.standardOut)
                system.writeErrorBuffer(result.standardError)
            }
        }
    }
}

buildViaBuildSystem(system: NodeSystem, fireflyPath: Path, mainFiles: List[Path], target: String) {
    let resolvedDependencies = Dependencies.process(
        system.httpClient()
        DependencyLock.new(system.mainTask())
        mainFiles.grabFirst()
    )
    let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair("ff", "core"))) {
        resolvedDependencies.packagePaths
    } else {
        resolvedDependencies.packagePaths.add(PackagePair("ff", "core"), fireflyPath.slash("core"))
    }
    let packageRoot = resolvedDependencies.packagePaths.grab(resolvedDependencies.mainPackagePair)
    let mainModuleKeys = mainFiles.map {mainFile =>
        resolvedDependencies.mainPackagePair.moduleKey(packageRoot, mainFile).else {
            panic(
                "Can't build multiple main files in different packages: " + 
                mainFile.absolute() + " isn't part of " + packageRoot.absolute()
            )
        }
    }
    if(target != "browser") {
        panic("buildViaBuildSystem is currently limited to browser target only - the restriction can be lifted")
    }
    build(
        system = system
        emitTarget = EmitBrowser
        mainModules = mainModuleKeys
        resolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)
        compilerModulePath = None
        tempPath = system.path(".firefly/temporary")
        jsOutputPath = system.path(".firefly/output").slash(target)
        printMeasurements = False
        moduleCache = ModuleCache.new(0)
    )
}

check(
    system: NodeSystem
    fireflyPath: Path
    path: Path
    mustContain: Option[String]
    skipFiles: Set[String]
    virtualFiles: Map[String, String]
    cache: ModuleCache
    dependencyLock: DependencyLock
    newVersion: Int
    lspHook: LspHook
    infer: Bool
): List[CompileError] {
    let packages = path.isDirectory().{
        | False {path.endsWith([".firefly", "package.ff"])} => [PackageFiles(path.parent().grab(), Some(path), [])]
        | True => findPackageFilesForDirectory(path, virtualFiles, mustContain, skipFiles)
        | False => findPackageFilesForFile(path).toList()
    }
    let errors = Array.new()

    let filteredPackages = packages.filter {!_.root.contains([".firefly", "dependencies"])}
    filteredPackages.filter {!_.files.isEmpty()}.each {package => 
        let firstFile = package.files.grabFirst()
        try {
            Some(Dependencies.process(system.httpClient(), dependencyLock, firstFile))
        } tryCatch {| CompileError(_, _) @ c, error =>
            errors.push(c)
            None
        } catch {| CompileErrors(compileErrors), error =>
            errors.pushList(compileErrors)
            None
        }.each: resolvedDependencies => 
        let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair("ff", "core"))) {
            resolvedDependencies.packagePaths
        } else {
            resolvedDependencies.packagePaths.add(PackagePair("ff", "core"), fireflyPath.slash("core"))
        }
        let fixedResolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)
        let newCache = cache.without(newVersion, path)
        let compiler = Compiler.new(
            EmitBuild
            system.mainTask() 
            None
            package.root.slash(".firefly").slash("temporary")
            fixedResolvedDependencies
            virtualFiles
            newCache
            lspHook
        )
        package.files.each {file =>
            let packagePair = resolvedDependencies.mainPackagePair
            let folders = file.parent().grab().relativeListTo(package.root)
            let name = file.base().removeLast(".ff").grab()
            let moduleKey = ModuleKey(packagePair, folders, name)
            try {
                if(infer) {
                    compiler.infer(moduleKey)
                } else {
                    compiler.resolve(moduleKey)
                }
            } tryCatch {| CompileError(_, _) @ c, error =>
                errors.push(c)
            } catch {| CompileErrors(compileErrors), error =>
                errors.pushList(compileErrors)
            }
        }
        cache.mergeVersions(compiler.cache)
    }
    errors.drain()

}

capability PackageFiles(
    root: Path
    packageFile: Option[Path]
    files: List[Path]
)


findPackageFilesForFile(file: Path): Option[PackageFiles] {
    if(file.extension() == ".ff"):
    mutable packageFile = None
    mutable currentDirectory = file.parent()
    while {!currentDirectory.isEmpty() && packageFile.isEmpty()} {
        packageFile = currentDirectory.map {_.slash(".firefly").slash("package.ff")}.filter {_.exists()}
        currentDirectory = currentDirectory.grab().parent()
    }
    let projectRoot = packageFile.map {_.parent().grab().parent().grab()}.else {file.parent().grab()}
    PackageFiles(projectRoot, packageFile, [file])
}

findPackageFilesForDirectory(
    directory: Path
    virtualFiles: Map[String, String]
    mustContain: Option[String]
    skipFiles: Set[String]
): List[PackageFiles] {
    let files = findFireflyFiles(directory, virtualFiles, mustContain, skipFiles)
    let split = files.partition {_.endsWith([".firefly", "package.ff"])}
    let packageFiles = split.first
    mutable singleFiles = split.second
    let multiFileProjects = packageFiles.map {packageFile => 
        let projectRoot = packageFile.parent().grab().parent().grab()
        let files = singleFiles.partition {_.isInsideOf(projectRoot)}
        singleFiles = files.second
        let packageFiles = files.first
        PackageFiles(projectRoot, Some(packageFile), packageFiles)
    }
    let singleFileProjects = singleFiles.map {file => 
        let projectRoot = file.parent().grab()
        PackageFiles(projectRoot, None, [file])
    }
    [...multiFileProjects, ...singleFileProjects]
}

findFireflyFiles(
    path: Path
    virtualFiles: Map[String, String]
    mustContain: Option[String]
    skipFiles: Set[String]
): List[Path] {
    let split = path.entries().toList().partition {_.isDirectory()}
    let directories = split.first
    let files = split.second
    let relevantDirectories = directories.map {_.path()}.filter {_.base().all {c => 
        c == '.' || c.isAsciiLower() || c.isAsciiDigit()
    }}
    let fireflyFiles = files.map {_.path()}.filter {file => 
        file.extension() == ".ff" && !skipFiles.contains(file.absolute()) && (
            file.endsWith([".firefly", "package.ff"]) || mustContain.all {s => 
                let code = virtualFiles.get(file.absolute()).else {file.readText()}
                code.contains(s)
            }
        )
    }
    [...fireflyFiles, ...relevantDirectories.flatMap {findFireflyFiles(_, virtualFiles, mustContain, skipFiles)}]
}

internalCreateExecutable(
    self: BuildSystem
    mainJsFile: Path = ".firefly/output/executable/Main.bundle.js"
    outputPath: Path = ".firefly/output"
    targets: List[String] = ["host"]
    assets: AssetSystem = AssetSystem.create()
): Unit {
    let assetOutputPath = outputPath.slash("assets")
    assets.files.pairs().each {| Pair(path, makeStream) =>
        let p = assetOutputPath.slash(path)
        p.parent().grab().createDirectory(createParentDirectories = True)
        p.writeStream(makeStream())
    }
    let json = """{
        "name": "main",
        "bin": {
            "firefly-main": "Main.bundle.js"
        },
        "devDependencies": {
            "pkg": "^5.8.0"
        },
        "pkg": {
            "scripts": "Main.bundle.js",
            "outputPath": "bin",
            "assets": ["../assets/**/*"],
            "targets": [
                "node18-linux-x64",
                "node18-macos-x64",
                "node18-win-x64"
            ]
        }
    }"""
    let packageFile = outputPath.slash("executable/package.json")
    packageFile.writeText(json)
    internalCallPkg(self, packageFile, outputPath, targets)
}

internalCallPkg(
    self: BuildSystem
    packageFile: Path
    outputPath: Path
    targets: List[String]
): Unit {
    let pkg = Js.null() //Js.import("pkg")
    Js.await(pkg->exec([
        packageFile.absolutePath
        "--out-path", outputPath.absolutePath
        "--target", targets.join(",")
    ]))
}
