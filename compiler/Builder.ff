import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification
import Dependencies

build(
    system: NodeSystem,
    target : String
    mainPackage : PackagePair
    mainModule : String
    resolvedDependencies: ResolvedDependencies
    compilerModulePath: Option[String]
    tempPath : String
    jsOutputPath : String
    printMeasurements : Bool
): Unit {

    let fs = system.files()

    let targetIsNode =
        if(target == "node") {
            True
        } elseIf {target == "browser"} {
            False
        } else {
            panic("Unknown target '" + target + "'")
        }

    if(fs.exists(tempPath)) { deleteDirectory(fs, tempPath) }
    fs.createDirectory(tempPath)

    let jsPathFile = tempPath + "/js"
    fs.createDirectories(jsPathFile)

    let success = do {
        let compiler =
            Compiler.make(targetIsNode, fs, system.time(), compilerModulePath, jsPathFile, resolvedDependencies)
        compiler.emit(mainPackage, mainModule, isMainModule = True)
        if(printMeasurements) { compiler.printMeasurements() }
        True
    }

    if(success) {
        if(fs.exists(jsOutputPath)) { deleteDirectory(fs, jsOutputPath) }
        fs.rename(jsPathFile, jsOutputPath)
    }

}

deleteDirectory(fs: FileSystem, outputFile: String): Unit {
    fs.list(outputFile).each { file =>
        if(fs.isDirectory(file)) {
            deleteDirectory(fs, file)
        } else {
            fs.delete(file)
        }
    }
    fs.delete(outputFile)
}

buildViaBuildSystem(system: NodeSystem, fireflyPath: String, mainFile: String) {
    let target = "node"
    let resolvedDependencies = Dependencies.process(system.files(), mainFile)
    let fixedDependencies = resolvedDependencies.ResolvedDependencies(
        packagePaths = resolvedDependencies.packagePaths.add(PackagePair("script", "script"), ".")
    )
    let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair("ff", "core"))) {
        resolvedDependencies.packagePaths
    } else {
        resolvedDependencies.packagePaths.add(PackagePair("ff", "core"), fireflyPath + "/core")
    }
    build(
        system = system
        target = target
        mainPackage = PackagePair("script", "script")
        mainModule = mainFile.dropLast(".ff".size())
        resolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)
        compilerModulePath = None
        tempPath = ".firefly/temporary"
        jsOutputPath = ".firefly/output/" + target
        printMeasurements = False
    )
}
