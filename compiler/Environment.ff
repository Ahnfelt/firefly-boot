import Syntax

type Environment(
    symbols: Map[String, Scheme]
)

type Scheme(
    isVariable: Bool
    isMutable: Bool
    signature: Signature
)

make(coreModule: Module, module: Module, otherModules: List[Module]): Environment {
    Environment(
        processModule(coreModule, False, True).symbols ++
        processModule(module, True, False).symbols ++
        otherModules.map { processModule(_, False, False).symbols }.fold(Map())({ _ ++ _ })
    )
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show)
}

processModule(module: Module, isCurrentModule: Bool, isCoreModule: Bool): Environment {

    function full(module: Module, name: String): String {
        module.file.dropRight(3) + "." + name
    }

    let functions =
        module.functions.map { d => Pair(
            full(module, d.signature.name),
            Scheme(False, False, d.signature)
        )}

    let lets =
        module.lets.map { d => Pair(
            full(module, d.name),
            Scheme(True, False, Signature(d.at, d.name, [], [], [], d.variableType))
        )}

    let extends =
        module.extends.flatMap { d =>
            d.type.{
                | TVariable t =>
                    fail(t.at, "Unexpected type variable: $" + t.index)
                | TConstructor t =>
                    let prefix = t.name + "_"
                    let selfParameter = Parameter(d.at, False, d.name, d.type, None)
                    d.methods.map { method =>
                        Pair(
                            full(module, prefix + method.signature.name),
                            Scheme(False, False, method.signature.Signature(
                                generics = d.generics ++ method.signature.generics
                                constraints = d.constraints ++ method.signature.constraints
                                parameters = [selfParameter, ...method.signature.parameters]
                            ))
                        )
                    }
            }
        }

    let variants =
        module.types.flatMap { d =>
            let returnType = TConstructor(d.at, full(module, d.name), d.generics.map { typeParameter =>
                TConstructor(d.at, typeParameter, [])
            })
            d.variants.map { variant =>
                Pair(
                    full(module, variant.name),
                    Scheme(False, False, Signature(
                        variant.at,
                        variant.name,
                        generics = d.generics,
                        constraints = d.constraints,
                        parameters = d.commonFields ++ variant.fields,
                        returnType = returnType
                    ))
                )
            }
        }

    Environment((functions ++ lets ++ extends ++ variants).toMap)
}
