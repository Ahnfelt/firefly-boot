import Syntax

class ModuleCache(
    mutable version: Int
    mutable parsedModules: Map[String, Pair[Module, Int]]
    mutable resolvedModules: Map[String, Pair[Module, Int]]
    mutable derivedModules: Map[String, Pair[Module, Int]]
    mutable inferredModules: Map[String, Pair[Module, Int]]
    mutable emittedModules: Map[String, Int]
)

empty(version: Int): ModuleCache {
    ModuleCache(
        version = version
        parsedModules = Map.empty()
        resolvedModules = Map.empty()
        derivedModules = Map.empty()
        inferredModules = Map.empty()
        emittedModules = Map.empty()
    )
}

extend self: ModuleCache {
    
    without(newVersion: Int, path: Path): ModuleCache {
        let key = path.absolute()
        if(path.isFile()) {
            self.ModuleCache(
                version = newVersion
                parsedModules = self.parsedModules.remove(key)
                resolvedModules = self.resolvedModules.remove(key)
                derivedModules = self.derivedModules.remove(key)
                inferredModules = self.inferredModules.remove(key)
                emittedModules = self.emittedModules.remove(key)
            )
        } else {
            function invalidated(p: String): Bool {
                p.startsWith(key) && !p.contains(".firefly/dependencies") && !p.contains(".firefly\\dependencies")
            }
            self.ModuleCache(
                version = newVersion
                parsedModules = self.parsedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()
                resolvedModules = self.resolvedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()
                derivedModules = self.derivedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()
                inferredModules = self.inferredModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()
                emittedModules = self.emittedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()
            )
        }
    }
    
    mergeVersions(cache: ModuleCache): Unit {
        self.parsedModules = mergeVersionedMap(self.parsedModules, cache.parsedModules) {_.second}
        self.resolvedModules = mergeVersionedMap(self.resolvedModules, cache.resolvedModules) {_.second}
        self.derivedModules = mergeVersionedMap(self.derivedModules, cache.derivedModules) {_.second}
        self.inferredModules = mergeVersionedMap(self.inferredModules, cache.inferredModules) {_.second}
        self.emittedModules = mergeVersionedMap(self.emittedModules, cache.emittedModules) {_}
    }
    
    cacheParsedModule(
        packagePaths: Map[PackagePair, Path]
        packagePair: PackagePair
        moduleName: String
        body: Path => Module
    ): Module {
        let path = modulePath(packagePaths, packagePair, moduleName)
        self.parsedModules.get(path.absolute()).map {_.first}.else:
        let result = body(path)
        self.parsedModules = self.parsedModules.add(path.absolute(), Pair(result, self.version))
        result
    }
    
    cacheResolvedModule(
        packagePaths: Map[PackagePair, Path]
        packagePair: PackagePair
        moduleName: String
        body: Path => Module
    ): Module {
        let path = modulePath(packagePaths, packagePair, moduleName)
        self.resolvedModules.get(path.absolute()).map {_.first}.else:
        let result = body(path)
        self.resolvedModules = self.resolvedModules.add(path.absolute(), Pair(result, self.version))
        result
    }

    cacheDerivedModule(
        packagePaths: Map[PackagePair, Path]
        packagePair: PackagePair
        moduleName: String
        body: Path => Module
    ): Module {
        let path = modulePath(packagePaths, packagePair, moduleName)
        self.derivedModules.get(path.absolute()).map {_.first}.else:
        let result = body(path)
        self.derivedModules = self.derivedModules.add(path.absolute(), Pair(result, self.version))
        result
    }
        
    cacheInferredModule(
        packagePaths: Map[PackagePair, Path]
        packagePair: PackagePair
        moduleName: String
        body: Path => Module
    ): Module {
        let path = modulePath(packagePaths, packagePair, moduleName)
        self.inferredModules.get(path.absolute()).map {_.first}.else:
        let result = body(path)
        self.inferredModules = self.inferredModules.add(path.absolute(), Pair(result, self.version))
        result
    }
 
    cacheEmittedModule(
        packagePaths: Map[PackagePair, Path]
        packagePair: PackagePair
        moduleName: String
        body: Path => Unit
    ): Unit {
        let path = modulePath(packagePaths, packagePair, moduleName)
        if(!self.emittedModules.contains(path.absolute())):
        self.emittedModules = self.emittedModules.add(path.absolute(), self.version)
        try {
            body(path)
        } catchAny {error =>
            self.emittedModules = self.emittedModules.remove(path.absolute())
            error.rethrow()
        } grab()
    }
    
}

mergeVersionedMap[T](oldMap: Map[String, T], newMap: Map[String, T], getVersion: T => Int): Map[String, T] {
    mutable result = newMap
    oldMap.each {k, v =>
        if(!newMap.get(k).any {getVersion(_) >= getVersion(v)}) {
            result = result.add(k, v)
        }
    }
    result
}

modulePath(
    packagePaths: Map[PackagePair, Path]
    packagePair: PackagePair
    moduleName: String
): Path {
    let packagePath = packagePaths.get(packagePair).else {
        panic("Internal error - package path missing: " + packagePair.groupName())
    }
    let file = moduleName + ".ff"
    packagePath.slash(file)
}