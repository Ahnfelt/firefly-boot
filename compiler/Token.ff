import Syntax

data Token(
    file: String
    code: String
    kind: TokenKind
    startLine: Int
    startLineOffset: Int
    startOffset: Int
    stopLine: Int
    stopLineOffset: Int
    stopOffset: Int
)

extend token: Token {

    at(): Location {
        Location(token.file, token.startLine, (token.startOffset - token.startLineOffset) + 1)
    }

    end(): Location {
        Location(token.file, token.startLine, (token.stopOffset - token.startLineOffset) + 1)
    }

    raw(): String {
        token.code.slice(token.startOffset, token.stopOffset)
    }

    is(kind1: TokenKind): Bool {
        token.kind == kind1
    }

    is2(kind1: TokenKind, kind2: TokenKind): Bool {
        token.kind == kind1 || token.kind == kind2
    }

    is3(kind1: TokenKind, kind2: TokenKind, kind3: TokenKind): Bool {
        token.kind == kind1 || token.kind == kind2 || token.kind == kind3
    }

    is4(kind1: TokenKind, kind2: TokenKind, kind3: TokenKind, kind4: TokenKind): Bool {
        token.kind == kind1 || token.kind == kind2 || token.kind == kind3 || token.kind == kind4
    }

    is5(kind1: TokenKind, kind2: TokenKind, kind3: TokenKind, kind4: TokenKind, kind5: TokenKind): Bool {
        token.kind == kind1 || token.kind == kind2 || token.kind == kind3 || token.kind == kind4 || token.kind == kind5
    }

    rawIs(value: String): Bool {
        token.stopOffset - token.startOffset == value.size() &&
        token.code.startsWith(value, token.startOffset)
    }

    rawIs2(value1: String, value2: String): Bool {
        token.rawIs(value1) || token.rawIs(value2)
    }

    rawIs3(value1: String, value2: String, value3: String): Bool {
        token.rawIs(value1) || token.rawIs(value2) || token.rawIs(value3)
    }

    rawIs4(value1: String, value2: String, value3: String, value4: String): Bool {
        token.rawIs(value1) || token.rawIs(value2) || token.rawIs(value3) || token.rawIs(value4)
    }

}

data TokenKind {
    LEnd
    LString
    LChar
    LInt
    LFloat
    LKeyword
    LNamespace
    LLower
    LUpper
    LWildcard
    LBracketLeft
    LBracketRight
    LOperator
    LUnary
    LComma
    LSeparator
    LDot
    LSemicolon
    LPipe
    LColon
    LDotDotDot
    LArrowThin
    LArrowThick
    LAssign
    LAssignPlus
    LAssignMinus
}

extend self: TokenKind {

    beforeSeparator(): Bool {
        self.{
            | LEnd => False
            | LString => True
            | LChar => True
            | LInt => True
            | LFloat => True
            | LKeyword => True
            | LNamespace => False
            | LLower => True
            | LUpper => True
            | LWildcard => True
            | LBracketLeft => False
            | LBracketRight => True
            | LUnary => True
            | LOperator => False
            | LComma => False
            | LSeparator => False
            | LDot => False
            | LSemicolon => False
            | LPipe => False
            | LColon => False
            | LDotDotDot => False
            | LArrowThin => False
            | LArrowThick => False
            | LAssign => False
            | LAssignPlus => False
            | LAssignMinus => False
        }
    }

    afterSeparator(): Bool {
        self.{
            | LEnd => False
            | LString => True
            | LChar => True
            | LInt => True
            | LFloat => True
            | LKeyword => True
            | LNamespace => True
            | LLower => True
            | LUpper => True
            | LWildcard => True
            | LBracketLeft => True
            | LBracketRight => False
            | LUnary => True
            | LOperator => False
            | LComma => False
            | LSeparator => False
            | LDot => False
            | LSemicolon => False
            | LPipe => False
            | LColon => False
            | LDotDotDot => True
            | LArrowThin => False
            | LArrowThick => False
            | LAssign => False
            | LAssignPlus => False
            | LAssignMinus => False
        }
    }

    afterKeyword(): Bool {
        self.{
            | LEnd => False
            | LString => True
            | LChar => True
            | LInt => True
            | LFloat => True
            | LKeyword => True
            | LNamespace => True
            | LLower => True
            | LUpper => True
            | LWildcard => True
            | LBracketLeft => False
            | LBracketRight => False
            | LUnary => False
            | LOperator => False
            | LComma => False
            | LSeparator => False
            | LDot => False
            | LSemicolon => False
            | LPipe => False
            | LColon => False
            | LDotDotDot => False
            | LArrowThin => False
            | LArrowThick => False
            | LAssign => False
            | LAssignPlus => False
            | LAssignMinus => False
        }
    }

}
