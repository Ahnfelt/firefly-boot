import Syntax

type Resolver(
    variables: Map[String, String]
    variants: Map[String, String]
    types: Map[String, String]
    traits: Map[String, String]
)

make(): Resolver {
    Resolver(
        variables = [].toMap()
        variants = [].toMap()
        types = [].toMap()
        traits = [].toMap()
    )
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show())
}

extend self: Resolver {

    resolveModule(module: Module, otherModules: List[Module]): Module {
        let moduleNamespace =
            module.file.replace("\\", "/").reverse().takeWhile { _ != '/' }.reverse().takeWhile { _ != '.' }
        let self2 = self.processImports(module.imports, otherModules)
        let self3 = self2.processDefinitions(module, None)
        module.Module(
            types = module.types.map { self3.resolveTypeDefinition(_) }
            traits = module.traits.map { self3.resolveTraitDefinition(_) }
            instances = module.instances.map { self3.resolveInstanceDefinition(_) }
            extends = module.extends.map { self3.resolveExtendDefinition(_) }
            lets = module.lets.map { self3.resolveLetDefinition(_) }
            functions = module.functions.map { self3.resolveFunctionDefinition(_) }
        )
    }

    processImports(imports: List[DImport], modules: List[Module]): Resolver {
        mutable resolver = self
        imports.each { import =>
            modules.find { _.file.dropLast(3) == import.file }.{
                | Some(module) =>
                    resolver = resolver.processDefinitions(module, Some(import.alias))
                | None =>
                    fail(import.at, "No such module: " + import.file)
            }
        }
        resolver
    }

    processDefinitions(module: Module, importAlias: Option[String]): Resolver {
        function entry(name: String, unqualified: Bool): List[Pair[String, String]] {
            let full =
                module.packagePair.first + ":" + module.packagePair.second + "/" +
                module.file.dropLast(3) + "." + name
            importAlias.{
                | None => [Pair(name, full)]
                | Some(alias) { unqualified } => [Pair(alias + "." + name, full), Pair(name, full)]
                | Some(alias) => [Pair(alias + "." + name, full)]
            }
        }
        let isCore = // TODO: Extend imports to list unqualified symbols instead of this
            module.packagePair.first == "ff" &&
            module.packagePair.second == "core" &&
            module.file == "Core.ff"
        let lets = module.lets.flatMap { entry(_.name, isCore) }.toMap()
        let functions = module.functions.flatMap { entry(_.signature.name, isCore) }.toMap()
        let traitMethods = module.traits.flatMap { _.methods }.flatMap { entry(_.name, False) }.toMap()
        let traits = module.traits.flatMap { entry(_.name, True) }.toMap()
        let types = module.types.flatMap { entry(_.name, True) }.toMap()
        let variants = module.types.flatMap { _.variants }.flatMap { entry(_.name, True) }.toMap()
        Resolver(
            variables = self.variables ++ lets ++ functions ++ traitMethods
            variants = self.variants ++ variants
            types = self.types ++ types
            traits = self.traits ++ traits
        )
    }

    resolveTypeDefinition(definition: DType): DType {
        let generics = definition.generics.map { g => Pair(g, g) }.toMap()
        let self2 = self.Resolver(types = self.types ++ generics)
        definition.DType(
            constraints = definition.constraints.map { c =>
                c.Constraint(representation = self2.resolveType(c.representation))
            },
            commonFields = definition.commonFields.map { f =>
                f.Parameter(
                    valueType = self2.resolveType(f.valueType)
                    default = f.default.map { self2.resolveTerm(_) }
                )
            },
            variants = definition.variants.map { v =>
                v.Variant(fields = v.fields.map { f =>
                    f.Parameter(
                        valueType = self2.resolveType(f.valueType)
                        default = f.default.map { self2.resolveTerm(_) }
                    )
                })
            }
        )
    }

    resolveTraitDefinition(definition: DTrait): DTrait {
        definition
    }

    resolveInstanceDefinition(definition: DInstance): DInstance {
        definition
    }

    resolveExtendDefinition(definition: DExtend): DExtend {
        let generics = definition.generics.map { g => Pair(g, g) }.toMap()
        let self2 = self.Resolver(
            types = self.types ++ generics
            variables = self.variables.add(definition.name, definition.name)
        )
        definition.DExtend(
            constraints = definition.constraints.map { c =>
                c.Constraint(representation = self2.resolveType(c.representation))
            },
            type = self2.resolveType(definition.type),
            methods = definition.methods.map { self2.resolveFunctionDefinition(_) }
        )
    }

    resolveLetDefinition(definition: DLet): DLet {
        let self2 = self.Resolver(variables = self.variables.add(definition.name, definition.name))
        definition.DLet(
            variableType = self.resolveType(definition.variableType)
            value = self.resolveTerm(definition.value)
        )
    }

    resolveTerm(term: Term): Term {
        | EString _ => term
        | EChar _ => term
        | EInt _ => term
        | EFloat _ => term
        | EVariable e =>
            self.variables.get(e.name).map { e.EVariable(name = _) }.else {
                if(e.name.first().any { _.isAsciiLetter() }) {
                    fail(e.at, "No such variable: " + e.name)
                } else {
                    term
                }
            }
        | EList(at, t, items) =>
            EList(at, self.resolveType(t), items.map { | Pair(item, spread) =>
                Pair(self.resolveTerm(item), spread)
            })
        | EVariant(at, name, typeArguments, arguments) =>
            EVariant(
                at = at
                name = self.variants.get(name).else { fail(at, "No such variant: " + name) }
                typeArguments = typeArguments.map { self.resolveType(_) }
                arguments = arguments.map { _.map { a => a.Argument(value = self.resolveTerm(a.value)) }}
            )
        | EVariantIs(at, name, typeArguments) =>
            EVariantIs(
                at = at
                name = self.variants.get(name).else { fail(at, "No such variant: " + name) }
                typeArguments = typeArguments.map { self.resolveType(_) }
            )
        | ECopy(at, name, record, arguments) =>
            ECopy(
                at = at
                name = self.variants.get(name).else { fail(at, "No such variant: " + name) }
                record = self.resolveTerm(record)
                arguments = arguments.map { f => f.Field(value = self.resolveTerm(f.value)) }
            )
        | EField e =>
            e.EField(record = self.resolveTerm(e.record))
        | ELambda(at, Lambda(lambdaAt, cases)) =>
            ELambda(at, Lambda(lambdaAt, cases.map { self.resolveCase(_) }))
        | EPipe(at, value, function) =>
            EPipe(
                at = at
                value = self.resolveTerm(value)
                function = self.resolveTerm(function)
            )
        | ECall(at, tailCall, function, typeArguments, arguments) =>
            ECall(
                at = at
                tailCall = tailCall
                function = self.resolveTerm(function)
                typeArguments = typeArguments.map { self.resolveType(_) }
                arguments = arguments.map { a => a.Argument(value = self.resolveTerm(a.value)) }
            )
        | ERecord(at, fields) =>
            ERecord(
                at = at
                fields = fields.map { f => f.Field(value = self.resolveTerm(f.value)) }
            )
        | EWildcard e =>
            if(e.index == 0) { fail(e.at, "Unbound wildcard") }
            e.EWildcard()
        | EFunctions(at, functions, body) =>
            let functionMap = functions.map { _.signature.name }.map { name => Pair(name, name) }.toMap()
            let self2 = self.Resolver(variables = self.variables ++ functionMap)
            EFunctions(
                at = at,
                functions = functions.map { self2.resolveFunctionDefinition(_) },
                body = self2.resolveTerm(body)
            )
        | ELet e =>
            let self2 = self.Resolver(variables = self.variables.add(e.name, e.name))
            e.ELet(
                valueType = self.resolveType(e.valueType)
                value = self.resolveTerm(e.value)
                body = self2.resolveTerm(e.body)
            )
        | ESequential(at, before, after) =>
            ESequential(
                at = at
                before = self.resolveTerm(before)
                after = self.resolveTerm(after)
            )
        | EAssign(at, operator, variable, value) =>
            EAssign(
                at = at
                operator = operator
                variable = self.variables.get(variable).else { fail(at, "No such variable: " + variable) }
                value = self.resolveTerm(value)
            )
        | EAssignField(at, operator, record, field, value) =>
            EAssignField(
                at = at
                operator = operator
                record = self.resolveTerm(record)
                field = field
                value = self.resolveTerm(value)
            )
    }

    resolveType(type: Type): Type {
        | TVariable _ =>
            type
        | TConstructor constructor =>
            let name = if(constructor.name.contains("$")) {
                constructor.name
            } else {
                self.types.get(constructor.name).else { fail(constructor.at, "No such type: " + constructor.name) }
            }
            constructor.TConstructor(
                name = name
                generics = constructor.generics.map { self.resolveType(_) }
            )
    }

    resolveFunctionDefinition(definition: DFunction): DFunction {
        let variableMap = definition.signature.parameters.map { _.name }.map { name => Pair(name, name) }.toMap()
        let typeMap = definition.signature.generics.map { name => Pair(name, name) }.toMap()
        let self2 = self.Resolver(
            variables = self.variables ++ variableMap
            types = self.types ++ typeMap
        )
        let signature = definition.signature.Signature(
            constraints = definition.signature.constraints.map { c =>
                Constraint(self2.resolveType(c.representation))
            }
            parameters = definition.signature.parameters.map { p =>
                p.Parameter(
                    valueType = self2.resolveType(p.valueType)
                    default = p.default.map { self2.resolveTerm(_) }
                )
            }
            returnType = self2.resolveType(definition.signature.returnType)
        )
        let body = definition.body.Lambda(cases = definition.body.cases.map { self2.resolveCase(_) })
        DFunction(definition.at, signature, body, definition.targets)
    }

    resolveCase(case: MatchCase): MatchCase {
        function findVariables(pattern: MatchPattern): Map[String, String] {
            | PVariable(_, Some(name)) =>
                [Pair(name, name)].toMap()
            | PVariable(_, None) =>
                Map.empty()
            | PVariant(_, _, patterns) =>
                patterns.map(findVariables).foldLeft(Map.empty[String, String]())({_ ++ _})
            | PVariantAs(_, _, variable) =>
                variable.toList().map { x => Pair(x, x) }.toMap()
            | PAlias(_, pattern, variable) =>
                [Pair(variable, variable)].toMap() ++ findVariables(pattern)
            | PList(_, _, items) =>
                items.map { | Pair(item, _) => findVariables(item) }.foldLeft(Map.empty[String, String]())({_ ++ _})
        }
        let variableMap = case.patterns.map(findVariables).foldLeft(Map.empty[String, String]())({_ ++ _})
        let self2 = self.Resolver(
            variables = self.variables ++ variableMap
        )
        MatchCase(
            at = case.at,
            patterns = case.patterns.map { self2.resolvePattern(_) },
            condition = case.condition.map { self2.resolveTerm(_) },
            body = self2.resolveTerm(case.body)
        )
    }

    resolvePattern(pattern: MatchPattern): MatchPattern {
        | PVariable _ @ p =>
            p
        | PVariant(at, name, patterns) =>
            let newName = self.variants.get(name).else { fail(at, "No such variant: " + name) }
            let newPatterns = patterns.map { self.resolvePattern(_) }
            PVariant(at, newName, newPatterns)
        | PVariantAs(at, name, variable) =>
            let newName = self.variants.get(name).else { fail(at, "No such variant: " + name) }
            PVariantAs(at, newName, variable)
        | PAlias(at, pattern, variable) =>
            let newPattern = self.resolvePattern(pattern)
            PAlias(at, newPattern, variable)
        | PList(at, t, items) =>
            let newType = self.resolveType(t)
            let newPatterns = items.map { | Pair(pattern, spread) =>
                Pair(self.resolvePattern(pattern), spread)
            }
            PList(at, newType, newPatterns)
    }

}
