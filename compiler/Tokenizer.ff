tokenize(file: String, code: String) {

    let tokens = ArrayBuilder[Token]()
    mutable line = 1
    mutable lineOffset = 0

    mutable startLine = line
    mutable startLineOffset = lineOffset

    let operatorCharactersString = "!@#$%&/=?+|^~*<>.:-,;"
    let operatorCharacters = HashSetBuilder[Char]()
    0.until(operatorCharactersString.size).map { j => operatorCharacters.add(operatorCharactersString(j)) }

    function emitToken(kind: TokenKind, startOffset: Int, stopOffset: Int): Unit {
        if(tokens.nonEmpty) {
            let last = tokens.last
            if(last.stopLine == startLine && last.kind == LLower && kind.afterKeyword()) {
                tokens.update(tokens.size - 1, tokens(tokens.size - 1).Token(kind = LKeyword))
            }
            if(last.stopLine != startLine && last.kind.beforeSeparator() && kind.afterSeparator()) {
                tokens.append(Token(
                    file, code, LSeparator, startLine, startLineOffset, startOffset, line, lineOffset, stopOffset
                ))
            }
        }
        tokens.append(Token(
            file, code, kind, startLine, startLineOffset, startOffset, line, lineOffset, stopOffset
        ))
    }

    mutable i = 0
    while { i < code.length } {

        while { i < code.length && (code(i) == ' ' || code(i) == '\t' || code(i) == '\r') } i += 1

        let start = i
        startLine = line
        startLineOffset = lineOffset

        if(code(i) == '\n') {

            i += 1
            line += 1
            lineOffset = i

        } elseIf { code(i) == '/' && code(i + 1) == '/' } {

            i += 2
            while { i < code.length && code(i) != '\n' } { i += 1 }

        } elseIf { code(i) == '/' && code(i + 1) == '*' } {

            i += 2
            while { i < code.length && (code(i) != '*' || code(i + 1) != '/') } {
                if(i >= code.length) {
                    throwParseError(
                        "Expected end of comment started on line " + startLine + ", got end of file."
                    )
                }
                if(code(i) == '\n') {
                    line += 1
                    lineOffset = i + 1
                }
                i += 1
            }
            i += 2

        } elseIf { code(i) == '"' || code(i) == '\'' } {

            let endSign = code(i)

            i += 1
            while {i < code.length && code(i) != endSign} {
                if(code(i) == '\n') {
                    throwParseError(
                        "Unexpected end of line in string started on line " + startLine + "."
                    )
                }
                if(i >= code.length) {
                    throwParseError(
                        "Expected end of string started on line " + startLine + ", got end of file."
                    )
                }
                if(code(i) == '\\' && code(i + 1) != '\n') {i += 1}
                i += 1
            }
            i += 1
            emitToken(if(endSign == '"') {LString} else {LChar}, start, i)

        } elseIf {(code(i) >= 'a' && code(i) <= 'z') || (code(i) >= 'A' && code(i) <= 'Z')} {

            let kind = if(code(i) >= 'a') {LLower} else {LUpper}
            i += 1
            while {i < code.length && (
                (code(i) >= 'a' && code(i) <= 'z') ||
                (code(i) >= 'A' && code(i) <= 'Z') ||
                (code(i) >= '0' && code(i) <= '9')
            )} { i += 1 }
            if(kind == LUpper && code(i) == '_') {
                i += 1
                emitToken(LNamespace, start, i)
            } else {
                emitToken(kind, start, i)
            }

        } elseIf { code(i) >= '0' && code(i) <= '9' } {

            mutable dot = false
            mutable exponent = false
            while { i < code.length && (code(i) >= '0' && code(i) <= '9') } {
                i += 1
                if((code(i) == 'e' || code(i) == 'E') && !exponent) {
                    i += 1
                    dot = true
                    exponent = true
                    if(code(i) == '+' || code(i) == '-') {i += 1}
                }
                if(
                    i + 1 < code.length && code(i) == '.' &&
                    code(i + 1) >= '0' && code(i + 1) <= '9' &&
                    !dot && !exponent
                ) {
                    i += 1
                    dot = true
                }
            }
            emitToken(if(dot || exponent) {LFloat} else {LInt}, start, i)

        } elseIf { code(i) == '_' } {

            i += 1
            emitToken(LWildcard, start, i)

        } elseIf { operatorCharacters(code(i)) } {

            i += 1
            while { i < code.length && operatorCharacters(code(i)) } {i += 1}
            let o =
                if(i - start == 1 && code(i - 1) == '.') {
                    LDot
                } elseIf {i - start == 1 && code(i - 1) == ','} {
                    LComma
                } elseIf {i - start == 1 && code(i - 1) == ';'} {
                    LSemicolon
                } elseIf {i - start == 1 && code(i - 1) == '|'} {
                    LPipe
                } elseIf {i - start == 1 && code(i - 1) == ':'} {
                    LColon
                } elseIf {i - start == 3 && code(i - 3) == '.' && code(i - 2) == '.' && code(i - 1) == '.'} {
                    LDotDotDot
                } elseIf {i - start == 2 && code(i - 2) == '=' && code(i - 1) == '>'} {
                    LArrowThick
                } elseIf {i - start == 1 && code(i - 1) == '='} {
                    LAssign
                } elseIf {i - start == 2 && code(i - 2) == '+' && code(i - 1) == '='} {
                    LAssignPlus
                } elseIf {i - start == 2 && code(i - 2) == '-' && code(i - 1) == '='} {
                    LAssignMinus
                } else {
                    LOperator
                }
            emitToken(o, start, i)

        } elseIf {
            code(i) == '(' || code(i) == '[' || code(i) == '{'
        } {
            i += 1
            emitToken(LBracketLeft, start, i)

        } elseIf {
            code(i) == ')' || code(i) == ']' || code(i) == '}'
        } {

            i += 1
            emitToken(LBracketRight, start, i)

        } elseIf {
            i < code.length
        } {

            throwParseError("Unexpected character: " + code(i))

        }

    }

    1.to(5).each { i => emitToken(LEnd, i, i) }

    tokens

}
