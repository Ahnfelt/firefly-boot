import Syntax

sync class JsImporter(
    mutable imports: Map[String, String]
)

make(): JsImporter {
    JsImporter(Map.empty())
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show())
}

extend self: JsImporter {

    add(url: String): String {
        let importName = self.imports.get(url).{
            | None =>
                let n = "import$" + self.imports.size()
                self.imports = self.imports.add(url, n)
                n
            | Some(n) => n
        }
        importName
    }

    process(at: Location, code: String): String {
        let space = code.takeWhile {c => c == ' ' || c == '\t' || c == '\r' || c == '\n' || c == ';'}
        let rest = code.dropFirst(space.size())
        if(!rest.startsWith("import * as ")) {code} else:
        let rest2 = rest.dropFirst("import * as ".size())
        let name = rest2.takeWhile {_.isAsciiLetterOrDigit()}
        if(name.size() == 0) {throw(CompileError(at, "Expected alias after \"import * as \""))}
        let rest3 = rest2.dropFirst(name.size())
        if(!rest3.startsWith(" from '")) {throw(CompileError(at, "Expected \" from '\" after \"import * as ...\""))}
        let rest4 = rest3.dropFirst(" from '".size())
        let url = rest4.takeWhile {_ != '\''}
        if(url.size() == 0) {throw(CompileError(at, "Expected module name after \" from '\""))}
        if(url.any{_ == '\n'}) {throw(CompileError(at, "Unclosed module name string"))}
        let rest5 = rest4.dropFirst(url.size() + 1)
        let importName = self.add(url)
        space + "const " + name + " = " + importName + self.process(at, rest5)
    }

    generateImports(ignoreModules: Set[String]): List[String] {
        self.imports.pairs().map {| Pair(moduleName, mangledName) =>
            if(ignoreModules.contains(moduleName)) {
                "const " + mangledName + " = void 0; // Ignored import"
            } else {
                "import * as " + mangledName + " from '" + moduleName + "';"
            }
        }
    }

}
