import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification
import Builder

type MainCommand {
    BootstrapCommand
    RunCommand(mainPath : String)
    BuildCommand(mainPath : String, platform : BuildPlatform)
}

type BuildPlatform {
    BrowserPlatform
    LinuxPlatform
    WindowsPlatform
    MacosPlatform
}

main(system: NodeSystem): Unit {

    mutable arguments = system.arguments()
    function consumeArgument(): Option[String] {
        let first = arguments.first()
        arguments = arguments.dropFirst()
        first
    }

    let fireflyPath = consumeArgument().expect()
    let parseCommand : String => MainCommand = { // TODO: Fix the code emitter so this can be a direct match instead
        | s {s.endsWith(".ff")} => RunCommand(s)
        | "bootstrap" => BootstrapCommand
        | "run" => RunCommand(consumeArgument().else {"Main.ff"}.dropLast(3))
        | "browser" => BuildCommand(consumeArgument().else {"Main.ff"}.dropLast(3), BrowserPlatform)
        | "linux" => BuildCommand(consumeArgument().else {"Main.ff"}.dropLast(3), LinuxPlatform)
        | "windows" => BuildCommand(consumeArgument().else {"Main.ff"}.dropLast(3), WindowsPlatform)
        | "macos" => BuildCommand(consumeArgument().else {"Main.ff"}.dropLast(3), MacosPlatform)
        | s => panic("Unknown command '" + s + "'")
    }
    let command = parseCommand(consumeArgument().expect())

    arguments.first().each { argument =>
        panic("Unknown argument: " + argument)
    }

    function buildScript(mainFile: String, target: String) {
        Builder.build(
            system = system
            target = target
            mainPackage = "script:script"
            mainModule = mainFile
            packagePaths = [
                Pair("script:script", ".")
                Pair("ff:core", fireflyPath + "/core")
            ].toMap()
            tempPath = ".firefly/temporary"
            jsOutputPath = ".firefly/output/" + target
            printMeasurements = False
        )
    }

    command.{

        | RunCommand(mainFile) =>
             prepareFireflyDirectory(system.files())
             if(detectBrowserMain(system.files(), Pair("script", "script"), mainFile)) {
                 buildScript(mainFile, "browser")
             }
             buildScript(mainFile, "node")

        | BootstrapCommand =>
            Builder.build(
                system = system
                target = "node"
                mainPackage = "ff:compiler"
                mainModule = "Main"
                packagePaths = [
                    Pair("ff:compiler", "compiler")
                    Pair("ff:core", "core")
                ].toMap()
                tempPath = "output/temporary"
                jsOutputPath = "output/js"
                printMeasurements = True
            )

        | _ =>
            panic("Only the 'bootstrap' and 'run' commands are supported for now")

    }

}

prepareFireflyDirectory(fs: FileSystem, ) {
    if(!fs.exists(".firefly/output")) {
        if(!fs.exists(".firefly")) {
            fs.createDirectory(".firefly")
        }
        fs.createDirectory(".firefly/output")
    }
}

detectBrowserMain(fs: FileSystem, packagePair: Pair[String, String], mainFile: String): Bool {
    let file = mainFile + ".ff"
    let code = fs.readText(file)
    let tokens = Tokenizer.tokenize(file, code)
    let parser = Parser.make(Pair("script", "script"), file, tokens, False)
    let module = parser.parseModule()
    module.functions.any { definition =>
        (definition.signature.name == "browserMain" || definition.signature.name == "main") &&
        definition.signature.parameters.{ // This is a bit wrong, since BrowserSystem may be aliased or qualified
            | [Parameter p] {p.valueType | TConstructor(_, "BrowserSystem", _)} => True
            | _ => False
        }
    }
}
