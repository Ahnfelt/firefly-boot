import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification

nodeMain(system: System): Unit {

    /*
    HttpServer.listen(system, "localhost", 8080) { request, response =>
        Log.debug(request.readText())
        response.writeText("Hi!")
    }
    */

    let target = system.arguments().expect(0)
    let mainPackage = system.arguments().expect(1)
    let mainModule = system.arguments().expect(2)
    let packagePaths = parsePackageLocations(system.arguments().expect(3))
    let tempPath = system.arguments().expect(4)
    let jsOutputPath = system.arguments().expect(5)

    let fs = system.files()

    /*
    let targetIsNode = target.{
        | "node" => True
        | "browser" => False
        | _ => panic("Unknown target '" + target + "'")
    }
    Log.debug(targetIsNode) // Prints Promise(true)!
    */
    let targetIsNode =
        if(target == "node") {
            True
        } elseIf {target == "browser"} {
            False
        } else {
            panic("Unknown target '" + target + "'")
        }

    if(fs.exists(tempPath)) { deleteDirectory(fs, tempPath) }
    fs.createDirectory(tempPath)

    let jsPathFile = tempPath + "/js"
    fs.createDirectories(jsPathFile)

    let success = do { //try {
        let compiler = Compiler.make(targetIsNode, fs, system.time(), jsPathFile, packagePaths)
        compiler.emit(mainPackage, mainModule)
        compiler.printMeasurements()
        True
    }
    /*} else {
        Log.debug("An exception was thrown from Compiler.")
        False
    }*/

    if(success) {
        if(fs.exists(jsOutputPath)) { deleteDirectory(fs, jsOutputPath) }
        fs.rename(jsPathFile, jsOutputPath)
    }

}

deleteDirectory(fs: FileSystem, outputFile: String): Unit {
    fs.list(outputFile).each { file =>
        if(fs.isDirectory(file)) {
            deleteDirectory(fs, file)
        } else {
            fs.delete(file)
        }
    }
    fs.delete(outputFile)
}

parsePackageLocations(text: String): Map[String, String] {
    text.split(',').toList().map { item =>
        let parts = item.split('@')
        Pair(parts.expect(0), parts.expect(1))
    }.toMap()
}
