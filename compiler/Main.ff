import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification
import Builder

type MainCommand {
    BootstrapCommand
    RunCommand(mainPath : String)
    BuildCommand(mainPath : String, platform : BuildPlatform)
}

type BuildPlatform {
    BrowserPlatform
    LinuxPlatform
    WindowsPlatform
    MacosPlatform
}

main(system: NodeSystem): Unit {

    mutable arguments = system.arguments()
    function consumeArgument(): Option[String] {
        let first = arguments.first()
        arguments = arguments.dropFirst()
        first
    }

    let fireflyPath = consumeArgument().expect()
    let parseCommand : String => MainCommand = { // TODO: Fix the code emitter so this can be a direct match instead
        | s {s.endsWith(".ff")} => RunCommand(s)
        | "bootstrap" => BootstrapCommand
        | "run" => RunCommand(consumeArgument().else {"Main.ff"})
        | "browser" => BuildCommand(consumeArgument().else {"Main.ff"}, BrowserPlatform)
        | "linux" => BuildCommand(consumeArgument().else {"Main.ff"}, LinuxPlatform)
        | "windows" => BuildCommand(consumeArgument().else {"Main.ff"}, WindowsPlatform)
        | "macos" => BuildCommand(consumeArgument().else {"Main.ff"}, MacosPlatform)
        | s => panic("Unknown command '" + s + "'")
    }
    let command = parseCommand(consumeArgument().expect())

    arguments.first().each { argument =>
        panic("Unknown argument: " + argument)
    }

    command.{
        | BootstrapCommand =>
        | _ => panic("Only the 'bootstrap' command is supported for now")
    }

    // node output/js/ff/compiler/Main.mjs "$target" script:script "$m" "script:script@$p",ff:core@core   "$p/.firefly/temporary" "$p/.firefly/output/$target"

    let target = "node"
    let mainPackage = "ff:compiler"
    let mainModule = "Main"
    let packagePaths = parsePackageLocations("ff:compiler@compiler,ff:core@core")
    let tempPath = "output/temporary"
    let jsOutputPath = "output/js"

    Builder.build(
        system = system
        target = target
        mainPackage = mainPackage
        mainModule = mainModule
        packagePaths = packagePaths
        tempPath = tempPath
        jsOutputPath = jsOutputPath
    )

}

parsePackageLocations(text: String): Map[String, String] {
    text.split(',').toList().map { item =>
        let parts = item.split('@')
        Pair(parts.expect(0), parts.expect(1))
    }.toMap()
}
