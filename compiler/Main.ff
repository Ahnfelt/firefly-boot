import Tokenizer
import Parser
import Emitter
import Syntax
import Resolver
import Compiler
import Unification

main(system: System): Unit {

    let corePath = system.arguments().expect(0)
    let inputPath = system.arguments().expect(1)
    let tempPath = system.arguments().expect(2)
    let outputPath = system.arguments().expect(3)

    let fs = system.files()

    if(fs.exists(tempPath)) { deleteDirectory(fs, tempPath) }
    fs.createDirectory(tempPath)

    let scalaPathFile = tempPath + "/src/main/scala/firefly"
    fs.createDirectories(scalaPathFile)

    let packagePaths = [Pair("ff:compiler", "compiler"), Pair("ff:core", "core")].getMap()

    let literalModuleNames = [Pair("ff:core", ["Bool", "Char", "Int", "List", "String", "Unit"])].getMap()

    let success = do { //try {
        Compiler.make(fs, scalaPathFile, packagePaths, literalModuleNames).emit("ff:compiler", "Main")
        True
    }
    /*} else {
        log.debug("An exception was thrown from Compiler.")
        False
    }*/

    if(success) {
        writeExtraFiles(fs, inputPath, corePath, tempPath, scalaPathFile)
        if(fs.exists(outputPath)) { deleteDirectory(fs, outputPath) }
        fs.rename(scalaPathFile, outputPath)
    }

}

writeExtraFiles(fs: FileSystem, package: String, corePath: String, outputFile: String, scalaFile: String): Unit {
    let coreSubPath = "scala/com/github/ahnfelt/firefly/library/Firefly_Core.scala"
    let core = fs.readText(corePath + "/" + coreSubPath).replaceFirst(
        "package com.github.ahnfelt.firefly.library",
        "package " + package
    )
    fs.writeText(scalaFile + "/Firefly_Core.scala", core)
    fs.writeText(outputFile + "/build.sbt", "scalaVersion := \"2.13.3\"")
}

deleteDirectory(fs: FileSystem, outputFile: String): Unit {
    fs.list(outputFile).each { file =>
        if(fs.isDirectory(file)) {
            deleteDirectory(fs, file)
        } else {
            fs.delete(file)
        }
    }
    fs.delete(outputFile)
}
