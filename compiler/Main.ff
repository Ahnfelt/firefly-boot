import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification
import Builder
import Dependencies
import JsEmitter
import Inference
import LspHook

data MainCommand {
    BootstrapCommand
    RunCommand(mainPath: String, argument: List[String])
    BrowserCommand(mainPath: String)
    BuildCommand(mainPath: String)
    CheckCommand(filePath: String)
}

data CommandLineError(problem: String)

main(system: NodeSystem): Unit {

    let fireflyPath = detectFireflyPath(system)

    function buildScript(
        mainFile: String
        mainPackagePair: PackagePair
        emitTarget: EmitTarget
        resolvedDependencies: ResolvedDependencies
    ) {
        let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair("ff", "core"))) {
            resolvedDependencies.packagePaths
        } else {
            resolvedDependencies.packagePaths.add(PackagePair("ff", "core"), fireflyPath.slash("core").absolute())
        }
        let compilerModulePath = if(emitTarget != EmitBrowser && emitTarget != EmitExecutable) {
            fireflyPath.slash("output").slash("js").slash("ff").slash("compiler/Builder.mjs")
        }
        let targetName = emitTarget.{
            | EmitBuild => "build"
            | EmitNode => "node"
            | EmitBrowser => "browser"
            | EmitExecutable => "executable"
        }
        Builder.build(
            system = system
            emitTarget = emitTarget
            mainPackage = mainPackagePair
            mainModule = mainFile
            resolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)
            compilerModulePath = compilerModulePath
            tempPath = system.path(".firefly").slash("temporary")
            jsOutputPath = system.path(".firefly").path("output").path(targetName)
            printMeasurements = False
        )
    }

    function runCommand(command: MainCommand) {
        | RunCommand(mainFile, arguments) =>
            let resolvedDependencies = Dependencies.process(system.httpClient(), system.path(mainFile + ".ff"))
            prepareFireflyDirectory(system.path("."))
            let localMainFile = system.path(mainFile).base()
            buildScript(localMainFile, resolvedDependencies.mainPackagePair, EmitNode, resolvedDependencies)
            importAndRun(fireflyPath, "node", resolvedDependencies.mainPackagePair, localMainFile, arguments)

        | BrowserCommand(mainFile) =>
            let resolvedDependencies = Dependencies.process(system.httpClient(), system.path(mainFile + ".ff"))
            prepareFireflyDirectory(system.path("."))
            let localMainFile = system.path(mainFile).base()
            buildScript(mainFile, resolvedDependencies.mainPackagePair, EmitBrowser, resolvedDependencies)
            bundleForBrowser(system, resolvedDependencies.mainPackagePair, localMainFile)

        | BuildCommand(mainFile) =>
            let resolvedDependencies = Dependencies.process(system.httpClient(), system.path(mainFile + ".ff"))
            prepareFireflyDirectory(system.path("."))
            let localMainFile = system.path(mainFile).base()
            buildScript(localMainFile, resolvedDependencies.mainPackagePair, EmitBuild, resolvedDependencies)
            buildScript(localMainFile, resolvedDependencies.mainPackagePair, EmitExecutable, resolvedDependencies)
            bundleForPkg(system, resolvedDependencies.mainPackagePair, localMainFile)
            importAndRun(fireflyPath, "build", resolvedDependencies.mainPackagePair, localMainFile, [])

        | CheckCommand(filePath) => 
            Builder.check(system, fireflyPath, system.path(filePath), Map.empty(), LspHook.disabled(), True)
        
        | BootstrapCommand =>
            Builder.build(
                system = system
                emitTarget = EmitNode
                mainPackage = PackagePair("ff", "compiler")
                mainModule = "Main"
                resolvedDependencies = ResolvedDependencies(
                    mainPackagePair = PackagePair("ff", "compiler")
                    packages = [].toMap() // Only used for includes currently
                    packagePaths = [
                        Pair(PackagePair("ff", "compiler"), "compiler")
                        Pair(PackagePair("ff", "core"), "core")
                    ].toMap()
                    singleFilePackages = [].toSet()
                )
                compilerModulePath = None
                tempPath = system.path("output/temporary")
                jsOutputPath = system.path("output/js")
                printMeasurements = True
            )
    }

    try {
        let command = parseCommandLine(system.arguments().toList())
        runCommand(command)
    } catch {| CommandLineError(message), error =>
        Log.debug(message)
    } catch {| CompileError(at, message), error =>
        Log.debug(message)
        Log.debug(" at " + at.file.replace("./", "") + ":" + at.line + ":" + at.column)
    } grab()
}

usageString = """
usage: firefly <main-file> [<main-arguments>] | <command> [<command-arguments>]

These are the commands:
   run <main-file> [<main-arguments>]    Run the main file with the provided arguments
   browser <main-file>                   Compile the main file for the browser
   build <main-file>                     Build the main file
   check <firefly-file>                  Check the firefly source file for errors
   bootstrap                             Bootstrap the compiler
"""

parseCommandLine(arguments: List[String]): MainCommand {
    | [mainFile, ...mainArguments] {mainFile.removeLast(".ff") | Some(mainName)} =>
        RunCommand(mainName, mainArguments)
    | ["run", ...runArguments] =>
        runArguments.{
            | [mainFile, ...mainArguments] {mainFile.removeLast(".ff") | Some(mainName)} =>
                RunCommand(mainName, mainArguments)
            | _ => throw(CommandLineError(
                "You must specify a Firefly file (.ff) as first argument to run."  + usageString
            ))
        }
    | ["browser", ...browserArguments] =>
        browserArguments.{
            | [mainFile] {mainFile.removeLast(".ff") | Some(mainName)} =>
                BrowserCommand(mainName)
            | [_, _, ..._] => throw(CommandLineError(
                "You must only specify a single argument to browser."  + usageString
            ))
            | _ => throw(CommandLineError(
                "You must specify a Firefly file (.ff) as the argument to browser."  + usageString
            ))
        }
    | ["build", ...buildArguments] =>
        buildArguments.{
            | [mainFile] {mainFile.removeLast(".ff") | Some(mainName)} =>
                BuildCommand(mainName)
            | [_, _, ..._] => throw(CommandLineError(
                "You must only specify a single argument to build."  + usageString
            ))
            | _ => throw(CommandLineError(
                "You must specify a Firefly file (.ff) as the argument to build."  + usageString
            ))
        }
    | ["check", ...checkArguments] =>
        checkArguments.{
            | [fileName] {fileName.removeLast(".ff") | Some(_)} =>
                CheckCommand(fileName)
            | [_, _, ..._] => throw(CommandLineError(
                "You must only specify a single argument to check."  + usageString
            ))
            | _ => throw(CommandLineError(
                "You must specify a Firefly file (.ff) as the argument to build."  + usageString
            ))
        }
    | ["bootstrap", _] =>
        throw(CommandLineError("bootstrap takes no arguments" + usageString))
    | ["bootstrap"] => BootstrapCommand
    | [] => throw(CommandLineError("You must specify a command or a main file to run." + usageString))
    | [s, ..._] => throw(CommandLineError("Unknown command '" + s + "'" + usageString))
}

bundleForPkg(system: NodeSystem, packagePair: PackagePair, mainFile: String) {
    let prefix = ".firefly/output/executable/"
    let mainJsFile = prefix + packagePair.groupName("/") + "/" + mainFile + ".mjs"
    let file = prefix + "Main.bundle.js"
    BuildSystem.internalNodeCallEsBuild(system, mainJsFile, outputPath = file, minify = False)
}

bundleForBrowser(system: NodeSystem, packagePair: PackagePair, mainFile: String) {
    let prefix = ".firefly/output/browser/"
    let mainJsFile = prefix + packagePair.groupName("/") + "/" + mainFile + ".mjs"
    let file = prefix + "Main.bundle.js"
    let browserCode = BrowserCode(
        packageGroup = packagePair.group
        packageName = packagePair.name
        mainFile = mainFile
        assetSystem = AssetSystem([Pair("/", {system.path(".").readStream()})].toMap())
    ) // TODO
    BuildSystem.internalCallEsBuild(browserCode, mainJsFile, outputPath = file, minify = True, sourceMap = True)
}

importAndRun(
    fireflyPath: Path
    target: String
    packagePair: PackagePair
    mainFile: String
    arguments: List[String]
): Unit
    target node async """
        const process = await import('process');
        const cwd = process.cwd();
        const workingDirectory = cwd.indexOf(':') == 1 ? 'file:///' + cwd : cwd;
        const packagePath = packagePair_.group_ + "/" + packagePair_.name_
        const main = await import(workingDirectory + "/.firefly/output/" + target_ + "/" + packagePath + "/" + mainFile_ + ".mjs");
        await main.$run$(fireflyPath_, ff_core_List.List_toArray(arguments_))
    """

prepareFireflyDirectory(path: Path) {
    if(!path.slash(".firefly").slash("output").exists()) {
        if(!path.slash(".firefly").exists()) {
            path.slash(".firefly").createDirectory()
        }
        path.slash(".firefly").slash("output").createDirectory()
    }
}

detectFireflyPath(system: NodeSystem): Path
    target node sync """
        import * as url from 'url'
        const suffix = '/output/js/ff/compiler/Main.mjs'
        const moduleUrl = import.meta.url
        if(!import.meta.url.endsWith(suffix)) {
            throw 'Expected module path to end with: ' + suffix + ", but got: " + moduleUrl;
        }
        return url.fileURLToPath(new URL(moduleUrl.slice(0, -suffix.length)))
    """
