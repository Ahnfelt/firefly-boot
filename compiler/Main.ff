import Tokenizer
import Parser
import Syntax
import Resolver
import Compiler
import Unification

main(system: System): Unit {

    let corePath = system.arguments().expect(0)
    let inputPath = system.arguments().expect(1)
    let tempPath = system.arguments().expect(2)
    let jsOutputPath = system.arguments().expect(3)

    let fs = system.files()

    if(fs.exists(tempPath)) { deleteDirectory(fs, tempPath) }
    fs.createDirectory(tempPath)

    let jsPathFile = tempPath + "/src/main/js"
    fs.createDirectories(jsPathFile)

    let packagePaths = [Pair("ff:compiler", "compiler"), Pair("ff:core", "core")].toMap()

    let success = do { //try {
        let compiler = Compiler.make(fs, system.time(), jsPathFile, packagePaths)
        compiler.emit("ff:compiler", "Main")
        compiler.printMeasurements()
        True
    }
    /*} else {
        Log.debug("An exception was thrown from Compiler.")
        False
    }*/

    if(success) {
        if(fs.exists(jsOutputPath)) { deleteDirectory(fs, jsOutputPath) }
        fs.rename(jsPathFile, jsOutputPath)
    }

}

deleteDirectory(fs: FileSystem, outputFile: String): Unit {
    fs.list(outputFile).each { file =>
        if(fs.isDirectory(file)) {
            deleteDirectory(fs, file)
        } else {
            fs.delete(file)
        }
    }
    fs.delete(outputFile)
}
