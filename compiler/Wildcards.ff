import Syntax

class Wildcards(mutable seenWildcards : Int)

new(): Wildcards {
    Wildcards(0)
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show())
}

extend self: Wildcards {

    fixWildcards(term: Term): Term {
        | ELet e => e.ELet(value = self.fixWildcards(e.value), body = self.fixWildcards(e.body))
        | ESequential e => e.ESequential(before = self.fixWildcards(e.before), after = self.fixWildcards(e.after))
        | EAssign e => e.EAssign(value = self.fixWildcards(e.value))
        | EAssignField e => e.EAssignField(record = self.fixWildcards(e.record), value = self.fixWildcards(e.value))
        | EPipe e => e.EPipe(value = self.fixWildcards(e.value), function = self.fixWildcards(e.function))
        | ECall e =>
            e.ECall(
                target = e.target.{
                    | DynamicCall call => call.DynamicCall(function = self.fixWildcards(call.function))
                    | _ => fail(e.at, "Internal error: Static calls not expected in the Wildcards phase")
                },
                arguments = e.arguments.map { a => a.Argument(value = self.fixWildcards(a.value)) }
            )
        | EList e =>
            e.EList(items = e.items.map { | Pair(item, spread) =>
                Pair(self.fixWildcards(item), spread)
            })
        | ECopy e =>
            e.ECopy(
                record = self.fixWildcards(e.record),
                arguments = e.arguments.map { a => a.Field(value = self.fixWildcards(a.value)) }
            )
        | EVariant e =>
            e.EVariant(arguments = e.arguments.map { _.map { a =>
                a.Argument(value = self.fixWildcards(a.value))
            }})
        | ERecord e => e.ERecord(fields = e.fields.map { a => a.Field(value = self.fixWildcards(a.value)) })
        | EField e => e.EField(record = self.fixWildcards(e.record))
        | EWildcard e =>
            self.seenWildcards += 1
            e.EWildcard(index = self.seenWildcards)
        | _ => term
    }

}
