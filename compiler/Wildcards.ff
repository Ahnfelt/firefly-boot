type Wildcards(mutable seenWildcards : Int)

Wildcards_of() {
    Wildcards(0)
}

Wildcards_fixWildcards(self: Wildcards, term: Term): Term {
    | _, ELet e => e.ELet(value = self.fixWildcards(e.value), body = self.fixWildcards(e.body))
    | _, ESequential e => e.ESequential(before = self.fixWildcards(e.before), after = self.fixWildcards(e.after))
    | _, EAssign e => e.EAssign(value = self.fixWildcards(e.value))
    | _, EAssignField e => e.EAssignField(value = self.fixWildcards(e.value))
    | _, EPipe e => e.copy(value = self.fixWildcards(e.value), function = self.fixWildcards(e.function))
    | _, ECall e =>
        e.ECall(
            function = self.fixWildcards(e.function),
            arguments = e.arguments.map { a => a.copy(value = self.fixWildcards(a.value)) }
        )
    | _, EList e => e.EList(items = e.items.map(self.fixWildcards))
    | _, ECopy e =>
        e.ECopy(
            record = self.fixWildcards(e.record),
            arguments = e.arguments.map { a => a.copy(value = self.fixWildcards(a.value)) }
        )
    | _, EVariant e => e.EVariant(arguments = e.arguments.map {_.map { a => a.copy(value = self.fixWildcards(a.value)) }})
    | _, ERecord e => e.ERecord(fields = e.fields.map { a => a.copy(value = self.fixWildcards(a.value)) })
    | _, EField e => e.EField(record = self.fixWildcards(e.record))
    | _, EWildcard e =>
        self.seenWildcards += 1
        e.EWildcard(index = self.seenWildcards)
    | _, _ => term
}
