import Syntax

type Wildcards(mutable seenWildcards : Int)

make(): Wildcards {
    Wildcards(0)
}

extend self: Wildcards {

    fixWildcards(term: Term): Term {
        | ELet e => ELet(...e, value = self.fixWildcards(e.value), body = self.fixWildcards(e.body))
        | ESequential e => ESequential(...e, before = self.fixWildcards(e.before), after = self.fixWildcards(e.after))
        | EAssign e => EAssign(...e, value = self.fixWildcards(e.value))
        | EAssignField e => EAssignField(...e, record = self.fixWildcards(e.record), value = self.fixWildcards(e.value))
        | EPipe e => EPipe(...e, value = self.fixWildcards(e.value), function = self.fixWildcards(e.function))
        | ECall e =>
            ECall(...e,
                function = self.fixWildcards(e.function),
                arguments = e.arguments.map { a => Argument(...a, value = self.fixWildcards(a.value)) }
            )
        | EList e =>
            EList(...e, items = e.items.map { | Pair(item, spread) =>
                Pair(self.fixWildcards(item), spread)
            })
        | ECopy e =>
            ECopy(...e,
                record = self.fixWildcards(e.record),
                arguments = e.arguments.map { a => Field(...a, value = self.fixWildcards(a.value)) }
            )
        | EVariant e =>
            EVariant(...e, arguments = e.arguments.map { _.map { a =>
                Argument(...a, value = self.fixWildcards(a.value))
            }})
        | ERecord e => ERecord(...e, fields = e.fields.map { a => Field(...a, value = self.fixWildcards(a.value)) })
        | EField e => EField(...e, record = self.fixWildcards(e.record))
        | EWildcard e =>
            self.seenWildcards += 1
            EWildcard(...e, index = self.seenWildcards)
        | _ => term
    }

}
