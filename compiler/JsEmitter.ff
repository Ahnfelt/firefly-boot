import Syntax
import Patterns
import JsImporter

type JsEmitter(
    otherModules: Map[String, Module]
    jsImporter: JsImporter
    targetIsNode: Bool
    isMainModule: Bool
    compilerModulePath: Option[String]
    mutable tailCallUsed: Bool
)

make(
    otherModules: List[Module]
    targetIsNode: Bool
    isMainModule: Bool
    compilerModulePath: Option[String]
): JsEmitter {
    JsEmitter(
        otherModules = otherModules.map { m =>
            let moduleName = m.packagePair.groupName() + "/" + m.file.dropLast(3)
            Pair(moduleName, m)
        }.toMap()
        jsImporter = JsImporter.make()
        targetIsNode = targetIsNode
        isMainModule = isMainModule
        compilerModulePath = compilerModulePath
        tailCallUsed = False
    )
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show())
}

extend self: JsEmitter {

    emitModule(packagePair: PackagePair, module: Module): String {
        let selfImport =
            "import * as " + packagePair.groupName("_") + "_" + module.file.dropLast(3) + " " +
            "from \"../../" + packagePair.groupName("/") + "/" + module.file.dropLast(3) + ".mjs\""
        let imports = [
            self.compilerModulePath.map { "import * as $firefly_compiler from '" + _ + "'" }.toList()
            module.imports.sortBy { i => Pair(i.package, i.file) }.map { self.emitImportDefinition(_) }
        ].flatten()
        let parts = [
            if(imports.any { _ == selfImport }) { imports } else { [selfImport, ...imports] }
            module.types.map { self.emitTypeDefinition(_) }
            module.lets.map { "export " + self.emitLetDefinition(_, False, False) }
            module.functions.map { "export " + self.emitFunctionDefinition(_, False) }
            module.functions.map { "export " + self.emitFunctionDefinition(_, True) }
            module.extends.map { self.emitExtendsDefinition(_) }
            module.instances.map { self.emitInstanceDefinition(_) }
            if(self.isMainModule) {self.emitMain(module.functions)} else {[]}
        ]
        let jsImports = self.jsImporter.generateImports()
        [jsImports, ...parts].map { _.join("\n\n") }.join("\n\n") + "\n"
    }

    emitMain(functions: List[DFunction]): List[String] {
        let targetMain = if(self.targetIsNode) { "nodeMain" } else { "browserMain" }
        let mainFunction =
            functions.find { _.signature.name == targetMain }.orElse { functions.find { _.signature.name == "main" } }
        mainFunction.map {_.signature.name}.map { mainName =>
            [[
                if(self.targetIsNode) {"import * as path from 'node:path'"} else {""}
                if(self.targetIsNode) {"import * as fs from 'node:fs'"} else {""}
                "queueMicrotask(async () => {"
                "const controller = new AbortController()"
                "controller.promises = new Set()"
                "let interval = setInterval(() => {}, 24 * 60 * 60 * 1000)" // To prevent deadlocks from exiting node
                if(self.targetIsNode) {
                    "let fireflyPath_ = path.dirname(path.dirname(path.dirname(path.dirname(path.dirname(process.argv[1])))))"
                } else {
                    "let fireflyPath_ = '.'"
                }
                "let buildMode = " + if(self.targetIsNode) {"process.argv[2] === 'build'"} else {"false"}
                "let executableMode = " + if(self.targetIsNode) {"fs.existsSync('/snapshot/.firefly')"} else {"false"}
                "let system = {"
                "array_: typeof process !== 'undefined' ? process.argv.slice(buildMode ? 3 : 2) : [],"
                "fireflyPath_: fireflyPath_,"
                "executableMode_: executableMode,"
                "buildMode_: buildMode"
                "}"
                "try {"
                "if(!system.executableMode_) await buildMain_$(system, controller)"
                "if(!system.buildMode_) await " + mainName + "_$(system, controller)"
                "} finally {"
                "controller.abort()"
                "clearInterval(interval)"
                "}"
                "})"
            ].join("\n")]
        }.else {[]}
    }

    emitImportDefinition(definition: DImport): String {
        "import * as " + definition.package.group + "_" + definition.package.name + "_" + definition.file + " " +
        "from \"../../" + definition.package.group + "/" + definition.package.name + "/" + definition.file + ".mjs\""
    }

    emitLetDefinition(definition: DLet, mutable: Bool, async: Bool): String {
        let mutability = if(mutable) {"let"} else {"const"}
        let valueCode = self.emitTerm(definition.value, async)
        mutability + " " + escapeKeyword(definition.name) + " = " + valueCode + ";"
    }

    emitExtendsDefinition(definition: DExtend): String {
        let typeName = extractTypeName(definition.type).reverse().takeWhile { _ != '.' }.reverse()
        let methods = definition.methods.map { method =>
            method.DFunction(
                signature = method.signature.Signature(
                    name = typeName + "_" + method.signature.name
                )
            )
        }
        let syncMethods = methods.map { "export " + self.emitFunctionDefinition(_, False) }
        let asyncMethods = methods.map { "export " + self.emitFunctionDefinition(_, True) }
        [...syncMethods, ...asyncMethods].join("\n\n")
    }

    emitInstanceDefinition(definition: DInstance): String {
        let name = makeDictionaryName(definition.traitName, firstTypeName(definition.typeArguments))
        let methods = definition.methods.map {self.emitFunctionDefinition(_, False)}.map { _.dropFirst("function ".size()) } // TODO
        let asyncMethods = definition.methods.map {self.emitFunctionDefinition(_, True)}.map { "async " + _.dropFirst("async function ".size()) } // TODO
        let body = "{\n" + [...methods, ...asyncMethods].join(",\n") + "\n}"
        definition.constraints.{
            | [] =>
                "export const " + name + " = " + body + ";"
            | constraints =>
                let dictionaries = constraints.map { c =>
                    makeDictionaryName(c.name, firstTypeName(c.generics))
                }
                "export function " + name + "(" + dictionaries.join(", ") + ") { return " + body + "}"
        }
    }

    emitFunctionDefinition(definition: DFunction, async: Bool, suffix: String = ""): String {
        let signature = self.emitSignature(definition.signature, async, suffix)
        Pair(async, definition.body).{
            | Pair(False, ForeignTarget(None, _)) =>
                signature + " {\nthrow new Error('Function " + definition.signature.name + " is missing on this target in sync context.');\n}"
            | Pair(True, ForeignTarget(_, None)) =>
                signature + " {\nthrow new Error('Function " + definition.signature.name + " is missing on this target in async context.');\n}"
            | Pair(False, ForeignTarget(Some(code), _)) =>
                signature + " {\n" + self.jsImporter.process(definition.at, code) + "\n}"
            | Pair(True, ForeignTarget(_, Some(code))) =>
                signature + " {\n" + self.jsImporter.process(definition.at, code) + "\n}"
            | Pair(_, FireflyTarget(lambda)) => lambda.{
                | Lambda(_, effect, [matchCase]) {
                    matchCase.patterns.all {
                        | PVariable(_, None) => True
                        | PVariable(_, Some(x)) {True /* TODO */} => True
                        | _ => False
                    }
                } =>
                    let body = self.emitTailCall { self.emitStatements(matchCase.body, True, async) }
                    signature + " {\n" + body + "\n}"
                | Lambda(_, effect, cases) =>
                    Patterns.convertAndCheck(self.otherModules, cases)
                    let escapedArguments = definition.signature.parameters.map { _.name + "_a" }
                    let shadowingWorkaround = definition.signature.parameters.map { p =>
                        "const " + p.name + "_a = " + escapeKeyword(p.name) + ";"
                    }.join("\n")
                    let body = self.emitTailCall {
                        let casesString = cases.map {
                            "{\n" + self.emitCase(escapedArguments, _, True, async) + "\n}"
                        }.join("\n")
                        "{\n" + shadowingWorkaround + "\n" + casesString + "\n}"
                    }
                    signature + " {\n" + body + "\n}"
            }
        }
    }

    emitTailCall(body: () => String): String {
        let outerTailCallUsed = self.tailCallUsed
        self.tailCallUsed = False
        let result = body()
        let tailCallUsed = self.tailCallUsed
        self.tailCallUsed = outerTailCallUsed
        if(tailCallUsed) {
            "_tailcall: for(;;) {\n" + result + "\nreturn\n}"
        } else {
            result
        }
    }

    emitSignature(signature: Signature, async: Bool, suffix: String = ""): String {
        let parameterStrings = signature.parameters.map {self.emitParameter(_, async)}
        let dictionaryStrings = signature.constraints.map { c =>
            makeDictionaryName(c.name, firstTypeName(c.generics))
        }
        let controller = if(async) {["$c"]} else {[]}
        let parameters = "(" + [...parameterStrings, ...dictionaryStrings, ...controller].join(", ") + ")"
        let prefix = if(async) {"async "} else {""}
        let asyncSuffix = if(async) {"$"} else {""}
        prefix + "function " + escapeKeyword(signature.name) + suffix + asyncSuffix + parameters
    }

    emitParameter(parameter: Parameter, async: Bool): String {
        let defaultValue = parameter.default.map { " = " + self.emitTerm(_, async) }.else{""}
        escapeKeyword(parameter.name) + defaultValue
    }

    emitTypeDefinition(definition: DType): String {
        if(definition.newtype) { "// newtype " + definition.name } else:
        "// type " + definition.name + "\n" +
        definition.variants.map { self.emitVariantDefinition(definition, _) }.join("\n")
    }

    emitVariantDefinition(typeDefinition: DType, definition: Variant): String {
        let allFields = [...typeDefinition.commonFields, ...definition.fields]
        let fields = allFields.map { escapeKeyword(_.name) }.join(", ")
        if(allFields.isEmpty()) {
            "const " + definition.name + "$ = {" + definition.name + ": true};\n" +
            "export function " + definition.name + "(" + fields + ") {\n" +
            "return " + definition.name + "$;\n" +
            "}"
        } elseIf { typeDefinition.variants.size() == 1 } {
            "export function " + definition.name + "(" + fields + ") {\n" +
            "return {" + fields + "};\n" +
            "}"
        } else {
            "export function " + definition.name + "(" + fields + ") {\n" +
            "return {" + definition.name + ": true, " + fields + "};\n" +
            "}"
        }
    }

    emitTerm(term: Term, async: Bool): String { term.{
        | EString(at, value) {value.startsWith("\"\"\"")} =>
            "`" + value.dropFirst(3).dropLast(3).replace("`", "\\`") + "`" // TODO: Fix escaping
        | EString(at, value) => value
        | EChar(at, value) => charLiteralToNumber(value)
        | EInt(at, value) => value
        | EFloat(at, value) => value
        | EVariable(at, name) => escapeResolved(name)
        | EList(at, _, items) =>
            self.emitList(items, async)
        | EVariant(at, "ff:core/Bool.False", _, _) =>
            "false"
        | EVariant(at, "ff:core/Bool.True", _, _) =>
            "true"
        | EVariant(at, "ff:core/Unit.Unit", _, _) =>
            "(void 0)"
        | EVariant(at, name, _, arguments) =>
            let argumentsString = arguments.toList().flatten().map {self.emitArgument(_, async)}.join(", ")
            let newtype = self.processVariant(name)
            if(newtype) { argumentsString } else:
            escapeResolved(name) + "(" + argumentsString + ")"
        | EVariantIs(at, "ff:core/Bool.False", _) =>
            "function(_v) { return !_v ? ff_core_Option.Some(_v) : ff_core_Option.None(); }"
        | EVariantIs(at, "ff:core/Bool.True", _) =>
            "function(_v) { return _v ? ff_core_Option.Some(_v) : ff_core_Option.None(); }"
        | EVariantIs(at, "ff:core/Unit.Unit", _) =>
            "function(_v) { return ff_core_Option.Some(_v); }"
        | EVariantIs(at, name, _) =>
            let n = name.reverse().takeWhile { _ != '.' }.reverse()
            "(function(_v) { " +
            "return _v." + escapeResolved(n) + " ? ff_core_Option.Some(_v) : ff_core_Option.None();" +
            "})"
        | ECopy(at, name, record, fields) =>
            let fieldCode = fields.map { f => escapeKeyword(f.name) + " = " + self.emitTerm(f.value, async) }.join(", ")
            "{..." + self.emitTerm(record, async) + ", " + fieldCode + "}"
        | EField(at, newtype, record, field) =>
            if(newtype) { self.emitTerm(record, async) } else:
            self.emitTerm(record, async) + "." + escapeKeyword(field)
        | ELambda(at, Lambda(_, effect, [MatchCase(_, patterns, [], body)])) {
            patterns.all {| PVariable _ => True | _ => False }
        } =>
            let newAsync = async && effectTypeIsAsync(effect)
            let patternParameters = patterns.map {
                | PVariable p => p.name.map(escapeKeyword).else{"_"}
                | _ => panic("!")
            }
            let controller = if(newAsync) {["$c"]} else {[]}
            let parameters = [...patternParameters, ...controller].join(", ")
            let prefix = if(newAsync) {"async "} else {""}
            "(" + prefix + "(" + parameters + ") => {\n" + self.emitStatements(body, True, newAsync) + "\n})"
        | ELambda(at, Lambda(_, effect, cases)) =>
            let newAsync = async && effectTypeIsAsync(effect)
            let controller = if(newAsync) {["$c"]} else {[]}
            Patterns.convertAndCheck(self.otherModules, cases)
            let arguments = cases.expect(0).patterns.pairs().map { "_" + (_.first + 1) }
            let escapedArguments = arguments.map(escapeKeyword) // emitCase arguments must be preescaped
            let casesString = cases.map { "{\n" + self.emitCase(escapedArguments, _, True, newAsync) + "\n}" }.join("\n")
            let prefix = if(newAsync) {"async "} else {""}
            "(" + prefix + "(" + [...escapedArguments, ...controller].join(", ") + ") => " +
            "{\n" + casesString + "\n})"
        | EPipe(at, value, effect, function) =>
            let await = async && effectTypeIsAsync(effect)
            let call = "(" + self.emitTerm(function, async) + ")(" + self.emitTerm(value, async) + ")"
            if(await) {"(await " + call + ")"} else {call}
        | ECall(at, StaticCall(operator, _, _), _, [], [value], _) {!operator.expectFirst().isAsciiLetter()} =>
            "(" + operator + self.emitArgument(value, async) + ")"
        | ECall(at, StaticCall(operator, _, _), _, [], [left, right], _) {!operator.expectFirst().isAsciiLetter()} =>
            "(" + self.emitArgument(left, async) + " " + operator + " " + self.emitArgument(right, async) + ")"
        | ECall(at, StaticCall(name, _, True), effect, typeArguments, arguments, dictionaries) =>
            let await = async && effectTypeIsAsync(effect)
            let dictionaryStrings = dictionaries.map(self.emitDictionary)
            let ds = if(dictionaries.size() <= 1) {""} else {
                if(arguments.isEmpty()) {""} else {", "} +
                dictionaryStrings.dropFirst().join(", ")
            }
            let d = dictionaryStrings.expectFirst()
            let asyncSuffix = if(await) {"$"} else {""}
            let n = escapeKeyword(name.reverse().takeWhile { _ != '.' }.reverse()) + asyncSuffix
            let emittedArguments = arguments.map{self.emitArgument(_, async)}
            let controller = if(await) {["$c"]} else {[]}
            let call = d + "." + n + "(" + [...emittedArguments, ...controller].join(", ") + ds + ")"
            if(await) {"(await " + call + ")"} else {call}
        | ECall(at, StaticCall(name, _, _), effect, typeArguments, arguments, dictionaries) =>
            detectIfElse(term).{
                | [] =>
                    let await = async && effectTypeIsAsync(effect)
                    let ds = if(dictionaries.isEmpty()) {""} else {
                        if(arguments.isEmpty()) {""} else {", "} +
                        dictionaries.map(self.emitDictionary).join(", ")
                    }
                    let functionCode = escapeResolved(name) + if(await) {"$"} else {""}
                    let emittedArguments = arguments.map {self.emitArgument(_, async)}
                    let controller = if(await) {["$c"]} else {[]}
                    let call = functionCode + "(" + [...emittedArguments, ...controller].join(", ") + ds + ")"
                    if(await) {"(await " + call + ")"} else {call}
                | [Pair(EVariant(_, "ff:core/Bool.True", _, _), elseBody), ...list] =>
                    "(" + list.foldLeft(self.emitTerm(elseBody, async)) {| otherwise, Pair(condition, body) =>
                        self.emitTerm(condition, async) +
                        "\n? " + self.emitTerm(body, async) + "\n: " + otherwise
                    } + ")"
                | list =>
                    "(" + list.foldLeft("ff_core_Option.None()") {| otherwise, Pair(condition, body) =>
                        self.emitTerm(condition, async) +
                        "\n? ff_core_Option.Some(" + self.emitTerm(body, async) + ")\n: " + otherwise
                    } + ")"
            }
        | ECall(at, DynamicCall(function, _), effect, typeArguments, arguments, dictionaries) =>
            let await = async && effectTypeIsAsync(effect)
            if(!dictionaries.isEmpty()) {fail(at, "Internal error: Dictionaries in lambda call")}
            let functionCode = self.emitTerm(function, async)
            let emittedArguments = arguments.map {self.emitArgument(_, async)}
            let controller = if(await) {["$c"]} else {[]}
            let call = functionCode + "(" + [...emittedArguments, ...controller].join(", ") + ")"
            if(await) {"(await " + call + ")"} else {call}
        | ERecord(at, fields) =>
            if(fields.isEmpty()) {"{}"} else {
                let list = fields.map { f => escapeKeyword(f.name) + ": " + self.emitTerm(f.value, async) }
                "{\n" + list.join(",\n") + "\n}"
            }
        | EWildcard(at, index) =>
            if(index == 0) {fail(at, "Unbound wildcard")}
            "_w" + index
        | _ =>
            "(function() {\n" + self.emitStatements(term, True, async) + "\n})()"
    }}

    emitDictionary(d : Dictionary): String {
        let m = if(d.moduleName != "") {
            d.packagePair.groupName("_") + "_" + d.moduleName.replace("/", "_") + "."
        } else { "" }
        let c = m + makeDictionaryName(d.traitName, d.typeName)
        if(d.dictionaries.isEmpty()) {
            c
        } else {
            c + "(" + d.dictionaries.map(self.emitDictionary).join(", ") + ")"
        }
    }

    emitStatements(term: Term, last: Bool, async: Bool): String {
        term.{
            | EFunctions(at, functions, body) =>
                let functionStrings = functions.map { f =>
                    let newAsync = async && effectTypeIsAsync(f.signature.effect)
                    self.emitFunctionDefinition(f, newAsync)
                }
                functionStrings.join("\n") + "\n" + self.emitStatements(body, last, async)
            | ELet(at, mutable, name, valueType, value, body) =>
                self.emitLetDefinition(DLet(at, name, valueType, value), mutable, async) + "\n" +
                self.emitStatements(body, last, async)
            | EVariant(at, "ff:core/Unit.Unit", _, _) =>
                ""
            | ESequential(at, EVariant(at, "ff:core/Unit.Unit", _, _), after) =>
                self.emitStatements(after, last, async)
            | ESequential(at, before, EVariant(at, "ff:core/Unit.Unit", _, _)) =>
                self.emitStatements(before, False, async)
            | ESequential(at, before, after) =>
                self.emitStatements(before, False, async) + ";\n" + self.emitStatements(after, last, async)
            | EAssign(at, operator, name, value) =>
                escapeKeyword(name) + " " + operator + "= " + self.emitTerm(value, async)
            | EAssignField(at, operator, record, field, value) =>
                self.emitTerm(record, async) + "." + escapeKeyword(field) + " " + operator + "= " +
                self.emitTerm(value, async)
            | ECall(at, StaticCall("ff:core/Core.while", _, _), _, _, [condition, body], _) =>
                "while(" + self.emitTerm(invokeImmediately(condition.value), async) + ") {\n" +
                self.emitStatements(invokeImmediately(body.value), False, async) + "\n}"
            | ECall(at, StaticCall("ff:core/Core.if", _, _), _, _, [condition, body], _) =>
                "if(" + self.emitTerm(condition.value, async) + ") {\n" +
                if(last) {
                    "return ff_core_Option.Some(" + self.emitTerm(invokeImmediately(body.value), async) +
                    ")\n} else return ff_core_Option.None()"
                } else {
                    self.emitStatements(invokeImmediately(body.value), False, async) + "\n}"
                }
            | ECall(at, StaticCall(name, True, instanceCall), effect, _, arguments, _) =>
                if(instanceCall) { fail(at, "Not yet implemented: Tail calls on trait methods.") }
                self.tailCallUsed = True
                let pair = arguments.map { a =>
                    Some(Pair(
                        "const " + escapeKeyword(a.name.expect() + "_r") + " = " + self.emitTerm(a.value, async) + ";"
                        escapeKeyword(a.name.expect()) + " = " + escapeKeyword(a.name.expect() + "_r")
                    ))
                }.collect {_}.unzip()
                "{\n" + pair.first.join("\n") + "\n" + pair.second.join("\n") + "\ncontinue _tailcall\n}"
            | EPipe(at, value, _, ELambda(_, Lambda(_, _, cases))) =>
                Patterns.convertAndCheck(self.otherModules, cases)
                if(!last) { "for(;;) " }.else { "" } +
                "{\nconst _1 = " + self.emitTerm(value, async) + ";\n" +
                cases.map { "{\n" + self.emitCase(["_1"], _, last, async) + "\n}" }.join("\n") +
                "\n}"
            | _ =>
                detectIfElse(term).{
                    | [] =>
                        if(last) { "return " + self.emitTerm(term, async) } else { self.emitTerm(term, async) }
                    | [Pair(EVariant(_, "ff:core/Bool.True", _, _), elseBody), ...list] =>
                        let initial = "{\n" + self.emitStatements(elseBody, last, async) + "\n}"
                        list.foldLeft(initial) {| otherwise, Pair(condition, body) =>
                            "if(" + self.emitTerm(condition, async) + ") {\n" +
                            self.emitStatements(body, last, async) + "\n} else " + otherwise
                        }
                    | list { !last } =>
                        list.foldLeft("{}") {| otherwise, Pair(condition, body) =>
                            "if(" + self.emitTerm(condition, async) + ") {\n" +
                            self.emitStatements(body, last, async) + "\n} else " + otherwise
                        }
                    | list =>
                        list.foldLeft("return ff_core_Option.None()") {| otherwise, Pair(condition, body) =>
                            "if(" + self.emitTerm(condition, async) + ") {\n" +
                            "return ff_core_Option.Some(" + self.emitTerm(body, async) + ")\n} else " + otherwise
                        }
                }
        }
    }

    emitCase(arguments: List[String], matchCase: MatchCase, last: Bool, async: Bool): String {
        Pair(matchCase.patterns, matchCase.guards).{
            | Pair([p, ...ps], _) =>
                self.emitPattern(
                    arguments.expect(0),
                    p,
                    arguments.dropFirst(),
                    matchCase.MatchCase(patterns = ps),
                    last,
                    async
                )
            | Pair([], [guard, ...guards]) =>
                let guardName = "_guard" + (guards.size() + 1)
                let newCase = matchCase.MatchCase(patterns = [guard.pattern], guards = guards)
                "const " + guardName + " = " + self.emitTerm(guard.term, async) + ";\n" +
                self.emitCase([guardName], newCase, last, async)
            | Pair([], []) =>
                self.emitStatements(matchCase.body, last, async) +
                if(last) { "\nreturn" } else { "\nbreak" }
        }
    }

    emitPattern(
        argument: String,
        pattern: MatchPattern,
        arguments: List[String],
        matchCase: MatchCase,
        last: Bool,
        async: Bool
    ): String {
        pattern.{
            | PString(_, value) =>
                "if(" + argument + " == " + value + ") {\n" +
                self.emitCase(arguments, matchCase, last, async) +
                "\n}"
            | PInt(_, value) =>
                "if(" + argument + " == " + value + ") {\n" +
                self.emitCase(arguments, matchCase, last, async) +
                "\n}"
            | PChar(_, value) =>
                "if(" + argument + " == " + charLiteralToNumber(value) + ") {\n" +
                self.emitCase(arguments, matchCase, last, async) +
                "\n}"
            | PVariable(_, None) =>
                self.emitCase(arguments, matchCase, last, async)
            | PVariable(_, Some(name)) =>
                let escaped = escapeKeyword(name)
                if(escaped != argument) { "const " + escaped + " = " + argument + ";\n" } else { "" } +
                self.emitCase(arguments, matchCase, last, async)
            | PVariant(_, "ff:core/Bool.False", []) =>
                "if(!" + argument + ") {\n" +
                self.emitCase(arguments, matchCase, last, async) +
                "\n}"
            | PVariant(_, "ff:core/Bool.True", []) =>
                "if(" + argument + ") {\n" +
                self.emitCase(arguments, matchCase, last, async) +
                "\n}"
            | PVariant(_, name, patterns) =>
                let processed = self.processVariantCase(name, argument)
                let newMatchCase = matchCase.MatchCase(patterns = [...patterns, ...matchCase.patterns])
                if(processed.loneVariant) { "" } else {
                    "if(" + argument + "." + processed.variantName + ") {\n"
                } +
                self.emitCase([...processed.arguments, ...arguments], newMatchCase, last, async) +
                if(processed.loneVariant) { "" } else { "\n}" }
            | PVariantAs(at, name, variable) =>
                let processed = self.processVariantCase(name, argument)
                if(processed.loneVariant) { "" } else {
                    "if(" + argument + "." + processed.variantName + ") {\n"
                } +
                variable.map(escapeKeyword).filter { _ != argument }.map {
                    "const " + _ + " = " + argument + ";\n"
                }.else {""} +
                self.emitCase(arguments, matchCase, last, async) +
                if(processed.loneVariant) { "" } else { "\n}" }
            | PAlias(_, pattern, variable) =>
                let escaped = escapeKeyword(variable)
                if(escaped != argument) { "const " + escaped + " = " + argument + ";\n" } else { "" } +
                self.emitPattern(argument, pattern, arguments, matchCase, last, async)
        }
    }

    emitList(items: List[Pair[Term, Bool]], async: Bool): String {items.{
        | [] =>
            "ff_core_List.Empty()"
        | [Pair(e, True)] =>
            self.emitTerm(e, async)
        | [Pair(e, False), ...list] =>
            "ff_core_List.Link(" + self.emitTerm(e, async) + ", " + self.emitList(list, async) + ")"
        | [Pair(e, True), ...list] =>
            "ff_core_List.List_addAll(" + self.emitTerm(e, async) + ", " + self.emitList(list, async) + ")"
    }}

    processVariantCase(name: String, argument: String): ProcessedVariantCase {
        let variantNameUnqualified = name.reverse().takeWhile { _ != '.' }.reverse()
        let variantName = escapeKeyword(variantNameUnqualified)
        let moduleName = name.dropLast(variantNameUnqualified.size() + 1)
        let variantModule = self.otherModules.expect(moduleName)
        mutable newtype = False
        mutable loneVariant = False
        let newArguments = variantModule.types.collectFirst { definition =>
            definition.variants.find { _.name == variantName }.map { variant =>
                newtype = definition.newtype
                loneVariant = definition.variants.size() == 1
                [...definition.commonFields.map { _.name}, ...variant.fields.map {_.name}]
            }
        }.expect().map { field => if(newtype) { argument } else { argument + "." + escapeKeyword(field) } }
        ProcessedVariantCase(variantName, newtype, loneVariant, newArguments)
    }

    processVariant(name: String): Bool {
        let variantNameUnqualified = name.reverse().takeWhile { _ != '.' }.reverse()
        let variantName = escapeKeyword(variantNameUnqualified)
        let moduleName = name.dropLast(variantNameUnqualified.size() + 1)
        let variantModule = self.otherModules.expect(moduleName)
        mutable newtype = False
        let newArguments = variantModule.types.collectFirst { definition =>
            definition.variants.find { _.name == variantName }.map { variant =>
                newtype = definition.newtype
            }
        }.expect()
        newtype
    }

    emitArgument(argument: Argument, async: Bool): String {
        self.emitTerm(argument.value, async)
    }

}

type ProcessedVariantCase(
    variantName: String
    newtype: Bool
    loneVariant: Bool
    arguments: List[String]
)

detectIfElse(term: Term): List[Pair[Term, Term]] {
    | ECall(at, StaticCall("ff:core/Core.if", _, _), _, _, [condition, body], _) =>
        [Pair(condition.value, invokeImmediately(body.value))]
    | ECall(at, StaticCall("ff:core/Option.Option_elseIf", _, _), _, _, [option, condition, body], _) =>
        let list = detectIfElse(option.value)
        if(list.isEmpty()) { [] } else:
        [Pair(invokeImmediately(condition.value), invokeImmediately(body.value)), ...list]
    | ECall(at, StaticCall("ff:core/Option.Option_else", _, _), _, _, [option, body], _) =>
        let list = detectIfElse(option.value)
        if(list.isEmpty()) { [] } else:
        [Pair(EVariant(at, "ff:core/Bool.True", [], None), invokeImmediately(body.value)), ...list]
    | _ =>
        []
}

invokeImmediately(function: Term): Term {
    | ELambda(_, Lambda(_, effect, [MatchCase(_, [], [], body)])) =>
        body
    | _ =>
        let effect = TConstructor(function.at, "Q$", []) // Awaits more often than required in async context
        ECall(function.at, DynamicCall(function, False), effect, [], [], [])
}

extractTypeName(type: Type): String {
    | TVariable(at, index) =>
        fail(at, "Unexpected type variable: $" + index)
    | TConstructor t =>
        t.name
}

firstTypeName(types: List[Type]): String {
    types.expectFirst().{
        | TConstructor t => t
        | TVariable t => fail(t.at, " is still a unification variable")
    }.name
}

makeDictionaryName(traitName: String, typeName: String): String {
    traitName.replace(".", "_").replace(":", "_").replace("/", "_") + "$" +
    typeName.replace(".", "_").replace(":", "_").replace("/", "_")
}

charLiteralToNumber(charLiteral: String): String {
    | "'\\t'" => "9"
    | "'\\n'" => "10"
    | "'\\r'" => "13"
    | "'\\\"'" => "34"
    | "'\\''" => "39"
    | value => "" + value.expect(1).codeUnit
}

escapeResolved(word: String): String {
    let parts = word.replace(":", ".").replace("/", ".").split('.').toList()
    let initialParts = parts.dropLast()
    if(initialParts.isEmpty()) {
        escapeKeyword(parts.expectLast())
    } else {
        initialParts.join("_") + "." + escapeKeyword(parts.expectLast())
    }
}

escapeKeyword(word: String): String {
    if(word.expectFirst().isAsciiLower()) {word + "_"} else {word}
}

effectTypeIsAsync(effect: Type): Bool {
    | TConstructor(_, "Q$", _) => True
    | _ => False
}
