import Syntax

type JsEmitter(
    otherModules: Map[String, Module]
)

make(otherModules: List[Module]): JsEmitter {
    JsEmitter(
        otherModules = otherModules.map { m =>
            let moduleName = m.packagePair.first + ":" + m.packagePair.second + "/" + m.file.dropLast(3)
            Pair(moduleName, m)
        }.toMap()
    )
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show())
}

extend self: JsEmitter {

    emitModule(packagePair: Pair[String, String], module: Module): String {
        let selfImport =
            "import * as " + packagePair.first + "_" + packagePair.second + "_" + module.file.dropLast(3) + " " +
            "from \"../../" + packagePair.first + "/" + packagePair.second + "/" + module.file.dropLast(3) + ".mjs\""
        let imports =
            module.imports.sortBy { i =>
                i.package.first + "." + i.package.second + "." + i.file
            }.map { self.emitImportDefinition(_) }
        let parts = [
            if(imports.any { _ == selfImport }) { imports } else { [selfImport, ...imports] }
            module.types.map { self.emitTypeDefinition(_) }
            module.lets.map { "export " + self.emitLetDefinition(_) }
            module.functions.map { "export " + self.emitFunctionDefinition(_) }
            module.extends.map { self.emitExtendsDefinition(_) }
            if(module.file == "Main.ff" && module.functions.any { _.signature.name == "main" }) {
                [self.emitMain()]
            } else { [] }
        ]
        parts.map { _.join("\n\n") }.join("\n\n") + "\n"
    }

    emitMain(): String {
        "queueMicrotask(() => main_({array_: process.argv.slice(2)}))"
    }

    emitImportDefinition(definition: DImport): String {
        "import * as " + definition.package.first + "_" + definition.package.second + "_" + definition.file + " " +
        "from \"../../" + definition.package.first + "/" + definition.package.second + "/" + definition.file + ".mjs\""
    }

    emitLetDefinition(definition: DLet, mutable: Bool = False): String {
        let mutability = if(mutable) {"let"} else {"const"}
        let valueCode = definition.targets.scala.else { self.emitTerm(definition.value) }
        mutability + " " + escapeKeyword(definition.name) + " = " + valueCode
    }

    emitExtendsDefinition(definition: DExtend): String {
        let typeName = extractTypeName(definition.type).reverse().takeWhile { _ != '.' }.reverse()
        let methods = definition.methods.map { method =>
            method.DFunction(
                signature = method.signature.Signature(
                    name = typeName + "_" + method.signature.name
                )
            )
        }
        methods.map { "export " + self.emitFunctionDefinition(_) }.join("\n\n")
    }

    emitFunctionDefinition(definition: DFunction, suffix: String = ""): String {
        let signature = self.emitSignature(definition.signature, suffix)
        definition.targets.javaScript.map { code =>
            if(code.startsWith("#")) {
                code.dropFirst()
            } else {
                signature + " {\n" + code + "\n}"
            }
        }.else:
        definition.body.{
            | Lambda(_, [matchCase]) {
                matchCase.patterns.all {
                    | PVariable(_, None) => True
                    | PVariable(_, Some(x)) {True /* TODO */} => True
                    | _ => False
                }
            } =>
                let body = self.emitStatements(matchCase.body, True)
                signature + " {\n" + body + "\n}"
            | _ =>
                let body = "// TODO: Pattern matching"
                signature + " {\n" + body + "\n}"
        }
    }

    emitSignature(signature: Signature, suffix: String = ""): String {
        let parameters = "(" + signature.parameters.map(self.emitParameter).join(", ") + ")"
        "function " + escapeKeyword(signature.name) + suffix + parameters
    }

    emitParameter(parameter: Parameter): String {
        let defaultValue = parameter.default.map { " = " + self.emitTerm(_) }.else{""}
        escapeKeyword(parameter.name) + defaultValue
    }

    emitTypeDefinition(definition: DType): String {
        "// type " + definition.name + "\n" +
        definition.variants.map { self.emitVariantDefinition(definition, _) }.join("\n")
    }

    emitVariantDefinition(typeDefinition: DType, definition: Variant): String {
        let allFields = typeDefinition.commonFields ++ definition.fields
        let fields = allFields.map { escapeKeyword(_.name) }.join(", ")
        definition.targets.javaScript.else {
            if(allFields.isEmpty()) {
                "const " + definition.name + "$ = {_: '" + definition.name + "'};\n" +
                "export function " + definition.name + "(" + fields + ") {\n" +
                "return " + definition.name + "$;\n" +
                "}"
            } else {
                "export function " + definition.name + "(" + fields + ") {\n" +
                "return {_: '" + definition.name + "', " + fields + "};\n" +
                "}"
            }
        }
    }

    emitTerm(term: Term): String {
        | EString(at, value) => value
        | EChar(at, value) { value == "'\\t'" } => "9"
        | EChar(at, value) { value == "'\\n'" } => "10"
        | EChar(at, value) { value == "'\\r'" } => "13"
        | EChar(at, value) { value == "'\\\"'" } => "34"
        | EChar(at, value) { value == "'\\''" } => "39"
        | EChar(at, value) => "" + value.expect(1).toInt()
        | EInt(at, value) => value
        | EFloat(at, value) => value
        | EVariable(at, name, _, _) => escapeResolved(name)
        | EList(at, _, items) =>
            "ff_core_Array.Array_toList([" + items.map {
                | Pair(item, False) => self.emitTerm(item)
                | Pair(item, True) => "...ff_core_List.List_toArray(" + self.emitTerm(item) + ")"
            }.join(", ") + "])"
        | EVariant(at, name, _, _) { name == "ff:core/Bool.False" } =>
            "false"
        | EVariant(at, name, _, _) { name == "ff:core/Bool.True" } =>
            "true"
        | EVariant(at, name, _, _) { name == "ff:core/Unit.Unit" } =>
            "(void 0)"
        | EVariant(at, name, _, arguments) =>
            escapeResolved(name) + "(" + arguments.toList().flatten().map(self.emitArgument).join(", ") + ")"
        | EVariantIs(at, name, _) { name == "ff:core/Bool.False" } =>
            "function(_v) { return !_v ? ff_core_Option.Some(_v) : ff_core_Option.None(); }"
        | EVariantIs(at, name, _) { name == "ff:core/Bool.True" } =>
            "function(_v) { return _v ? ff_core_Option.Some(_v) : ff_core_Option.None(); }"
        | EVariantIs(at, name, _) { name == "ff:core/Unit.Unit" } =>
            "function(_v) { return ff_core_Option.Some(_v); }"
        | EVariantIs(at, name, _) =>
            "(function(_v) { " +
            "return _v._ === '" + escapeResolved(name) + "' ? ff_core_Option.Some(_v) : ff_core_Option.None();" +
            "})"
        | ECopy(at, name, record, fields) =>
            let fieldCode = fields.map { f => escapeKeyword(f.name) + " = " + self.emitTerm(f.value) }.join(", ")
            "{..." + self.emitTerm(record) + ", " + fieldCode + "}"
        | EField(at, record, field) =>
            self.emitTerm(record) + "." + escapeKeyword(field)
        | ELambda(at, Lambda(_, [MatchCase(_, patterns, None, body)])) {
            patterns.all {| PVariable _ => True | _ => False }
        } =>
            let parameters =
                patterns.map {| PVariable p => p.name.map(escapeKeyword).else{"_"} | _ => panic("!") }.join(", ")
            "((" + parameters + ") => {\n" + self.emitStatements(body, True) + "\n})"
        | ELambda(at, Lambda(_, cases)) =>
            let arguments = cases.expect(0).patterns.pairs().map { "_" + (_.first + 1) }
            let escapedArguments = arguments.map(escapeKeyword) // emitCase arguments must be preescaped
            let casesString = cases.map { "{\n" + self.emitCase(escapedArguments, _) + "\n}" }.join("\n")
            "((" + escapedArguments.join(", ") + ") => {\n" + casesString + "\nthrow 'Unexhaustive pattern match'\n})"
        | EPipe(at, value, function) =>
            "(" + self.emitTerm(function) + ")(" + self.emitTerm(value) + ")"
        | ECall(at, _, EVariable(_, operator, _, _), [], [value]) {!operator.expectFirst().isAsciiLetter()} =>
            "(" + operator + self.emitArgument(value) + ")"
        | ECall(at, _, EVariable(_, operator, _, _), [], [left, right]) {!operator.expectFirst().isAsciiLetter()} =>
            "(" + self.emitArgument(left) + " " + operator + " " + self.emitArgument(right) + ")"
        | ECall(at, _, function, _, arguments) =>
            self.emitTerm(function) + "(" + arguments.map(self.emitArgument).join(", ") + ")"
        | ERecord(at, fields) =>
            if(fields.isEmpty()) {"{}"} else {
                let list = fields.map { f => escapeKeyword(f.name) + " = " + self.emitTerm(f.value) }
                "{\n" + list.join(",\n") + "\n}"
            }
        | EWildcard(at, index) =>
            if(index == 0) {fail(at, "Unbound wildcard")}
            "_w" + index
        | _ =>
            "(function() {\n" + self.emitStatements(term, True) + "\n})()"
    }

    emitStatements(term: Term, last: Bool): String {
        term.{
            | EFunctions(at, functions, body) =>
                let functionStrings = functions.map { f =>
                    self.emitFunctionDefinition(DFunction(at, f.signature, f.body, Targets(None, None)))
                }
                functionStrings.join("\n") + "\n" + self.emitStatements(body, True)
            | ELet(at, mutable, name, valueType, value, body) =>
                self.emitLetDefinition(DLet(at, name, valueType, value, Targets(None, None)), mutable) + ";\n" + self.emitStatements(body, True)
            | ESequential(at, before, after) =>
                self.emitStatements(before, False) + ";\n" + self.emitStatements(after, last)
            | EAssign(at, operator, name, value) =>
                escapeKeyword(name) + " " + operator + "= " + self.emitTerm(value)
            | EAssignField(at, operator, record, field, value) =>
                self.emitTerm(record) + "." + escapeKeyword(field) + " " + operator + "= " + self.emitTerm(value)
            | _ {last} =>
                "return " + self.emitTerm(term)
            | _ =>
                self.emitTerm(term)
        }
    }

    emitCase(arguments: List[String], matchCase: MatchCase): String {
        Pair(matchCase.patterns, matchCase.condition).{
            | Pair([p, ...ps], _) =>
                self.emitPattern(arguments.expect(0), p, arguments.dropFirst(), matchCase.MatchCase(patterns = ps))
            | Pair([], Some(condition)) =>
                "if(" + self.emitTerm(condition) + ") {\n" + self.emitStatements(matchCase.body, True) + "\n}"
            | Pair([], None) =>
                self.emitStatements(matchCase.body, True) + "\n"
        }
    }

    emitPattern(argument: String, pattern: MatchPattern, arguments: List[String], matchCase: MatchCase): String {
        pattern.{
            | PVariable(_, None) =>
                self.emitCase(arguments, matchCase)
            | PVariable(_, Some(name)) =>
                "const " + escapeKeyword(name) + " = " + argument + "\n" +
                self.emitCase(arguments, matchCase)
            | PVariant(_, name, []) { name == "ff:core/Bool.False" } =>
                "if(!" + argument + ") {\n" +
                self.emitCase(arguments, matchCase) +
                "}"
            | PVariant(_, name, []) { name == "ff:core/Bool.True" } =>
                "if(" + argument + ") {\n" +
                self.emitCase(arguments, matchCase) +
                "}"
            | PVariant(_, name, []) { name == "ff:core/Unit.Unit" } =>
                self.emitCase(arguments, matchCase)
            | PVariant(_, name, patterns) =>
                let variantNameUnqualified = name.reverse().takeWhile { _ != '.' }.reverse()
                let variantName = escapeKeyword(variantNameUnqualified)
                let moduleName = name.dropLast(variantNameUnqualified.size() + 1)
                let variantModule = self.otherModules.expect(moduleName)
                let newArguments = variantModule.types.collectFirst { definition =>
                    definition.variants.find { _.name == variantName }.map { variant =>
                        definition.commonFields.map { _.name} ++ variant.fields.map {_.name}
                    }
                }.expect().map { argument + "." + escapeKeyword(_) }
                "if(" + argument + "._ === '" + variantName + "') {\n" +
                self.emitCase(newArguments ++ arguments, matchCase.MatchCase(patterns = patterns ++ matchCase.patterns)) +
                "}"
            | PVariantAs(at, name, variable) =>
                let variantName = escapeKeyword(name.reverse().takeWhile { _ != '.' }.reverse())
                "if(" + argument + "._ === '" + escapeKeyword(variantName) + "') {\n" +
                variable.map { "const " + escapeKeyword(_) + " = " + argument + "\n" }.else {""} +
                self.emitCase(arguments, matchCase) +
                "}"
            | PAlias(_, pattern, variable) =>
                "const " + escapeKeyword(variable) + " = " + argument + "\n" +
                self.emitPattern(argument, pattern, arguments, matchCase)
            | PList(at, _, []) =>
                let p = PVariant(at, "ff:core/List.Empty", [])
                self.emitCase([argument, ...arguments], matchCase.MatchCase(patterns = [p, ...matchCase.patterns]))
            | PList(at, t, [Pair(p, False), ...ps]) =>
                let p2 = PVariant(at, "ff:core/List.Link", [p, PList(at, t, ps)])
                self.emitCase([argument, ...arguments], matchCase.MatchCase(patterns = [p2, ...matchCase.patterns]))
            | PList(at, t, [Pair(p, True)]) =>
                self.emitCase([argument, ...arguments], matchCase.MatchCase(patterns = [p, ...matchCase.patterns]))
            | PList(at, t, [Pair(p, True), ..._]) =>
                "throw 'Invalid pattern: ... is only allowed for the last element in a list'\n"
        }
    }

    emitArgument(argument: Argument): String {
        self.emitTerm(argument.value)
    }

}

extractTypeName(type: Type): String {
    | TVariable(at, index) =>
        fail(at, "Unexpected type variable: $" + index)
    | TConstructor t =>
        t.name
}

escapeResolved(word: String): String {
    let parts = word.replace(":", ".").replace("/", ".").split('.').toList()
    let initialParts = parts.dropLast()
    if(initialParts.isEmpty()) {
        escapeKeyword(parts.expectLast())
    } else {
        initialParts.join("_") + "." + escapeKeyword(parts.expectLast())
    }
}

escapeKeyword(word: String): String {
    if(word.expectFirst().isAsciiLower()) {word + "_"} else {word}
}
