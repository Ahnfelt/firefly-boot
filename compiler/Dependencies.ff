import Parser
import Syntax
import Tokenizer
import Workspace

type Dependencies(
    workspace: Workspace
    mutable packages: Map[Pair[String, String], PackageInfo]
)

extend self: Dependencies {

    loadPackageInfo(
        fs: FileSystem
        packagePair: Pair[String, String]
        path: String
    ): PackageInfo {
        let packageDirectory = if(path.endsWith(".ff")) { FileSystem.directoryName(path) } else { path }
        let sharedPackageFile = packageDirectory + "/.firefly/package.ff"
        let packageFile = if(fs.exists(sharedPackageFile)) { sharedPackageFile } else { path }
        let code = fs.readText(packageFile)
        let tokens = Tokenizer.tokenize(packageFile, code)
        let parser = Parser.make(packagePair, packageFile, tokens, False)
        parser.parsePackageInfo()
    }

    processPackageInfo(
        packageInfo: PackageInfo
    ): List[DDependency] {
        self.packages = self.packages.add(packageInfo.package.packagePair, packageInfo)
        packageInfo.dependencies.filter { !self.packages.contains(_.packagePair) }
    }

    fetchDependency(
        fs: FileSystem
        dependency: DDependency
    ): String {
        let location = self.workspace.findPackageLocation(dependency.packagePair, dependency.version)
        if(location.contains(":")) {
            panic("Loading packages by URL is not yet supported: " + location)
        } else {
            location
        }
    }

    processDependencies(
        fs: FileSystem
        dependencies: List[DDependency]
    ): Unit {
        // Remember to check for cycles
        let packageInfos = dependencies.map { dependency =>
            let path = self.fetchDependency(fs, dependency)
            let packageInfo = self.loadPackageInfo(fs, dependency.packagePair, path)
            checkPackagePairs(dependency.packagePair, packageInfo.package.packagePair)
            packageInfo
        }
        let newDependencies = packageInfos.flatMap { self.processPackageInfo(_) }
        if(newDependencies != []) {
            self.processDependencies(fs, newDependencies)
        }
    }

}

process(fs: FileSystem, path: String): Map[Pair[String, String], PackageInfo] {
    let workspace = Workspace.loadWorkspace(fs, path)
    let self = Dependencies(workspace, [].toMap())
    let packageInfo = self.loadPackageInfo(fs, Pair("_script", "_script"), path)
    let newDependencies = self.processPackageInfo(packageInfo)
    self.processDependencies(fs, newDependencies)
    self.packages
}

checkPackagePairs(dependencyPair : Pair[String, String], packagePair: Pair[String, String]): Unit {
    if(
        packagePair.first != dependencyPair.first ||
        packagePair.second != dependencyPair.second
    ) {
        panic(
            "Dependency declaration and package declaration disagree on package name: " +
            dependencyPair.first + ":" + dependencyPair.second + " vs. " +
            packagePair.first + ":" + packagePair.second
        )
    }
}
