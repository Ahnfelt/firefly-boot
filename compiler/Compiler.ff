import Syntax
import Tokenizer
import Parser
import Resolver
import Inference
import Emitter

type Compiler(
    files: FileSystem
    inputPath: String
    outputPath: String
    mutable parsedModules: Map[String, Module]
    mutable resolvedModules: Map[String, Module]
    mutable inferredModules: Map[String, Module]
    mutable emittedModules: Set[String]
)

make(files: FileSystem, inputPath: String, outputPath: String): Compiler {
    Compiler(
        files = files
        inputPath = inputPath
        outputPath = outputPath
        parsedModules = mapOf()
        resolvedModules = mapOf()
        inferredModules = mapOf()
        emittedModules = setOf()
    )
}

extend self: Compiler {

    parse(moduleName: String): Module {
        self.parsedModules.get(moduleName).else:

        let file = moduleName + ".ff"
        let code = self.files.readText(self.inputPath + "/" + file)
        let tokens = Tokenizer.tokenize(file, code)
        let result = Parser.make(file, tokens).parseModule()

        self.parsedModules = self.parsedModules.add(moduleName, result)
        result
    }

    imports(module: Module): List[Module] {
        module.imports.map { import =>
            let otherModuleName = import.directory.map { _ + "/" }.join("") + import.file
            self.parse(otherModuleName)
        }
    }

    resolve(moduleName: String): Module {
        self.resolvedModules.get(moduleName).else:

        let coreModule = self.parse("../core/Core")
        let module = self.parse(moduleName)
        let otherModules = self.imports(module)
        let result = Resolver.make(coreModule).resolveModule(module, otherModules)

        self.resolvedModules = self.resolvedModules.add(moduleName, result)
        result
    }

    infer(moduleName: String): Module {
        self.inferredModules.get(moduleName).else:

        let coreModule = self.resolve("../core/Core")
        let module = self.resolve(moduleName)
        let otherModules = self.imports(module).map { self.resolve(self.files.prefixName(_.file)) }
        let instances = coreModule.instances ++ module.instances ++ otherModules.flatMap { _.instances }
        let result = Inference.make(instances).inferModule(coreModule, module, otherModules)

        self.inferredModules = self.inferredModules.add(moduleName, result)
        module // result
    }

    emit(moduleName: String): Unit {
        if(self.emittedModules.contains(moduleName)) {} else:
        self.emittedModules = self.emittedModules.add(moduleName)

        let module = self.infer(moduleName)
        self.imports(module).each { self.emit(self.files.prefixName(_.file)) }

        let emitted = Emitter.emitModule(self.inputPath, module)
        let file = self.outputPath + "/" + moduleName + ".scala"
        self.files.writeText(file, emitted)
    }

}
