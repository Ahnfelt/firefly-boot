import Syntax
import Tokenizer
import ModuleCache
import Parser
import Resolver
import Deriver
import Inference
import JsEmitter
import Dictionaries
import Dependencies
import LspHook

capability Compiler(
    emitTarget: EmitTarget
    task: Task
    compilerModulePath: Option[Path]
    jsOutputPath: Path
    packagePaths: Map[PackagePair, Path]
    singleFilePackages: Set[PackagePair]
    virtualFiles: Map[String, String]
    cache: ModuleCache
    lspHook: LspHook
    mutable phaseDurationDelta: Duration
    phaseDurations: Array[Pair[String, Duration]]
)

new(
    emitTarget: EmitTarget
    task: Task
    compilerModulePath: Option[Path]
    jsOutputPath: Path
    resolvedDependencies: ResolvedDependencies
    virtualFiles: Map[String, String]
    cache: ModuleCache
    lspHook: LspHook
): Compiler {
    Compiler(
        emitTarget = emitTarget
        task = task
        compilerModulePath = compilerModulePath
        jsOutputPath = jsOutputPath
        packagePaths = resolvedDependencies.packagePaths
        singleFilePackages = resolvedDependencies.singleFilePackages
        virtualFiles = virtualFiles
        cache = cache
        lspHook = lspHook
        phaseDurationDelta = Duration(0.0)
        phaseDurations = [].toArray()
    )
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show())
}

coreImports: List[DImport] =
    [
        "Any"
        "Array"
        "AssetSystem"
        "Atomic"
        "Bool"
        "BrowserSystem"
        "Buffer"
        "BuildSystem"
        "Channel"
        "Char"
        "Core"
        "Crypto"
        "Date"
        "Duration"
        "Equal"
        "Error"
        "FileHandle"
        "Float"
        "HttpClient"
        "Int"
        "IntMap"
        "Json"
        "JsValue"
        "JsSystem"
        "List"
        "Lock"
        "Log"
        "Map"
        "NodeSystem"
        "Nothing"
        "Option"
        "Ordering"
        "Pair"
        "Path"
        "Queue"
        "Random"
        "Serializable"
        "Set"
        "Show"
        "SourceLocation"
        "Stream"
        "String"
        "StringMap"
        "Task"
        "Try"
        "Unit"
        "Js"
    ].map {moduleName =>
        DImport(
            at = Location("<prelude>", 1, 1)
            alias = moduleName
            moduleKey = ModuleKey(PackagePair("ff", "core"), [], moduleName)
        )
    }

extend self: Compiler {

    measure[T](phase: String, moduleKey: ModuleKey, body: () => T): T {
        let start = Duration(self.task.elapsed().seconds - self.phaseDurationDelta.seconds)
        let result = body()
        let stop = Duration(self.task.elapsed().seconds - self.phaseDurationDelta.seconds)
        let duration = Duration(stop.seconds - start.seconds)
        self.phaseDurationDelta = Duration(self.phaseDurationDelta.seconds + duration.seconds)
        let text = phase + " " + moduleKey.qualifiedName()
        self.phaseDurations.push(Pair(text, duration))
        result
    }

    printMeasurements(): Unit {
        let worst = self.phaseDurations.toList().sortBy {
            (_.second.seconds + 1000000.0) + ""
        }.takeLast(5).reverse()
        worst.each {| Pair(text, duration) =>
            Log.debug(text + ":\t" + duration.show())
        }
    }

    parse(moduleKey: ModuleKey, importedAt: Option[Location]): Module {
        self.cache.cacheParsedModule(self.packagePaths, moduleKey): path => 
        self.measure("Parse", moduleKey):
        let code = self.virtualFiles.get(path.absolute()).else {
            importedAt.each {at => if(!path.exists()) {
                throw(CompileError(at, "Imported module not found: " + moduleKey.importName()))
            }}
            path.readText()
        }
        let completionAt = if(self.lspHook.isEnabled() && self.lspHook.insertIdentifier) {self.lspHook.at}
        let tokens = Tokenizer.tokenize(path.absolute(), code, completionAt, self.lspHook.isEnabled())
        let parser = Parser.new(moduleKey, tokens, self.emitTarget != EmitBrowser, self.lspHook)
        let module = if(self.singleFilePackages.contains(moduleKey.packagePair)) {
            parser.parseModuleWithPackageInfo().module
        } else {
            parser.parseModuleWithoutPackageInfo()
        }
        let result = module.Module(
            imports = [...coreImports, ...module.imports]
        )
        result
    }

    imports(module: Module): List[Module] {
        module.imports.map {import =>
            let newPackagePair = import.moduleKey.packagePair
            if(!self.packagePaths.contains(newPackagePair)) {
                throw(CompileError(import.at, "Missing dependency declaration for: " + newPackagePair.groupName()))
            }
            try {
                self.parse(import.moduleKey, Some(import.at))
            } tryCatch {| CompileError(_, _) @ e, error =>
                let newError = CompileError(import.at, "Parse error in imported module: " + import.moduleKey.importName())
                throw(CompileErrors([e, newError]))
            } catch {| CompileErrors(compileErrors), error =>
                let newError = CompileError(import.at, "Parse errors in imported module: " + import.moduleKey.importName())
                throw(CompileErrors([...compileErrors, newError]))
            }
        }
    }

    resolve(moduleKey: ModuleKey): Module {
        self.cache.cacheResolvedModule(self.packagePaths, moduleKey): path => 
        self.measure("Resolve", moduleKey):

        let module = self.parse(moduleKey, None)
        let otherModules = self.imports(module)
        let resolver = Resolver.new(self.lspHook)
        resolver.resolveModule(module, otherModules)
    }

    derive(moduleKey: ModuleKey): Module {
        self.cache.cacheDerivedModule(self.packagePaths, moduleKey): path => 
        self.measure("Derive", moduleKey):

        let module = self.resolve(moduleKey)
        Deriver.new().deriveModule(module)
    }

    infer(moduleKey: ModuleKey): Module {
        self.cache.cacheInferredModule(self.packagePaths, moduleKey): path => 
        self.measure("Infer", moduleKey):

        let module = self.derive(moduleKey)
        let otherModules = self.imports(module).map {i =>
            self.derive(i.moduleKey)
        }
        let inference = Inference.new([module, ...otherModules], self.lspHook)
        let inferredModule = inference.inferModule(module, otherModules)
        Dictionaries.new([module, ...otherModules]).processModule(inferredModule, otherModules)
    }

    emit(moduleKey: ModuleKey, isMainModule: Bool): Unit {
        self.cache.cacheEmittedModule(self.packagePaths, moduleKey, isMainModule): path => 
        self.measure("Emit", moduleKey):

        let module = self.infer(moduleKey)
        let otherModules = self.imports(module).map {i =>
            self.emit(i.moduleKey, isMainModule = False)
            self.infer(i.moduleKey)
        }

        let allModules = [module, ...otherModules]
        let emitter = JsEmitter.new(
            otherModules = allModules
            emitTarget = self.emitTarget
            isMainModule = isMainModule
            compilerModuleFileUrl = self.compilerModulePath.map {_.url()}
            moduleKey = moduleKey
        )
        emitter.emitModule(module)
        let packagePath = self.jsOutputPath.slash(moduleKey.packagePair.group).slash(moduleKey.packagePair.name)
        let jsPath = moduleKey.folders.foldLeft(packagePath) {p, f => p.slash(f)}
        let jsFile = jsPath.slash(moduleKey.name + ".mjs")
        let sourceMapFile = jsPath.slash(moduleKey.name + ".mjs.map")
        let temporaryWorkaround = jsPath.parent().grab() // Workaround for temporary/ directory
        let source = Some(path.readText())
        let jsAndSourceMap = emitter.makeOutputAndSourceMap(path.relativeListTo(temporaryWorkaround).join("/"), source)
        jsPath.createDirectory(createParentDirectories = True)
        jsFile.writeText(jsAndSourceMap.first + "\n\n//# sourceMappingURL=" + sourceMapFile.base())
        sourceMapFile.writeText(jsAndSourceMap.second.write(Some("    ")))
        if(isMainModule) {
            let runJs = emitter.makeRun(
                moduleKey.name
                module.functions
                moduleKey.packagePair
                moduleKey.packagePair.group == "ff" && moduleKey.packagePair.name == "compiler"
            )
            let jsRunFile = jsPath.slash(moduleKey.name + ".run.mjs")
            jsRunFile.writeText(runJs.map {_ + "\n"}.join())
        }
    }

}
