import Syntax
import Tokenizer
import Parser
import Resolver
import Deriver
import Inference
import JsEmitter
import Dictionaries
import Dependencies
import LspHook

capability Compiler(
    emitTarget: EmitTarget
    task: Task
    compilerModulePath: Option[Path]
    jsOutputPath: Path
    packagePaths: Map[PackagePair, Path]
    singleFilePackages: Set[PackagePair]
    virtualFiles: Map[String, String]
    lspHook: LspHook
    mutable parsedModules: Map[String, Module]
    mutable resolvedModules: Map[String, Module]
    mutable derivedModules: Map[String, Module]
    mutable inferredModules: Map[String, Module]
    mutable emittedModules: Set[String]
    mutable phaseDurationDelta: Duration
    phaseDurations: Array[Pair[String, Duration]]
)

make(
    emitTarget: EmitTarget
    task: Task
    compilerModulePath: Option[Path]
    jsOutputPath: Path
    resolvedDependencies: ResolvedDependencies
    virtualFiles: Map[String, String]
    lspHook: LspHook
): Compiler {
    Compiler(
        emitTarget = emitTarget
        task = task
        compilerModulePath = compilerModulePath
        jsOutputPath = jsOutputPath
        packagePaths = resolvedDependencies.packagePaths
        singleFilePackages = resolvedDependencies.singleFilePackages
        virtualFiles = virtualFiles
        lspHook = lspHook
        parsedModules = Map.empty()
        resolvedModules = Map.empty()
        derivedModules = Map.empty()
        inferredModules = Map.empty()
        emittedModules = Set.empty()
        phaseDurationDelta = Duration(0.0)
        phaseDurations = [].toArray()
    )
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show())
}

coreImports: List[DImport] =
    [
        "Any"
        "Array"
        "AssetSystem"
        "Atomic"
        "Bool"
        "Box"
        "BrowserSystem"
        "Buffer"
        "BuildSystem"
        "Channel"
        "Char"
        "Core"
        "Duration"
        "Equal"
        "Error"
        "FileHandle"
        "Float"
        "HttpClient"
        "Instant"
        "Int"
        "IntMap"
        "Json"
        "JsValue"
        "JsSystem"
        "List"
        "Lock"
        "Log"
        "Map"
        "NodeSystem"
        "Nothing"
        "Option"
        "Ordering"
        "Pair"
        "Path"
        "Random"
        "Serializable"
        "Set"
        "Show"
        "SourceLocation"
        "Stream"
        "String"
        "StringMap"
        "Task"
        "Try"
        "Unit"
    ].map {moduleName =>
        DImport(
            at = Location("<prelude>", 1, 1)
            alias = moduleName
            package = PackagePair("ff", "core")
            directory = []
            file = moduleName
        )
    }

extend self: Compiler {

    measure[T](phase: String, packagePair: PackagePair, moduleName: String, body: () => T): T {
        let start = Duration(self.task.elapsed().seconds - self.phaseDurationDelta.seconds)
        let result = body()
        let stop = Duration(self.task.elapsed().seconds - self.phaseDurationDelta.seconds)
        let duration = Duration(stop.seconds - start.seconds)
        self.phaseDurationDelta = Duration(self.phaseDurationDelta.seconds + duration.seconds)
        let text = phase + " " + packagePair.groupName() + "/" + moduleName
        self.phaseDurations.push(Pair(text, duration))
        result
    }

    printMeasurements(): Unit {
        let worst = self.phaseDurations.toList().sortBy {
            (_.second.seconds + 1000000.0) + ""
        }.takeLast(5).reverse()
        worst.each {| Pair(text, duration) =>
            Log.debug(text + ":\t" + duration.show())
        }
    }

    parse(packagePair: PackagePair, moduleName: String, importedAt: Option[Location]): Module {
        let packageName = packagePair.groupName()
        self.parsedModules.get(packageName + ":" + moduleName).else:
        self.measure("Parse", packagePair, moduleName):
        let packagePath = self.packagePaths.get(packagePair).else {
            panic("Internal error - package path missing: " + packagePair.groupName())
        }
        let file = moduleName + ".ff"
        let path = packagePath.slash(file)
        let code = self.virtualFiles.get(path.absolute()).else {
            importedAt.each {at => if(!path.exists()) {
                throw(CompileError(at, "Imported module not found: " + packageName + "/" + moduleName))
            }}
            path.readText()
        }
        let completionAt = if(self.lspHook.isEnabled() && self.lspHook.insertIdentifier) {self.lspHook.at}
        let tokens = Tokenizer.tokenize(path.absolute(), code, completionAt, self.lspHook.isEnabled())
        let parser = Parser.make(packagePair, file, tokens, self.emitTarget != EmitBrowser, self.lspHook)
        let module = if(self.singleFilePackages.contains(packagePair)) {
            parser.parseModuleWithPackageInfo().module
        } else {
            parser.parseModuleWithoutPackageInfo()
        }
        let result = module.Module(
            imports = [...coreImports, ...module.imports]
        )
        self.parsedModules = self.parsedModules.add(packageName + ":" + moduleName, result)
        result
    }

    imports(module: Module): List[Module] {
        module.imports.map {import =>
            let newPackagePair = import.package
            let newModuleName = import.directory.map {_ + "/"}.join("") + import.file
            if(!self.packagePaths.contains(newPackagePair)) {
                throw(CompileError(import.at, "Missing dependency declaration for: " + newPackagePair.groupName()))
            }
            self.parse(newPackagePair, newModuleName, Some(import.at))
        }
    }

    resolve(packagePair: PackagePair, moduleName: String): Module {
        let packageName = packagePair.groupName()
        self.resolvedModules.get(packageName + ":" + moduleName).else:
        self.measure("Resolve", packagePair, moduleName):

        let module = self.parse(packagePair, moduleName, None)
        let otherModules = self.imports(module)
        let resolver = Resolver.make(packagePair, moduleName, self.lspHook)
        let result = resolver.resolveModule(module, otherModules)

        self.resolvedModules = self.resolvedModules.add(packageName + ":" + moduleName, result)
        result
    }

    derive(packagePair: PackagePair, moduleName: String): Module {
        let packageName = packagePair.groupName()
        self.derivedModules.get(packageName + ":" + moduleName).else:
        self.measure("Derive", packagePair, moduleName):

        let module = self.resolve(packagePair, moduleName)
        let result = Deriver.make().deriveModule(module)

        self.derivedModules = self.derivedModules.add(packageName + ":" + moduleName, result)
        result
    }

    infer(packagePair: PackagePair, moduleName: String): Module {
        let packageName = packagePair.groupName()
        self.inferredModules.get(packageName + ":" + moduleName).else:
        self.measure("Infer", packagePair, moduleName):

        let module = self.derive(packagePair, moduleName)
        let otherModules = self.imports(module).map {i =>
            self.derive(i.packagePair, i.file.dropLast(".ff".size()))
        }
        let inference = Inference.make([module, ...otherModules], self.lspHook)
        let inferredModule = inference.inferModule(module, otherModules)
        let result = Dictionaries.make([module, ...otherModules]).processModule(inferredModule, otherModules)

        self.inferredModules = self.inferredModules.add(packageName + ":" + moduleName, result)
        result
    }

    emit(packagePair: PackagePair, moduleName: String, isMainModule: Bool): Unit {
        let packageName = packagePair.groupName()
        if(self.emittedModules.contains(packageName + ":" + moduleName)) {} else:
        self.measure("Emit", packagePair, moduleName):
        self.emittedModules = self.emittedModules.add(packageName + ":" + moduleName)

        let module = self.infer(packagePair, moduleName)
        let otherModules = self.imports(module).map {i =>
            let newModuleName = i.file.dropLast(".ff".size())
            self.emit(i.packagePair, newModuleName, isMainModule = False)
            self.infer(i.packagePair, newModuleName)
        }

        let allModules = [module, ...otherModules]
        let js = 
            JsEmitter.make(allModules, self.emitTarget, isMainModule, self.compilerModulePath, packagePair, moduleName)
            .emitModule(packagePair, module)
        let jsPath = self.jsOutputPath.slash(packagePair.group).slash(packagePair.name)
        let jsFile = jsPath.slash(moduleName + ".mjs")
        jsPath.createDirectory(createParentDirectories = True)
        jsFile.writeText(js)
    }

}
