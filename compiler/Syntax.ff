type Location(file: String, line: Int, column: Int)
type CompileError(at: Location, message: String)

extend self: Location {
    show(): String {
        "in " + self.file + " " +
        "at line " + self.line +
        ", column " + self.column
    }
}

type ModuleWithPackageInfo(
    packageInfo: Option[PackageInfo]
    module: Module
)

type PackageInfo(
    package: DPackage
    dependencies: List[DDependency]
    includes: List[DInclude]
)

type Module(
    file: String
    packagePair: PackagePair
    imports: List[DImport]
    types: List[DType]
    traits: List[DTrait]
    instances: List[DInstance]
    extends: List[DExtend]
    lets: List[DLet]
    functions: List[DFunction]
)

type PackagePair(
    group: String
    name: String
)

extend self: PackagePair {
    groupName(delimiter : String = ":"): String {
        self.group + delimiter + self.name
    }
}

instance PackagePair: Order {
    compare(x: PackagePair, y: PackagePair): Ordering {
        Ordering.compare(x.group, y.group).{
            | OrderingSame => Ordering.compare(x.name, y.name)
            | o => o
        }
    }
}

type DPackage(
    at: Location
    packagePair: PackagePair
    version: Version
    targets: TargetNames
)
type DDependency(
    at: Location
    packagePair: PackagePair
    version: Version
    safety: Safety
    targets: TargetNames
)
type DInclude(
    at: Location
    path: String
)
type TargetNames(
    node: Bool
    browser: Bool
)
type DImport(
    at: Location,
    alias: String,
    package: PackagePair,
    directory: List[String],
    file: String
)
type DFunction(
    at: Location,
    signature: Signature,
    body: Target
)
type DLet(
    at: Location,
    name: String,
    variableType: Type,
    value: Term
)
type DExtend(
    at: Location,
    name: String,
    generics: List[String],
    constraints: List[Constraint],
    type: Type,
    methods: List[DFunction],
)
type DType(
    at: Location
    newtype: Bool
    name: String
    generics: List[String]
    constraints: List[Constraint]
    commonFields: List[Parameter]
    variants: List[Variant]
)
type DTrait(
    at: Location,
    name: String,
    generics: List[String],
    constraints: List[Constraint],
    generatorParameters: List[Parameter],
    methods: List[Signature],
    methodDefaults: List[Pair[String, Lambda]],
    methodGenerators: List[Pair[String, Lambda]],
)
type DInstance(
    at: Location,
    generics: List[String],
    constraints: List[Constraint],
    traitName: String,
    typeArguments: List[Type],
    generatorArguments: List[Argument],
    methods: List[DFunction],
)

type Term(at: Location) {
    EString(value: String)
    EChar(value: String)
    EInt(value: String)
    EFloat(value: String)
    EVariable(name: String)
    ELambda(lambda: Lambda)
    EFunctions(functions: List[DFunction], body: Term)
    ELet(mutable: Bool, name: String, valueType: Type, value: Term, body: Term)
    ESequential(before: Term, after: Term)
    EAssign(operator: String, variable: String, value: Term)
    EAssignField(operator: String, record: Term, field: String, value: Term)
    EPipe(value: Term, effect: Type, function: Term)
    ECall(
        target: CallTarget
        effect: Type
        typeArguments: List[Type]
        arguments: List[Argument]
        dictionaries: List[Dictionary]
    )
    EList(elementType: Type, items: List[Pair[Term, Bool]])
    ECopy(name: String, record: Term, arguments: List[Field])
    EVariant(name: String, typeArguments: List[Type], arguments: Option[List[Argument]])
    EVariantIs(name: String, typeArguments: List[Type])
    ERecord(fields: List[Field])
    EField(newtype: Bool, record: Term, field: String)
    EWildcard(index: Int)
}

type CallTarget {
    DynamicCall(function: Term, tailCall: Bool)
    StaticCall(name: String, tailCall: Bool, instanceCall: Bool)
}

type MatchCase(
    at: Location,
    patterns: List[MatchPattern],
    guards : List[MatchGuard]
    body: Term
)

type MatchPattern(at: Location) {
    PString(value: String)
    PInt(value: String)
    PChar(value: String)
    PVariable(name: Option[String])
    PVariant(name: String, patterns: List[MatchPattern])
    PVariantAs(name: String, variable: Option[String])
    PAlias(pattern: MatchPattern, variable: String)
}

type MatchGuard(
    at: Location
    term: Term
    pattern: MatchPattern
)

type Dictionary(
    packagePair: PackagePair
    moduleName: String
    traitName: String
    typeName: String
    dictionaries: List[Dictionary]
)

type Signature(
    at: Location
    name: String
    generics: List[String]
    constraints: List[Constraint]
    parameters: List[Parameter]
    returnType: Type
    effect: Type
)

type Lambda(at: Location, effect: Type, cases: List[MatchCase])

type Variant(at: Location, name: String, fields: List[Parameter])

type Parameter(at: Location, mutable: Bool, name: String, valueType: Type, default: Option[Term])

type Argument(at: Location, name: Option[String], value: Term)

type Field(at: Location, name: String, value: Term)

type Constraint(at: Location, name: String, generics: List[Type])

type Target {
    FireflyTarget(lambda : Lambda)
    ForeignTarget(syncCode : Option[String], asyncCode : Option[String])
}

type Type(at: Location) {
    TConstructor(name: String, generics: List[Type])
    TVariable(index: Int)
}

type Safety {
    Safe
    Unsafe
    Trusted
}

type Version(at: Location, major: Int, minor: Int, patch: Int)

extend self: Type {
    show(): String {
        self.{
            | TConstructor(at, name, generics) =>
                if(generics.isEmpty()) { name } else {
                    name + "[" + generics.map { _.show() }.join(", ") + "]"
                }
            | TVariable(at, index) =>
                "$" + index
        }
    }
}

extend self: Target {
    mapFirefly(body: Lambda => Lambda): Target {
        self.{
             | FireflyTarget(lambda) => FireflyTarget(body(lambda))
             | ForeignTarget(_, _) => self
        }
    }
}

