data Location(file: String, line: Int, column: Int)

extend self: Location {
    show(): String {
        "in " + self.file + " " +
        "at line " + self.line +
        ", column " + self.column
    }
}

data CompileError(at: Location, message: String)
data CompileErrors(errors: List[CompileError])

data ModuleWithPackageInfo(
    packageInfo: Option[PackageInfo]
    module: Module
)

data PackageInfo(
    package: DPackage
    dependencies: List[DDependency]
    includes: List[DInclude]
)

// TODO rename to PackageKey
data PackagePair(
    group: String
    name: String
)

extend self: PackagePair {
    groupName(delimiter: String = ":"): String {
        self.group + delimiter + self.name
    }
    isCore(): Bool {
        self.group == "ff" &&
        self.name == "core"
    }
    moduleKey(packageRoot: Path, modulePath: Path): Option[ModuleKey] {
        let parts = modulePath.relativeListTo(packageRoot)
        let folders = parts.dropLast()
        parts.last().flatMap {_.removeLast(".ff")}.filter {_ =>
            folders.all {_.first().any {_.isAsciiLower()}} &&
            folders.all {_.all {c => c.isAsciiLower() || c.isAsciiDigit()}}
        }.map: name =>
        ModuleKey(self, folders, name)
    }
}

scriptPackagePair: PackagePair = PackagePair("script", "script")

data ModuleKey(
    packagePair: PackagePair
    folders: List[String]
    name: String
)

extend self: ModuleKey {
    // "folder/Module" as in: import folder/Module from group:package
    importName(): String {
        self.folders.map {_ + "/"}.join() + self.name
    }
    // "C:\myProject\folder\Module.ff"
    path(packageRoot: Path): Path {
        let parent = self.folders.foldLeft(packageRoot) {p, f => p.slash(f)}
        parent.slash(self.name + ".ff")
    }
    // "group:package/folder/Module"
    qualifiedName(): String {
        self.packagePair.groupName() + "/" + self.importName()
    }
    // "ff:core/List.List_map"
    qualifiedSymbol(symbol: String): String {
        self.qualifiedName() + "." + symbol
    }
}

data Module(
    moduleKey: ModuleKey
    imports: List[DImport]
    types: List[DType]
    traits: List[DTrait]
    instances: List[DInstance]
    extends: List[DExtend]
    lets: List[DLet]
    functions: List[DFunction]
)

data DPackage(
    at: Location
    packagePair: PackagePair
    version: Version
    targets: TargetNames
)
data DDependency(
    at: Location
    packagePair: PackagePair
    version: Version
    safety: Safety
    targets: TargetNames
)
data DInclude(
    at: Location
    path: String
)
data TargetNames(
    node: Bool
    browser: Bool
)
data DImport(
    at: Location
    alias: String
    moduleKey: ModuleKey
)
data DFunction(
    at: Location
    signature: Signature
    body: Lambda
)
data DLet(
    at: Location
    name: String
    variableType: Type
    value: Term
)
data DExtend(
    at: Location
    name: String
    generics: List[String]
    constraints: List[Constraint]
    type: Type
    methods: List[DFunction]
)
data DType(
    at: Location
    newtype: Bool
    data: Bool
    name: String
    generics: List[String]
    constraints: List[Constraint]
    commonFields: List[Parameter]
    variants: List[Variant]
)
data DTrait(
    at: Location
    name: String
    generics: List[String]
    constraints: List[Constraint]
    generatorParameters: List[Parameter]
    methods: List[Signature]
    methodDefaults: List[Pair[String, Lambda]]
    methodGenerators: List[Pair[String, Lambda]]
)
data DInstance(
    at: Location
    generics: List[String]
    constraints: List[Constraint]
    traitName: String
    typeArguments: List[Type]
    generatorArguments: List[Argument]
    methods: List[DFunction]
    derived: Bool
)

data Term(at: Location) {
    EString(value: String)
    EChar(value: String)
    EInt(value: String)
    EFloat(value: String)
    EVariable(name: String)
    ELambda(lambda: Lambda)
    EFunctions(functions: List[DFunction], body: Term)
    ELet(mutable: Bool, name: String, valueType: Type, value: Term, body: Term)
    ESequential(before: Term, after: Term)
    EAssign(operator: String, variable: String, value: Term)
    EAssignField(operator: String, record: Term, field: String, value: Term)
    EPipe(value: Term, effect: Type, function: Term)
    ECall(
        target: CallTarget
        effect: Type
        typeArguments: List[Type]
        arguments: List[Argument]
        dictionaries: List[Dictionary]
    )
    EList(elementType: Type, items: List[Pair[Term, Bool]])
    ECopy(name: String, record: Term, arguments: List[Field])
    EVariant(name: String, typeArguments: List[Type], arguments: Option[List[Argument]])
    EVariantIs(name: String, typeArguments: List[Type])
    ERecord(fields: List[Field])
    EField(newtype: Bool, record: Term, field: String)
    EWildcard(index: Int)
}

data CallTarget {
    DynamicCall(function: Term, tailCall: Bool)
    StaticCall(name: String, tailCall: Bool, instanceCall: Bool)
}

data MatchCase(
    at: Location
    patterns: List[MatchPattern]
    guards: List[MatchGuard]
    body: Term
)

data MatchPattern(at: Location) {
    PString(value: String)
    PInt(value: String)
    PChar(value: String)
    PVariable(name: Option[String])
    PVariant(name: String, patterns: List[MatchPattern])
    PVariantAs(name: String, variableAt: Location, variable: Option[String])
    PAlias(pattern: MatchPattern, variable: String)
}

data MatchGuard(
    at: Location
    term: Term
    pattern: MatchPattern
)

data Dictionary(
    moduleKey: ModuleKey
    traitName: String
    typeName: String
    dictionaries: List[Dictionary]
)

data Signature(
    at: Location
    name: String
    member: Bool
    generics: List[String]
    constraints: List[Constraint]
    parameters: List[Parameter]
    returnType: Type
    effect: Type
)

data Lambda(at: Location, effect: Type, cases: List[MatchCase])

data Variant(at: Location, name: String, fields: List[Parameter])

data Parameter(at: Location, mutable: Bool, name: String, valueType: Type, default: Option[Term])

data Argument(at: Location, name: Option[String], value: Term)

data Field(at: Location, name: String, value: Term)

data Constraint(at: Location, name: String, generics: List[Type])

data Type(at: Location) {
    TConstructor(name: String, generics: List[Type])
    TVariable(index: Int)
}

data Safety {
    Safe
    Unsafe
    Trusted
}

data Version(at: Location, major: Int, minor: Int, patch: Int)

extend self: Type {
    show(shownTypes: List[Type]): String {
        mutable seenTypes = Map.new()
        let typeNames = 'a'.codeUnit.to('z'.codeUnit).map {Char(_).toString()}.toStream()
        function shortenType(qualified: String): String {
            qualified.reverse().takeWhile {_ != '.'}.reverse()
        }
        function shortenTypes(types: List[Type]) {
            types.each {
                | TConstructor(_, name, typeArguments) =>
                    let shortenedName = shortenType(name)
                    seenTypes.get(shortenedName).{
                        | None => 
                            seenTypes = seenTypes.add(shortenedName, name)
                        | Some(qualified) => 
                            if(name != qualified) {
                                seenTypes = seenTypes.add(shortenedName, "")
                            }
                    }
                    shortenTypes(typeArguments)
                | TVariable(_, index) =>
                    if(!seenTypes.contains("$" + index)) {
                        seenTypes = seenTypes.add("$" + index, typeNames.next().else {"$" + index})
                    }
            }
        }
        shortenTypes([...shownTypes, self])
        function go(type: Type): String {
            type.{
                | TConstructor(at, name, [_, r]) {name.startsWith("Function$")} =>
                    "() => " + go(r)
                | TConstructor(at, name, [_, a, r]) {name.startsWith("Function$")} =>
                    go(a) + " => " + go(r)
                | TConstructor(at, name, [_, ...generics]) {name.startsWith("Function$")} =>
                    "(" + generics.dropLast().map {go(_)}.join(", ") + ") => " + go(generics.grabLast())
                | TConstructor(at, name, generics) {name.startsWith("Record$")} =>
                    let as = name.split('$').dropFirst().zip(generics)
                    "(" + as.map {| Pair(label, t) => label + ": " + go(t)}.join(", ") + ")"
                | TConstructor(at, name, generics) =>
                    let shortenedName = shortenType(name)
                    let chosenName = seenTypes.grab(shortenedName).{
                        | "" => name
                        | _ => shortenedName
                    }
                    let filteredGenerics = generics.filter {
                        // Hack to hide the effect, only works when the effect is Q$
                        | TConstructor(_, "Q$", _) => False
                        | _ => True
                    }
                    if(filteredGenerics.isEmpty()) {chosenName} else {
                        chosenName + "[" + filteredGenerics.map {go(_)}.join(", ") + "]"
                    }
                | TVariable(at, index) =>
                    seenTypes.grab("$" + index)
            }
        }
        go(self)
    }
}

catchMany[T](list: List[T], body: T => T): List[T] {
    let errors = Array.new()
    let result = catchManyInto(errors, list, body)
    errors.drain().{
        | [] => result
        | [Pair(_, error)] => error.rethrow()
        | allErrors => throw(CompileErrors(allErrors.map {_.first}))
    }
}

catchManyInto[T](errors: Array[Pair[CompileError, Error]], list: List[T], body: T => T): List[T] {
    let result = list.map {x =>
        try {
            body(x)
        } tryCatch {| CompileError(at, message), error =>
            errors.push(Pair(CompileError(at, message), error))
            x
        } catch {| CompileErrors(compileErrors), error =>
            compileErrors.each {compileError => 
                errors.push(Pair(compileError, error))
            }
            x
        }
    }
    if(errors.isEmpty()) {result} else {[]}
}
