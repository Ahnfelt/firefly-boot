import Syntax
import Unification
import Environment

class LspHook(
    at: Location
    definedAt: Location
    insertIdentifier: Bool
    trackSymbols: Bool
    arrayOfResults: Array[ResultHook]
)

disabled(): LspHook {
    new(None, None, False, False)
}

new(at: Option[Location], definedAt: Option[Location], insertIdentifier: Bool, trackSymbols: Bool): LspHook {
    LspHook( // Default dummy values instead of Option[Location] to speed up location hit check
        at = at.else {Location("^lsp", -7, -7)}
        definedAt = definedAt.else {Location("^lsp", -7, -7)}
        insertIdentifier = insertIdentifier
        trackSymbols = trackSymbols
        arrayOfResults = [].toArray()
    )
}

extend self: LspHook {
    isEnabled(): Bool {
        self.at.line != -7 || 
        self.definedAt.line != -7 ||
        self.trackSymbols
    }
    isAt(at: Location): Bool {
        self.at.line == at.line &&
        self.at.column == at.column &&
        self.at.file == at.file
    }
    isDefinedAt(at: Location): Bool {
        self.definedAt.line == at.line &&
        self.definedAt.column == at.column &&
        self.definedAt.file == at.file
    }
    emit(result: ResultHook) {
        self.arrayOfResults.push(result)
    }
    results(): List[ResultHook] {
        self.arrayOfResults.toList()
    }
}

strictlyBetween(afterAt: Location, beforeAt: Location, at: Location, extraColumns: Int): Bool {
    at.file == afterAt.file && (
        (at.line == afterAt.line && at.column > afterAt.column) ||
        at.line > afterAt.line
    ) && (
        (at.line == beforeAt.line && at.column < beforeAt.column + extraColumns) ||
        at.line < beforeAt.line
    )
}

data SymbolHook(
    qualifiedName: String
    usageAt: Location
    definedAt: Location
)

class Box[T](mutable value: T)

data DocumentSymbolKind {
    SLet(mutable: Bool)
    SFunction(member: Bool)
    SExtend
    STraitFunction
    STrait
    SInstance
    SVariant
    SType
    SParameter
}

class ResultHook {
    ParseSymbolBegin
    ParseSymbolEnd(
        name: String
        kind: DocumentSymbolKind
        selectionStart: Location
        selectionEnd: Location
        start: Location
        end: Location
    )
    ParseArgumentHook(
        callAt: Location
        argumentIndex: Int
        parameterName: Option[String]
    )
    ResolveSymbolHook(
        symbol: SymbolHook
        annotation: Option[Type]
        topLevel: Bool
    )
    ResolveTypeHook(
        types: Map[String, String]
        typeGenerics: Map[String, List[String]]
        symbol: SymbolHook
        explicitType: Type
    )
    ResolveConstraintHook(
        symbol: SymbolHook
        constrant: Constraint
    )
    ResolveSignatureHook(
        signature: Signature
        isInstanceMethod: Bool
        topLevel: Bool
    )
    ResolveVariantFieldHook(
        symbol: SymbolHook
        type: Type
        commonField: Bool
    )
    InferTermHook(
        unification: Unification
        environment: Environment
        expected: Type
        term: Term
        recordType: Box[Option[Type]]
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferLambdaStartHook(
        unification: Unification
        environment: Environment
        lambdaType: Type
    )
    InferSequentialStartHook(
        unification: Unification
        term: Term
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferFunctionDefinitionHook(
        unification: Unification
        environment: Environment
        definition: DFunction
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferPatternHook(
        unification: Unification
        environment: Environment
        expected: Type
        pattern: MatchPattern
    )
    InferParameterHook(
        unification: Unification
        environment: Environment
        parameter: Parameter
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferArgumentHook(
        unification: Unification
        environment: Environment
        isCopy: Bool
        callAt: Location
        callName: String
        parameters: List[Parameter]
        arguments: List[Argument]
        argumentIndex: Int
    )
    InferLookupHook(
        unification: Unification
        environment: Environment
        expected: Type
        selfVariable: Option[String]
        symbol: Box[SymbolHook]
        instantiated: Box[Option[Instantiated]]
    )
    InferRecordFieldHook(
        usageAt: Location
        unification: Unification
        environment: Environment
        expected: Type
        recordType: Type
        fieldName: String
    )
}

showHook(hook: ResultHook): String {
    | InferArgumentHook(unification, environment, isCopy, callAt, callName, parameters, arguments, argumentIndex) => "InferArgumentHook(...)"
    | InferFunctionDefinitionHook(unification, environment, definition, missing) => "InferFunctionDefinitionHook(...)"
    | InferLambdaStartHook(unification, environment, lambdaType) => "InferLambdaStartHook(...)"
    | InferLookupHook(unification, environment, expected, selfVariable, symbol, instantiated) => "InferLookupHook(...)"
    | InferParameterHook(unification, environment, parameter, missing) => "InferParameterHook(...)"
    | InferPatternHook(unification, environment, expected, pattern) => "InferPatternHook(...)"
    | InferRecordFieldHook(usageAt, unification, environment, expected, recordType, fieldName) => "InferRecordFieldHook(...)"
    | InferSequentialStartHook(unification, term, missing) => "InferSequentialStartHook(...)"
    | InferTermHook(unification, environment, expected, term, recordType, missing) => "InferTermHook(...)"
    | ParseArgumentHook(callAt, argumentIndex, parameterName) => "ParseArgumentHook(...)"
    | ParseSymbolBegin => "ParseSymbolBegin(...)"
    | ParseSymbolEnd(name, kind, selectionStart, selectionEnd, start, end) => "ParseSymbolEnd(...)"
    | ResolveConstraintHook(symbol, constrant) => "ResolveConstraintHook(...)"
    | ResolveSignatureHook(signature, _, _) => "ResolveSignatureHook(...)"
    | ResolveSymbolHook(symbol, annotation, _) => "ResolveSymbolHook(...)"
    | ResolveTypeHook(types, typeGenerics, symbol, explicitType) => "ResolveTypeHook(...)"
    | ResolveVariantFieldHook(symbol, type, commonField) => "ResolveVariantFieldHook(...)"
}