import Syntax
import Unification
import Environment

class LspHook(
    at: Location
    definedAt: Location
    inferTypes: Bool
    stackOfResults: Stack[ResultHook]
)

disabled(): LspHook {
    make(None, None, False)
}

make(at: Option[Location], definedAt: Option[Location], inferTypes: Bool): LspHook {
    LspHook( // Default dummy values instead of Option[Location] to speed up location hit check
        at = at.else {Location("^lsp", -7, -7)}
        definedAt = definedAt.else {Location("^lsp", -7, -7)}
        inferTypes = inferTypes
        stackOfResults = [].toStack()
    )
}

extend self: LspHook {
    isEnabled(): Bool {
        self.at.line != -7 || 
        self.definedAt.line != -7
    }
    isAt(at: Location): Bool {
        self.at.line == at.line &&
        self.at.column == at.column &&
        self.at.file == at.file
    }
    isDefinedAt(at: Location): Bool {
        self.definedAt.line == at.line &&
        self.definedAt.column == at.column &&
        self.definedAt.file == at.file
    }
    emit(result: ResultHook, replace: Bool = False) {
        if(replace) {self.stackOfResults.pop()}
        self.stackOfResults.push(result)
    }
    results(): List[ResultHook] {
        self.stackOfResults.toList()
    }
}

data SymbolHook(
    qualifiedName: String
    usageAt: Location
    definedAt: Location
)

class ResultHook {
    ResolveSymbolHook(
        symbol: SymbolHook
        annotation: Option[Type]
    )
    ResolveTypeHook(
        symbol: SymbolHook
    )
    InferTermHook(
        unification: Unification
        environment: Environment
        expected: Type
        term: Term
        recordType: Option[Type]
    )
    InferPatternHook(
        unification: Unification
        environment: Environment
        expected: Type
        pattern: MatchPattern
    )
    InferParameterHook(
        unification: Unification
        environment: Environment
        parameter: Parameter
    )
    InferArgumentHook(
        unification: Unification
        environment: Environment
        isCopy: Bool
        callAt: Location
        callName: String
        parameters: List[Parameter]
        arguments: List[Argument]
        argumentIndex: Int
    )
    InferLookupHook(
        unification: Unification
        environment: Environment
        symbol: SymbolHook
        instantiated: Instantiated
    )
}
