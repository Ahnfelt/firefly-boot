import Syntax
import Unification
import Environment

class LspHook(
    at: Location
    definedAt: Location
    stackOfResults: Stack[ResultHook]
)

disabled(): LspHook {
    make(None, None)
}

make(at: Option[Location], definedAt: Option[Location]): LspHook {
    LspHook( // Default dummy values instead of Option[Location] to speed up location hit check
        at = at.else {Location("^lsp", -7, -7)}
        definedAt = definedAt.else {Location("^lsp", -7, -7)}
        stackOfResults = [].toStack()
    )
}

extend self: LspHook {
    isEnabled(): Bool {
        self.at.line != -7 || 
        self.definedAt.line != -7
    }
    isAt(at: Location): Bool {
        self.at.line == at.line &&
        self.at.column == at.column &&
        self.at.file == at.file
    }
    isDefinedAt(at: Location): Bool {
        self.definedAt.line == at.line &&
        self.definedAt.column == at.column &&
        self.definedAt.file == at.file
    }
    emit(result: ResultHook) {
        self.stackOfResults.push(result)
    }
    results(): List[ResultHook] {
        self.stackOfResults.toList()
    }
}

data SymbolHook(
    qualifiedName: String
    usageAt: Location
    definedAt: Location
)

class Box[T](mutable value: T)

class ResultHook {
    ResolveSymbolHook(
        symbol: SymbolHook
        annotation: Option[Type]
    )
    ResolveTypeHook(
        types: Map[String, String]
        typeGenerics: Map[String, List[String]]
        symbol: SymbolHook
        explicitType: Type
    )
    ResolveConstraintHook(
        symbol: SymbolHook
        constrant: Constraint
    )
    InferTermHook(
        unification: Unification
        environment: Environment
        expected: Type
        term: Term
        recordType: Box[Option[Type]]
        missingVariables: StringMap[Type]
    )
    InferLambdaStartHook(
        unification: Unification
        environment: Environment
        lambdaType: Type
    )
    InferPatternHook(
        unification: Unification
        environment: Environment
        expected: Type
        pattern: MatchPattern
    )
    InferParameterHook(
        unification: Unification
        environment: Environment
        parameter: Parameter
    )
    InferArgumentHook(
        unification: Unification
        environment: Environment
        isCopy: Bool
        callAt: Location
        callName: String
        parameters: List[Parameter]
        arguments: List[Argument]
        argumentIndex: Int
    )
    InferLookupHook(
        unification: Unification
        environment: Environment
        expected: Type
        symbol: Box[SymbolHook]
        instantiated: Box[Option[Instantiated]]
    )
    InferRecordFieldHook(
        unification: Unification
        environment: Environment
        expected: Type
        recordType: Type
        fieldName: String
    )
}

extend self: ResultHook {
    debugShow(): String {
        self.{
            | InferArgumentHook(unification, environment, isCopy, callAt, callName, parameters, arguments, argumentIndex) => 
                "InferArgumentHook(isCopy="+Show.show(isCopy)+", callAt="+Show.show(callAt)+", callName="+Show.show(callName)+", parameters="+Show.show(parameters)+", arguments="+Show.show(arguments)+", argumentIndex="+Show.show(argumentIndex)+")"
            | InferLambdaStartHook(unification, environment, lambdaType) => 
                "InferLambdaStartHook(unification, environment, lambdaType="+Show.show(lambdaType)+")"
            | InferLookupHook(unification, environment, expected, symbol, instantiated) => 
                "InferLookupHook(expected="+Show.show(expected)+", symbol="+Show.show(symbol.value)+", instantiated="+Show.show(instantiated.value)+")"
            | InferParameterHook(unification, environment, parameter) => 
                "InferParameterHook(unification, environment, parameter="+Show.show(parameter)+")"
            | InferPatternHook(unification, environment, expected, pattern) => 
                "InferPatternHook(unification, environment, expected="+Show.show(expected)+", pattern="+Show.show(pattern)+")"
            | InferRecordFieldHook(unification, environment, expected, recordType, fieldName) => 
                "InferRecordFieldHook(unification, environment, expected="+Show.show(expected)+", recordType="+Show.show(recordType)+", fieldName="+Show.show(fieldName)+")"
            | InferTermHook(unification, environment, expected, term, recordType, missingVariables) => 
                "InferTermHook(unification, environment, expected="+Show.show(expected)+", term="+Show.show(term)+", recordType="+Show.show(recordType.value)+", missingVariables=...)"
            | ResolveConstraintHook(symbol, constrant) => 
                "ResolveConstraintHook(symbol="+Show.show(symbol)+", constrant="+Show.show(constrant)+")"
            | ResolveSymbolHook(symbol, annotation) => 
                "ResolveSymbolHook(symbol="+Show.show(symbol)+", annotation="+Show.show(annotation)+")"
            | ResolveTypeHook(types, typeGenerics, symbol, explicitType) => 
                "ResolveTypeHook(types, typeGenerics, symbol="+Show.show(symbol)+", explicitType="+Show.show(explicitType)+")"
        }
    }
}