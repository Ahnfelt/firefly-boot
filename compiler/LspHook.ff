import Syntax
import Unification
import Environment

class LspHook(
    at: Location
    definedAt: Location
    insertIdentifier: Bool
    stackOfResults: Stack[ResultHook]
)

disabled(): LspHook {
    make(None, None, False)
}

make(at: Option[Location], definedAt: Option[Location], insertIdentifier: Bool): LspHook {
    LspHook( // Default dummy values instead of Option[Location] to speed up location hit check
        at = at.else {Location("^lsp", -7, -7)}
        definedAt = definedAt.else {Location("^lsp", -7, -7)}
        insertIdentifier = insertIdentifier
        stackOfResults = [].toStack()
    )
}

extend self: LspHook {
    isEnabled(): Bool {
        self.at.line != -7 || 
        self.definedAt.line != -7
    }
    isAt(at: Location): Bool {
        self.at.line == at.line &&
        self.at.column == at.column &&
        self.at.file == at.file
    }
    isDefinedAt(at: Location): Bool {
        self.definedAt.line == at.line &&
        self.definedAt.column == at.column &&
        self.definedAt.file == at.file
    }
    emit(result: ResultHook) {
        self.stackOfResults.push(result)
    }
    results(): List[ResultHook] {
        self.stackOfResults.toList()
    }
}

strictlyBetween(afterAt: Location, beforeAt: Location, at: Location, extraColumns: Int): Bool {
    at.file == afterAt.file && (
        (at.line == afterAt.line && at.column > afterAt.column) ||
        at.line > afterAt.line
    ) && (
        (at.line == beforeAt.line && at.column < beforeAt.column + extraColumns) ||
        at.line < beforeAt.line
    )
}

data SymbolHook(
    qualifiedName: String
    usageAt: Location
    definedAt: Location
)

class Box[T](mutable value: T)

class ResultHook {
    ParseArgumentHook(
        callAt: Location
        argumentIndex: Int
    )
    ResolveSymbolHook(
        symbol: SymbolHook
        annotation: Option[Type]
    )
    ResolveTypeHook(
        types: Map[String, String]
        typeGenerics: Map[String, List[String]]
        symbol: SymbolHook
        explicitType: Type
    )
    ResolveConstraintHook(
        symbol: SymbolHook
        constrant: Constraint
    )
    ResolveSignatureHook(
        signature: Signature
    )
    ResolveVariantFieldHook(
        symbol: SymbolHook
        type: Type
        commonField: Bool
    )
    InferTermHook(
        unification: Unification
        environment: Environment
        expected: Type
        term: Term
        recordType: Box[Option[Type]]
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferLambdaStartHook(
        unification: Unification
        environment: Environment
        lambdaType: Type
    )
    InferSequentialStartHook(
        unification: Unification
        term: Term
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferFunctionDefinitionHook(
        unification: Unification
        environment: Environment
        definition: DFunction
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferPatternHook(
        unification: Unification
        environment: Environment
        expected: Type
        pattern: MatchPattern
    )
    InferParameterHook(
        unification: Unification
        environment: Environment
        parameter: Parameter
        missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]
    )
    InferArgumentHook(
        unification: Unification
        environment: Environment
        isCopy: Bool
        callAt: Location
        callName: String
        parameters: List[Parameter]
        arguments: List[Argument]
        argumentIndex: Int
    )
    InferLookupHook(
        unification: Unification
        environment: Environment
        expected: Type
        selfVariable: Option[String]
        symbol: Box[SymbolHook]
        instantiated: Box[Option[Instantiated]]
    )
    InferRecordFieldHook(
        unification: Unification
        environment: Environment
        expected: Type
        recordType: Type
        fieldName: String
    )
}