import Syntax
import Inference

class Unification(
    mutable substitution: Map[Int, Type]
    mutable constraints: Map[Int, Map[String, ConstraintGenerics]]
    mutable nextUnificationVariableIndex: Int
    mutable instances: Map[InstanceKey, InstanceValue]
    mutable affects: Map[Int, Set[Int]]
    attemptFixes: Bool
)

data ConstraintGenerics(at: Location, generics: List[Type])

data InstanceKey(traitName: String, typeName: String)

data InstanceValue(
    generics: List[String]
    constraints: List[Constraint]
    packagePair: PackagePair
    moduleName: String
    traitName: String
    typeArguments: List[Type]
)

fail[T](at: Location, message: String): T {
    throw(CompileError(at, message))
}

make(modules: List[Module], attemptFixes: Bool): Unification {

    Unification(
        Map.empty()
        Map.empty()
        3 // To avoid collision with the parser and resolver
        modules.flatMap {module =>
            let moduleName = module.file.dropLast(".ff".size())
            module.instances.map {definition =>
                let typeName = definition.typeArguments.grabFirst().{
                    | TConstructor(_, name, _) => name
                    | TVariable(_, i) => fail(definition.at, "Unexpected unification variable: $" + i)
                }
                Pair(
                    InstanceKey(definition.traitName, typeName)
                    InstanceValue(
                        generics = definition.generics
                        constraints = definition.constraints
                        packagePair = module.packagePair
                        moduleName = moduleName
                        traitName = definition.traitName
                        typeArguments = definition.typeArguments
                    )
                )
            }
        }.toMap()
        [].toMap()
        attemptFixes
    )
}

extend self: Unification {

    withLocalInstances[T](instances: Map[InstanceKey, InstanceValue], body: () => T): T {
        let oldInstances = self.instances
        self.instances = self.instances.addAll(instances)
        try {
            body()
        } finally {
            self.instances = oldInstances
        } grab()
    }

    freshUnificationVariable(at: Location): Type {
        let result = TVariable(at, self.nextUnificationVariableIndex)
        self.nextUnificationVariableIndex += 3
        result
    }

    instantiate(instantiation: Map[String, Type], type: Type): Type {
        | _, TConstructor(at, name, []) =>
            instantiation.get(name).{
                | Some(t) => t
                | None => type
            }
        | _, TConstructor(at, name, generics) =>
            TConstructor(at, name, generics.map {self.instantiate(instantiation, _)})
        | _, TVariable(_, i) {self.get(i) | Some(t)} =>
            self.instantiate(instantiation, t)
        | _, TVariable(_, i) =>
            type
    }
    
    instantiateConstraint(instantiation: Map[String, Type], constraint: Constraint): Constraint {
        | _, Constraint(at, name, generics) =>
            Constraint(at, name, generics.map {self.instantiate(instantiation, _)})
    }

    constrain(at: Location, type: Type, constraintName: String, generics: List[Type]): Unit {
        type.{
            | TVariable(_, i) {self.get(i) | Some(t)} =>
                self.constrain(at, t, constraintName, generics)
            | TVariable(_, i) =>
                self.constraints.get(i).{
                    | None =>
                        self.constraints = self.constraints.add(
                            i, [Pair(constraintName, ConstraintGenerics(at, generics))].toMap()
                        )
                    | Some(map) =>
                        map.get(constraintName).{
                            | None =>
                                let newMap = map.add(constraintName, ConstraintGenerics(at, generics))
                                self.constraints = self.constraints.add(i, newMap)
                            | Some(ConstraintGenerics(_, generics2)) =>
                                generics.zip(generics2).each {| Pair(t1, t2) => self.unify(at, t1, t2) }
                        }
                }
            | TConstructor(_, name, generics2) =>
                self.instances.get(InstanceKey(constraintName, name)).{
                    | None =>
                        let g1 = if(generics.isEmpty()) {""} else {"[...]"}
                        let g2 = if(generics2.isEmpty()) {""} else {"[...]"}
                        if(!self.attemptFixes) {
                            throw(CompileError(at, "No such instance: " + name + g2 + ": " + constraintName + g1))
                        }
                    | Some(definition) =>
                        let unificationVariables = definition.generics.map {_ => self.freshUnificationVariable(at) }
                        let instantiation = definition.generics.zip(unificationVariables).toMap()
                        let traitType1 = self.instantiate(instantiation,
                            TConstructor(at, definition.traitName, definition.typeArguments)
                        )
                        let traitType2 = TConstructor(at, constraintName, [type, ...generics])
                        self.unify(at, traitType1, traitType2)
                        definition.constraints.each {constraint =>
                            self.instantiateConstraint(instantiation, constraint).{
                                | Constraint(_, constraintName, newGenerics) =>
                                    self.constrain(at, newGenerics.grabFirst(), constraintName, newGenerics.dropFirst())
                            }
                        }
                }
        }
    }

    get(index: Int): Option[Type] {
        self.substitution.get(index).map {
            | TVariable(_, i) {self.substitution.get(i) | Some(t)} =>
                self.substitution = self.substitution.add(index, t)
                t
            | t => t
        }
    }

    substitute(type: Type): Type {
        | TVariable(_, i) {self.get(i) | Some(t)} => self.substitute(t)
        | TVariable(_, _) => type
        | TConstructor t => t.TConstructor(generics = t.generics.map {t => self.substitute(t)})
    }

    unify(at: Location, t1: Type, t2: Type): Unit {
        | _, TVariable(_, i1), TVariable(_, i2) {i1 == i2} =>
        | _, TVariable(_, i), _ {self.get(i) | Some(t)} => self.unify(at, t, t2)
        | _, _, TVariable(_, i) {self.get(i) | Some(t)} => self.unify(at, t1, t)
        | _, TVariable(_, i), _ => self.bind(at, i, t2)
        | _, _, TVariable(_, i) => self.bind(at, i, t1)
        | _, TConstructor(_, name1, generics1), TConstructor(_, name2, generics2) =>
            if(name1 != name2 || generics1.size() != generics2.size()) {
                if(!self.attemptFixes) {
                    let t3 = self.substitute(t1)
                    let t4 = self.substitute(t2)
                    throw(CompileError(at
                        "Type mismatch: " + t3.show([t3, t4]) + " vs. " + t4.show([t3, t4])
                    ))
                } elseIf {name1.startsWith("Function$") && name2.startsWith("Function$")} {
                    generics1.dropLast().zip(generics2.dropLast()).each {| Pair(t3, t4) => self.unify(at, t3, t4)}
                    generics1.takeLast().zip(generics2.takeLast()).each {| Pair(t3, t4) => self.unify(at, t3, t4)}
                }
            }
            generics1.zip(generics2).each {| Pair(t1, t2) => self.unify(at, t1, t2) }
    }

    bind(at: Location, index: Int, type: Type): Unit {
        if(self.occursIn(index, type)) {
            let t = self.substitute(type)
            throw(CompileError(at, "Infinite type: " + TVariable(at, index).show([t]) + " = " + t.show([])))
        }
        self.substitution = self.substitution.add(index, type)
        self.constraints.get(index).each {map =>
            self.constraints = self.constraints.remove(index)
            map.pairs().each {| Pair(name, ConstraintGenerics(at2, generics)) =>
                self.constrain(at2, type, name, generics)
            }
        }
        self.affects.get(index).each {affected =>
            self.affects.remove(index)
            affected.each {i =>
                self.affect(at, type, TVariable(at, i))
            }
        }
    }

    affect(at: Location, source: Type, target: Type): Unit {
        Pair(self.substitute(source), self.substitute(target)).{
            | Pair(TVariable(_, i1), TVariable(_, i2)) =>
                let is = self.affects.get(i1).else([].toSet)
                self.affects = self.affects.add(i1, is.add(i2))
            | Pair(_, TConstructor(_, "Q$", _)) =>
            | Pair(TConstructor(_, "ff:core/Nothing.Nothing", _), _) =>
            | Pair(t1, t2) =>
                self.unify(at, t1, t2)
        }
    }

    occursIn(index: Int, t: Type): Bool {
        | _, TVariable(_, i) {self.get(i) | Some(type)} => self.occursIn(index, type)
        | _, TVariable(_, i) => i == index
        | _, TConstructor(_, _, generics) => generics.any {t => self.occursIn(index, t)}
    }
    
}
