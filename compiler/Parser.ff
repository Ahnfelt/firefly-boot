type Parser(
    file: String,
    tokens: Array[Token],
    end: Token,
    mutable offset: Int
)

type Poly(generics: List[String], constraints: List[Constraint])

Parser_of(file: String, tokens: Array[Token]): Parser {
    Parser(
        file,
        tokens,
        tokens.last,
        0
    )
}

Parser_fail[T](self: Parser, at: Location, message: String): T {
    panic(message + " " + at.show)
}

Parser_current(self: Parser): Token {
    if(self.offset < self.tokens.length) { self.tokens(self.offset) } else { self.end }
}

Parser_ahead(self: Parser): Token {
    if(self.offset + 1 < self.tokens.length) { self.tokens(self.offset + 1) } else { self.end }
}

Parser_aheadAhead(self: Parser): Token {
    if(self.offset + 2 < self.tokens.length) { self.tokens(self.offset + 2) } else { self.end }
}

Parser_skip(self: Parser, kind: TokenKind): Token {
    let c = self.current
    if(c.kind != kind) {
        self.fail(c.at, "Expected " + kind + ", got " + c.raw)
    }
    self.offset += 1
    c
}

Parser_rawSkip(self: Parser, kind: TokenKind, value: String): Token {
    let c = self.current
    if(c.kind != kind) {
        self.fail(c.at, "Expected " + kind + " " + value + ", got " + c.raw)
    }
    if(!c.rawIs(value)) {
        self.fail(c.at, "Expected " + value + " got " + c.raw)
    }
    self.offset += 1
    c
}

Parser_currentIsSeparator(self: Parser, kind: TokenKind): Bool {
    self.current.is(kind) || self.current.is(LSeparator)
}

Parser_skipSeparator(self: Parser, kind: TokenKind): Unit {
    if(self.current.is(LSeparator)) {
        self.skip(LSeparator)
    } else {
        self.skip(kind)
    }
}

Parser_parseModule(self: Parser): Module {
    mutable result = Module(self.file, List(), List(), List(), List(), List())
    while {!self.current.is(LEnd)} {
        if(self.current.is(LLower) && (self.ahead.is(LAssign) || self.ahead.is(LColon))) {
            result = result.Module(lets = self.parseLetDefinition() :: result.lets)
        } elseIf {self.current.is(LNamespace) && self.ahead.is(LLower) && self.aheadAhead.is2(LAssign, LColon)} {
            let namespace = Some(self.skip(LNamespace).raw)
            result = result.Module(lets = self.parseLetDefinition(namespace) :: result.lets)
        } elseIf {self.current.is(LLower) && self.ahead.is(LBracketLeft)} {
            result = result.Module(functions = self.parseFunctionDefinition() :: result.functions)
        } elseIf {self.current.is(LNamespace) && self.ahead.is(LLower) && self.aheadAhead.is(LBracketLeft)} {
            let namespace = Some(self.skip(LNamespace).raw)
            result = result.Module(functions = self.parseFunctionDefinition(namespace) :: result.functions)
        } elseIf {self.current.is(LKeyword) && self.current.rawIs("trait")} {
            result = result.Module(traits = self.parseTraitDefinition() :: result.traits)
        } elseIf {self.current.is(LKeyword) && self.current.rawIs("instance")} {
            result = result.Module(instances = self.parseInstanceDefinition() :: result.instances)
        } elseIf {self.current.is(LKeyword) && self.current.rawIs("type")} {
            result = result.Module(types = self.parseTypeDefinition() :: result.types)
        } else {
            self.skip(LEnd)
        }
        if(!self.current.is(LEnd)) { self.skipSeparator(LSemicolon) }
    }
    Module(
        file = self.file,
        lets = result.lets.reverse,
        functions = result.functions.reverse,
        types = result.types.reverse,
        traits = result.traits.reverse,
        instances = result.instances.reverse
    )
}

Parser_parseLetDefinition(scopeType: Option[String] = None): DLet {
    let nameToken = self.skip(LLower)
    let variableType = if(self.current.is(LColon)) {
        self.skip(LColon)
        self.parseType()
    } else {Type(nameToken.at, "?", List())}
    self.skip(LAssign)
    let value = self.parseTerm()
    DLet(nameToken.at, scopeType, nameToken.raw, variableType, value)
}

Parser_parseFunctionDefinition(scopeType: Option[String] = None): DFunction {
    let signature = self.parseSignature(scopeType)
    let body = self.parseLambda(signature.parameters.size)
    DFunction(
        signature.at,
        scopeType,
        signature,
        body
    )
}

Parser_parseSignature(scopeType: Option[String] = None): Signature {
    let nameToken = self.skip(LLower)
    let poly = if(self.current.rawIs("[")) {self.parseTypeParameters()} else {Poly(List(), List())}
    let parameters = self.parseFunctionParameters()
    let returnType = self.parseOptionalType()
    Signature(nameToken.at, nameToken.raw, poly.generics, poly.constraints, parameters, returnType)
}

Parser_parseTraitDefinition(self: Parser): DTrait {
    self.skip(LKeyword, "trait")
    let nameToken = self.skip(LUpper)
    let poly = if(!self.current.rawIs("[")) {Poly(List(), List())} else {self.parseTypeParameters()}
    let generatorParameters = if(!self.current.rawIs("(")) {List()} else {self.parseFunctionParameters()}
    mutable methodGenerators = List[Pair[String, Term]]()
    mutable methodDefaults = List[Pair[String, Term]]()
    let methodSignatures = if(!self.current.rawIs("{")) {List()} else {
        mutable signatures = List[Signature]()
        self.skip(LBracketLeft, "{")
        while {!self.current.is(LBracketRight)} {
            let signature = self.parseSignature(Some(nameToken.raw))
            signatures ::= signature
            if(self.current.rawIs("{")) {
                let generator = self.ahead.is(LKeyword) && self.ahead.rawIs("generate")
                let body = self.parseLambda(signature.parameters.size, ignoreGenerateKeyword = true)
                if(generator) {
                    methodGenerators ::= Pair(signature.name, body)
                } else {
                    methodDefaults ::= Pair(signature.name, body)
                }
            }
            if(!self.current.is(LBracketRight)) { self.skipSeparator(LSemicolon) }
        }
        self.skip(LBracketRight, "}")
        signatures
    }
    DTrait(
        nameToken.at,
        nameToken.raw,
        generics,
        constraints,
        generatorParameters,
        methodSignatures.reverse,
        methodDefaults.reverse,
        methodGenerators.reverse
    )
}

Parser_parseInstanceDefinition(self: Parser): DInstance {
    self.skip(LKeyword, "instance")
    let nameToken = self.skip(LUpper)
    mutable typeArguments = List[Type]()
    self.skip(LBracketLeft, "[")
    let token = self.skip(LUpper)
    let poly = if(!self.current.rawIs("[")) {Poly(List(), List())} else {self.parseTypeParameters()}
    typeArguments ::= Type(token.at, token.raw, poly.typeParameters.map{Type(token.at, _, List())})
    while {self.current.is(LComma)} {
        self.skip(LComma)
        typeArguments ::= self.parseType()
    }
    self.skip(LBracketRight, "]")
    let generatorArguments = if(!self.current.rawIs("(")) {List()} else {self.parseFunctionArguments()}
    let methods = if(!self.current.rawIs("{")) {List()} else {
        mutable definitions = List[DFunction]()
        self.skip(LBracketLeft, "{")
        while {!self.current.is(LBracketRight)} {
            definitions ::= self.parseFunctionDefinition(Some(nameToken.raw))
            if(!self.current.is(LBracketRight)) {self.skipSeparator(LSemicolon)}
        }
        self.skip(LBracketRight, "}")
        definitions
    }
    let traitType = Type(nameToken.at, nameToken.raw, typeArguments.reverse)
    DInstance(nameToken.at, typeParameters, constraints, traitType, generatorArguments, methods)
}

/*
Parser_parseTypeDefinition(self: Parser): DType {
    self.skip(LKeyword, "type")
    let nameToken = self.skip(LUpper)
    let (generics, constraints) = if(!self.current.rawIs("[")) List() -> List() else self.parseTypeParameters()
    let commonFields = if(!self.current.rawIs("(")) List() else self.parseFunctionParameters(allowMutable = true)
    let variants = if(!self.current.rawIs("{")) List(Variant(nameToken.at, nameToken.raw, List())) else {
        self.skip(LBracketLeft, "{")
        mutable reverseVariants = List[Variant]()
        while {!self.current.is(LBracketRight)} {
            let variantNameToken = self.skip(LUpper)
            let variantFields = if(!self.current.rawIs("(")) List() else self.parseFunctionParameters(allowMutable = true)
            reverseVariants ::= Variant(variantNameToken.at, variantNameToken.raw, variantFields)
            if(!self.current.is(LBracketRight)) self.skipSeparator(LSemicolon)
        }
        self.skip(LBracketRight, "}")
        reverseVariants.reverse
    }
    DType(nameToken.at, nameToken.raw, generics, constraints, commonFields, variants)
}

Parser_parseTypeParameters(self: Parser): Poly {
    self.skip(LBracketLeft, "[")
    mutable parameters = List[String]()
    mutable constraints = List[Constraint]()
    while {!self.current.is(LBracketRight) && !self.current.is(LSemicolon)} {
        if(self.ahead.is(LBracketLeft)) {
            constraints ::= Constraint(parseType())
        } else {
            let parameterNameToken = self.skip(LUpper)
            parameters ::= parameterNameToken.raw
            while {self.current.is(LColon)} {
                self.skip(LColon)
                let t = self.parseType()
                constraints ::= Constraint(t.copy(generics =
                    Type(t.at, parameterNameToken.raw, List()) :: t.generics
                ))
            }
        }
        if(!self.current.is(LBracketRight)) { self.skip(LComma) }
    }
    if(self.current.is(LSemicolon)) {
        self.skip(LSemicolon)
        while {!self.current.is(LBracketRight)} {
            constraints ::= Constraint(parseType())
            if(!self.current.is(LBracketRight)) { self.skip(LComma) }
        }
    }
    self.skip(LBracketRight, "]")
    Poly(parameters.reverse, constraints.reverse)
}

Parser_parseTypeArguments(parenthesis: Boolean = false): List[Type] {
    self.skip(LBracketLeft, if(parenthesis) "(" else "[")
    mutable types = List[Type]()
    while {!self.current.is(LBracketRight)} {
        types ::= self.parseType()
        if(!self.current.is(LBracketRight)) self.skip(LComma)
    }
    self.skip(LBracketRight, if(parenthesis) ")" else "]")
    types.reverse
}

Parser_parseFunctionParameters(allowMutable: Boolean = false): List[Parameter] {
    mutable parameters = List[Parameter]()
    self.skip(LBracketLeft, "(")
    while {!self.current.is(LBracketRight)} {
        let mutable = allowMutable && self.current.is(LKeyword) && self.current.rawIs("mutable")
        if(mutable) self.skip(LKeyword)
        let parameterNameToken = self.skip(LLower)
        let parameterType = self.parseOptionalType()
        let default = if(!self.current.is(LAssign)) None else Some {
            self.skip(LAssign)
            self.parseTerm()
        }
        parameters ::= Parameter(parameterNameToken.at, mutable, parameterNameToken.raw, parameterType, default)
        if(!self.current.is(LBracketRight)) self.skipSeparator(LComma)
    }
    self.skip(LBracketRight, ")")
    parameters.reverse
}

Parser_parseFunctionArguments(self: Parser): List[Argument] {
    self.skip(LBracketLeft, "(")
    mutable arguments = List[Argument]()
    while {!self.current.is(LBracketRight)} {
        let nameToken = if(self.current.is(LLower) && self.ahead.is(LAssign)) {
            let token = self.skip(LLower)
            self.skip(LAssign)
            Some(token)
        } else {None}
        val value = self.parseTerm()
        arguments ::= Argument(nameToken.map{_.at}.getOrElse(value.at), nameToken.map{_.raw}, value)
        if(!self.current.is(LBracketRight)) {self.skipSeparator(LComma)}
    }
    self.skip(LBracketRight, ")")
    arguments.reverse
}

Parser_parseOptionalType(self: Parser): Type {
    let token = current
    if(token.is(LColon)) {
        self.skip(LColon)
        self.parseType()
    } else Type(token.at, "?", List())
}

Parser_parseLambda(
    self: Parser,
    defaultParameterCount: Int = 0,
    ignoreGenerateKeyword: Boolean = false,
    allowColon: Boolean = false
): ELambda {
    let colon = allowColon && self.current.is(LColon)
    let token = if(colon) self.skip(LColon) else self.skip(LBracketLeft, "{")
    if(ignoreGenerateKeyword && self.current.is(LKeyword) && self.current.rawIs("generate")) self.skip(LKeyword)
    let result = if(self.current.is(LPipe)) {
        mutable cases = List[MatchCase]()
        while {self.current.is(LPipe)} {
            cases ::= self.parseCase()
        }
        cases.reverse
    } elseIf {self.current.is(LLower) && self.ahead.is(LComma, LArrowThick)} {
        mutable parameters = List[MatchPattern]()
        while {!self.current.is(LArrowThick)} {
            let parameterToken = self.skip(LLower)
            parameters ::= PVariable(parameterToken.at, Some(parameterToken.raw))
            if(!self.current.is(LArrowThick)) self.skip(LComma)
        }
        self.skip(LArrowThick)
        let term = self.parseStatements()
        List(MatchCase(token.at, parameters.reverse, term))
    } else {
        let term = self.parseStatements()
        let wildcards = new Wildcards()
        let e = wildcards.fixWildcards(term)
        let arguments = if(wildcards.seenWildcards != 0) {
            1.to(wildcards.seenWildcards).toList.map(i => PVariable(token.at, Some("_w" + i)))
        } else {
            1.to(defaultParameterCount).toList.map(_ => PVariable(token.at, None))
        }
        List(MatchCase(token.at, arguments, e))
    }
    if(!colon) self.skip(LBracketRight, "}")
    ELambda(token.at, result)
}

Parser_parseCase(self: Parser): MatchCase {
    let token = self.skip(LPipe)
    mutable patterns = List[MatchPattern]()
    while {!self.current.is(LArrowThick)} {
        patterns ::= self.parsePattern()
        if(!self.current.is(LArrowThick)) self.skip(LComma)
    }
    self.skip(LArrowThick)
    let body = self.parseStatements()
    MatchCase(token.at, patterns.reverse, body)
}

Parser_parsePattern(self: Parser): MatchPattern {
    if(self.current.is(LWildcard)) {
        let token = self.skip(LWildcard)
        PVariable(token.at, None)
    } elseIf {self.current.is(LLower)} {
        let token = self.skip(LLower)
        PVariable(token.at, Some(token.raw))
    } elseIf {self.current.rawIs("(")} {
        let at = self.current.at
        let (fields, fieldPatterns) = self.parseRecordPattern().unzip
        PVariant(at, "Record$" + fields.mkString("$"), fieldPatterns)
    } else {
        let token = self.skip(LUpper)
        if(self.current.rawIs("(")) {
            mutable patterns = List[MatchPattern]()
            self.skip(LBracketLeft, "(")
            while {!self.current.is(LBracketRight)} {
                patterns ::= self.parsePattern()
                if(!self.current.is(LBracketRight)) self.skip(LComma)
            }
            self.skip(LBracketRight, ")")
            PVariant(token.at, token.raw, patterns.reverse)
        } else {
            if(self.current.is(LLower)) {
                let asToken = self.skip(LLower)
                PVariantAs(token.at, token.raw, asToken.raw)
            } else {
                PVariant(token.at, token.raw, List())
            }
        }
    }
}

Parser_parseType(self: Parser): Type {
    let leftTypes = if(self.current.rawIs("(") && self.ahead.is(LLower) && self.aheadAhead.is(LColon)) {
        let at = self.current.at
        let (fields, fieldTypes) = self.parseRecordType().unzip
        List(Type(at, "Record$" + fields.mkString("$"), fieldTypes))
    } elseIf {self.current.rawIs("(")} {
        self.parseTypeArguments(parenthesis = true)
    } else {
        let namespace = if(self.current.is(LNamespace)) self.skip(LNamespace).raw else ""
        let token = self.skip(LUpper)
        let arguments = if(!self.current.rawIs("[")) List() else self.parseTypeArguments()
        List(Type(token.at, namespace + token.raw, arguments))
    }
    if(!self.current.is(LArrowThick) && leftTypes.size == 1) leftTypes.head else {
        let arrowToken = self.skip(LArrowThick)
        let rightType = self.parseType()
        Type(arrowToken.at, "Function$" + leftTypes.size, leftTypes ++ List(rightType))
    }
}

Parser_parseStatements(self: Parser): Term =
    if(self.current.is(LBracketRight, LPipe)) EVariant(self.current.at, "Unit", List(), List()) else {
        mutable result = self.parseStatement()
        while {currentIsSeparator(LSemicolon)} {
            let token = self.skipSeparator(LSemicolon)
            result = ESequential(token.at, result, self.parseStatement())
        }
        result
    }

Parser_parseStatement(self: Parser): Term {
    if(self.current.is(LKeyword) && (self.current.rawIs("let") || self.current.rawIs("mutable"))) self.parseLet()
    else if(self.current.is(LKeyword) && self.current.rawIs("function")) self.parseFunctions()
    else {
        let term = self.parseTerm()
        if(!self.current.is(LAssign) && !self.current.is3(LAssignPlus, LAssignMinus, LAssignLink)) term else {
            let token =
                if(self.current.is(LAssignPlus)) self.skip(LAssignPlus)
                else if(self.current.is(LAssignMinus)) self.skip(LAssignMinus)
                else if(self.current.is(LAssignLink)) self.skip(LAssignLink)
                else self.skip(LAssign)
            let operator = token.raw.dropRight(1)
            let value = self.parseTerm()
            term match {
                case EVariable(_, name) => EAssign(token.at, operator, name, value)
                case e: EField => EAssignField(token.at, operator, e, value)
                case _ => self.fail(token.at, "Only variables and fields are assignable")
            }
        }
    }
}

Parser_parseLet(self: Parser): Term {
    let mutable = self.current.rawIs("mutable")
    if(mutable) self.skip(LKeyword, "mutable") else self.skip(LKeyword, "let")
    let nameToken = self.skip(LLower)
    let valueType = if(!self.current.is(LColon)) Type(nameToken.at, "?", List()) else {
        self.skip(LColon)
        self.parseType()
    }
    self.skip(LAssign)
    let value = self.parseTerm()
    self.skipSeparator(LSemicolon)
    let body = self.parseStatements()
    ELet(nameToken.at, mutable, nameToken.raw, valueType, value, body)
}

Parser_parseFunctions(self: Parser): Term {
    let at = self.current.at
    mutable functions = List[LocalFunction]()
    while {self.current.rawIs("function")} {
        self.skip(LKeyword, "function")
        let signature = self.parseSignature()
        let body = self.parseLambda()
        functions ::= LocalFunction(signature, body)
        self.skipSeparator(LSemicolon)
    }
    let body = self.parseStatements()
    EFunctions(at, functions.reverse, body)
}

Parser_parseTerm(self: Parser): Term {
    self.parseBinary(0)
}

val binaryOperators = Array(
    List("||"),
    List("&&"),
    List("!=", "=="),
    List("<=", ">=", "<", ">"),
    List("++"),
    List("+", "-"),
    List("*", "/", "%"),
    List("^")
)

Parser_parseBinary(level: Int): Term {
    if(level >= binaryOperators.length) {parseUnary()} else:
    let operators = binaryOperators(level)
    mutable result = self.parseBinary(level + 1)
    if(self.current.is(LOperator)) {
        while {operators.exists(self.current.rawIs)} {
            let token = self.skip(LOperator)
            let right = self.parseBinary(level + 1)
            let arguments = List(Argument(result.at, None, result), Argument(right.at, None, right))
            result = ECall(token.at, EVariable(token.at, token.raw), List(), arguments)
        }
    }
    result
}

Parser_parseUnary(self: Parser): Term {
    if(self.current.is(LOperator)) {
        let token = self.skip(LOperator)
        let term = self.parseUnary()
        ECall(token.at, EVariable(token.at, token.raw), List(), List(term))
    } else {
        self.parseFieldsAndCalls()
    }
}

Parser_parseFieldsAndCalls(self: Parser): Term {
    mutable result = self.parseAtom()
    while {self.current.is(LBracketLeft) || self.current.is(LColon) || self.current.is(LDot)} {
        if(self.current.is(LDot)) {
            self.skip(LDot)
            if(self.current.rawIs("{")) {
                let term = self.parseAtom()
                result = EPipe(term.at, result, term)
            } elseIf {self.current.is(LUpper, LNamespace)} {
                result = self.parseCopy(result)
            } else {
                let token = self.skip(LLower)
                result = EField(token.at, result, token.raw)
            }
        } else {
            let at = self.current.at
            let typeArguments = if(!self.current.rawIs("[")) List() else self.parseTypeArguments()
            let arguments = if(!self.current.rawIs("(")) List() else self.parseFunctionArguments()
            mutable moreArguments = List[Argument]()
            mutable lastWasCurly = false
            while {self.current.rawIs("{") || self.current.is(LColon)} {
                lastWasCurly = self.current.rawIs("{")
                let lambda = self.parseLambda(allowColon = true)
                moreArguments ::= Argument(lambda.at, None, lambda)
            }
            result = ECall(at, result, typeArguments, arguments ++ moreArguments.reverse)
            if(lastWasCurly && self.current.is(LLower)) {
                let token = self.skip(LLower)
                result = EField(token.at, result, token.raw)
            }
        }
    }
    result
}

Parser_parseAtom(self: Parser): Term {
    if(self.current.is(LString)) {
        let token = self.skip(LString)
        EString(token.at, token.raw)
    } elseIf {self.current.is(LChar)} {
        let token = self.skip(LChar)
        EChar(token.at, token.raw)
    } elseIf {self.current.is(LInt)} {
        let token = self.skip(LInt)
        EInt(token.at, token.raw)
    } elseIf {self.current.is(LFloat)} {
        let token = self.skip(LFloat)
        EFloat(token.at, token.raw)
    } elseIf {self.current.is(LLower)} {
        let token = self.skip(LLower)
        EVariable(token.at, token.raw)
    } elseIf {self.current.is(LNamespace)} {
        let namespaceToken = self.skip(LNamespace)
        let extraNamespace = if(!self.current.is(LNamespace)) None else Some(self.skip(LNamespace).raw)
        let prefix = namespaceToken.raw + extraNamespace.getOrElse("")
        if(self.current.is(LLower)) { let token = self.skip(LLower); EVariable(token.at, prefix + token.raw) } else {
            self.parseVariant(prefix)
        }
    } elseIf {self.current.is(LUpper)} {
        self.parseVariant("")
    } elseIf {self.current.rawIs("{")} {
        self.parseLambda()
    } elseIf {self.current.rawIs("[")} {
        self.parseList()
    } elseIf {self.current.rawIs("(") && self.ahead.is(LLower) && self.aheadAhead.is(LAssign)} {
        ERecord(self.current.at, self.parseRecord())
    } elseIf {self.current.rawIs("(")} {
        self.skip(LBracketLeft, "(")
        let result = self.parseTerm()
        self.skip(LBracketRight, ")")
        result
    } elseIf {self.current.is(LWildcard)} {
        let token = self.skip(LWildcard)
        EWildcard(token.at, 0)
    } else {
        self.fail(self.current.at, "Expected atom, got " + self.current.raw)
    }
}

Parser_parseVariant(prefix: String): Term {
    let token = self.skip(LUpper)
    let name = prefix + token.raw
    let typeArguments = if(!self.current.rawIs("[")) List() else self.parseTypeArguments()
    let arguments = if(!self.current.rawIs("(")) None else Some(parseFunctionArguments())
    EVariant(token.at, name, typeArguments, arguments)
}

Parser_parseCopy(record: Term): Term {
    let namespace = if(!self.current.is(LNamespace)) "" else self.skip(LNamespace).raw
    let extraNamespace = if(!self.current.is(LNamespace)) "" else self.skip(LNamespace).raw
    let prefix = namespace + extraNamespace
    let token = self.skip(LUpper)
    let name = prefix + token.raw
    let fields = self.parseRecord()
    ECopy(token.at, name, record, fields)
}

Parser_parseRecord(self: Parser): List[Pair[String, Term]] {
    mutable fields = List[Field]()
    self.skip(LBracketLeft, "(")
    while {!self.current.is(LBracketRight)} {
        let fieldToken = self.skip(LLower)
        self.skip(LAssign)
        fields ::= Field(fieldToken.at, fieldToken.raw, self.parseTerm())
        if(!self.current.is(LBracketRight)) self.skipSeparator(LComma)
    }
    self.skip(LBracketRight, ")")
    fields.reverse
}

Parser_parseRecordType(self: Parser): List[(String, Type)] {
    mutable fields = List[(String, Type)]()
    self.skip(LBracketLeft, "(")
    while {!self.current.is(LBracketRight)} {
        let fieldToken = self.skip(LLower)
        self.skipSeparator(LColon)
        fields ::= fieldToken.raw -> self.parseType()
        if(!self.current.is(LBracketRight)) self.skipSeparator(LComma)
    }
    self.skip(LBracketRight, ")")
    fields.reverse.sortBy(_._1)
}

Parser_parseRecordPattern(self: Parser): List[(String, MatchPattern)] {
    mutable fields = List[(String, MatchPattern)]()
    self.skip(LBracketLeft, "(")
    while {!self.current.is(LBracketRight)} {
        let fieldToken = self.skip(LLower)
        self.skip(LAssign)
        fields ::= fieldToken.raw -> self.parsePattern()
        if(!self.current.is(LBracketRight)) self.skipSeparator(LComma)
    }
    self.skip(LBracketRight, ")")
    fields.reverse
}

Parser_parseList(self: Parser): Term {
    mutable items = List[Term]()
    let at = self.skip(LBracketLeft, "[").at
    while {!self.current.rawIs("]")} {
        items ::= self.parseTerm()
        if(!self.current.rawIs("]")) self.skipSeparator(LComma)
    }
    self.skip(LBracketRight, "]")
    EList(at, items.reverse)
}
*/
