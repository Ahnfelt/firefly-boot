import Syntax

data Workspace(
    rules: List[WorkspaceRule]
    defaultLocation: String
    packageDirectory: String
)

data WorkspaceRule(
    packageGroup: String
    packageName: Option[String]
    location: String
)

centralLocation = "http://ting.ahnfelt.dk/firefly/repository/"

loadWorkspace(path: Path): Workspace {
    let packageDirectory = if(path.extension() == ".ff") {path.parent().grab()} else {path}
    let workspaceFile = packageDirectory.slash(".firefly-workspace")
    if(workspaceFile.exists()) {
        parseWorkspaceFile(workspaceFile, fixedPackageDirectory)
    } elseIf {!packageDirectory.parent().isEmpty()} {
        loadWorkspace(packageDirectory.parent().grab())
    } else {
        Workspace([], centralLocation, ".")
    }
}

parseWorkspaceFile(path: Path, packageDirectory: String): Workspace {
    let text = fs.readText(path)
    mutable defaultLocation = None
    let lines = text.split('\n').toList().map {_.replace("\r", "").takeWhile {_ != '#'}}.filter {_.size() != 0}
    let rules = lines.collect {line =>
        let columns = line.replace("\t", " ").split(' ').toList().filter {_.size() != 0}
        defaultLocation.each {_ =>
            panic("Unexpected rule after the * rule: " + line)
        }
        if(columns.size() != 2) {
            panic("Could not parse workspace rule: " + line)
        }
        let package = columns.grab(0)
        let location = columns.grab(1)
        let fixedLocation = if(location.endsWith("/")) {location} else {location + "/"}
        if(package == "*") {
            defaultLocation = Some(fixedLocation)
            None
        } else {
            let packageParts = package.split(':')
            if(packageParts.size() != 2) {
                panic("Could not parse workspace package: " + package)
            }
            if(packageParts.grab(0) == "*") {
                panic("Unexpected wildcard: " + package)
            }
            Some(WorkspaceRule(
                packageGroup = packageParts.grab(0)
                packageName = if(packageParts.grab(1) != "*") {packageParts.grab(1)}
                location = fixedLocation
            ))
        }
    }
    Workspace(rules, defaultLocation.else {centralLocation}, packageDirectory)
}

extend self: Workspace {

    findPackageLocation(packagePair: PackagePair, version: Version): String {
        self.rules.find {rule =>
            rule.packageGroup == packagePair.group && rule.packageName.all {_ == packagePair.name}
        }.map {rule =>
            let prefix = if(rule.packageName == None) {packagePair.name + "/"} else {""}
            if(rule.location.contains(":")) {
                rule.location + prefix + tarGzName(packagePair, version)
            } else {
                self.packageDirectory + "/" + rule.location + prefix
            }
        }.else {
            self.defaultLocation + packagePair.group + "/" + packagePair.name + "/" +
            tarGzName(packagePair, version)
        }
    }

}

tarGzName(packagePair: PackagePair, version: Version): String {
    packagePair.group + "_" + packagePair.name + "_" +
    version.major + "_" + version.minor + "_" + version.patch + ".tar.gz"
}
