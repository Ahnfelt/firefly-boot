import Syntax
import Unification
import Environment

type Inference(
    unification: Unification
)

make(instances: List[DInstance]): Inference {
    Inference(
        unification = Unification.make(instances)
    )
}

fail[T](at: Location, message: String): T {
    panic(message + " " + at.show)
}

//myInt = 42
//myString: String = myInt


extend self: Inference {

    inferModule(module: Module, otherModules: List[Module]): Module {
        // First infer everything, then substitute everything (failing on type variables that can't be substituted)

        let environment = Environment.make(module, otherModules)

        let lets = module.lets.map { self.inferLetDefinition(environment, _) }
        let functions = module.functions.map { self.inferFunctionDefinition(environment, _) }
        //let extends = module.extends.map { self.inferExtendDefinition(_) }
        //let traits = module.traits.map { self.inferTraitDefinition(_) }
        //let instances = module.instances.map { self.inferInstanceDefinition(_) }
        module.Module(
            //traits = traits,
            //instances = instances,
            //extends = extends,
            lets = lets,
            functions = functions,
        )
    }

    inferLetDefinition(environment: Environment, definition: DLet): DLet {
        let value = self.inferTerm(environment, definition.variableType, definition.value)
        definition.DLet(
            value = value
        )
    }

    inferFunctionDefinition(environment: Environment, definition: DFunction): DFunction {
        let parameters = definition.signature.parameters.map { p =>
            let scheme = Scheme(True, False, Signature(p.at, p.name, Empty, Empty, Empty, p.valueType))
            Pair(p.name, scheme)
        }
        let environment2 = environment.Environment(symbols = environment.symbols ++ parameters)
        definition
    }

    inferTerm(environment: Environment, expected: Type, term: Term): Term {
        function core(name: String): String {
            "ff:core/Core." + name
        }
        function literal(coreTypeName: String): Term {
            self.unification.unify(term.at, expected, TConstructor(term.at, core(coreTypeName), Empty))
            term
        }
        term.{
            | EString _ => literal("String")
            | EChar _ => literal("Char")
            | EInt _ => literal("Int")
            | EFloat _ => literal("Float")
            | EVariable e =>
                environment.symbols.get(e.name).map { scheme =>
                    if(scheme.isVariable) {
                        self.unification.unify(e.at, expected, scheme.signature.returnType)
                        term
                    } else {
                        fail(e.at, "Functions need to be called: " + e.name)
                    }
                } else {
                    fail(e.at, "Symbol not in scope: " + e.name)
                }
            | EList(at, t, items) =>
                EList(at, t, items.map { self.inferTerm(environment, t, _) })
            | ESequential(at, before, after) =>
                ESequential(
                    at = at
                    before = self.inferTerm(environment, self.unification.freshTypeVariable(at), before)
                    after = self.inferTerm(environment, expected, after)
                )
            | ELet e =>
                let scheme = Scheme(True, False, Signature(e.at, e.name, Empty, Empty, Empty, e.valueType))
                let environment2 = environment.Environment(symbols = environment.symbols + Pair(e.name, scheme))
                e.ELet(
                    value = self.inferTerm(environment, e.valueType, e.value)
                    body = self.inferTerm(environment2, expected, e.body)
                )
            | _ => term
            /*
            | EVariant(at, name, typeArguments, arguments) =>
                EVariant(
                    at = at
                    name = self.variants.get(name).else { fail(at, "No such variant: " + name) }
                    typeArguments = typeArguments.map { self.resolveType(_) }
                    arguments = arguments.map { _.map { a => a.Argument(value = self.resolveTerm(a.value)) }}
                )
            | EVariantIs(at, name, typeArguments) =>
                EVariantIs(
                    at = at
                    name = self.variants.get(name).else { fail(at, "No such variant: " + name) }
                    typeArguments = typeArguments.map { self.resolveType(_) }
                )
            | ECopy(at, name, record, arguments) =>
                ECopy(
                    at = at
                    name = self.variants.get(name).else { fail(at, "No such variant: " + name) }
                    record = self.resolveTerm(record)
                    arguments = arguments.map { f => f.Field(value = self.resolveTerm(f.value)) }
                )
            | EField e =>
                e.EField(record = self.resolveTerm(e.record))
            | ELambda(at, Lambda(lambdaAt, cases)) =>
                ELambda(at, Lambda(lambdaAt, cases.map { self.resolveCase(_) }))
            | EPipe(at, value, function) =>
                EPipe(
                    at = at
                    value = self.resolveTerm(value)
                    function = self.resolveTerm(function)
                )
            | ECall(at, function, typeArguments, arguments) =>
                ECall(
                    at = at
                    function = self.resolveTerm(function)
                    typeArguments = typeArguments.map { self.resolveType(_) }
                    arguments = arguments.map { a => a.Argument(value = self.resolveTerm(a.value)) }
                )
            | ERecord(at, fields) =>
                ERecord(
                    at = at
                    fields = fields.map { f => f.Field(value = self.resolveTerm(f.value)) }
                )
            | EWildcard e =>
                if(e.index == 0) { fail(e.at, "Unbound wildcard") }
                e
            | EFunctions(at, functions, body) =>
                let functionMap = functions.map { _.signature.name }.map { name => Pair(name, name) }.toMap
                let self2 = self.Resolver(variables = self.variables ++ functionMap)
                EFunctions(
                    at = at,
                    functions = functions.map { self2.resolveFunction(_) },
                    body = self2.resolveTerm(body)
                )
            | EAssign(at, operator, variable, value) =>
                EAssign(
                    at = at
                    operator = operator
                    variable = self.variables.get(variable).else { fail(at, "No such variable: " + variable) }
                    value = self.resolveTerm(value)
                )
            | EAssignField(at, operator, record, field, value) =>
                EAssignField(
                    at = at
                    operator = operator
                    record = self.resolveTerm(record)
                    field = field
                    value = self.resolveTerm(value)
                )
            */
        }
    }

}
