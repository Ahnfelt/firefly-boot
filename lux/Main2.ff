import HttpServer from ff:httpserver

import Lux2 as Lux
import LuxEvent


buttons(): Lux {
    Lux.useState(True): b, setB =>
    Lux.div()
        .add(Lux.button("Boolean").on("click") {event =>
            event.preventDefault()
            setB(!b)
        })
        .add(
            if(b) {countButton()} else {countStringButton()}
        )
}

countButton(): Lux {
    Lux.useState(0): apples, setApples =>
    Lux.div()
        .add(Lux.h1(apples + " apples"))
        .add(Lux.button("More apples!").on("click") {event =>
            event.preventDefault()
            setApples(apples + 1)
        })
}

countStringButton(): Lux {
    Lux.useState("x"): text, setText =>
    Lux.div()
        .with("role", "button")
        .add(Lux.h1(text + " X's"))
        .add(Lux.button("More X's!").on("click") {event =>
            event.preventDefault()
            setText(text + "x")
        })
}

browserMain(system: BrowserSystem): Unit {
    Lux.mountById(system, "main", buttons())
}

nodeMain(system: NodeSystem): Unit {
    HttpServer.listen(system, "localhost", 8080) {request, response =>
        if(request.path() == "/") {
            response.setHeader("Content-Type", ["text/html; charset=UTF-8"])
            response.writeText("<!doctype html>")
            response.writeText("<div id='main'></div>")
            response.writeText("<script type='module' src='/js/script/script/Main2.mjs'></script>")
        } elseIf {request.path().startsWith("/js/") && !request.path().contains("..")} {
            response.setHeader("Content-Type", ["text/javascript; charset=UTF-8"])
            response.writeText(system.assets().readText(request.path()))
        } else {
            response.writeStatus(404, Some("Not found"))
        }
    }
}

buildMain(system: BuildSystem) {
    let browser = system.compileForBrowser("Main2.ff")
    let assets = AssetSystem.create().addAssets("/js", browser.assets())
    system.setAssets(assets)
}

useLoader1[A1, R](
    a1: A1
    load: A1 => R
    body: (Bool, Option[R], () => Unit) => Lux
    location: SourceLocation = SourceLocation.callSite()
): Lux {
    useLoader1(a1, load, body, location) // TODO
}

useDebouncer[T](
    value: T
    duration: Duration
    body: T => Lux
    location: SourceLocation = SourceLocation.callSite()
): Lux {
    useDebouncer(value, duration, body, location)
}
