import Lux
import LuxEvent

class Lux {}

data LuxException(message: String)


new(tagName: String, text: String = ""): Lux
    target js sync """
        if(tagName_.charCodeAt(0) === 60) throw new Error('Invalid tag name: ' + tagName_)
        const children = text_ === '' ? [] : [{key: '<text>' + text_}];
        return {key: tagName_, children: children, callback: null, props: new Map()}
    """

useState[T](initialValue: T, body: (T, T => Unit) => Lux, location: SourceLocation = SourceLocation.callSite()): Lux
    target js sync """
        const node = {key: '<state_' + location_, children: [], callback: null, props: new Map([['value', initialValue_]])}
        node.callback = rerender => {
            if(rerender) {
                const setValue = newValue => {
                    node.props.set('value', newValue)
                    node.children[0] = body_(newValue, setValue)
                    rerender()
                }
                node.children[0] = body_(node.props.get('value'), setValue)
            }
        }
        return node
    """


// TODO: Hooks with the same general type but different state types can still be mixed up.
// It can be fixed by useState[T: Typeable] and then using Typeable.show[T]() as part of the key.

extend self: Lux {

    key(key: String): Lux
        target js sync """
            if(self_.key.startsWith("<text>")) return self_
            self_.key = self_.key + '>' + key_
            return self_
        """
    
    with[V: IsJsValue](name: String, value: V): Lux
        target js sync """
            if(!self_.props) return self_
            self_.props.set(name_, value_)
            return self_
        """

    on(event: String, body: LuxEvent => Unit): Lux
        target js async """
            if(self_.key.charCodeAt(0) === 60) return self_
            self_.props.set('$' + event_, body_)
            return self_
        """
        target js sync """
            if(self_.key.charCodeAt(0) === 60) return self_
            self_.props.set('$' + event_, body_)
            return self_
        """

    onIf(event: String, condition: Bool, body: LuxEvent => Unit): Lux
        target js async """
            if(self_.key.charCodeAt(0) === 60) return self_
            if(condition) self_.props.set('$' + event_, body_)
            return self_
        """
        target js sync """
            if(self_.key.charCodeAt(0) === 60) return self_
            if(condition) self_.props.set('$' + event_, body_)
            return self_
        """

    add(node: Lux): Lux
        target js sync """
            if(!self_.children) return self_
            self_.children.push(node_)
            return self_
        """

    addIf(condition: Bool, body: () => Lux): Lux
        target js async """
            if(!self_.children) return self_
            if(condition_) self_.children.push(await body_())
            return self_
        """
        target js sync """
            if(!self_.children) return self_
            if(condition_) self_.children.push(body_())
            return self_
        """

    addList(nodes: List[Lux]): Lux
        target js sync """
            if(!self_.children) return self_
            let n = nodes_
            while(n.tail_) { 
                n = n.tail_
                self_.children.push(n.head_)
            }
            return self_
        """
        
    addArray(nodes: Array[Lux]): Lux
        target js sync """
            if(!self_.children) return self_
            for(let i = 0; i < nodes_.length; i++) {
                self_.children.push(nodes_[i])
            }
            return self_
        """
        
    addText(text: String): Lux
        target js sync """
            if(!self_.children) return self_
            self_.children.push({key: '<text>' + text_})
            return self_
        """

    textIf(condition: Bool, body: () => String): Lux
        target js async """
            if(!self_.children) return self_
            if(condition_) self_.children.push({key: '<text>' + await body_()})
            return self_
        """
        target js sync """
            if(!self_.children) return self_
            if(condition_) self_.children.push({key: '<text>' + body_()})
            return self_
        """

    // HTML attributes from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
    withAccept(value: String = ""): Lux {Lux.with("accept", value)}
    withAcceptCharset(value: String = ""): Lux {Lux.with("accept-charset", value)}
    withAccesskey(value: String = ""): Lux {Lux.with("accesskey", value)}
    withAction(value: String = ""): Lux {Lux.with("action", value)}
    withAllow(value: String = ""): Lux {Lux.with("allow", value)}
    withAlt(value: String = ""): Lux {Lux.with("alt", value)}
    withAsync(value: String = ""): Lux {Lux.with("async", value)}
    withAutocapitalize(value: String = ""): Lux {Lux.with("autocapitalize", value)}
    withAutocomplete(value: String = ""): Lux {Lux.with("autocomplete", value)}
    withAutoplay(value: String = ""): Lux {Lux.with("autoplay", value)}
    withBackground(value: String = ""): Lux {Lux.with("background", value)}
    withBgcolor(value: String = ""): Lux {Lux.with("bgcolor", value)}
    withBorder(value: String = ""): Lux {Lux.with("border", value)}
    withBuffered(value: String = ""): Lux {Lux.with("buffered", value)}
    withCapture(value: String = ""): Lux {Lux.with("capture", value)}
    withCharset(value: String = ""): Lux {Lux.with("charset", value)}
    withChecked(value: String = ""): Lux {Lux.with("checked", value)}
    withCite(value: String = ""): Lux {Lux.with("cite", value)}
    withClass(value: String = ""): Lux {Lux.with("class", value)}
    withColor(value: String = ""): Lux {Lux.with("color", value)}
    withCols(value: String = ""): Lux {Lux.with("cols", value)}
    withColspan(value: String = ""): Lux {Lux.with("colspan", value)}
    withContent(value: String = ""): Lux {Lux.with("content", value)}
    withContenteditable(value: String = ""): Lux {Lux.with("contenteditable", value)}
    withControls(value: String = ""): Lux {Lux.with("controls", value)}
    withCoords(value: String = ""): Lux {Lux.with("coords", value)}
    withCrossorigin(value: String = ""): Lux {Lux.with("crossorigin", value)}
    withData(value: String = ""): Lux {Lux.with("data", value)}
    withDatetime(value: String = ""): Lux {Lux.with("datetime", value)}
    withDecoding(value: String = ""): Lux {Lux.with("decoding", value)}
    withDefault(value: String = ""): Lux {Lux.with("default", value)}
    withDefer(value: String = ""): Lux {Lux.with("defer", value)}
    withDir(value: String = ""): Lux {Lux.with("dir", value)}
    withDirname(value: String = ""): Lux {Lux.with("dirname", value)}
    withDisabled(value: String = ""): Lux {Lux.with("disabled", value)}
    withDownload(value: String = ""): Lux {Lux.with("download", value)}
    withDraggable(value: String = ""): Lux {Lux.with("draggable", value)}
    withEnctype(value: String = ""): Lux {Lux.with("enctype", value)}
    withFor(value: String = ""): Lux {Lux.with("for", value)}
    withForm(value: String = ""): Lux {Lux.with("form", value)}
    withFormaction(value: String = ""): Lux {Lux.with("formaction", value)}
    withFormenctype(value: String = ""): Lux {Lux.with("formenctype", value)}
    withFormmethod(value: String = ""): Lux {Lux.with("formmethod", value)}
    withFormnovalidate(value: String = ""): Lux {Lux.with("formnovalidate", value)}
    withFormtarget(value: String = ""): Lux {Lux.with("formtarget", value)}
    withHeaders(value: String = ""): Lux {Lux.with("headers", value)}
    withHeight(value: String = ""): Lux {Lux.with("height", value)}
    withHidden(value: String = ""): Lux {Lux.with("hidden", value)}
    withHigh(value: String = ""): Lux {Lux.with("high", value)}
    withHref(value: String = ""): Lux {Lux.with("href", value)}
    withHreflang(value: String = ""): Lux {Lux.with("hreflang", value)}
    withHttpEquiv(value: String = ""): Lux {Lux.with("http-equiv", value)}
    withId(value: String = ""): Lux {Lux.with("id", value)}
    withIntegrity(value: String = ""): Lux {Lux.with("integrity", value)}
    withInputmode(value: String = ""): Lux {Lux.with("inputmode", value)}
    withIsmap(value: String = ""): Lux {Lux.with("ismap", value)}
    withItemprop(value: String = ""): Lux {Lux.with("itemprop", value)}
    withKind(value: String = ""): Lux {Lux.with("kind", value)}
    withLabel(value: String = ""): Lux {Lux.with("label", value)}
    withLang(value: String = ""): Lux {Lux.with("lang", value)}
    withList(value: String = ""): Lux {Lux.with("list", value)}
    withLoop(value: String = ""): Lux {Lux.with("loop", value)}
    withLow(value: String = ""): Lux {Lux.with("low", value)}
    withMax(value: String = ""): Lux {Lux.with("max", value)}
    withMaxlength(value: String = ""): Lux {Lux.with("maxlength", value)}
    withMinlength(value: String = ""): Lux {Lux.with("minlength", value)}
    withMedia(value: String = ""): Lux {Lux.with("media", value)}
    withMethod(value: String = ""): Lux {Lux.with("method", value)}
    withMin(value: String = ""): Lux {Lux.with("min", value)}
    withMultiple(value: String = ""): Lux {Lux.with("multiple", value)}
    withMuted(value: String = ""): Lux {Lux.with("muted", value)}
    withName(value: String = ""): Lux {Lux.with("name", value)}
    withNovalidate(value: String = ""): Lux {Lux.with("novalidate", value)}
    withOpen(value: String = ""): Lux {Lux.with("open", value)}
    withOptimum(value: String = ""): Lux {Lux.with("optimum", value)}
    withPattern(value: String = ""): Lux {Lux.with("pattern", value)}
    withPing(value: String = ""): Lux {Lux.with("ping", value)}
    withPlaceholder(value: String = ""): Lux {Lux.with("placeholder", value)}
    withPlaysinline(value: String = ""): Lux {Lux.with("playsinline", value)}
    withPoster(value: String = ""): Lux {Lux.with("poster", value)}
    withPreload(value: String = ""): Lux {Lux.with("preload", value)}
    withReadonly(value: String = ""): Lux {Lux.with("readonly", value)}
    withReferrerpolicy(value: String = ""): Lux {Lux.with("referrerpolicy", value)}
    withRel(value: String = ""): Lux {Lux.with("rel", value)}
    withRequired(value: String = ""): Lux {Lux.with("required", value)}
    withReversed(value: String = ""): Lux {Lux.with("reversed", value)}
    withRole(value: String = ""): Lux {Lux.with("role", value)}
    withRows(value: String = ""): Lux {Lux.with("rows", value)}
    withRowspan(value: String = ""): Lux {Lux.with("rowspan", value)}
    withSandbox(value: String = ""): Lux {Lux.with("sandbox", value)}
    withScope(value: String = ""): Lux {Lux.with("scope", value)}
    withSelected(value: String = ""): Lux {Lux.with("selected", value)}
    withShape(value: String = ""): Lux {Lux.with("shape", value)}
    withSize(value: String = ""): Lux {Lux.with("size", value)}
    withSizes(value: String = ""): Lux {Lux.with("sizes", value)}
    withSlot(value: String = ""): Lux {Lux.with("slot", value)}
    withSpan(value: String = ""): Lux {Lux.with("span", value)}
    withSpellcheck(value: String = ""): Lux {Lux.with("spellcheck", value)}
    withSrc(value: String = ""): Lux {Lux.with("src", value)}
    withSrcdoc(value: String = ""): Lux {Lux.with("srcdoc", value)}
    withSrclang(value: String = ""): Lux {Lux.with("srclang", value)}
    withSrcset(value: String = ""): Lux {Lux.with("srcset", value)}
    withStart(value: String = ""): Lux {Lux.with("start", value)}
    withStep(value: String = ""): Lux {Lux.with("step", value)}
    withStyle(value: String = ""): Lux {Lux.with("style", value)}
    withTabindex(value: String = ""): Lux {Lux.with("tabindex", value)}
    withTarget(value: String = ""): Lux {Lux.with("target", value)}
    withTitle(value: String = ""): Lux {Lux.with("title", value)}
    withTranslate(value: String = ""): Lux {Lux.with("translate", value)}
    withType(value: String = ""): Lux {Lux.with("type", value)}
    withUsemap(value: String = ""): Lux {Lux.with("usemap", value)}
    withValue(value: String = ""): Lux {Lux.with("value", value)}
    withWidth(value: String = ""): Lux {Lux.with("width", value)}
    withWrap(value: String = ""): Lux {Lux.with("wrap", value)}

}

mount(element: JsValue, lux: Lux): Lux {
    update(element, Lux.new("div"), Lux.new("div").add(lux))
    lux
}

update(element: JsValue, old: Lux, new: Lux): Unit
    target js sync """
        const empty = {key: '', children: [], callback: null, props: new Map()}
        function update(element, oldLux, newLux) {
            if(oldLux === newLux || newLux.key.startsWith('<text')) return element
            // If it's a hook, transfer the props, invoke the callback and patch recursively
            if(typeof newLux.callback === 'function') {
                if(typeof oldLux.callback === 'function') newLux.props = oldLux.props
                let oldChild = oldLux.children[0] || empty
                const rerender = () => {
                    element = update(element, oldChild, newLux.children[0])
                    oldChild = newLux.children[0]
                }
                newLux.callback(rerender)
                rerender()
                return element
            }
            // Create the element if it doesn't already exist
            if(!element) {
                const tagEnd = newLux.key.indexOf('>')
                const tag = tagEnd === -1 ? newLux.key : newLux.key.slice(0, tagEnd)
                element = document.createElement(tag)
            }
            // Patch props
            if(oldLux.props !== newLux.props) {
                newLux.props.forEach((value, name) => {
                    const oldValue = oldLux.props.get(name)
                    if(oldValue !== value) {
                        if(name[0] === '$') {
                            if(oldValue !== void 0) element.removeEventListener(name.slice(1), oldValue)
                            element.addEventListener(name.slice(1), value)
                        } else element[name] = value
                    }
                    if(oldValue !== void 0) oldLux.props.delete(name)
                })
                oldLux.props.forEach((value, name) => {
                    if(name[0] === '$') element.removeEventListener(name.slice(1), value)
                    else element[name] = void 0
                })
            }
            // Speed through matching prefix
            const oldChildren = oldLux.children
            const newChildren = newLux.children
            const minLength = Math.min(oldChildren.length, newChildren.length)
            let i = 0
            while(i < minLength && oldChildren[i] === newChildren[i]) i++
            for(; i < minLength && oldChildren[i].key === newChildren[i].key; i++) {
                update(element.childNodes[i], oldChildren[i], newChildren[i])
            }
            if(i === oldChildren.length && i === newChildren.length) return element
            // If not done, do the complicated rearrange
            const indexMap = new Map()
            // First build a multimap from old keys to indexes
            for(let j = i; j < oldChildren.length; j++) {
                const child = oldChildren[j]
                const indexes = indexMap.get(child.key)
                if(indexes === void 0) {
                    indexMap.set(child.key, j)
                } else if(typeof indexes === 'number') {
                    indexMap.set(child.key, [indexes, j])
                } else {
                    indexes.push(j)
                }
            }
            // Then go through the new children, diff and patch
            for(; i < newChildren.length; i++) {
                const child = newChildren[i]
                const indexes = indexMap.get(child.key)
                if(indexes === i) {
                    // Preserve element
                    indexMap.delete(child.key)
                    if(!newChildren[i].key.startsWith('<text')) {
                        update(element.childNodes[i], oldChildren[i], newChildren[i])
                    }
                } else if(indexes === void 0) {
                    // Create and insert new element
                    if(newChildren[i].key.startsWith('<text')) {
                        const text = newChildren[i].key.slice(newChildren[i].key.indexOf('>') + 1)
                        const newNode = document.createTextNode(text);
                        element.insertBefore(newNode, element.childNodes[i] || null)
                    } else {
                        const newElement = update(null, empty, newChildren[i])
                        element.insertBefore(newElement, element.childNodes[i] || null)
                    }
                } else {
                    // Preserve and move element
                    const index = 
                        typeof indexes === 'number' ? indexes : 
                        indexes.length === 2 ? (indexMap.set(child.key, indexes[1]), indexes[0]) :
                        indexes.shift()
                    element.insertBefore(element.childNodes[index], element.childNodes[i] || null)
                    if(!newChildren[i].key.startsWith('<text')) {
                        update(element.childNodes[i], oldChildren[index], newChildren[i])
                    }
                }
            }
            // Unmount the vdom nodes that didn't survive and delete the corresponding trailing elements
            indexMap.forEach(indexes => { 
                if(typeof indexes === 'number') unmount(oldChildren[indexes])
                else for(const index of indexes) unmount(oldChildren[index])
            })
            while(i < element.childNodes.length) {
                element.removeChild(element.childNodes[i])
            }
            return element
        }
        function unmount(oldLux) {
            if(oldLux.children) for(const child of oldLux.children) unmount(child)
            if(typeof oldLux.callback === 'function') oldLux.callback(null)
        }
        if(old_.key !== new_.key) throw new Error('Tried to update mismatching keys: ' + old_.key + ' vs. ' + new_.key)
        update(element_, old_, new_)
    """

// HTML tags
a(text: String = ""): Lux {Lux.new("a", text)}
abbr(text: String = ""): Lux {Lux.new("abbr", text)}
address(text: String = ""): Lux {Lux.new("address", text)}
area(text: String = ""): Lux {Lux.new("area", text)}
article(text: String = ""): Lux {Lux.new("article", text)}
aside(text: String = ""): Lux {Lux.new("aside", text)}
audio(text: String = ""): Lux {Lux.new("audio", text)}
b(text: String = ""): Lux {Lux.new("b", text)}
base(text: String = ""): Lux {Lux.new("base", text)}
bdi(text: String = ""): Lux {Lux.new("bdi", text)}
bdo(text: String = ""): Lux {Lux.new("bdo", text)}
blockquote(text: String = ""): Lux {Lux.new("blockquote", text)}
body(text: String = ""): Lux {Lux.new("body", text)}
br(text: String = ""): Lux {Lux.new("br", text)}
button(text: String = ""): Lux {Lux.new("button", text)}
canvas(text: String = ""): Lux {Lux.new("canvas", text)}
caption(text: String = ""): Lux {Lux.new("caption", text)}
cite(text: String = ""): Lux {Lux.new("cite", text)}
code(text: String = ""): Lux {Lux.new("code", text)}
col(text: String = ""): Lux {Lux.new("col", text)}
colgroup(text: String = ""): Lux {Lux.new("colgroup", text)}
data(text: String = ""): Lux {Lux.new("data", text)}
datalist(text: String = ""): Lux {Lux.new("datalist", text)}
dd(text: String = ""): Lux {Lux.new("dd", text)}
del(text: String = ""): Lux {Lux.new("del", text)}
details(text: String = ""): Lux {Lux.new("details", text)}
dfn(text: String = ""): Lux {Lux.new("dfn", text)}
dialog(text: String = ""): Lux {Lux.new("dialog", text)}
div(text: String = ""): Lux {Lux.new("div", text)}
dl(text: String = ""): Lux {Lux.new("dl", text)}
dt(text: String = ""): Lux {Lux.new("dt", text)}
em(text: String = ""): Lux {Lux.new("em", text)}
embed(text: String = ""): Lux {Lux.new("embed", text)}
fieldset(text: String = ""): Lux {Lux.new("fieldset", text)}
figcaption(text: String = ""): Lux {Lux.new("figcaption", text)}
figure(text: String = ""): Lux {Lux.new("figure", text)}
footer(text: String = ""): Lux {Lux.new("footer", text)}
form(text: String = ""): Lux {Lux.new("form", text)}
h1(text: String = ""): Lux {Lux.new("h1", text)}
head(text: String = ""): Lux {Lux.new("head", text)}
header(text: String = ""): Lux {Lux.new("header", text)}
hgroup(text: String = ""): Lux {Lux.new("hgroup", text)}
hr(text: String = ""): Lux {Lux.new("hr", text)}
html(text: String = ""): Lux {Lux.new("html", text)}
i(text: String = ""): Lux {Lux.new("i", text)}
iframe(text: String = ""): Lux {Lux.new("iframe", text)}
img(text: String = ""): Lux {Lux.new("img", text)}
input(text: String = ""): Lux {Lux.new("input", text)}
ins(text: String = ""): Lux {Lux.new("ins", text)}
kbd(text: String = ""): Lux {Lux.new("kbd", text)}
label(text: String = ""): Lux {Lux.new("label", text)}
legend(text: String = ""): Lux {Lux.new("legend", text)}
li(text: String = ""): Lux {Lux.new("li", text)}
link(text: String = ""): Lux {Lux.new("link", text)}
main(text: String = ""): Lux {Lux.new("main", text)}
map(text: String = ""): Lux {Lux.new("map", text)}
mark(text: String = ""): Lux {Lux.new("mark", text)}
menu(text: String = ""): Lux {Lux.new("menu", text)}
meta(text: String = ""): Lux {Lux.new("meta", text)}
meter(text: String = ""): Lux {Lux.new("meter", text)}
nav(text: String = ""): Lux {Lux.new("nav", text)}
noscript(text: String = ""): Lux {Lux.new("noscript", text)}
object(text: String = ""): Lux {Lux.new("object", text)}
ol(text: String = ""): Lux {Lux.new("ol", text)}
optgroup(text: String = ""): Lux {Lux.new("optgroup", text)}
option(text: String = ""): Lux {Lux.new("option", text)}
output(text: String = ""): Lux {Lux.new("output", text)}
p(text: String = ""): Lux {Lux.new("p", text)}
picture(text: String = ""): Lux {Lux.new("picture", text)}
portal(text: String = ""): Lux {Lux.new("portal", text)}
xperimenta(text: String = ""): Lux {Lux.new("xperimenta", text)}
pre(text: String = ""): Lux {Lux.new("pre", text)}
progress(text: String = ""): Lux {Lux.new("progress", text)}
q(text: String = ""): Lux {Lux.new("q", text)}
rp(text: String = ""): Lux {Lux.new("rp", text)}
rt(text: String = ""): Lux {Lux.new("rt", text)}
ruby(text: String = ""): Lux {Lux.new("ruby", text)}
s(text: String = ""): Lux {Lux.new("s", text)}
samp(text: String = ""): Lux {Lux.new("samp", text)}
script(text: String = ""): Lux {Lux.new("script", text)}
search(text: String = ""): Lux {Lux.new("search", text)}
section(text: String = ""): Lux {Lux.new("section", text)}
select(text: String = ""): Lux {Lux.new("select", text)}
slot(text: String = ""): Lux {Lux.new("slot", text)}
small(text: String = ""): Lux {Lux.new("small", text)}
source(text: String = ""): Lux {Lux.new("source", text)}
span(text: String = ""): Lux {Lux.new("span", text)}
strong(text: String = ""): Lux {Lux.new("strong", text)}
style(text: String = ""): Lux {Lux.new("style", text)}
sub(text: String = ""): Lux {Lux.new("sub", text)}
summary(text: String = ""): Lux {Lux.new("summary", text)}
sup(text: String = ""): Lux {Lux.new("sup", text)}
table(text: String = ""): Lux {Lux.new("table", text)}
tbody(text: String = ""): Lux {Lux.new("tbody", text)}
td(text: String = ""): Lux {Lux.new("td", text)}
template(text: String = ""): Lux {Lux.new("template", text)}
textarea(text: String = ""): Lux {Lux.new("textarea", text)}
tfoot(text: String = ""): Lux {Lux.new("tfoot", text)}
th(text: String = ""): Lux {Lux.new("th", text)}
thead(text: String = ""): Lux {Lux.new("thead", text)}
time(text: String = ""): Lux {Lux.new("time", text)}
title(text: String = ""): Lux {Lux.new("title", text)}
tr(text: String = ""): Lux {Lux.new("tr", text)}
track(text: String = ""): Lux {Lux.new("track", text)}
u(text: String = ""): Lux {Lux.new("u", text)}
ul(text: String = ""): Lux {Lux.new("ul", text)}
var(text: String = ""): Lux {Lux.new("var", text)}
video(text: String = ""): Lux {Lux.new("video", text)}
wbr(text: String = ""): Lux {Lux.new("wbr", text)}
