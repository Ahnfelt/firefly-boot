import LuxEvent

class Lux {}
data LuxException(message: String)

new(tagName: String): Lux
    target js sync """
        return {key: '', tag: tagName_, props: new Map(), children: []}
    """

useState[T](initialValue: T, body: (T, T => Unit) => Lux): Lux
    target js async """
        return {key: '', hook: 'useState', value: initialValue_, callback: null, body: body_}
    """
    target js sync """
        return {key: '', hook: 'useState', value: initialValue_, callback: null, body: body_}
    """

useEffect[T: Equal](dependency: T, update: T => (() => Unit), body: () => Lux): Lux
    target js async """
        return {key: '', hook: 'useEffect', value: dependency_, callback: update_, body: body_}
    """
    target js sync """
        return {key: '', hook: 'useEffect', value: dependency_, callback: update_, body: body_}
    """

useMemo[T: Equal, R](dependency: T, update: T => R, body: R => Lux): Lux
    target js async """
        return {key: '', hook: 'useMemo', value: dependency_, callback: update_, body: body_}
    """
    target js sync """
        return {key: '', hook: 'useMemo', value: dependency_, callback: update_, body: body_}
    """

extend self: Lux {

    key(key: String): Lux
        target js sync """
            self_.key = key_
            return self_
        """
    
    with(name: String, value: String): Lux
        target js sync """
            if(!self_.props) return self_
            self_.props.set(name_, value_)
            return self_
        """

    withIf(name: String, condition: Bool, body: () => String): Lux
        target js async """
            if(!self_.props) return self_
            if(condition_) self_.props.set(name_, await body_())
            return self_
        """
        target js sync """
            if(!self_.props) return self_
            if(condition_) self_.props.set(name_, body_())
            return self_
        """

    on(event: String, body: LuxEvent => Unit): Lux
        target js async """
            if(self_.hook) return self_
            self_.props.push({name: name_, value: body_})
            return self_
        """
        target js sync """
            if(self_.hook) return self_
            self_.props.push({name: name_, value: body_})
            return self_
        """

    onIf(event: String, condition: Bool, body: LuxEvent => Unit): Lux
        target js async """
            if(self_.hook) return self_
            if(condition) self_.props.push({name: name_, value: body_})
            return self_
        """
        target js sync """
            if(self_.hook) return self_
            if(condition) self_.props.push({name: name_, value: body_})
            return self_
        """

    add(node: Lux): Lux
        target js sync """
            if(!self_.children) return self_
            self_.children.push(node_)
            return self_
        """

    addIf(condition: Bool, body: () => Lux): Lux
        target js async """
            if(!self_.children) return self_
            if(condition_) self_.children.push(await body_())
            return self_
        """
        target js sync """
            if(!self_.children) return self_
            if(condition_) self_.children.push(body_())
            return self_
        """

    addList(nodes: List[Lux]): Lux
        target js sync """
            if(!self_.children) return self_
            let n = nodes_
            while(n.tail_) { 
                n = n.tail_
                self_.children.push(n.head_)
            }
            return self_
        """
        
    addArray(nodes: Array[Lux]): Lux
        target js sync """
            if(!self_.children) return self_
            for(let i = 0; i < nodes_.length; i++) {
                self_.children.push(nodes_[i])
            }
            return self_
        """
        
    text(text: String): Lux
        target js sync """
            if(!self_.children) return self_
            self_.children.push(text_)
            return self_
        """

    textIf(condition: Bool, body: () => String): Lux
        target js async """
            if(!self_.children) return self_
            if(condition_) self_.children.push(await body_())
            return self_
        """
        target js sync """
            if(!self_.children) return self_
            if(condition_) self_.children.push(body_())
            return self_
        """

}

update(element: JsValue, old: Lux, new: Lux): Lux
    target js sync """
        function update(element, oldLux, newLux) {
            if(oldLux === newLux) return newLux
            // Speed through matching prefix
            const oldChildren = oldLux.children
            const newChildren = newLux.children
            const minLength = Math.min(oldChildren.length, newChildren.length)
            let i = 0
            for(; i < minLength && oldChildren[i] === newChildren[i]; i++) {}
            for(; i < minLength && oldChildren[i].key === newChildren[i].key; i++) {
                update(element.childNodes[i], oldChildren[i], newChildren[i])
            }
            if(i == oldChildren.length && i == newChildren.length) return newLux
            // If not done, do the complicated rearrange
            const indexMap = new Map()
            // First build a multimap from old keys to indexes
            for(let j = i; j < oldChildren.length; j++) {
                const child = oldChildren[j]
                const indexes = indexMap.get(child.key)
                if(indexes === void 0) {
                    indexMap.set(child.key, j)
                } else if(typeof indexes === 'number') {
                    indexMap.set(child.key, [indexes, j])
                } else {
                    indexes.push(j)
                }
            }
            // Then go through the new children, diff and patch
            let k = i
            for(; k < newChildren.length; k++) {
                const child = newChildren[k]
                const indexes = indexMap.get(child.key)
                if(indexes === k) {
                    // Preserve element
                    indexMap.delete(child.key)
                    update(element.childNodes[k], oldChildren[k], newChildren[k])
                } else if(indexes === void 0) {
                    // Create and insert new element
                    const newElement = document.createElement(newChildren[k].tag)
                    element.insertBefore(newElement, element.childNodes[k + 1] || null)
                    update(newElement, {...newChildren[k], props: new Map(), children: []}, newChildren[k])
                } else {
                    // Preserve and move element
                    const index = 
                        typeof indexes === 'number' ? indexes : 
                        indexes.length === 2 ? (indexMap.set(child.key, indexes[1]), indexes[0]) :
                        indexes.shift()
                    element.insertBefore(element.childNodes[index], element.childNodes[k + 1] || null)
                    update(element.childNodes[k], oldChildren[index], newChildren[k])
                }
            }
            // Delete any trailing elements and unused old vdom nodes
            for(; k < oldChildren.length; k++) {
                element.removeChild(element.childNodes[k])
            }
            indexMap.forEach(indexes => { 
                if(typeof indexes === 'number') {
                    if(oldChildren[indexes].stop) oldChildren[indexes].stop()
                } else {
                    for(const index of indexes) {
                        if(oldChildren[index].stop) oldChildren[index].stop()
                    }
                }
            })
            return newLux
        }
        update(element_, old_, new_)
    """
