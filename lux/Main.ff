import HttpServer from ff:httpserver

import Lux
import LuxEvent
import Css

data ChatEntry(
    question: String
    answer: Option[String]
)

mainComponent(lux: Lux, http: HttpClient) {
    lux.useState([]): chat, setChat => 
    lux.useState(""): message, setMessage =>
    lux.div {
        lux.div {
            chat.each {questionComponent(lux, http, _)}
        }
        lux.form {
            lux.input {
                //.with("autofocus", "true")
                lux.setValue(message)
                lux.onInput {event => setMessage(event.text())}
            }
            lux.on("submit") {event => 
                event.preventDefault()
                setMessage("")
                setChat([...chat, message])
            }
        }
    }
}

questionCss = CssClass([Css.marginBottom("10px")], [], [])

questionComponent(lux: Lux, http: HttpClient, question: String) {
    lux.div {
        lux.cssClass(questionCss)
        lux.div {lux.text("User: " + question)}
        lux.useLazy1(question): _ =>
        lux.useSuspense {lux.div {lux.text("Assistant typing...")}}: lux =>
        let answer = http.post("/chat", [], question.toBuffer()) {_.readText()}
        lux.div {lux.text("Assistant: " + answer)}
    }
}

browserMain(system: BrowserSystem) {
    Lux.renderById(system, "main") {lux => mainComponent(lux, system.httpClient())}
}

nodeMain(system: NodeSystem) {
    let openAiKey = system.arguments().first()
    HttpServer.listen(system, "localhost", 8080) {request, response =>
        if(request.path() == "/") {
            response.setHeader("Content-Type", ["text/html; charset=UTF-8"])
            response.writeText("<!doctype html>")
            response.writeText("<div id='main'></div>")
            response.writeText("<script type='module' src='/js/script/script/Main.mjs'></script>")
        } elseIf {request.path().startsWith("/js/") && !request.path().contains("..")} {
            response.setHeader("Content-Type", ["text/javascript; charset=UTF-8"])
            response.writeText(system.assets().readText(request.path()))
        } elseIf {request.path() == "/chat"} {
            let question = request.readText()
            response.setHeader("Content-Type", ["text/plain; charset=UTF-8"])
            openAiKey.{
                | None => 
                    system.mainTask().sleep(Duration(question.size().toFloat()))
                    response.writeText("Hi! You need to give an OpenAI secret key at the command line.")
                | Some(key) => 
                    let chatJson = encodeChat(question)
                    let answer = fetchAnswer(system.httpClient(), key, chatJson)
                    response.writeText(answer)
            }
        } else {
            response.writeStatus(404, Some("Not found"))
        }
    }
}

fetchAnswer(httpClient: HttpClient, key: String, question: Json): String {
    let json = httpClient.post(
        url = "https://api.openai.com/v1/chat/completions"
        headers = [
            Pair("Authorization", "Bearer " + key)
            Pair("Content-Type", "application/json")
        ]
        body = question.write().toBuffer()
    ) {_.readJson()}
    json.field("choices").index(0).field("message").field("content").grabString()
}

encodeChat(question: String): Json {
    let systemJson = Json.object()
        .with("role", "system")
        .with("content", "You are a helpful assistant.")
    let questionJson = Json.object()
        .with("role", "user")
        .with("content", question)
    Json.object()
        .with("model", "gpt-3.5-turbo")
        .with("messages", [systemJson, questionJson])
}


/*
let
encodeMessage role content = 
    E.object  [ ("role", E.string role), ("content", E.string content) ]
encodeEntry question maybeAnswer = case maybeAnswer of
    Nothing -> [ encodeMessage "user" question ]
    Just answer -> [ encodeMessage "user" question, encodeMessage "assistant" answer ]
encodedMessages = encodeMessage "system" "You are a helpful assistant."
    :: List.concatMap (\entry -> encodeEntry entry.question entry.answer) chat
in E.object 
[ ("model", E.string "gpt-3.5-turbo")
, ("messages", E.list (\x -> x) encodedMessages)
]
*/
buildMain(system: BuildSystem) {
    let browser = system.compileForBrowser("Main.ff")
    let assets = AssetSystem.create().addAssets("/js", browser.assets())
    system.setAssets(assets)
}
