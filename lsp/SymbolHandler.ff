import LspHook from ff:compiler
import Syntax from ff:compiler

data DocumentSymbol(
    name: String
    kind: Int
    selectionStart: Location
    selectionEnd: Location
    start: Location
    end: Location
    children: List[DocumentSymbol]
)

data WorkspaceSymbol(
    name: String
    kind: Int
    containerName: Option[String]
    selectionStart: Location
    selectionEnd: Location
)

class Result[T](
    result: T
    remaining: List[ResultHook]
)

data ReadSymbolsError()

readAllSymbols(hooks: List[ResultHook]): List[DocumentSymbol]  {
    let result = readSymbols(hooks)
    if(!result.remaining.isEmpty()) {throw(ReadSymbolsError())}
    result.result
}

readSymbols(hooks: List[ResultHook]): Result[List[DocumentSymbol]]  {
    | [ParseSymbolBegin, ...rest] => 
        let symbol = readSymbol(rest)
        let symbols = readSymbols(symbol.remaining)
        Result([symbol.result, ...symbols.result], symbols.remaining)
    | _ => Result([], hooks)
}

readSymbol(hooks: List[ResultHook]): Result[DocumentSymbol] {
    let children = readSymbols(hooks)
    children.remaining.{
        | [ParseSymbolEnd(name, kind, selectionStart, selectionEnd, start, end), ...rest] => 
            let symbol = DocumentSymbol(name, kind, selectionStart, selectionEnd, start, end, children.result)
            Result(symbol, rest)
        | _ => throw(ReadSymbolsError())
        }
}

handleDocumentSymbol(system: NodeSystem, resultHooks: List[ResultHook]): List[JsValue] {
    let symbols = readAllSymbols(resultHooks)
    symbols.map {documentSymbolToLsp(system.js(), _)}
}

handleWorkspaceSymbol(system: NodeSystem, resultHooks: List[ResultHook], query: String): List[JsValue] {
    let documentSymbols = readAllSymbols(resultHooks)
    let workspaceSymbols = documentSymbols.flatMap {documentToWorkspaceSymbols(_, None)}
    let foundSymbols = workspaceSymbols.filter {_.name.startsWith(query)}
    //Log.trace("handleWorkspaceSymbol")
    //workspaceSymbols.each {Log.show(_)}
    let jsSymbols = foundSymbols.map {workspaceSymbolToLsp(system.js(), system.path("."), _)}
    //workspaceSymbolsJs.each {Log.trace(_.toJson(None))}
    jsSymbols
}

documentToWorkspaceSymbols(symbol: DocumentSymbol, parentName: Option[String]): List[WorkspaceSymbol] {
    let s = WorkspaceSymbol(
        symbol.name
        kind = symbol.kind
        containerName = parentName
        selectionStart = symbol.selectionEnd
        selectionEnd = symbol.selectionEnd
    )
    let children = symbol.children.flatMap {documentToWorkspaceSymbols(_, Some(symbol.name))}
    [s, ... children]
}

showHook(lspHook: ResultHook): String {
    | ParseSymbolBegin => "ParseSymbolBegin"
    | ParseSymbolEnd(name, kind, _, _, _, _) => "ParseSymbolEnd("+Show.show(name)+", "+Show.show(kind)+")"
    //| ParseSymbolBegin => "("
    //| ParseSymbolEnd(name, kind, symbolStart, selectionStart, selectionEnd) => ") " + name + " " + showPosition(selectionStart) + " - " + showPosition(selectionEnd)
    | _ => "other"
}

showPosition(at: Location): String {
    at.line + ":" + at.column
}

documentSymbolToLsp(js: JsSystem, symbol: DocumentSymbol): JsValue {
    js.object()
        .with("name", symbol.name)
        .with("kind", symbol.kind)
        .with("range", locationsToLspRange(js, symbol.start, symbol.end))
        .with("selectionRange", locationsToLspRange(js, symbol.selectionStart, symbol.selectionEnd))
        .with("children", js.array(symbol.children.map {documentSymbolToLsp(js, _)}))
}

workspaceSymbolToLsp(js: JsSystem, rootPath: Path, symbol: WorkspaceSymbol): JsValue {
    let o = js.object()
        .with("name", symbol.name)
        .with("kind", symbol.kind)
        .with("location", js.object()
            .with("uri", rootPath.path(symbol.selectionStart.file).url())
            .with("range", locationsToLspRange(js, symbol.selectionStart, symbol.selectionEnd))
        )
    symbol.containerName.{
        | Some(n) => o.with("containerName", n)
        | None => o
    }   
}

locationsToLspRange(js: JsSystem, start: Location, end: Location): JsValue {
    js.object()
        .with("start", js.object()
            .with("line", start.line - 1)
            .with("character", start.column - 1)
        )
        .with("end", js.object()
            .with("line", end.line - 1)
            .with("character", end.column - 1)
        )
}

symbolFilter(symbol: WorkspaceSymbol, query: String): Bool {
    let symbolWords = splitCamelCased(symbol.name.takeWhile {_.isAsciiLetterOrDigit()})
    matchSymbol(symbolWords, query)
}

matchSymbol(symbolWords: List[String], query: String): Bool {
    let go = IntMap.memo {f, wordIndex => IntMap.memo {_, queryOffset =>
        if(queryOffset >= query.size()) {True} else:
        if(wordIndex >= symbolWords.size()) {False} else:
        prefixes(query.dropFirst(queryOffset)).any {prefix => 
            symbolWords.grab(wordIndex).startsWith(prefix) && 
            f(wordIndex + 1)(queryOffset + prefix.size())
        }
    }}
    go(0)(0)
}

prefixes(string: String): List[String] {
    if(string == "") {[""]} else:
    function go(rest: String): List[String] {
        if(rest == "") {
            [""]
        } else {
            [rest, ...go(rest.dropLast())]
        }
    }
    go(string.grab(0).toString().lower() + string.dropFirst().takeWhile {!_.isAsciiUpper()})
}

splitCamelCased(name: String): List[String] {
    name.first().{
        | None => []
        | Some(c) => 
            let word = c.toString().lower() + name.dropFirst().takeWhile {_.isAsciiLower()}
            let rest = name.dropFirst(word.size())
            [word, ...splitCamelCased(rest)]
    }
}
