import LspHook from ff:compiler
import Syntax from ff:compiler

class Symbol(
    at: Location
    name: String
    kind: Int
    end: Option[Location]
    children: List[Symbol]
)

/*
readSymbols(hooks: List[ResultHook]): List[Symbol] {
    hooks.{
        | [] => []
        | [ParseSymbolBegin(at, name, kind), rest] => 
            let first = readSymbol(hooks)
            let rest = readSymbols(first.second)
            [first.first, ...rest]
        | [ParseSymbolEnd(_), ...rest] => throw("readSymbols, unexpected ParseSymbolEnd")
        | [_, ...rest] => throw("readSymbols, unexpected symbol")
        }
}

readSymbol(
    at: Location
    name: String
    kind: Int    
    hooks: List[ResultHook]
): Pair[Symbol, List[ResultHook]] {
    hooks.{
        | [] throw("readSymbol empty list")
        | [ParseSymbolBegin(_, _, _), ...rest] => 
        | [ParseSymbolEnd(at, name, kind), ...rest] => 
    }

}
*/

handleDocumentSymbol(system: NodeSystem, lspHook: LspHook): JsValue {
    lspHook.results().each {hook =>
        Log.trace(showHook(hook))
    }
    system.js().array([])
}

showHook(lspHook: ResultHook): String {
    //| ParseSymbolBegin(at, name, kind) => "ParseSymbolBegin("+Show.show(at)+", "+Show.show(name)+", "+Show.show(kind)+")"
    //| ParseSymbolEnd(at, name) => "ParseSymbolEnd("+Show.show(at)+", "+Show.show(name)+")"
    | ParseSymbolBegin(at, name, kind) => at.file + " " + at.line + ":" + at.column + " " + name + "-( "
    | ParseSymbolEnd(at, name) => at.file + " " + at.line + ":" + at.column + " )-" + name
    | _ => "other"
}

a = 42

x = do {
    let y1 = do {
        let z1 = 1
        z1
    }
    mutable y2 = do {
        let z2 = 2
        z2
    }
    y1 + y2
}
