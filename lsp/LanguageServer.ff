dependency ff:compiler:0.0.0
import JsEmitter from ff:compiler
import Builder from ff:compiler
import Syntax from ff:compiler

class LanguageServer(
    mutable openFiles: Map[String, String]
)

data BadRequestException(reason: String)

capability Request(
    headers: Map[String, String]
    object: JsValue
)

capability RequestMessage(
    id: Option[MessageId] // None when the request is a Notification Message
    method: String
    parameters: Map[String, JsValue]
)

data MessageId {
    MessageIdInt(id: Int)
    MessageIdString(id: String)
}

capability ResultOrError {
    Result(result: JsValue)
    Error(code: Int, message: String)
}


main(system: NodeSystem) {
    try {
        mutable input = system.readStream()
        while {True} {
            let requestPair = parseRequest(system, input)
            input = requestPair.second
            let request = requestPair.first
            let message = parseRequestMessage(request.object)
            handleRequestMessage(system, message).each {body =>
                system.writeText(makeResponse(body))
            }
            //system.writeText(makeResponse(makeDiagnoseNotification(system.js())))
        }
    } catch {| BadRequestException(reason), error =>
         system.writeErrorText(reason + "\n")
    } grab()
}
    
parseRequest(system: NodeSystem, input: Stream[Buffer]): Pair[Request, Stream[Buffer]] {
    let headersPair = parseRequestHeaders(input)
    let headers = headersPair.first
    let contentLength = headers
        .get("content-length").else {throw(BadRequestException("'content-length' header is missing"))}
        .getInt().else {throw(BadRequestException("Value for 'content-length' is not an integer"))}
    let bodyPair = parseRequestBody(system.js(), contentLength, headersPair.second)
    bodyPair.mapFirst {body => Request(headers, body)}
}

parseRequestHeaders(input: Stream[Buffer]): Pair[Map[String, String], Stream[Buffer]] {
    let buffers = Stack.make()
    mutable buffer = input.next().else {
        throw(BadRequestException("End of input while parsing request headers"))
    }
    mutable offset = 0
    mutable droppingInitialNewlines = True
    mutable lastWasNewline = False
    mutable done = False
    while {!done} {
        if(offset == buffer.size()) {
            offset = 0
            buffers.push(buffer)
            buffer = input.next().else {
                throw(BadRequestException("End of input while parsing request headers"))
            }
        }
        let byte = buffer.grabUint8(offset)
        if(droppingInitialNewlines && (byte == '\n'.codeUnit || byte == '\r'.codeUnit)) {
            // Skip
        } elseIf {byte == '\n'.codeUnit} {
            if(lastWasNewline) {
                done = True
            } else {
                lastWasNewline = True
            }
        } elseIf {byte != '\r'.codeUnit && lastWasNewline} {
            lastWasNewline = False
        } else {
            droppingInitialNewlines = False
        }
        offset += 1
    }
    buffers.push(buffer.view(0, offset))
    let headers = Buffer.fromBufferArray(buffers.drain()).toString()
    let map = headers.lines().pairs().filter {_.second.size() != 0}.map {| Pair(i, line) =>
        line.splitFirst(':').else {
            throw(BadRequestException("Invalid header at line " + i + " '" + line + "'"))
        }.mapFirst {_.lower()} //.mapSecond {_.trim()}
    }.toMap()
    Pair(map, [buffer.view(offset, buffer.size())].toStream().addAll(input))
}

parseRequestBody(js: JsSystem, contentLength: Int, input: Stream[Buffer]): Pair[JsValue, Stream[Buffer]] {
    let bodyPair = try {
        input.readBytes(contentLength) // Should Stream.readBytes return an option?
    } catchAny {error =>
        throw(BadRequestException("End of input while parsing request body"))
    } grab()
    let body = Buffer.fromBufferArray(bodyPair.first).toString()
    let json = try {
        js.parseJson(body)
    } catchAny {error =>
        throw(BadRequestException("Invalid JSON in request body: " + body))
    } grab()
    Pair(json, bodyPair.second)
}

parseRequestMessage(object: JsValue): RequestMessage {
    let id = object.getOwn("id").map {id =>
        if(id.isInt()) {
            MessageIdInt(id.grabInt())
        } elseIf {id.isString()} {
            MessageIdString(id.grabString())
        } else {
            throw(BadRequestException("Bad JSON-RPC id, int or string expected"))
        }
    }

    let method = object.getOwn("method").{
        | None => throw(BadRequestException("Bad JSON-RPC, missing method"))
        | Some(m) {!m.isString()} => throw(BadRequestException("Bad JSON-RPC method, string expected"))
        | Some(m) => m.grabString()
    }

    let parameters = object.getOwn("params").{
        | None => [].toMap()
        | Some(o) {!o.isObject()} => throw(BadRequestException("Bad JSON-RPC params, object expected"))
        | Some(o) => o.grabMap()
    }

    RequestMessage(id, method, parameters)
}

handleRequestMessage(system: NodeSystem, message: RequestMessage): Option[JsValue] {
    message.id.{
        // Notification Message
        | None =>
            message.method.{
                | "initialized" =>
                | _ =>
            }
            None
        // Request Message
        | Some(id) =>
            let result = message.method.{
                | "initialize" => handleInitialize(system.js(), message.parameters)
                | "textDocument/diagnostic" => handleDiagnostic(system, message.parameters)
                | "hover" => handleHover(system.js(), message.parameters)
                | _ => handleUnsupported(system.js())
            }
            Some(makeResponseMessage(system.js(), id, result))
    }
}

makeResponse(body: JsValue): String {
    let json = body.toJson(Some("    "))
    let length = json.size()
    "Content-Length: " + length + "\r\n" +
    "\r\n" +
    json
}

makeResponseMessage(js: JsSystem, id: MessageId, result: ResultOrError): JsValue {
    let o = js.object()
    o.set("jsonrpc", "2.0")
    id.{
        | MessageIdInt(id) => o.set("id", id)
        | MessageIdString(id) => o.set("id", id)
    }
    result.{
        | Result(result) =>
            o.set("result", result)
        | Error(code, message) =>
            let e = js.object()
            e.set("code", code)
            e.set("message", message)
            o.set("error", e)
    }
    o
}

handleUnsupported(js: JsSystem): ResultOrError {
    Error(1234, "Unsupported method")
}

handleInitialize(js: JsSystem, parameters: Map[String, JsValue]): ResultOrError {
    let anyFireflyFile = js.object()
        .with("filters", [
            js.object()
                .with("pattern", js.object()
                    .with("glob", "**/*.ff")
                    .with("matches", "file")
                )
        ].toArray())

    let o = js.object()
        .with("capabilities", js.object()
            .with("textDocumentSync", js.object()
                .with("openClose", True)
                .with("change", 1 /* TextDocumentSyncKind.Full */)
            )
            .with("hoverProvider", False)
            //.with("definitionProvider", True)
            //.with("typeDefinitionProvider", True)
            .with("diagnosticProvider", js.object()
                .with("interFileDependencies", True)
                .with("workspaceDiagnostics", False)
            )
            /*.with("workspace", js.object()
                .with("workspaceFolders", js.object()
                     .with("supported", True)
                     .with("changeNotifications", True)
                )
                .with("fileOperations", js.object()
                     .with("didCreate", anyFireflyFile)
                     .with("didRename", anyFireflyFile)
                     .with("didDelete", anyFireflyFile)
                )
            )*/
        )
        .with("serverInfo", js.object()
            .with("name", "Firefly Language Server")
            .with("version", "0.0.0")
        )
    Result(o)
}

handleDiagnostic(system: NodeSystem, parameters: Map[String, JsValue]): ResultOrError {
    let js = system.js()

    let diagnostics = try {
        //Builder.check(system, ".", "LanguageServer.ff")
        []
    } catch {| CompileError(at, message), error =>
        let diagnostic = js.object()
            .with("range", js.object()
                .with("start", js.object()
                    .with("line", at.line).with("character", at.column)
                )
                .with("end", js.object()
                    .with("line", at.line).with("character", at.column + 1)
                )
            )
            .with("severity", 1 /* Error */)
            .with("message", message)
        [diagnostic]
    } grab()

    let o = js.object()
        .with("kind", "full")
        .with("items", diagnostics.toArray())
    Result(o)
}

handleHover(js: JsSystem, parameters: Map[String, JsValue]): ResultOrError {
    let o = js.object().with("contents", "TODO")
    Result(o)
}

makeNotificationMessage(js: JsSystem, method: String, params: JsValue): JsValue {
    js.object()
        .with("jsonrpc", "2.0")
        .with("method", method)
        .with("params", params)
}