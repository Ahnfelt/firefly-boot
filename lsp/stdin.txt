Content-Length: 5836

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":43727,"clientInfo":{"name":"Visual Studio Code","version":"1.76.2"},"locale":"en","rootPath":"/Users/ahnfelt/Downloads/firefly-boot","rootUri":"file:///Users/ahnfelt/Downloads/firefly-boot","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"configuration":true,"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"codeLens":{"refreshSupport":true},"executeCommand":{"dynamicRegistration":true},"didChangeConfiguration":{"dynamicRegistration":true},"workspaceFolders":true,"semanticTokens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"didRename":true,"didDelete":true,"willCreate":true,"willRename":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true},"diagnostics":{"refreshSupport":true}},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]},"codeDescriptionSupport":true,"dataSupport":true},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"insertTextMode":2,"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]},"labelSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit"]},"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"honorsChangeAnnotations":false},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"requests":{"range":true,"full":{"delta":true}},"multilineTokenSupport":false,"overlappingTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"linkedEditingRange":{"dynamicRegistration":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"window":{"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true},"workDoneProgress":true},"general":{"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"positionEncodings":["utf-16"]},"notebookDocument":{"synchronization":{"dynamicRegistration":true,"executionSummarySupport":true}}},"trace":"off","workspaceFolders":[{"uri":"file:///Users/ahnfelt/Downloads/firefly-boot","name":"firefly-boot"}]}}Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 9421

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/ahnfelt/Downloads/firefly-boot/lsp/LanguageServer.ff","languageId":"firefly","version":1,"text":"class LanguageServer(\n    mutable openFiles: Map[String, String]\n)\n\ndata BadRequestException(reason: String)\n\ncapability Request(\n    headers: Map[String, String]\n    object: JsValue\n)\n\ncapability RequestMessage(\n    id: Option[MessageId] // None when the request is a Notification Message\n    method: String\n    parameters: Map[String, JsValue]\n)\n\ndata MessageId {\n    MessageIdInt(id: Int)\n    MessageIdString(id: String)\n}\n\ncapability ResultOrError {\n    Result(result: JsValue)\n    Error(code: Int, message: String)\n}\n\n\nmain(system: NodeSystem) {\n    try {\n        mutable input = system.readStream()\n        while {True} {\n            let requestPair = parseRequest(system, input)\n            input = requestPair.second\n            let request = requestPair.first\n            let message = parseRequestMessage(request.object)\n            handleRequestMessage(system.js(), message).each {body =>\n                system.writeText(makeResponse(body))\n            }\n            //system.writeText(makeResponse(makeDiagnoseNotification(system.js())))\n        }\n    } catch {| BadRequestException(reason), error =>\n         system.writeErrorText(reason + \"\\n\")\n    } grab()\n}\n    \nparseRequest(system: NodeSystem, input: Stream[Buffer]): Pair[Request, Stream[Buffer]] {\n    let headersPair = parseRequestHeaders(input)\n    let headers = headersPair.first\n    let contentLength = headers\n        .get(\"content-length\").else {throw(BadRequestException(\"'content-length' header is missing\"))}\n        .getInt().else {throw(BadRequestException(\"Value for 'content-length' is not an integer\"))}\n    let bodyPair = parseRequestBody(system.js(), contentLength, headersPair.second)\n    bodyPair.mapFirst {body => Request(headers, body)}\n}\n\nparseRequestHeaders(input: Stream[Buffer]): Pair[Map[String, String], Stream[Buffer]] {\n    let buffers = Stack.make()\n    mutable buffer = input.next().else {\n        throw(BadRequestException(\"End of input while parsing request headers\"))\n    }\n    mutable offset = 0\n    mutable droppingInitialNewlines = True\n    mutable lastWasNewline = False\n    mutable done = False\n    while {!done} {\n        if(offset == buffer.size()) {\n            offset = 0\n            buffers.push(buffer)\n            buffer = input.next().else {\n                throw(BadRequestException(\"End of input while parsing request headers\"))\n            }\n        }\n        let byte = buffer.grabUint8(offset)\n        if(droppingInitialNewlines && (byte == '\\n'.codeUnit || byte == '\\r'.codeUnit)) {\n            // Skip\n        } elseIf {byte == '\\n'.codeUnit} {\n            if(lastWasNewline) {\n                done = True\n            } else {\n                lastWasNewline = True\n            }\n        } elseIf {byte != '\\r'.codeUnit && lastWasNewline} {\n            lastWasNewline = False\n        } else {\n            droppingInitialNewlines = False\n        }\n        offset += 1\n    }\n    buffers.push(buffer.view(0, offset))\n    let headers = Buffer.fromBufferArray(buffers.drain()).toString()\n    let map = headers.lines().pairs().filter {_.second.size() != 0}.map {| Pair(i, line) =>\n        line.splitFirst(':').else {\n            throw(BadRequestException(\"Invalid header at line \" + i + \" '\" + line + \"'\"))\n        }.mapFirst {_.lower()} //.mapSecond {_.trim()}\n    }.toMap()\n    Pair(map, [buffer.view(offset, buffer.size())].toStream().addAll(input))\n}\n\nparseRequestBody(js: JsSystem, contentLength: Int, input: Stream[Buffer]): Pair[JsValue, Stream[Buffer]] {\n    let bodyPair = try {\n        input.readBytes(contentLength) // Should Stream.readBytes return an option?\n    } catchAny {error =>\n        throw(BadRequestException(\"End of input while parsing request body\"))\n    } grab()\n    let body = Buffer.fromBufferArray(bodyPair.first).toString()\n    let json = try {\n        js.parseJson(body)\n    } catchAny {error =>\n        throw(BadRequestException(\"Invalid JSON in request body: \" + body))\n    } grab()\n    Pair(json, bodyPair.second)\n}\n\nparseRequestMessage(object: JsValue): RequestMessage {\n    let id = object.getOwn(\"id\").map {id =>\n        if(id.isInt()) {\n            MessageIdInt(id.grabInt())\n        } elseIf {id.isString()} {\n            MessageIdString(id.grabString())\n        } else {\n            throw(BadRequestException(\"Bad JSON-RPC id, int or string expected\"))\n        }\n    }\n\n    let method = object.getOwn(\"method\").{\n        | None => throw(BadRequestException(\"Bad JSON-RPC, missing method\"))\n        | Some(m) {!m.isString()} => throw(BadRequestException(\"Bad JSON-RPC method, string expected\"))\n        | Some(m) => m.grabString()\n    }\n\n    let parameters = object.getOwn(\"params\").{\n        | None => [].toMap()\n        | Some(o) {!o.isObject()} => throw(BadRequestException(\"Bad JSON-RPC params, object expected\"))\n        | Some(o) => o.grabMap()\n    }\n\n    RequestMessage(id, method, parameters)\n}\n\nhandleRequestMessage(js: JsSystem, message: RequestMessage): Option[JsValue] {\n    message.id.{\n        // Notification Message\n        | None =>\n            message.method.{\n                | \"initialized\" =>\n                | _ =>\n            }\n            None\n        // Request Message\n        | Some(id) =>\n            let result = message.method.{\n                | \"initialize\" => handleInitialize(js, message.parameters)\n                | \"textDocument/diagnostic\" => handleDiagnostic(js, message.parameters)\n                | \"hover\" => handleHover(js, message.parameters)\n                | _ => handleUnsupported(js)\n            }\n            Some(makeResponseMessage(js, id, result))\n    }\n}\n\nmakeResponse(body: JsValue): String {\n    let json = body.toJson(Some(\"    \"))\n    let length = json.size()\n    \"Content-Length: \" + length + \"\\r\\n\" +\n    \"\\r\\n\" +\n    json\n}\n\nmakeResponseMessage(js: JsSystem, id: MessageId, result: ResultOrError): JsValue {\n    let o = js.object()\n    o.set(\"jsonrpc\", \"2.0\")\n    id.{\n        | MessageIdInt(id) => o.set(\"id\", id)\n        | MessageIdString(id) => o.set(\"id\", id)\n    }\n    result.{\n        | Result(result) =>\n            o.set(\"result\", result)\n        | Error(code, message) =>\n            let e = js.object()\n            e.set(\"code\", code)\n            e.set(\"message\", message)\n            o.set(\"error\", e)\n    }\n    o\n}\n\nhandleUnsupported(js: JsSystem): ResultOrError {\n    Error(1234, \"Unsupported method\")\n}\n\nhandleInitialize(js: JsSystem, parameters: Map[String, JsValue]): ResultOrError {\n    let anyFireflyFile = js.object()\n        .with(\"filters\", [\n            js.object()\n                .with(\"pattern\", js.object()\n                    .with(\"glob\", \"**/*.ff\")\n                    .with(\"matches\", \"file\")\n                )\n        ].toArray())\n\n    let o = js.object()\n        .with(\"capabilities\", js.object()\n            .with(\"textDocumentSync\", js.object()\n                .with(\"openClose\", True)\n                .with(\"change\", 1 /* TextDocumentSyncKind.Full */)\n            )\n            .with(\"hoverProvider\", False)\n            //.with(\"definitionProvider\", True)\n            //.with(\"typeDefinitionProvider\", True)\n            .with(\"diagnosticProvider\", js.object()\n                .with(\"interFileDependencies\", True)\n                .with(\"workspaceDiagnostics\", False)\n            )\n            /*.with(\"workspace\", js.object()\n                .with(\"workspaceFolders\", js.object()\n                     .with(\"supported\", True)\n                     .with(\"changeNotifications\", True)\n                )\n                .with(\"fileOperations\", js.object()\n                     .with(\"didCreate\", anyFireflyFile)\n                     .with(\"didRename\", anyFireflyFile)\n                     .with(\"didDelete\", anyFireflyFile)\n                )\n            )*/\n        )\n        .with(\"serverInfo\", js.object()\n            .with(\"name\", \"Firefly Language Server\")\n            .with(\"version\", \"0.0.0\")\n        )\n    Result(o)\n}\n\nhandleDiagnostic(js: JsSystem, parameters: Map[String, JsValue]): ResultOrError {\n    let diagnostic = js.object()\n        .with(\"range\", js.object()\n            .with(\"start\", js.object()\n                .with(\"line\", 0).with(\"character\", 6)\n            )\n            .with(\"end\", js.object()\n                .with(\"line\", 0).with(\"character\", 20)\n            )\n        )\n        .with(\"severity\", 1 /* Error */)\n        .with(\"message\", \"Hurray!\")\n\n    let o = js.object()\n        .with(\"kind\", \"full\")\n        .with(\"items\", [/*diagnostic*/].toArray())\n\n    Result(o)\n}\n\nhandleHover(js: JsSystem, parameters: Map[String, JsValue]): ResultOrError {\n    let o = js.object().with(\"contents\", \"TODO\")\n    Result(o)\n}\n\nmakeNotificationMessage(js: JsSystem, method: String, params: JsValue): JsValue {\n    js.object()\n        .with(\"jsonrpc\", \"2.0\")\n        .with(\"method\", method)\n        .with(\"params\", params)\n}\n"}}}Content-Length: 162

{"jsonrpc":"2.0","id":1,"method":"textDocument/diagnostic","params":{"textDocument":{"uri":"file:///Users/ahnfelt/Downloads/firefly-boot/lsp/LanguageServer.ff"}}}Content-Length: 44

{"jsonrpc":"2.0","id":2,"method":"shutdown"}