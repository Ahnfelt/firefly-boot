import JsEmitter from ff:compiler
import Builder from ff:compiler
import Syntax from ff:compiler
import Tokenizer from ff:compiler
import Token from ff:compiler

class Handler(
    mutable rootUri: Option[String]
    mutable virtualFiles: Map[String, String]
)

capability ResultOrError {
    Result(result: JsValue)
    Error(code: Int, message: String)
}

data LanguageServerException(message: String)

data TokenLocation(
    startLine: Int
    startColumn: Int
    endLine: Int
    endColumn: Int
    raw: String
)


extend self: Handler {

    handleNotification(system: NodeSystem, method: String, parameters: Map[String, JsValue]): Unit {
        method.{
            | "initialized" =>
            | "textDocument/didChange" => self.handleDidChange(system, parameters)
            | "textDocument/didClose" => self.handleDidClose(system, parameters)
            | _ =>
        }   
    }

    handleRequest(system: NodeSystem, method: String, parameters: Map[String, JsValue]): ResultOrError {
        method.{
            | "initialize" => self.handleInitialize(system.js(), parameters)
            | "textDocument/diagnostic" => self.handleDiagnostic(system, parameters)
            | "textDocument/hover" => self.handleHover(system, parameters, goToDefinition = False)
            | "textDocument/definition" => self.handleHover(system, parameters, goToDefinition = True)
            | _ => self.handleUnsupported(system.js())
        }
    }
    
    handleUnsupported(js: JsSystem): ResultOrError {
        Error(1234, "Unsupported method")
    }
    
    handleInitialize(js: JsSystem, parameters: Map[String, JsValue]): ResultOrError {
        self.rootUri = Some(parameters.grab("rootUri").grabString())

        let anyFireflyFile = js.object()
            .with("filters", [
                js.object()
                    .with("pattern", js.object()
                        .with("glob", "**/*.ff")
                        .with("matches", "file")
                    )
            ].toArray())
    
        let o = js.object()
            .with("capabilities", js.object()
                .with("textDocumentSync", js.object()
                    .with("openClose", True)
                    .with("change", 1 /* TextDocumentSyncKind.Full */)
                )
                .with("hoverProvider", True)
                .with("definitionProvider", True)
                //.with("typeDefinitionProvider", True)
                .with("diagnosticProvider", js.object()
                    .with("interFileDependencies", True)
                    .with("workspaceDiagnostics", False)
                )
                /*.with("workspace", js.object()
                    .with("workspaceFolders", js.object()
                         .with("supported", True)
                         .with("changeNotifications", True)
                    )
                    .with("fileOperations", js.object()
                         .with("didCreate", anyFireflyFile)
                         .with("didRename", anyFireflyFile)
                         .with("didDelete", anyFireflyFile)
                    )
                )*/
            )
            .with("serverInfo", js.object()
                .with("name", "Firefly Language Server")
                .with("version", "0.0.0")
            )
        Result(o)
    }
    
    handleDiagnostic(system: NodeSystem, parameters: Map[String, JsValue]): ResultOrError {
        let js = system.js()
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        let diagnostics = try {
            Builder.check(system, ".", fixedPath, self.virtualFiles, None)
            []
        } catch {| CompileError(at, message), error =>
            let fallback = TokenLocation(
                startLine = at.line - 1
                startColumn = at.column - 1
                endLine = at.line - 1
                endColumn = at.column
                raw = ""
            )
            let position = try {
                self.findToken(system, fixedPath, at.line, at.column).else {fallback}
            } catchAny {_ =>
                fallback
            } grab()
            let diagnostic = js.object()
                .with("range", js.object()
                    .with("start", js.object()
                        .with("line", position.startLine - 1).with("character", position.startColumn - 1)
                    )
                    .with("end", js.object()
                        .with("line", position.endLine - 1).with("character", position.endColumn - 1)
                    )
                )
                .with("severity", 1 /* Error */)
                .with("message", message)
            [diagnostic]
        } grab()
    
        let o = js.object()
            .with("kind", "full")
            .with("items", diagnostics.toArray())
        Result(o)
    }

    handleDidChange(system: NodeSystem, parameters: Map[String, JsValue]): Unit {
        let js = system.js()
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        let contentChanges = parameters.grab("contentChanges").grabArray()
        if(contentChanges.size() != 1) {throw(LanguageServerException("Expected a single element in contentChanges"))} else: 
        let contentChange = contentChanges.grab(0)
        if(!contentChange.get("range").isNullOrUndefined()) {throw(LanguageServerException("Expected a complete contentChange"))} else:
        let content = contentChange.get("text").grabString()
        self.virtualFiles = self.virtualFiles.add(fixedPath, content)
    }

    handleDidClose(system: NodeSystem, parameters: Map[String, JsValue]): Unit {
        let js = system.js()
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        self.virtualFiles = self.virtualFiles.remove(fixedPath)
    }

    handleHover(system: NodeSystem, parameters: Map[String, JsValue], goToDefinition: Bool): ResultOrError {
        let js = system.js()
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        let line = parameters.grab("position").get("line").grabInt() + 1
        let column = parameters.grab("position").get("character").grabInt() + 1
        let token = self.findToken(system, fixedPath, line, column)
        let hoverAt = Location(
            file = fixedPath
            line = token.map {_.startLine}.else {line}
            column = token.map {_.startColumn}.else {column}
        )
        Log.trace(Show.show(hoverAt) + " - " + Show.show(token))
        mutable hoverResult = None
        mutable hoverResultAt = None
        try {
            let hover = Some(Pair(hoverAt, {result, at => hoverResult = result; hoverResultAt = at}))
            Builder.check(system, ".", fixedPath, self.virtualFiles, hover)
        } catch {| CompileError(at, message), error =>
            Log.trace(message)
        } grab()
        let o = if(goToDefinition) {
            hoverResultAt.map {at => js.object()
                .with("uri", FileSystem.pathToUrl(system.files().absolutePath(at.file)))
                .with("range", js.object()
                    .with("start", js.object()
                        .with("line", at.line - 1).with("character", at.column - 1)
                    )
                    .with("end", js.object()
                        .with("line", at.line - 1).with("character", at.column - 1)
                    )
                )
            }.else {js.null()}
        } else {
            js.object().with("contents", 
                hoverResult.map {js.object()
                    .with("kind", "markdown")
                    .with("value", "```\n" + _ + "\n```")
                }.else {js.null()}
            )
        }
        Result(o)
    }
    
    makeNotificationMessage(js: JsSystem, method: String, params: JsValue): JsValue {
        js.object()
            .with("jsonrpc", "2.0")
            .with("method", method)
            .with("params", params)
    }

    findToken(system: NodeSystem, path: String, line: Int, column: Int): Option[TokenLocation] {
        let code = self.virtualFiles.get(path).else {system.files().readText(path)}
        let tokens = Tokenizer.tokenize(path, code)
        let token = tokens.toStream().find {token =>
            line >= token.startLine && line <= token.stopLine && (
                (line > token.startLine || column >= (1 + token.startOffset - token.startLineOffset)) &&
                (line < token.stopLine || column < (1 + token.stopOffset - token.stopLineOffset))
            )
        }
        token.map {t => TokenLocation(
            startLine = t.startLine
            startColumn = 1 + t.startOffset - t.startLineOffset
            endLine = t.stopLine
            endColumn = 1 + t.stopOffset - t.stopLineOffset
            raw = t.raw()
        )}
    }

}
