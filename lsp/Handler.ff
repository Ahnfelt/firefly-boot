import JsEmitter from ff:compiler
import Builder from ff:compiler
import Syntax from ff:compiler
import Tokenizer from ff:compiler
import Token from ff:compiler
import Environment from ff:compiler
import Unification from ff:compiler
import LspHook from ff:compiler
import HoverHandler
import CompletionHandler

class Handler(
    mutable rootUri: Option[String]
    mutable virtualFiles: Map[String, String]
    mutable cancelledRequests: Set[MessageId]
)

data MessageId {
    MessageIdInt(id: Int)
    MessageIdString(id: String)
}

capability ResultOrError {
    Result(result: JsValue)
    Error(code: Int, message: String)
}

data LanguageServerException(message: String)

data TokenLocation(
    file: String
    startLine: Int
    startColumn: Int
    endLine: Int
    endColumn: Int
    raw: String
)


extend self: Handler {

    handleNotification(system: NodeSystem, method: String, parameters: Map[String, JsValue]): Unit {
        method.{
            | "initialized" =>
            | "textDocument/didChange" => self.handleDidChange(system, parameters)
            | "textDocument/didClose" => self.handleDidClose(system, parameters)
            | "exit" => system.exit(0)
            | _ =>
        }
    }

    handleRequest(system: NodeSystem, method: String, parameters: Map[String, JsValue]): ResultOrError {
        method.{
            | "initialize" => self.handleInitialize(system.js(), parameters)
            | "textDocument/diagnostic" => self.handleDiagnostic(system, parameters)
            | "textDocument/completion" => self.handleCompletion(system, parameters)
            //| "textDocument/signatureHelp" => self.handleSignatureHelp(system, parameters)
            | "textDocument/hover" => self.handleHover(system, parameters, goToDefinition = False)
            | "textDocument/definition" => self.handleHover(system, parameters, goToDefinition = True)
            | "textDocument/references" => self.handleReferences(system, parameters, local = False)
            | "textDocument/rename" => self.handleRename(system, parameters)
            | "textDocument/documentHighlight" => self.handleReferences(system, parameters, local = True)
            | "shutdown" => Result(system.js().null())
            | _ => self.handleUnsupported(system.js())
        }
    }

    handleUnsupported(js: JsSystem): ResultOrError {
        Error(1234, "Unsupported method")
    }

    handleInitialize(js: JsSystem, parameters: Map[String, JsValue]): ResultOrError {
        self.rootUri = Some(parameters.grab("rootUri").grabString())

        let anyFireflyFile = js.object()
            .with("filters", [
                js.object()
                    .with("pattern", js.object()
                        .with("glob", "**/*.ff")
                        .with("matches", "file")
                    )
            ].toArray())

        let o = js.object()
            .with("capabilities", js.object()
                .with("textDocumentSync", js.object()
                    .with("openClose", True)
                    .with("change", 1 /* TextDocumentSyncKind.Full */)
                )
                .with("hoverProvider", True)
                .with("definitionProvider", True)
                .with("documentHighlightProvider", True)
                .with("diagnosticProvider", js.object()
                    .with("interFileDependencies", True)
                    .with("workspaceDiagnostics", False)
                )
                .with("completionProvider", js.object()
                    .with("triggerCharacters", js.array([".", " "].map {js.value(_)}))
                    .with("allCommitCharacters", js.array([";"].map {js.value(_)}))
                )
                /*.with("signatureHelpProvider", js.object()
                    .with("triggerCharacters", js.array(["("].map {js.value(_)}))
                    .with("retriggerCharacters", js.array([","].map {js.value(_)}))
                )*/
                .with("referencesProvider", True)
                /*.with("workspace", js.object()
                    .with("workspaceFolders", js.object()
                         .with("supported", True)
                         .with("changeNotifications", True)
                    )
                    .with("fileOperations", js.object()
                         .with("didCreate", anyFireflyFile)
                         .with("didRename", anyFireflyFile)
                         .with("didDelete", anyFireflyFile)
                    )
                )*/
                .with("renameProvider", True)
            )
            .with("serverInfo", js.object()
                .with("name", "Firefly Language Server")
                .with("version", "0.0.0")
            )
        Result(o)
    }

    handleDiagnostic(system: NodeSystem, parameters: Map[String, JsValue]): ResultOrError {
        let js = system.js()
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        let diagnostics = try {
            Builder.check(system, ".", fixedPath, self.virtualFiles, LspHook.disabled(), True)
            []
        } catch {| CompileError(at, message), error =>
            let tokenLocation = self.findToken(system, at)
            let diagnostic = js.object()
                .with("range", self.tokenLocationToLspRange(js, tokenLocation))
                .with("severity", 1 /* Error */)
                .with("message", message)
            [diagnostic]
        } grab()

        let o = js.object()
            .with("kind", "full")
            .with("items", diagnostics.toArray())
        Result(o)
    }

    handleDidChange(system: NodeSystem, parameters: Map[String, JsValue]): Unit {
        let js = system.js()
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        let contentChanges = parameters.grab("contentChanges").grabArray()
        if(contentChanges.size() != 1) {throw(LanguageServerException("Expected a single element in contentChanges"))} else:
        let contentChange = contentChanges.grab(0)
        if(!contentChange.get("range").isNullOrUndefined()) {throw(LanguageServerException("Expected a complete contentChange"))} else:
        let content = contentChange.get("text").grabString()
        self.virtualFiles = self.virtualFiles.add(fixedPath, content)
    }

    handleDidClose(system: NodeSystem, parameters: Map[String, JsValue]): Unit {
        let js = system.js()
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        self.virtualFiles = self.virtualFiles.remove(fixedPath)
    }

    handleHover(system: NodeSystem, parameters: Map[String, JsValue], goToDefinition: Bool): ResultOrError {
        let targetAt = self.parseAndFixedLocation(system, parameters)
        let lspHook = LspHook.make(at = Some(targetAt), definedAt = None)
        try {
            Builder.check(system, ".", targetAt.file, self.virtualFiles, lspHook, True)
        } catch {| CompileError(at, message), error =>
            Log.trace("handleHover check error: " + message)
        } grab()
        let o = if(goToDefinition) {
            HoverHandler.handleGoToDefinition(system, self, lspHook)
        } else {
            HoverHandler.handleHover(system, self, lspHook)
        }
        Result(o)
    }

    handleCompletion(system: NodeSystem, parameters: Map[String, JsValue]): ResultOrError {
        let completionAt = self.parseAndFixedLocation(system, parameters)
        let lspHook = LspHook.make(at = Some(completionAt), definedAt = None)
        try {
            Builder.check(system, ".", completionAt.file, self.virtualFiles, lspHook, True)
        } catch {| CompileError(at, message), error =>
            Log.trace("handleCompletion check error: " + message)
        } grab()
        let o = CompletionHandler.handleCompletion(system, lspHook)
        Result(o)
    }

    handleSignatureHelp(system: NodeSystem, parameters: Map[String, JsValue]): ResultOrError {
        let completionAt = self.parseAndFixedLocation(system, parameters)
        mutable completionResult = []
        // This happens when the cursor moves or a character is typed so it'd better be fast!
        let js = system.js()
        let label = "TODO(todo1: One, todo2: Two): Three"
        let o = js.object()
            .with("signatures", js.array([js.object()
                .with("label", label)
                .with("parameters", js.array([
                    js.object().with("label", "todo1: One")
                    js.object().with("label", "todo2: Two")
                ]))
                .with("activeParameter", 0)
            ]))
            .with("activeSignature", 0)
        Result(o)
    }

    handleReferences(system: NodeSystem, parameters: Map[String, JsValue], local: Bool): ResultOrError {
        let targetAt = self.parseAndFixedLocation(system, parameters)
        let tokens = self.findReferences(system, targetAt, local)
        let js = system.js()
        let o = tokens.{
            | None => js.null()
            | Some(tokens) =>
                let lspTokens = tokens.map {self.tokenLocationToLspLocation(system, _)}
                js.array(lspTokens)
        }
        Result(o)
    }

    handleRename(system: NodeSystem, parameters: Map[String, JsValue]): ResultOrError {
        let newName = parameters.grab("newName").grabString()
        let targetAt = self.parseAndFixedLocation(system, parameters)
        let tokens = self.findReferences(system, targetAt, False)
        let js = system.js()
        tokens.{
            | None => Error(-32602, "Token definition not found") // InvalidParams
            | Some([]) => Result(js.null())
            | Some([first, ..._] @ tokens) =>
                let oldName = first.raw
                Log.trace("Rename '" + oldName + "' to '" + newName + "'")

                // TODO findReferences returns some bad tokens
                let goodTokens = tokens.filter {_.raw == oldName}
                let badTokens = tokens.filter {_.raw != oldName}
                badTokens.each {t => Log.trace("Rename bad token: " + Show.show(t))}

                let byFile = goodTokens.map {t => Pair(t.file, t)}.group()
                let allChanges = byFile.toList().foldLeft(js.object(), {| o, Pair(file, fileTokens) =>
                    let uri = FileSystem.pathToUrl(system.files().absolutePath(file))
                    let fileChanges = fileTokens.map {tokenLocation =>
                        js.object()
                            .with("range", self.tokenLocationToLspRange(js, tokenLocation))
                            .with("newText", newName)
                    }
                    o.with(uri, js.array(fileChanges))
                })
                let o = js.object().with("changes", allChanges)
                Result(o)
        }
    }

    findReferences(system: NodeSystem, targetAt: Location, local: Bool): Option[List[TokenLocation]] {
        let temporaryLspHook = LspHook.make(at = Some(targetAt), definedAt = None)
        try {
            Builder.check(system, ".", targetAt.file, self.virtualFiles, temporaryLspHook, True)
        } catch {| CompileError(at, message), error =>
            Log.trace("findReferences first check error: " + message)
        } grab()

        let definedAtList = temporaryLspHook.results().collect {
            | ResolveSymbolHook h => Some(h.symbol.definedAt)
            | ResolveTypeHook h => Some(h.symbol.definedAt)
            | ResolveConstraintHook h => Some(h.symbol.definedAt)
            | ResolveSignatureHook h => Some(h.signature.at)
            | InferParameterHook h => Some(h.parameter.at)
            | InferLookupHook h => Some(h.symbol.value.definedAt)
            | InferPatternHook h {h.pattern | PVariantAs p} => Some(p.variableAt)
            | _ => None
        }.filter {at => !at.file.endsWith("/<derived>")}

        Log.trace("definedAtList: " + Show.show(definedAtList))

        let js = system.js()
        definedAtList.first().{
            | Some(definedAt) =>
                Log.trace("handleReferences definedAt: " + Show.show(definedAt))
                let lspHook = LspHook.make(at = None, definedAt = Some(definedAt))
                try {
                    let path = if(local) {targetAt.file} else {FileSystem.urlToPath(self.rootUri.grab())}
                    Builder.check(system, ".", path, self.virtualFiles, lspHook, True)
                } catch {| CompileError(at, message), error =>
                    Log.trace("findReferences second check error: " + message)
                } grab()

                let referencesResult = lspHook.results().collect {
                    | ResolveSymbolHook h => Some(h.symbol.usageAt)
                    | ResolveTypeHook h => Some(h.symbol.usageAt)
                    | ResolveConstraintHook h => Some(h.symbol.usageAt)
                    | ResolveSignatureHook h => Some(h.signature.at)
                    | InferParameterHook h => Some(h.parameter.at)
                    | InferLookupHook h => Some(h.symbol.value.usageAt)
                    | _ => None
                }.filter {at => !at.file.endsWith("/<derived>")}

                //Log.trace("referencesResult: " + Show.show(referencesResult))

                let clientLocations = referencesResult.addAll([definedAt]).distinct().filter {
                    !local || _.file == targetAt.file
                }.map {at =>
                    self.findToken(system, at)
                }
                Some(clientLocations)
            | None =>
                None
        }
    }

    makeNotificationMessage(js: JsSystem, method: String, params: JsValue): JsValue {
        js.object()
            .with("jsonrpc", "2.0")
            .with("method", method)
            .with("params", params)
    }

    findToken(system: NodeSystem, at: Location): TokenLocation {
        let fallback = TokenLocation(
            file = at.file
            startLine = at.line
            startColumn = at.column
            endLine = at.line
            endColumn = at.column + 1
            raw = ""
        )
        try {
            let code = self.virtualFiles.get(at.file).else {system.files().readText(at.file)}
            let tokens = Tokenizer.tokenize(at.file, code, None, True)
            let token = tokens.toStream().find {token =>
                at.line >= token.startLine && at.line <= token.stopLine && (
                    (at.line > token.startLine || at.column >= 1 + token.startOffset - token.startLineOffset) &&
                    (at.line < token.stopLine || at.column < 1 + token.stopOffset - token.stopLineOffset || (
                        (token.kind == LLower || token.kind == LUpper) &&
                        at.column == 1 + token.stopOffset - token.stopLineOffset
                    ))
                )
            }
            token.map {t => TokenLocation(
                file = t.file
                startLine = t.startLine
                startColumn = 1 + t.startOffset - t.startLineOffset
                endLine = t.stopLine
                endColumn = 1 + t.stopOffset - t.stopLineOffset
                raw = t.raw()
            )}.else {fallback}
        } catchAny {_ =>
            fallback
        } grab()
    }

    parseAndFixedLocation(system: NodeSystem, parameters: Map[String, JsValue]): Location {
        let uri = parameters.grab("textDocument").get("uri").grabString()
        let absolutePath = FileSystem.urlToPath(uri)
        let path = FileSystem.relative(system.files().workingDirectory(), absolutePath)
        let fixedPath = path.replace("\\", "/")
        let line = parameters.grab("position").get("line").grabInt() + 1
        let column = parameters.grab("position").get("character").grabInt() + 1
        let token = self.findToken(system, Location(fixedPath, line, column))
        Location(
            file = fixedPath
            line = token.startLine
            column = token.startColumn
        )
    }

    tokenLocationToLspLocation(system: NodeSystem, tokenLocation: TokenLocation): JsValue {
        let js = system.js()
        js.object()
            .with("uri", FileSystem.pathToUrl(system.files().absolutePath(tokenLocation.file)))
            .with("range", self.tokenLocationToLspRange(js, tokenLocation))
    }

    tokenLocationToLspRange(js: JsSystem, tokenLocation: TokenLocation): JsValue {
        js.object()
            .with("start", js.object()
                .with("line", tokenLocation.startLine - 1)
                .with("character", tokenLocation.startColumn - 1)
            )
            .with("end", js.object()
                .with("line", tokenLocation.endLine - 1)
                .with("character", tokenLocation.endColumn - 1)
            )
    }

}
