import LspHook from ff:compiler
import Unification from ff:compiler
import Environment from ff:compiler
import Syntax from ff:compiler
import Handler

handleGoToDefinition(system: NodeSystem, handler: Handler, lspHook: LspHook): Json {
    let definedAt = lspHook.results().collect {
        | ResolveSymbolHook h => Some(h.symbol.definedAt)
        | ResolveTypeHook h => Some(h.symbol.definedAt)
        | ResolveConstraintHook h => Some(h.symbol.definedAt)
        | InferLookupHook h => Some(h.symbol.value.definedAt)
        | InferParameterHook h => Some(h.parameter.at)
        | InferArgumentHook h {h.arguments.dropFirst(h.argumentIndex).first() | Some(a)} =>
            a.name.flatMap {name =>
                h.parameters.find {_.name == name}.map {p =>
                    p.at
                }
            }
        | InferRecordFieldHook h {h.unification.substitute(h.recordType) | TConstructor(_, n, ts)} => 
            let fieldNames = n.split('$').dropFirst(1)
            fieldNames.zip(ts).collectFirst {| Pair(name, t) =>
                if(h.fieldName == name) {
                    h.unification.substitute(t).at // TODO: This points to the field type rather than the field name
                }
            }
        | _ => None
    }
    Log.trace("handleGoToDefinition definedAt: " + Show.show(definedAt))
    definedAt.first().map {at =>
        let token = handler.findToken(system, at)
        handler.tokenLocationToLspLocation(system, token)
    }.else {Json.null()}
}

handleHover(system: NodeSystem, handler: Handler, lspHook: LspHook): Json {
    let typeAndEffect = lspHook.results().collectFirst {
        | InferLookupHook h {h.instantiated.value | Some(instantiated)} => 
            let t = h.unification.substitute(instantiated.scheme.signature.returnType)
            let q = h.unification.substitute(instantiated.scheme.signature.effect)
            Some(Pair(t, q))
        | InferPatternHook h =>
            let t = h.unification.substitute(h.expected)
            let noEffect = TConstructor(h.pattern.at, "ff:core/Nothing.Nothing", [])
            Some(Pair(t, noEffect))
        | InferTermHook h {h.term | ELet e} =>
            let t = h.unification.substitute(e.valueType)
            let noEffect = TConstructor(e.at, "ff:core/Nothing.Nothing", [])
            Some(Pair(t, noEffect))
        | InferArgumentHook h {h.arguments.dropFirst(h.argumentIndex).first() | Some(a)} =>
            let noEffect = TConstructor(h.callAt, "ff:core/Nothing.Nothing", [])
            a.name.flatMap {name =>
                h.parameters.find {_.name == name}.map {p =>
                    Pair(h.unification.substitute(p.valueType), noEffect)
                }
            }
        | InferRecordFieldHook h {h.unification.substitute(h.recordType) | TConstructor(_, n, ts)} => 
            let fieldNames = n.split('$').dropFirst(1)
            fieldNames.zip(ts).collectFirst {| Pair(name, t) =>
                if(h.fieldName == name) {
                    let noEffect = TConstructor(t.at, "ff:core/Nothing.Nothing", [])
                    let t2 = h.unification.substitute(t)
                    Pair(h.unification.substitute(t), noEffect)
                }
            }
        | _ => 
            None
    }
    typeAndEffect.map {| Pair(t, q) =>
        let extra = q.{
            | TConstructor(_, "Q$", _) => "*This call may be asynchronous.*"
            | _ => ""
        }
        Json.object().with("contents", Json.object()
            .with("kind", "markdown")
            .with("value", "```\n" + t.show([]) + "\n```\n" + extra)
        )
    }.else {Json.null()}
}
