import Lux from ff:lux
import WebServer from ff:webserver
import Router
import Guide
import ExamplesOverview
import GettingStarted
import CountingButtonDemo
import MatchingPasswordsDemo
import PostgresqlDemo
import Html
import Website
import Menu

routeModule = SourceLocation.here().module()

data PageData(sections: List[Section])

handle(request: WebRequest[WebResponse], context: RouteContext, directory: String, name: Option[String]) {
    let path = [directory, ...name.toList()]
    let sections = path.{
        | ["getting-started"] => GettingStarted.sections()
        | ["examples"] => ExamplesOverview.sections()
        | ["examples", "counting-button"] => CountingButtonDemo.sections()
        | ["examples", "matching-passwords"] => MatchingPasswordsDemo.sections()
        | ["examples", "connecting-to-postgresql"] => PostgresqlDemo.sections()
        | _ => []
    }
    if(sections.isEmpty()) {
        request.writeText("404 Not Found")
        request.writeStatus("404 Not Found")
    } else:
    let pageData = PageData(sections)
    let title = sections.grabFirst().heading
    Html.renderAndServe(context.system, routeModule, pageData, title, request, {render(_, pageData)})
}

browserMain(system: BrowserSystem) {
    Html.renderToMain(system, {render(_, _)})
}

render(lux: Lux, data: PageData) {
    let next = None
    Website.renderContentWithNext(lux, [], next) {lux =>
        Guide.renderSections(lux, data.sections, ExamplesOverview.demos())
    }
}
