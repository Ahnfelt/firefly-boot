import WebServer from ff:webserver
import WebRoute from ff:webserver
import Lux from ff:lux
import Css from ff:lux
import Guide
import GettingStarted
import demos.ExamplesOverview
import PackagesOverview
import CommunityOverview
import FrontPage
import Styles
import Router

nodeMain(system: NodeSystem): Unit {
    let host = system.arguments().grab(0)
    let port = system.arguments().grab(1).grabInt()
    let context = RouteContext(system)
    let handlers = WebRouteHandler(Array.new())
    Router.handlers(handlers)
    let cacheSalt = system.crypto().randomBuffer(16)
    system.writeLine("Listening on " + host + ":" + port)
    WebServer.new(system, host, port).listen {request =>
        let path = request.readPath()
        let segments = path.split('/').filter {s => s != "" && s != "." && s != ".."}
        segments.{
            | _ {
                !request.readHeader("host").contains("www.firefly-lang.org") &&
                !request.readHeader("host").any {_.startsWith("localhost")}
            } =>
                let parameters = if(request.readRawQueryString().size() == 0) {""} else {
                    "?" + request.readRawQueryString()
                }
                request.writeHeader("Location", "https://www.firefly-lang.org" + path + parameters)
                request.writeStatus("302 Found")
            | ["js", ...] => 
                let asset = path.removeLast(".run.mjs").map {_ + ".run.bundle.js"}
                    .filter {system.assets().exists(_)}.else {path}
                serveAsset(system, cacheSalt, request, "text/javascript; charset=UTF-8", asset)
            | ["favicon.ico"] =>
                serveAsset(system, cacheSalt, request, "image/png", "/assets/image/firefly-logo-notext.png")
            | ["assets", "font", "firefly-mono.woff2"] => 
                serveAsset(system, cacheSalt, request, "font/woff2", "/assets/font/gf-noto-sans-mono-latin.woff2")
            | ["assets", "font", "firefly-sans.woff2"] => 
                serveAsset(system, cacheSalt, request, "font/woff2", "/assets/font/gf-nunito-sans-latin.woff2")
            | ["assets", ...rest] => serveAssets(system, cacheSalt, request, rest)
            | _ {handlers.handle(request, context)} =>
            | _ =>
                request.writeText("404 Not Found")
                request.writeStatus("404 Not Found")
        }
    }    
}

buildMain(system: BuildSystem) {
    mutable assets = AssetSystem.create()
    let browserAssets = system.bundleForBrowser(Router.modulesWithBrowserMain().map {_ + ".ff"}, sourceMaps = True)
    assets = assets.addAssets("/js/", browserAssets)
    assets = assets.addAssets("/assets/", system.packageAssets().assets("/assets/"))
    system.setAssets(assets)
}

serveAssets(system: NodeSystem, salt: Buffer, request: WebRequest[WebResponse], segments: List[String]): Unit {
    let asset = "/assets/" + segments.join("/")
    if(!system.assets().exists(asset)) {
        request.writeStatus("404 Not Found")
    } else:
    
    guessContentType(asset).or {
        request.writeStatus("404 Not Found")
    }: contentType =>

    serveAsset(system, salt, request, contentType, asset)
}

guessContentType(path: String): Option[String] {
    path.split('.').last().flatMap {
        | "md" => Some("text/markdown")
        | "png" => Some("image/png")
        | "webp" => Some("image/webp")
        | "ttf" => Some("font/ttf")
        | _ => None
    }
}

serveAsset(system: NodeSystem, salt: Buffer, request: WebRequest[WebResponse], contentType: String, asset: String): Unit {
    let etag = "\"" + system.crypto().hmacSha256(salt, asset.toBuffer()).toHex() + "\""
    request.writeHeader("Content-Type", contentType)
    if(request.readHeader("host") == Some("localhost:8080") && False) {
        request.writeHeader("Cache-Control", "no-cache")
    } else {
        request.writeHeader("Cache-Control", "public, max-age=60, must-revalidate")
        request.writeHeader("ETag", etag)
    }
    if(request.readHeader("if-none-match").any {_.trim() == etag}) {
        request.writeStatus("304 Not Modified")
    } else {
        request.writeStream(system.assets().readStream(asset))
    }
}
