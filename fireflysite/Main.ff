import WebServer from ff:webserver
import Lux from ff:lux
import Guide
import GuideAll
import ExamplesOverview
import PackagesOverview
import CommunityOverview
import FrontPage
import Styles

nodeMain(system: NodeSystem): Unit {
    let host = system.arguments().grab(0)
    let port = system.arguments().grab(1).grabInt()
    let cacheSalt = system.crypto().randomBuffer(16)
    system.writeLine("Listening on " + host + ":" + port)
    WebServer.new(system, host, port).listen {request =>
        let path = request.readPath()
        let segments = path.split('/').filter {s => s != "" && s != "." && s != ".."}
        segments.{
            | ["guide", ...] => 
                serveGuideHtml("Firefly Guide", request)
            | ["examples", ...] => 
                serveGuideHtml("Firefly Examples", request)
            | ["packages", ...] => 
                serveGuideHtml("Firefly Examples", request)
            | ["community", ...] => 
                serveGuideHtml("Firefly Examples", request)
            | ["front", ...] => 
                serveGuideHtml("Firefly Examples", request)
            | ["js", ...] => 
                let asset = if(path == "/js/ff/fireflysite/Main.mjs" && system.assets().exists("/js/Main.bundle.js")) {
                    "/js/Main.bundle.js"
                } else {
                    path
                }
                serveAsset(system, cacheSalt, request, "text/javascript; charset=UTF-8", asset)
            | ["favicon.ico"] =>
                serveAsset(system, cacheSalt, request, "image/png", "/assets/firefly-logo-notext.png")
            | ["assets", "FireflyMono.ttf"] => 
                serveAsset(system, cacheSalt, request, "image/png", "/assets/NotoSansMono-Regular.ttf")
            | ["assets", "FireflySans.ttf"] => 
                serveAsset(system, cacheSalt, request, "image/png", "/assets/NunitoSans-VariableFont_YTLC,opsz,wdth,wght.ttf")
            | ["assets", ...rest] => serveAssets(system, cacheSalt, request, rest)
            | _ =>
                let parameters = if(request.readRawQueryString().size() == 0) {""} else {
                    "?" + request.readRawQueryString()
                }
                request.writeHeader("Location", "https://www.firefly-lang.org" + path + parameters)
                request.writeStatus("302 Found")
        }
    }    
}

browserMain(system: BrowserSystem): Unit {
    let demos = ExamplesOverview.demos()
    let guides = [
        Guide("/front/", [FrontPage.new()])
        Guide("/guide/", GuideAll.mock())
        Guide("/examples/", ExamplesOverview.mock())
        Guide("/packages/", [PackagesOverview.new()])
        Guide("/community/", [CommunityOverview.new()])
    ]
    guides.collect {guide => 
        if(system.urlPath().startsWith(guide.prefix)):
        Lux.renderById(system, "main") {lux => 
            let kebab = system.urlPath().dropFirst(guide.prefix.size())
            Guide.render(lux, system, guide.prefix, kebab, guides, demos)
        }
    }
}

buildMain(system: BuildSystem) {
    let browser = system.compileForBrowser("Main.ff")
    let assets = AssetSystem.create()
        .addAssets("/js/", browser.assets())
        .addAssets("/assets/", system.packageAssets().assets("/assets/"))
    system.setAssets(assets)
}

serveAssets(system: NodeSystem, salt: Buffer, request: WebRequest[WebResponse], segments: List[String]): Unit {
    let asset = "/assets/" + segments.join("/")
    if(!system.assets().exists(asset)) {
        request.writeStatus("404 Not Found")
    } else:
    
    guessContentType(asset).or {
        request.writeStatus("404 Not Found")
    }: contentType =>

    serveAsset(system, salt, request, contentType, asset)
}

guessContentType(path: String): Option[String] {
    path.split('.').last().flatMap {
        | "md" => Some("text/markdown")
        | "png" => Some("image/png")
        | "ttf" => Some("font/ttf")
        | _ => None
    }
}

serveAsset(system: NodeSystem, salt: Buffer, request: WebRequest[WebResponse], contentType: String, asset: String): Unit {
    let etag = "\"" + system.crypto().hmacSha256(salt, asset.toBuffer()).toHex() + "\""
    request.writeHeader("Content-Type", contentType)
    if(request.readHeader("host") == Some("localhost:8080")) {
        request.writeHeader("Cache-Control", "public, max-age=0, must-revalidate")
    } else {
        request.writeHeader("Cache-Control", "public, max-age=60, must-revalidate")
    }
    request.writeHeader("ETag", etag)
    if(request.readHeader("if-none-match").any {_.trim() == etag}) {
        request.writeStatus("304 Not Modified")
    } else {
        request.writeStream(system.assets().readStream(asset))
    }
}

serveGuideHtml(title: String, request: WebRequest[WebResponse]): Unit {
    request.writeHeader("Content-Type", "text/html; charset=UTF-8")
    request.writeText("<!doctype html>")
    request.writeText("<html lang='en' style='background-color: #ffffff; color: #333333; width: 100%; height: 100%; color-scheme: light;'>")
    request.writeText("<head>")
    request.writeText("<title>" + title + "</title>")
    request.writeText("<meta name='viewport' content='width=device-width, initial-scale=1.0'>")
    request.writeText("<meta name='theme-color' content='#ecc45e'>")
    request.writeText("<link rel='preload' href='/assets/FireflyMono.ttf' as='font' crossorigin='anonymous'>")
    request.writeText("<link rel='preload' href='/assets/FireflySans.ttf' as='font' crossorigin='anonymous'>")
    request.writeText("<link rel='preload' href='/assets/firefly-logo-yellow.png' as='image'>")
    request.writeText("<style>@font-face { font-family: 'Firefly Mono'; font-display: fallback; src: url('/assets/FireflyMono.ttf'); unicode-range: U+000-5FF; }</style>")
    request.writeText("<style>@font-face { font-family: 'Firefly Sans'; font-display: fallback; src: url('/assets/FireflySans.ttf'); unicode-range: U+000-5FF; }</style>")
    request.writeText("</head>")
    request.writeText("<body style='margin: 0; padding: 0; width: 100%; height: 100%; touch-action: manipulation;'>")
    request.writeText("<div id='main'></div>")
    request.writeText("<script type='module' src='/js/ff/fireflysite/Main.mjs'></script>")
    request.writeText("</body>")
    request.writeText("</html>")
}
