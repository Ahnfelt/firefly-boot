import Guide
import CountingButtonDemo
import MatchingPasswordsDemo

new(): Document {
    Document([
        Section("Firefly", [
            Paragraph([Bold("A full stack language with great DX")])
            Image("/assets/autocomplete.png")
            Paragraph([
                Italic("Firefly in VSCode, showcasing instant type driven autocompletion and edit time error detection.")
                Italic("State of the art, but only part of the full developer experience (DX).")
            ])
        ])
        Section("Why Firefly?", [
            Paragraph([
                Text("It seems like every year, there's a new feature, a new build system, a new framework for JavaScript.")
                Text("And they seem to age like milk. It's like fast fashion. Next year, we're chasing something else—why is that?")
            ])
            Paragraph([
                Text("Imagine you're tasked to build a small house.")
                Text("There's just one constraint: You have to balance it on top of an old mansion, and its inhabitants must not be disturbed in the slightest by the construction.")
                Text("Is it going to work out? This is the task you're facing when you're trying to improve the DX of an old language.")
            ])
            Paragraph([
                Text("Firefly is something different.")
                Text("It is a fresh language that has been designed from the ground up with one overarching goal—to be a full stack language with great DX.")
            ])
        ])
        Section("The DX of Firefly", [
            Paragraph([
                Text("Firefly comes with a compiler, a build system and a package manager.")
                Text("You can install the Firefly Language extension in VSCode to get autocompletion, renaming, go to definition, highlighting and more.")
                Text("There are first party packages for building a complete webapp.")
                Text("Everything you need to build full webapps, in a language made for web development.")
            ])
        ])
        SplitSection(
            "Single file webapps"
            Paragraph([
                Text("Firefly code runs in the browser and on the server, or even at build time.")
                Text("When starting out, you can put everything in a single")
                Code(".ff")
                Text("file, including your dependency list.")
            ])
            CodeBlock("""
                dependency ff:webserver:0.0.0
            
                nodeMain(system: NodeSystem) {...}
                    
                browserMain(system: BrowserSystem) {...}
                
                buildMain(system: BuildSystem) {...}
            """, firefly = True)
        )
        SplitSection(
            "Concise type definitions"
            Paragraph([
                Text("Model your types in a breif format that fits multiple definitions on one screen.")
                Text("Be precise about whether things can be missing with")
                Code("Option[T]", firefly = True)
                Text("and make invalid states unrepresentable with variants and type parameters.")
            ])
            CodeBlock("""
                data User(
                    id: UserId
                    name: String
                    email: Option[String]
                )
                
                data Tree[T] {
                    Leaf(value: T)
                    Branch(left: Tree[T], right: Tree[T])
                }
            """, firefly = True)
        )
        SplitSection(
            "Convenient collections"
            Paragraph([
                Text("Immutable and mutable collections are part of the standard library.")
                Text("Maps, sets, arrays, lists and streams come with a rich set of methods that you can use to write succint code.")
            ])
            CodeBlock("""
                let emails = houses
                    .flatMap {_.owners}
                    .map {_.email}
                    .filter {!_.endsWith("example.com")}
                    .toSet()
                    
                emails.each {email =>
                    sendNeighborhoodNewsletter(email)
                }
            """, firefly = True)
        )
        SplitSection(
            "Uncolored async/await"
            Paragraph([
                Text("In Firefly, there's no")
                Code("async")
                Text("or")
                Code("await")
                Text("syntax.")
                Text("Instead, the compiler infers which calls are asynchronous and automatically generates the appropriate code.")
                Text("A method like")
                Code(".map")
                Text("on lists is called asynchronously only when the lambda function you pass is asynchronous.")
            ])
            CodeBlock("""
                let files = ["a.txt", "b.txt"]
                // async .map call
                let contents = files.map {file =>
                    system.path(file).readText()
                }
                // sync .map call
                let upper = contents.map {content =>
                    content.upper()
                }
            """, firefly = True)
        )
        SplitSection(
            "Managed I/O and effects"
            Paragraph([
                Text("The main function is passed a")
                Code("system")
                Text("argument that represents all the I/O you can do.")
                Text("It's a plain object, and you can simply wrap it to create a new")
                Text("object with less capabilities. You can tell what effects a top level function")
                Text("can have simply by looking at what arguments it receives.")
            ])
            CodeBlock("""
                nodeMain(system: NodeSytem) {
                    let html = fetchSite(system.httpClient())
                    system.writeLine(html)
                }

                // this function can only do HTTP requests
                fetchSite(httpClient: HttpClient): String {
                    let url = "https://www.example.com/"
                    httpClient.get(url, []) {_.readText()}
                }
            """, firefly = True)
        )
        SplitSection(
            "Interactive webapps"
            Paragraph([
                Text("The")
                Code("ff:lux")
                Text("package provides a declarative DOM framework for building highly interactive webapps.")
                Text("Tasks that belong to removed nodes are automatically cancelled.")
                Text("All without any virtual DOM.")
            ])
            CodeBlock("""
                lux.useState(0): count, setCount => 
                lux.button {
                    lux.text("Clicked " + count + " times")
                    lux.onClick {event =>
                        event.preventDefault()
                        setCount(count + 1)
                    }
                }
            """, firefly = True)
        )
        SplitSection(
            "Type safe RPC"
            Paragraph([
                Text("All your custom")
                Code("data")
                Text("types are automatically serializable in Firefly.")
                Text("With ")
                Code("ff:rpc")
                Text("you can set up type safe remote procedure calls from the browser to the webserver or between services.")
                Text("You can even")
                Italic("go to definition")
                Text("across RPC boundaries.")
            ])
            CodeBlock("""
                data Message(text: String)
                instance Message: Rpc[Int]

                // the browser sends a Message
                let client = Rpc.newClient(...)
                let messageId = client.call(Message("Hello"))

                // the webserver replies with an Int
                let server = Rpc.newServer(...)
                server.add {| context, Message(text) => 42 }
            """, firefly = True)
        )
        SplitSection(
            "Easy database connections"
            Paragraph([
                Text("The")
                Code("ff:postgresql")
                Text("package lets you create a connection pool for a PostgreSQL database.")
                Text("You can then execute transactions and build stateful applications.")
            ])
            CodeBlock("""
                let pool = Pg.newPool(...)
                let emails = pool.transaction {connection =>
                    connection.statement('''
                        select email from users
                    ''').map {_.getString("email").grab()}
                }
            """.replace("'''", "\"\"\""), firefly = True)
        )
    ])
}
nodeMain(system: NodeSystem) {
    system.httpClient().get("https://www.example.com/", []) {_.readText()}
    
}
