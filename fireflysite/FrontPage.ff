import Guide
import CountingButtonDemo
import MatchingPasswordsDemo

new(): Document {
    Document([
        Section("Firefly", [])
        SplitSection(
            "Single file webapps"
            Paragraph([
                Text("Firefly code runs in the browser and on the server, or even at build time.")
                Text("When starting out, you can put everything in a single")
                Code(".ff")
                Text("file, including your dependency list.")
            ])
            CodeBlock("""
                dependency ff:webserver:0.0.0
            
                nodeMain(system: NodeSystem) {...}
                    
                browserMain(system: BrowserSystem) {...}
                
                buildMain(system: BuildSystem) {...}
            """, firefly = True)
        )
        SplitSection(
            "Concise type definitions"
            Paragraph([
                Text("Model your types in a breif format that fits multiple definitions on one screen.")
                Text("Be precise about whether things can be missing with")
                Code("Option[T]", firefly = True)
                Text("and make invalid states unrepresentable with variants and type parameters.")
            ])
            CodeBlock("""
                data User(
                    id: UserId
                    name: String
                    email: Option[String]
                )
                
                data Tree[T] {
                    Leaf(value: T)
                    Branch(left: Tree[T], right: Tree[T])
                }
            """, firefly = True)
        )
        SplitSection(
            "Convenient collections"
            Paragraph([
                Text("Immutable and mutable collections are part of the standard library.")
                Text("Maps, sets, arrays, lists and streams come with a rich set of methods that you can use to write succint code.")
            ])
            CodeBlock("""
                let emails = houses
                    .flatMap {_.owners}
                    .map {_.email}
                    .filter {!_.endsWith("example.com")}
                    .toSet()
                    
                emails.each {email =>
                    sendNeighborhoodNewsletter(email)
                }
            """, firefly = True)
        )
        SplitSection(
            "Uncolored async/await"
            Paragraph([
                Text("In Firefly, there's no")
                Code("async")
                Text("or")
                Code("await")
                Text("syntax.")
                Text("Instead, the compiler infers which calls are asynchronous and automatically generates the appropriate code.")
                Text("A method like")
                Code(".map")
                Text("on lists is called asynchronously only when the lambda function you pass is asynchronous.")
            ])
            CodeBlock("""
                let files = ["a.txt", "b.txt"]
                // async .map call
                let contents = files.map {file =>
                    system.path(file).readText()
                }
                // sync .map call
                let upper = contents.map {content =>
                    content.upper()
                }
            """, firefly = True)
        )
        SplitSection(
            "Managed I/O and effects"
            Paragraph([
                Text("The main function is passed a")
                Code("system")
                Text("argument that represents all the I/O you can do.")
                Text("It's a plain object, and you can simply wrap it to create a new")
                Text("object with less capabilities. You can tell what effects a top level function")
                Text("can have simply by looking at what arguments it takes in.")
            ])
            CodeBlock("""
                nodeMain(system: NodeSytem) {
                    let r = fetchSite(system.httpClient())
                    system.writeLine(r)
                }

                // This function can only do HTTP requests
                fetchSite(httpClient: HttpClient): String {
                    let url = "https://www.example.com/"
                    httpClient.get(url, []) {_.readText()}
                }
            """, firefly = True)
        )
        Section("The website obesity crisis", [
            Paragraph([
                Text("Have you noticed")
            ])
        ])
    ])
}
nodeMain(system: NodeSystem) {
    system.httpClient().get("https://www.example.com/", []) {_.readText()}
    
}
