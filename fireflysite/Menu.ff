data Menu(
    path: String
    name: String
    menu: List[Menu]
)

data MenuItem(
    path: List[String]
    name: String
    next: Option[MenuItem]
)

menu: List[Menu] = [
    Menu("getting-started", "Getting started", [])
    Menu("examples", "Examples", [
        Menu("counting-button", "Counting button", [])
        Menu("matching-passwords", "Matching passwords", [])
        Menu("connecting-to-postgresql", "Connecting to PostgreSQL", [])
    ])
    Menu("reference", "Reference", [
        Menu("modules-and-packages", "Modules and packages", [])
        Menu("base-types", "Base types", [])
        Menu("user-defined-types", "User defined types", [])
        Menu("statements-and-expressions", "Statements and expressions", [])
        Menu("functions-and-methods", "Functions and methods", [])
        Menu("pattern-matching", "Pattern matching", [])
        Menu("traits-and-instances", "Traits and instances", [])
        Menu("exceptions", "Exceptions", [])
        Menu("structured-concurrency", "Structured concurrency", [])
        Menu("javascript-interop", "JavaScript interop", [])
        
    ])
    Menu("packages", "Packages", [])
    Menu("community", "Community", [])
]

menuItems = flattenMenus(menu)

findItem(path: List[String]): Option[MenuItem] {
    menuItems.find {_.path == path}
}

flattenMenus(menus: List[Menu]): List[MenuItem] {
    let result = Array.new()
    function go(menus: List[Menu], prefix: List[String]) {
        menus.each {menu => 
            let currentPath = [...prefix, menu.path]
            let item = MenuItem(currentPath, menu.name, None)
            result.last().map {previous =>
                result.set(result.size() - 1, previous.MenuItem(next = Some(item)))
            }
            result.push(item)
            go(menu.menu, currentPath)
        }
    }
    go(menus, [])
    result.toList()
}

