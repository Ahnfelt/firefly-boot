import WebServer from ff:webserver
import WebRoute from ff:webserver
import Lux from ff:lux

serveHtml(
    moduleName: String
    title: String
    pageData: Buffer
    contentHtml: String
    styleTags: String
    request: WebRequest[WebResponse]
): Unit {
    request.writeHeader("Content-Type", "text/html; charset=UTF-8")
    request.writeText("<!doctype html>")
    request.writeText("<html lang='en' style='background-color: #ffffff; color: #333333; width: 100%; height: 100%; color-scheme: light;'>")
    request.writeText("<head>")
    request.writeText("<title>" + title + "</title>")
    request.writeText("<meta name='viewport' content='width=device-width, initial-scale=1.0'>")
    request.writeText("<meta name='theme-color' content='#ecc45e'>")
    request.writeText("<script type='module' src='" + "/js/ff/fireflysite/" + moduleName + ".mjs" + "'></script>")
    request.writeText("<script type='text/plain' id='data'>" + pageData.toBase64() + "</script>")
    request.writeText(styleTags)
    request.writeText("</head>")
    request.writeText("<body style='margin: 0; padding: 0; width: 100%; height: 100%; touch-action: manipulation;'>")
    request.writeText("<div id='main'>" + contentHtml + "</div>")
    request.writeText("</body>")
    request.writeText("</html>")
}

renderAndServe[T: Serializable](
    system: NodeSystem
    moduleName: String
    pageData: T
    title: String
    request: WebRequest[WebResponse]
    render: Lux => Unit
) {
    let serialized = Serializable.serialize(pageData)
    let htmlAndCss = Lux.renderToString(system, render)
    serveHtml(moduleName, title, serialized, htmlAndCss.first, htmlAndCss.second, request)
}

renderToMain[T: Serializable](system: BrowserSystem, render: (Lux, T) => Unit) {
    let base64 = system.js()->document->getElementById("data")->textContent.grabString()
    let chat = Serializable.deserialize(Buffer.fromBase64(base64))
    Lux.renderById(system, "main") {lux =>
        render(lux, chat)
    }
}
