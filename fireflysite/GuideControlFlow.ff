import Guide

new(): Document {
    Document([
        Section("Control flow", [
            Paragraph([
                Text("Firefly provides several ways to control program execution. ")
                Text("The most direct are ")
                Anchor("if - elseIf - else")
                Text(", ")
                Anchor("pattern matching")
                Text(" and ")
                Anchor("exceptions")
                Text(". But methods such as ")
                Code("map")
                Text(" and ")
                Code("each")
                Text(" on ")
                Anchor("Option")
                Text(" controls your program flow as well.")
            ])
        ])        
        Section("if - elseIf - else", [
            Paragraph([
                Text("You write if-statements in Firefly like this")
            ])
            CodeBlock("""
                if(path == "/") {
                    response.writeText("<!doctype html>")
                } elseIf {path.startsWith("/js/")} {
                    response.writeText("<script>")
                } else {
                    response.writeStatus("404 Not found")
                }
            """, firefly = True)
            Paragraph([
                Text("You can also use it as an expression like this")
            ])
            CodeBlock("""
                let contentType = if(path == "/") {
                    "text/html; charset=UTF-8"
                } elseIf(directory2.exists) {
                    "text/javascript; charset=UTF-8"
                } else {
                    "text/plain; charset=UTF-8"
                }
            """, firefly = True)
            Paragraph([
                Code("if")
                Text(", ")
                Code("elseIf")
                Text(" and ")
                Code("else")
                Text(" are not keywords or construct build into Firefly. You don't need to know this, but if your are curious, read on. ")
                Text("Go take a look at how they are implemented. ")
                Code("if")
                Text(" is really just a function and ")
                Code("elseIf")
                Text(" and ")
                Code("else")
                Text(" are methods on Option. ")
                Text("The curly braces ")
                Code("{...}")
                Text(" in the examples above are zero argument lambda functions.")
            ])
            Paragraph([
                Text("But still, why are this syntactically correct? ...")
            ])                        
            
        ])
        Section("Option", [
            Paragraph([
                Text("Sometimes you don't have a value. Other languages uses ")
                Code("null")
                Text(" for this purpose - but Firefly don't have  ")
                Code("null")
                Text(". But we have ")
                Code("Option")
                Text(" from the core package.")
            ])
            CodeBlock("""
                data Option[T] {
                    None
                    Some(value: T)
                }
            """, firefly = True)
            Paragraph([
                Text("For some type T, say String, Option[String] is either some string or no value/none. This way, the type system will guide you when to check for no-value.")
            ])
            Paragraph([
                Text("In Firefly ")
                Anchor("if - elseIf - else")
                Text(" are implemented using ")
                Code("Option")
                Text(".")
            ])
            CodeBlock("""
                if[T](condition: Bool, body: () => T): Option[T] {
                    condition.{
                        | False => None
                        | True => Some(body())
                    }
                }
            """, firefly = True)            
        ])
        Section("Pattern matching", [
            Paragraph([
                Text("...")
            ])
        ])
        Section("Exceptions", [
            Paragraph([
                Text("...")
            ])
        ])
    ])
}
