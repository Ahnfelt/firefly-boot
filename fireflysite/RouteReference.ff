import Lux from ff:lux
import WebServer from ff:webserver
import Router
import Guide
import ExamplesOverview
import FrontPage
import DocumentParser
import Html
import Website
import Menu

routeModule = SourceLocation.here().module()

data PageData(menuEntry: MenuItem, sections: List[Section])

handle(request: WebRequest[WebResponse], context: RouteContext, kebab: Option[String]) {
    let path = ["reference", ...kebab.toList()]
    Menu.findItem(path).or {Html.serve404(request)}: menuEntry => 
    
    let asset = "/assets/markdown/" + path.join("/") + ".md"
    try {context.system.assets().readText(asset)}.toOption().or {
        Log.trace("Asset not found: " + asset)
        Html.serve404(request)
    }: markdown =>
    let parser = DocumentParser(path.last().grab(), markdown.split('\n'), 0)
    let sections = parser.parseDocument()
    let pageData = PageData(menuEntry, sections)
    let title = Html.title(menuEntry)
    Html.renderAndServe(context.system, routeModule, pageData, title, request, {render(_, pageData)})
}

browserMain(system: BrowserSystem) {
    Html.renderToMain(system, {render(_, _)})
}

render(lux: Lux, data: PageData) {
    Website.renderContentWithNext(lux, data.menuEntry.path, data.menuEntry.next) {lux =>
        Guide.renderSections(lux, data.sections, ExamplesOverview.demos())
    }
}
