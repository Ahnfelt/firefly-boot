import WebServer from ff:webserver // This is required to run the file.
import Guide

nodeMain(system: NodeSystem) {
    let file = system.path("assets/markdown/ControlFlow.md")
    let document = parse(file)
    printSections(system, document)
}

parse(file: Path): List[Section] {
    let content = file.readText()
    let lines = content.split('\n')
    let parser = DocumentParser(file.absolute(), lines)
    parser.parseDocument()
}

class DocumentParser(
    fileName: String
    mutable lines: List[String]
)

extend self: DocumentParser {
    
    parseDocument(): List[Section] {
        iterate {self.parseSection()}
    }
    
    parseSection(): Option[Section] {
        self.dropWhile {_.trim() == ""}
        self.lines.first().{
            | Some(line) {line.trim().removeFirst("#") | Some(heading)} => 
                self.dropFirst()
                let blocks = iterate {self.parseBlock()}
                Some(Section(heading.trim(), blocks))
            | _ => None
        }
    }
    
    parseBlock(): Option[Block] {
        self.dropWhile {_.trim() == ""}
        let first = self.lines.first().map {_.trimStart()}
        first.{
            | Some(line) {line.removeFirst("```") | Some(l)} => 
                self.dropFirst()
                let isFirefly = l.startsWith("firefly")
                let block = self.parseRemainingCodeBlock(isFirefly)
                Some(block)
            | Some(line) {line.first().any {_ != '#'}} => 
                Some(self.parseParagraph())
            | _ => None
        }
    }
    
    parseParagraph(): Block {
        let lines = self.consumeWhile {_.trim() != ""}
        let parser = InlineParser(self.fileName, lines.join("\n"))
        let inlines = parser.parseInlines()
        Paragraph(inlines)
    }
    
    parseRemainingCodeBlock(isFirefly: Bool): Block {
        let code = self.consumeWhile {!_.trimStart().startsWith("```")}
        self.dropFirst(1)
        CodeBlock(code.join("\n"), isFirefly)
    } 
    
    
    dropFirst(count: Int = 1): Unit {
        self.lines = self.lines.dropFirst(count)
    }
    
    dropWhile(body: String => Bool): Unit {
        self.lines = self.lines.dropWhile(body)
    }
    
    consumeWhile(body: String => Bool): List[String] {
        let taken = self.lines.takeWhile(body)
        self.dropFirst(taken.size())
        taken
    }
}

class InlineParser(
    fileName: String
    mutable line: String
)

extend self: InlineParser {
    
    parseInlines(): List[Inline] {
        iterate {self.parseInline()}
    }
    
    parseInline(): Option[Inline] {
        self.parseBold().orElse: 
        self.parseCode().orElse:
        self.parseItalic().orElse:
        self.parseText()
    }
    
    parseBold(): Option[Inline] {
        self.line.removeFirst("**").flatMap {rest => 
            indexOf(rest, "**").map {end => 
                let text = rest.slice(0, end)
                self.dropFirst(end + 4)
                Bold(text)
            }
        }
    }

    parseItalic(): Option[Inline] {
        self.line.removeFirst("_").flatMap {rest => 
            indexOf(rest, "_").map {end => 
                let text = rest.slice(0, end)
                self.dropFirst(end + 2)
                Italic(text)
            }
        }
    }
    
    parseCode(): Option[Inline] {
        self.line.removeFirst("`").flatMap {rest => 
            indexOf(rest, "`").map {end => 
                let text = rest.slice(0, end)
                self.dropFirst(end + 2)
                Code(text)
            }
        }
    }
    
    parseText(): Option[Inline] {
        mutable i = 0
        
        while {
            i < self.line.size() &&
            self.line.grab(i) != '_' &&
            self.line.grab(i) != '`' &&
            (i == self.line.size() - 1 || self.line.grab(i) != '*' || self.line.grab(i + 1) != '*')
        } {
            i += 1
        }
        
        i.{
            | 0 => None
            | _ => 
                let text = self.line.slice(0, i)
                self.dropFirst(text.size())
                Some(Text(text))
        }
    }    

    dropFirst(count: Int = 1): Unit {
        self.line = self.line.dropFirst(count)
    }    
}

iterate[T](body: () => Option[T]): List[T] {
    let array = Array.new()
    doWhile {
        body().{
            | None => False
            | Some(s) =>
                array.push(s)
                True
        }
    }
    array.drain()  
}   

indexOf(string: String, searchString: String, position: Int = 0): Option[Int]
    target js sync """
        const i = string_.indexOf(searchString_, position_);
        return i == -1 ? ff_core_Option.None() : ff_core_Option.Some(i);
    """
    
printSections(system: NodeSystem, sections: List[Section]) {
    sections.each {
        | Section(heading, blocks) => 
            system.writeLine("# " + heading)
            blocks.each {
                | Bullets(items) => 
                    system.writeLine("  Bullets:")
                    system.writeLine("    " + Show.show(items))
                | CodeBlock(code, firefly) => 
                    system.writeLine("  Code:")
                    system.writeLine("    " + Show.show(firefly))
                | Image(url) => 
                    system.writeLine("  Image:")
                    system.writeLine("    " + Show.show(url))
                | LuxDemo(demo) => 
                    system.writeLine("  Lux:")
                    system.writeLine("    " + Show.show(demo))
                | Paragraph(inlines) => 
                    system.writeLine("  Paragraph:")
                    inlines.each {
                        | Anchor(heading, title) => 
                            system.writeLine("    Anchor: " + Show.show(heading) + ", " + Show.show(title))
                        | Bold(text) => 
                            system.writeLine("    Bold: " + Show.show(text))
                        | Code(code, True) => 
                            system.writeLine("    Code (firefly): " + Show.show(code))
                        | Code(code, False) => 
                            system.writeLine("    Code: " + Show.show(code))
                        | Italic(text) => 
                            system.writeLine("    Italic: " + Show.show(text))
                        | Link(text, url) => 
                            system.writeLine("    Link: " + Show.show(text))
                        | Text(text) => 
                            system.writeLine("    Text: " + Show.show(text))
                    }
                | Video(url) => 
                    system.writeLine("  Video:")
                    system.writeLine("    " + Show.show(url))
            }
        | SplitSection(heading, first, second) => 
            system.writeLine("SPLIT")
    }    
}