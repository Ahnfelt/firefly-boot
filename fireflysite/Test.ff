import WebServer from ff:webserver // This is required to run the file.

nodeMain(system: NodeSystem) {
    let f = {x, y => Pair(x, y)}
    let g = {Pair(_, _)}
    Log.show(f(1, 2))
    Log.show(g(1, 2))
    Log.show(factorial(5))
    Log.show(factorialTail(5))
    Log.show([1, 2].map({x => x + x}))
    
    let x = {a, b => Pair(a, b)}(1, 2)
    let f0: () => Unit = {42}
    let p = {Pair(1, _)}
    let p2 = {Pair(_, _)}

    let increment: Int => Int = {i => i + 1}
    let plus: (Int, Int) => Int = {a, b => a + b}
        
    Log.show([1, 2].map(increment))
    
    Log.show(p(42))
    let f2 = {42}
    Log.show(f2())
    let pairs = {Pair(_, {_})}
    let pp = pairs(42)
    let foo = {{_ + 1}(_)}
    Log.show(foo(1))
    
    /*
    let x1 = work(initial = 3) {i => 
        i + 1
    } {s => 
        "*" + s + "*"
    }*/
    //let x2 = work(initial = 3, {i => i + 1}, {s => s + "*"}) 
    
    let array = Array.new()
    while {array.size() < 5} {
        array.push("X")
    }
    
    testSplice([], 0, [], 0, [])
    testSplice([], 0, [0], 0, [0])
    testSplice([1, 2, 3], 0, [], 0, [1, 2, 3])

    testSplice([1, 2, 3], 0, [0], 0, [0, 1, 2, 3])
    testSplice([1, 2, 3], 1, [0], 0, [1, 0, 2, 3])
    testSplice([1, 2, 3], 2, [0], 0, [1, 2, 0, 3])
    testSplice([1, 2, 3], 3, [0], 0, [1, 2, 3, 0])

    testSplice([1, 2, 3], 0, [0], 1, [0, 2, 3])
    testSplice([1, 2, 3], 1, [0], 1, [1, 0, 3])
    testSplice([1, 2, 3], 2, [0], 1, [1, 2, 0])

    testSplice([1, 2, 3], 0, [0], 3, [0])
    testSplice([1, 2, 3], 1, [0], 2, [1, 0])
    testSplice([1, 2, 3], 2, [0], 1, [1, 2, 0])
    testSplice([1, 2, 3], 3, [0], 0, [1, 2, 3, 0])

    testSplice([1, 2, 3], 1, [0, -1, -2, -3, -4], 1, [1, 0, -1, -2, -3, -4, 3])
    
    
    //Some(42) + Some(42)
    //let f = {x, y => x + y}
    let jsInt = []!->length
    let jsInt2 = []!->length
    jsInt + jsInt
    32
}

testSplice(
    self: List[Int], 
    start: Int, 
    itemsArray: List[Int], 
    deleteCount: Int, 
    expected: List[Int]
) {
    do {
        let array = self.toArray()
        Log.debug("Test " + Show.show(array.toList()) + ".insertList(" + start + ", " + Show.show(itemsArray) + ", " + deleteCount + ") == " + Show.show(expected))
        array.insertList(start, itemsArray, deleteCount)
        if(array.toList() == expected) {
            Log.debug("Passed")
        } else {
            Log.debug("Failed: " + Show.show(array))
        }
    }
    
    do {
        let array = self.toArray()
        Log.debug("Test " + Show.show(array.toList()) + ".insertArray(" + start + ", " + Show.show(itemsArray) + ", " + deleteCount + ") == " + Show.show(expected))
        array.insertArray(start, itemsArray.toArray(), deleteCount)
        if(array.toList() == expected) {
            Log.debug("Passed")
        } else {
            Log.debug("Failed: " + Show.show(array))
        }
    }
}


factorial(n: Int): Int {
    if(n == 0) {
        1
    } else {
        n * factorial(n - 1)
    }
}

factorialTail(n: Int, acc: Int = 1): Int {
    if(n == 0) {
        acc
    } else {
        tailcall factorialTail(n - 1, n * acc)
    }
}

work(f: Int => Int, g: String => String, initial: Int = 0): String {
    g("" + f(initial))
}
