class WebRequest[T](
    internalMethod: String
    internalUrl: String
    internalHeaders: StringMap[String]
    internalJsResponse: JsValue
    internalResponse: T
    internalResponseHeaders: StringMap[String]
    internalResponseChunks: Stack[JsValue]
    mutable internalResponseStatus: String
    mutable internalCloseConnection: Bool
)

capability WebResponse(
    internalRequestBody: Stream[Buffer]
)

listen(system: NodeSystem, host: String, port: Int, handler: WebRequest[WebResponse] => Unit): Unit
    target node async """
        import * as uws from 'uWebSockets.js'
        ff_core_Task.Task_throwIfAborted($task);
        await new Promise((resolveServer, rejectServer) => uws.App().any('/*', (res, req) => {
            let abortedByUws = false;
            const task = ff_core_Task.Task_spawn($task, async task => {
                try {
                    ff_core_Task.Task_throwIfAborted(task);
                    const body = internalBody_(res, task);
                    const method = req.getMethod();
                    const url = req.getUrl();
                    const headers = new Map();
                    req.forEach((key, value) => headers.set(key, value));
                    const chunks = internalStack_();
                    const webResponse = WebResponse(body);
                    const webRequest = WebRequest(
                        method, url, headers, 
                        res, webResponse, 
                        new Map(), internalStack_(), 
                        "200 OK", false
                    );
                    await handler_(webRequest, task);
                    ff_core_Task.Task_throwIfAborted(task);
                    await new Promise((resolve, reject) => {
                        res.cork(() => {
                            try {
                                ff_core_Task.Task_throwIfAborted(task);
                                res.writeStatus(webRequest.internalResponseStatus_);
                                webRequest.internalResponseHeaders_.forEach((value, key) => res.writeHeader(key, value));
                                const chunk = internalChunksToChunk_(webRequest.internalResponseChunks_);
                                res.end(chunk, webRequest.internalCloseConnection_);
                                resolve();
                            } catch(e) {
                                reject(e);
                            }
                        });
                    });
                } catch(e) {
                    if(!abortedByUws) console.error(e);
                    if(!abortedByUws) res.cork(() => {
                        if(!abortedByUws) res.writeStatus("500 Internal Server Error");
                        if(!abortedByUws) res.end();
                    });
                }
            });
            res.onAborted(() => {
                abortedByUws = true; 
                ff_core_Task.Task_abort(task);
            });
        }).listen(host_, port_, listenSocket => {
            if(listenSocket) {
                console.log('Listening to port ' + port_);
                const abort = () => {
                    $task.controller.signal.removeEventListener(abort);
                    uws.us_listen_socket_close(listenSocket);
                }
                $task.controller.signal.addEventListener('abort', abort);
            } else {
                rejectServer();
            }
        }));
    """

nodeMain(system: NodeSystem) {
    listen(system, "localhost", 8080) {request =>
        request.writeHeader("IsExample", "Oh Yes")
        request.writeText("Hello!")
    }
}

extend self[T]: WebRequest[T] {

    readMethod(): String {
        self.internalMethod
    }

    readRelativeUrl(): String {
        self.internalUrl
    }

    readPath(): String {
        self.internalUrl.takeWhile {_ != '?'}
    }

    readQueryString(): String {
        self.internalUrl.dropWhile {_ != '?'}
    }

    readHeader(lowerCaseName: String): Option[String] {
        self.internalHeaders.get(lowerCaseName)
    }
    
    eachHeader(body: (String, String) => Unit) {
        self.internalHeaders.each {body(_, _)}
    }
    
}

extend self[T]: WebRequest[T] {
    
    writeStatus(codeAndMessage: String) {
        self.internalResponseStatus = codeAndMessage
    }
    
    writeHeader(name: String, value: String) {
        self.internalResponseHeaders.set(name, value)
    }

    writeText(data: String) {
        self.internalResponseChunks.push(internalTextChunk(data))
    }

    writeBuffer(data: Buffer) {
        self.internalResponseChunks.push(internalBufferChunk(data))
    }
    
    writeStream(data: Stream[Buffer]) {
        data.each {self.writeBuffer(_)}
    }

}

extend self[T]: WebRequest[T] {
    
    closeConnection() {
        self.internalCloseConnection = True
    }

}

extend self: WebRequest[WebResponse] {
    
    flush()
        target js async """
            // TODO
        """

    flushText(data: String) {
        self.writeText(data)
        self.flush()
    }

    flushBuffer(data: Buffer) {
        self.writeBuffer(data)
        self.flush()
    }

    flushStream(data: Stream[Buffer]) {
        self.writeStream(data)
        self.flush()
    }

}

extend self: WebRequest[WebResponse] {
    
    readBody(): Stream[Buffer] {
        self.internalResponse.internalRequestBody
    }
    
}

internalBody(jsResponse: JsValue): Stream[Buffer] {
    Stream {None} {} // TODO
}

internalStack[T](): Stack[T] {
    Stack.make()
}

internalTextChunk(data: String): JsValue
    target js sync """
        return data_;
    """
    
internalBufferChunk(data: Buffer): JsValue
    target js sync """
        return data_;
    """

internalChunksToChunk(chunks: Stack[JsValue]): JsValue
    target js sync """
        const chunks = chunks_.array;
        if(chunks.length === 0) return;
        const firstIsString = typeof chunks[0] === 'string';
        if(firstIsString && chunks.length === 1) return chunks[0];
        if(firstIsString && chunks.every(c => typeof c === 'string')) {
            let result = chunks[0];
            for(let i = 1; i < chunks.length; i++) {
                result += chunks[i];
            }
            return result;
        }
        let totalLength = 0;
        for(let i = 0; i < chunks.length; i++) {
            if(typeof chunks[i] === 'string') chunks[i] = new TextEncoder().encode(chunks[i]);
            totalLength += chunks[i].byteLength;
        }
        const result = new Uint8Array(totalLength);
        let offset = 0;
        for(let i = 0; i < chunks.length; i++) {
            let chunk = chunks[i];
            if(chunk.buffer) {
                if(chunk.byteLength !== chunk.buffer.byteLength) {
                    chunk = chunk.buffer.subarray(chunk.byteOffset, chunk.byteOffset + chunk.byteLength);
                } else {
                    chunk = chunk.buffer;
                }
            }
            result.set(chunk, offset);
            offset += chunk.byteLength;
        }
        return result;
    """
