capability WebSocket(
    jsValue: JsValue
    messages: Queue[JsValue]
    listeners: Queue[Unit => Unit]
)

open(browserSystem: BrowserSystem, url: String): WebSocket {
    let socket = if(
        Js->location.typeof() != "undefined" && !url.contains("://") &&
        !Js->location->href.isNullOrUndefined() && Js->location->href->startsWith("http")?
    ) {
        let href: String = Js->URL->(url, Js->location->href)->href?
        // Using globalThis here to avoid colliding with the Firefly WebSocket data constructor
        Js.globalThis()->WebSocket->("ws" + href.dropFirst("http".size()))
    } else {
        Js.globalThis()->WebSocket->(url)
    }
    socket->binaryType = "arraybuffer"
    let result = WebSocket(socket, Queue.new(), Queue.new())
    Js.awaitCancellablePromise {resolve, reject, onSettle =>
        socket->onopen = Js->{resolve(result)}
        socket->onclose = Js->{reject(_?)}
    }
    socket->onopen = Js.null()
    socket->onclose = Js.null()
    socket->addEventListener("close", Js->{
        result.listeners.each {_, listener => listener(Unit)}
    })
    socket->addEventListener("message", Js->{m =>
        result.messages.push(m)
        result.listeners.each {_, listener => listener(Unit)}
    })
    socket->addEventListener("error", Js->{e =>
        result.messages.push(e)
        result.listeners.each {_, listener => listener(Unit)}
    })
    result
}

extend self: WebSocket {
    
    readText(encoding: String = "utf8"): Option[String] {
        self.readAny {_} {_.toString(encoding)}
    }

    readBuffer(): Option[Buffer] {
        self.readAny {_.toBuffer()} {_}
    }
    
    readAny[T](fromText: String => T, fromBuffer: Buffer => T): Option[T] {
        Js.throwIfCancelled()
        doWhile {
            if(self.messages.size() != 0) {False} else:
            if(self.jsValue->readyState === 3) {False} else:
            Js.awaitCancellablePromise {resolve, reject, onSettle =>
                let key = self.listeners.push(resolve)
                onSettle {_ => self.listeners.remove(key)}
            }
            True
        }
        if(self.jsValue->readyState === 3) {None} else:
        let message = self.messages.pop().grab()
        if(!(message.instanceof(Js->MessageEvent))) {Js.throw(Js->Error->("WebSocket error"))}
        let data = message->data
        if(data.typeof() == "string") {Some(Js.await(fromText(data?)!)?)} else:
        Some(Js.await(fromBuffer(Js->DataView->(data)?)!)?)
    }
            
    writeBuffer(data: Buffer): Unit {
        Js.throwIfCancelled()
        self.jsValue->send(data)
    }

    writeText(data: String): Unit {
        Js.throwIfCancelled()
        self.jsValue->send(data)
    }
        
    close(code: Int = 1000, reason: String = ""): Unit {
        if(self.jsValue->readyState !== 2 && self.jsValue->readyState !== 3) {
            Js.await(Js->Promise->(Js->{resolve, reject =>
                self.jsValue->addEventListener("close", resolve)
                self.jsValue->close(code, if(reason != "") {reason!} else {Js.undefined()})
            }))
        }
    }

    isOpen(): Bool {
        self.jsValue->readyState === 1
    }

    isClosing(): Bool {
        self.jsValue->readyState === 2
    }

    isClosed(): Bool {
        self.jsValue->readyState === 3
    }

}
