{
    "version": 3,
    "sources": [
        "../../../../../core/Date.ff"
    ],
    "sourcesContent": [
        "// Temporal.ZonedDateTime but with consistent equals/compare\nnewtype Date(jsValue: JsValue)\n\ndata DateGap(\n    years: Int = 0\n    months: Int = 0\n    weeks: Int = 0\n    days: Int = 0\n    hours: Int = 0\n    minutes: Int = 0\n    seconds: Int = 0\n    milliseconds: Int = 0\n    microseconds: Int = 0\n    nanoseconds: Int = 0\n)\n\nnew(\n    timeZoneId: String\n    year: Int\n    month: Int\n    day: Int\n    hour: Int = 0\n    minute: Int = 0\n    second: Int = 0\n    millisecond: Int = 0\n    microsecond: Int = 0\n    nanosecond: Int = 0\n    calendarId: String = \"iso8601\"\n    offset: Option[String] = None\n    earlier: Bool = True\n    later: Bool = True\n): Date {\n    Date(Js->Temporal->ZonedDateTime->from(Js->(\n        timeZone = timeZoneId\n        year = year\n        month = month\n        day = day\n        hour = hour\n        minute = minute\n        second = second\n        millisecond = millisecond\n        microsecond = microsecond\n        nanosecond = nanosecond\n        calendar = calendarId\n        offset = offset.map {_!}.else {Js.undefined()}\n    ), internalDisambiguation(earlier, later)))\n}\n\nnewEra(\n    calendarId: String\n    timeZoneId: String\n    era: String\n    eraYear: Int\n    month: Int\n    day: Int\n    hour: Int = 0\n    minute: Int = 0\n    second: Int = 0\n    millisecond: Int = 0\n    microsecond: Int = 0\n    nanosecond: Int = 0\n    offset: Option[String] = None\n    earlier: Bool = True\n    later: Bool = True\n): Date {\n    Date(Js->Temporal->ZonedDateTime->from(Js->(\n        timeZone = timeZoneId\n        era = era\n        eraYear = eraYear\n        month = month\n        day = day\n        hour = hour\n        minute = minute\n        second = second\n        millisecond = millisecond\n        microsecond = microsecond\n        nanosecond = nanosecond\n        calendar = calendarId\n        offset = offset.map {_!}.else {Js.undefined()}\n    ), internalDisambiguation(earlier, later)))\n}\n\nnewEpochMilliseconds(timeZoneId: String, epochMilliseconds: Int, calendarId: String = \"iso8601\"): Date {\n    let zoned = Js->Temporal->Instant->fromEpochMilliseconds(epochMilliseconds)->toZonedDateTimeISO(timeZoneId)\n    if(calendarId != \"iso8601\") {Date(zoned->withCalendar(calendarId))} else {Date(zoned)}\n}\n\nnewRfc9557(rfc9557: String): Date {\n    Date(Js->Temporal->ZonedDateTime->from(rfc9557))\n}\n\ngap(iso8601: String): DateGap {\n    let duration = Js->Temporal->Duration->from(iso8601)\n    DateGap(\n        years = duration->years?\n        months = duration->months?\n        weeks = duration->weeks?\n        days = duration->days?\n        hours = duration->hours?\n        minutes = duration->minutes?\n        seconds = duration->seconds?\n        milliseconds = duration->milliseconds?\n        microseconds = duration->microseconds?\n        nanoseconds = duration->nanoseconds?\n    )\n}\n\ninstance Date: Equal {\n    equals(x: Date, y: Date): Bool {\n        x.jsValue->equals(y.jsValue)?\n    }    \n}\n\ninstance Date: Order {\n    compare(x: Date, y: Date): Ordering {\n        let instant: Int = Js->Temporal->ZonedDateTime->compare(x.jsValue, y.jsValue)?\n        if(instant != 0) {Ordering.fromInt(instant)} else:\n        let timeZone = Ordering.compare(x.timeZoneId(), y.timeZoneId())\n        if(timeZone != OrderingSame) {timeZone} else:\n        Ordering.compare(x.calendarId(), y.calendarId())\n    }\n}\n\ninstance Date: HasAnyTag {\n    anyTag(): AnyTag[Date] {\n        Any.internalAnyTag(\"ff:core/Date.Date[]\")\n    }\n}\n\ninstance Date: Show {\n    show(value: Date): String {\n        value.toRfc9557()\n    }\n}\n\ninstance Date: Serializable {\n    \n    serializeUsing(serialization: Serialization, value: Date): Unit {\n        Serializable.serializeUsing(serialization, value.toRfc9557())\n    }\n    \n    deserializeUsing(serialization: Serialization): Date {\n        newRfc9557(Serializable.deserializeUsing(serialization))\n    }\n    \n}\n\nextend self: Date {\n    \n    timeZoneId(): String {\n        self.jsValue->timeZoneId?\n    }\n    \n    calendarId(): String {\n        self.jsValue->calendarId?\n    }\n    \n    day(): Int {\n        self.jsValue->day?\n    }\n    \n    dayOfWeek(): Int {\n        self.jsValue->dayOfWeek?\n    }\n    \n    dayOfYear(): Int {\n        self.jsValue->dayOfYear?\n    }\n    \n    daysInWeek(): Int {\n        self.jsValue->daysInWeek?\n    }\n    \n    daysInMonth(): Int {\n        self.jsValue->daysInMonth?\n    }\n    \n    daysInYear(): Int {\n        self.jsValue->daysInYear?\n    }\n    \n    epochMilliseconds(): Int {\n        self.jsValue->epochMilliseconds?\n    }\n    \n    era(): Option[String] {\n        let era = self.jsValue->era\n        if(!era.isNullOrUndefined()) {era?}\n    }\n    \n    eraYear(): Option[Int] {\n        let eraYear = self.jsValue->eraYear\n        if(!eraYear.isNullOrUndefined()) {eraYear?}\n    }\n    \n    hour(): Int {\n        self.jsValue->hour?\n    }\n    \n    hoursInDay(): Int {\n        self.jsValue->hoursInDay?\n    }\n\n    inLeapYear(): Bool {\n        self.jsValue->inLeapYear?\n    }\n\n    microsecond(): Int {\n        self.jsValue->microsecond?\n    }\n\n    millisecond(): Int {\n        self.jsValue->millisecond?\n    }\n\n    minute(): Int {\n        self.jsValue->minute?\n    }\n\n    month(): Int {\n        self.jsValue->month?\n    }\n\n    monthCode(): String {\n        self.jsValue->monthCode?\n    }\n\n    monthsInYear(): Int {\n        self.jsValue->monthsInYear?\n    }\n\n    nanosecond(): Int {\n        self.jsValue->nanosecond?\n    }\n\n    offset(): String {\n        self.jsValue->offset?\n    }\n\n    offsetNanoseconds(): Int {\n        self.jsValue->offsetNanoseconds?\n    }\n\n    second(): Int {\n        self.jsValue->second?\n    }\n\n    weekOfYear(): Int {\n        self.jsValue->weekOfYear?\n    }\n\n    year(): Int {\n        self.jsValue->year?\n    }\n\n    yearOfWeek(): Int {\n        self.jsValue->yearOfWeek?\n    }\n    \n    nextTimeZoneTransition(): Date {\n        Date(self.jsValue->getTimeZoneTransition(\"next\"))\n    }\n    \n    previousTimeZoneTransition(): Date {\n        Date(self.jsValue->getTimeZoneTransition(\"previous\"))\n    }\n    \n    startOfYear(): Date {\n        Date(self.jsValue->with(Js->(year = self.year(), month = 1, day = 1))->startOfDay())\n    }\n\n    startOfMonth(): Date {\n        Date(self.jsValue->with(Js->(year = self.year(), month = self.month(), day = 1))->startOfDay())\n    }\n    \n    startOfWeek(firstDayOfWeek: Int = 1): Date {\n        let offset = ((self.dayOfWeek() - firstDayOfWeek) + self.daysInWeek()) % self.daysInWeek()\n        Date(self.jsValue->subtract(Js->(day = offset))->startOfDay())\n    }\n    \n    startOfDay(): Date {\n        Date(self.jsValue->startOfDay())\n    }\n\n    startOfHour(): Date {\n        Date(self.jsValue->round(Js->(smallestUnit = \"hour\", roundingMode = \"floor\")))\n    }\n    \n    startOfMinute(): Date {\n        Date(self.jsValue->round(Js->(smallestUnit = \"minute\", roundingMode = \"floor\")))\n    }\n    \n    startOfSecond(): Date {\n        Date(self.jsValue->round(Js->(smallestUnit = \"second\", roundingMode = \"floor\")))\n    }\n    \n    startOfMillisecond(): Date {\n        Date(self.jsValue->round(Js->(smallestUnit = \"millisecond\", roundingMode = \"floor\")))\n    }\n    \n    startOfMicrosecond(): Date {\n        Date(self.jsValue->round(Js->(smallestUnit = \"microsecond\", roundingMode = \"floor\")))\n    }\n    \n    toRfc9557(\n        smallestUnit: Option[String] = None\n        fractionalSecondDigits: Option[Int] = None\n        timeZone: Bool = True\n        offset: Bool = True\n        calendar: Bool = True\n    ): String {\n        self.jsValue->toString(Js->(\n            calendarName = if(calendar) {\"auto\"} else {\"never\"}\n            fractionalSecondDigits = fractionalSecondDigits.map {_!}.else {\"auto\"!}\n            smallestUnit = smallestUnit.map {_!}.else {Js.undefined()}\n            timeZoneName = if(timeZone) {\"auto\"} else {\"never\"}\n            offset = if(offset) {\"auto\"} else {\"never\"}\n        ))?\n    }\n    \n    withCalendar(calendarId: String): Date {\n        Date(self.jsValue->withCalendar(calendarId))\n    }\n    \n    withTimeZone(timeZoneId: String): Date {\n        Date(self.jsValue->withTimeZone(timeZoneId))\n    }\n    \n    withEra(\n        era: String\n        eraYear: Int\n        monthCode: Option[String] = None\n        day: Option[Int] = None\n        earlier: Bool = True\n        later: Bool = True\n    ): Date {\n        Date(self.jsValue->with(Js->(\n            era = era\n            eraYear = eraYear\n            monthCode = monthCode.map {_!}.else {Js.undefined()} \n            day = day.map {_!}.else {Js.undefined()} \n        ), internalDisambiguation(earlier, later)))\n    }\n    \n    withMonthCode(\n        monthCode: String\n        day: Option[Int] = None\n        earlier: Bool = True\n        later: Bool = True\n    ): Date {\n        Date(self.jsValue->with(Js->(\n            monthCode = monthCode\n            day = day.map {_!}.else {Js.undefined()} \n        ), internalDisambiguation(earlier, later)))\n    }\n    \n    with(\n        year: Option[Int] = None\n        month: Option[Int] = None\n        week: Option[Int] = None\n        day: Option[Int] = None\n        hour: Option[Int] = None\n        minute: Option[Int] = None\n        second: Option[Int] = None\n        millisecond: Option[Int] = None\n        microsecond: Option[Int] = None\n        nanosecond: Option[Int] = None\n        offset: Option[String] = None\n        earlier: Bool = True\n        later: Bool = True\n    ): Date {\n        Date(self.jsValue->with(Js->(\n            year = year.map {_!}.else {Js.undefined()} \n            month = month.map {_!}.else {Js.undefined()} \n            week = week.map {_!}.else {Js.undefined()} \n            day = day.map {_!}.else {Js.undefined()} \n            hour = hour.map {_!}.else {Js.undefined()} \n            minute = minute.map {_!}.else {Js.undefined()} \n            second = second.map {_!}.else {Js.undefined()} \n            millisecond = millisecond.map {_!}.else {Js.undefined()} \n            microsecond = microsecond.map {_!}.else {Js.undefined()} \n            nanosecond = nanosecond.map {_!}.else {Js.undefined()}\n            offset = offset.map {_!}.else {Js.undefined()}\n        ), internalDisambiguation(earlier, later)))\n    }\n    \n    add(\n        years: Int = 0\n        months: Int = 0\n        weeks: Int = 0\n        days: Int = 0\n        hours: Int = 0\n        minutes: Int = 0\n        seconds: Int = 0\n        milliseconds: Int = 0\n        microseconds: Int = 0\n        nanoseconds: Int = 0\n    ): Date {\n        Date(self.jsValue->add(Js->(\n            years = years\n            months = months\n            weeks = weeks\n            days = days\n            hours = hours\n            minutes = minutes\n            seconds = seconds\n            milliseconds = milliseconds\n            microseconds = microseconds\n            nanoseconds = nanoseconds\n        )))\n    }\n    \n    subtract(\n        years: Int = 0\n        months: Int = 0\n        weeks: Int = 0\n        days: Int = 0\n        hours: Int = 0\n        minutes: Int = 0\n        seconds: Int = 0\n        milliseconds: Int = 0\n        microseconds: Int = 0\n        nanoseconds: Int = 0\n    ): Date {\n        Date(self.jsValue->subtract(Js->(\n            years = years\n            months = months\n            weeks = weeks\n            days = days\n            hours = hours\n            minutes = minutes\n            seconds = seconds\n            milliseconds = milliseconds\n            microseconds = microseconds\n            nanoseconds = nanoseconds\n        )))\n    }\n    \n    addGap(gap: DateGap): Date {\n        Date(self.jsValue->add(Js->(\n            years = gap.years\n            months = gap.months\n            weeks = gap.weeks\n            days = gap.days\n            hours = gap.hours\n            minutes = gap.minutes\n            seconds = gap.seconds\n            milliseconds = gap.milliseconds\n            microseconds = gap.microseconds\n            nanoseconds = gap.nanoseconds\n        )))\n    }\n    \n    subtractGap(gap: DateGap): Date {\n        Date(self.jsValue->add(Js->(\n            years = gap.years\n            months = gap.months\n            weeks = gap.weeks\n            days = gap.days\n            hours = gap.hours\n            minutes = gap.minutes\n            seconds = gap.seconds\n            milliseconds = gap.milliseconds\n            microseconds = gap.microseconds\n            nanoseconds = gap.nanoseconds\n        )))\n    }\n    \n    since(that: Date): DateGap {\n        let duration = self.jsValue->since(that.jsValue)\n        DateGap(\n            years = duration->years?\n            months = duration->months?\n            weeks = duration->weeks?\n            days = duration->days?\n            hours = duration->hours?\n            minutes = duration->minutes?\n            seconds = duration->seconds?\n            milliseconds = duration->milliseconds?\n            microseconds = duration->microseconds?\n            nanoseconds = duration->nanoseconds?\n        )\n    }\n    \n    until(that: Date): DateGap {\n        let duration = self.jsValue->until(that.jsValue)\n        DateGap(\n            years = duration->years?\n            months = duration->months?\n            weeks = duration->weeks?\n            days = duration->days?\n            hours = duration->hours?\n            minutes = duration->minutes?\n            seconds = duration->seconds?\n            milliseconds = duration->milliseconds?\n            microseconds = duration->microseconds?\n            nanoseconds = duration->nanoseconds?\n        )\n    }\n    \n    yearsSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"years\", relativeTo = that.jsValue))?\n    }\n    \n    monthsSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"months\", relativeTo = that.jsValue))?\n    }\n    \n    weeksSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"weeks\", relativeTo = that.jsValue))?\n    }\n    \n    daysSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"days\", relativeTo = that.jsValue))?\n    }\n    \n    hoursSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"hours\", relativeTo = that.jsValue))?\n    }\n    \n    minutesSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"minutes\", relativeTo = that.jsValue))?\n    }\n    \n    secondsSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"seconds\", relativeTo = that.jsValue))?\n    }\n    \n    millisecondsSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"milliseconds\", relativeTo = that.jsValue))?\n    }\n    \n    microsecondsSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"microseconds\", relativeTo = that.jsValue))?\n    }\n    \n    nanosecondsSince(that: Date): Float {\n        let duration = self.jsValue->since(that.jsValue)\n        duration->total(Js->(unit = \"nanoseconds\", relativeTo = that.jsValue))?\n    }\n    \n    schedule(nextDate: Date => Date): Stream[Date] {\n        mutable current = self\n        [self].toStream().addAll(Stream.new {\n            current = nextDate(current)\n            Some(current)\n        })\n    }\n    \n}\n\nextend self: DateGap {\n\n    toIso8601(\n        smallestUnit: Option[String] = None\n        fractionalSecondDigits: Option[Int] = None\n    ): String {\n        let duration = Js->Temporal->Duration->from(Js->(\n            years = self.years\n            months = self.months\n            weeks = self.weeks\n            days = self.days\n            hours = self.hours\n            minutes = self.minutes\n            seconds = self.seconds\n            milliseconds = self.milliseconds\n            microseconds = self.microseconds\n            nanoseconds = self.nanoseconds\n        ))\n        duration->toString(Js->(\n            smallestUnit = smallestUnit.map {_!}.else {Js.undefined()}\n            fractionalSecondDigits = fractionalSecondDigits.map {_!}.else {\"auto\"!}\n        ))?\n    }\n    \n}\n\nutcTimeZoneId: String = \"UTC\"\nisoCalendarId: String = \"iso8601\"\n\nmonday: Int = 1\ntuesday: Int = 2\nwednesday: Int = 3\nthursday: Int = 4\nfriday: Int = 5\nsaturday: Int = 6\nsunday: Int = 7\n\njanuary: Int = 1\nfebruary: Int = 2\nmarch: Int = 3\napril: Int = 4\nmay: Int = 5\njune: Int = 6\njuly: Int = 7\naugust: Int = 8\nseptember: Int = 9\noctober: Int = 10\nnovember: Int = 11\ndecember: Int = 12\n\ninternalDisambiguation(earlier: Bool, later: Bool): JsValue {\n    Js->(\n        disambiguation = if(earlier && later) {\n            \"compatible\"\n        } elseIf {earlier} {\n            \"earlier\"\n        } elseIf {later} {\n            \"later\"\n        } else {\n            \"reject\"\n        }\n    )    \n}\n"
    ],
    "names": [
        "DateGap",
        "years",
        "months",
        "weeks",
        "days",
        "hours",
        "minutes",
        "seconds",
        "milliseconds",
        "microseconds",
        "nanoseconds",
        "utcTimeZoneId",
        "isoCalendarId",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
        "january",
        "february",
        "march",
        "april",
        "may",
        "june",
        "july",
        "august",
        "september",
        "october",
        "november",
        "december",
        "new",
        "timeZoneId",
        "year",
        "month",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond",
        "microsecond",
        "nanosecond",
        "calendarId",
        "offset",
        "None",
        "earlier",
        "later",
        "\"Temporal\"",
        "ZonedDateTime",
        "from",
        "timeZone",
        "calendar",
        "else",
        "map",
        "w1",
        "internalDisambiguation",
        "newEra",
        "era",
        "eraYear",
        "newEpochMilliseconds",
        "epochMilliseconds",
        "zoned",
        "Instant",
        "fromEpochMilliseconds",
        "toZonedDateTimeISO",
        "withCalendar",
        "newRfc9557",
        "rfc9557",
        "gap",
        "iso8601",
        "duration",
        "Duration",
        "disambiguation",
        "self",
        "dayOfWeek",
        "dayOfYear",
        "daysInWeek",
        "daysInMonth",
        "daysInYear",
        "isNullOrUndefined",
        "hoursInDay",
        "inLeapYear",
        "monthCode",
        "monthsInYear",
        "offsetNanoseconds",
        "weekOfYear",
        "yearOfWeek",
        "nextTimeZoneTransition",
        "getTimeZoneTransition",
        "previousTimeZoneTransition",
        "startOfYear",
        "with",
        "startOfDay",
        "startOfMonth",
        "startOfWeek",
        "firstDayOfWeek",
        "subtract",
        "startOfHour",
        "round",
        "smallestUnit",
        "roundingMode",
        "startOfMinute",
        "startOfSecond",
        "startOfMillisecond",
        "startOfMicrosecond",
        "toRfc9557",
        "fractionalSecondDigits",
        "toString",
        "calendarName",
        "timeZoneName",
        "withTimeZone",
        "withEra",
        "withMonthCode",
        "week",
        "add",
        "addGap",
        "subtractGap",
        "since",
        "that",
        "until",
        "yearsSince",
        "total",
        "unit",
        "relativeTo",
        "monthsSince",
        "weeksSince",
        "daysSince",
        "hoursSince",
        "minutesSince",
        "secondsSince",
        "millisecondsSince",
        "microsecondsSince",
        "nanosecondsSince",
        "schedule",
        "nextDate",
        "current",
        "addAll",
        "toStream",
        "Some",
        "toIso8601",
        "Date",
        "equals",
        "x",
        "y",
        "compare",
        "instant",
        "fromInt",
        "OrderingSame",
        "anyTag",
        "internalAnyTag",
        "show",
        "value",
        "serializeUsing",
        "serialization",
        "deserializeUsing"
    ],
    "mappings": ""
}