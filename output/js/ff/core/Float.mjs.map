{
    "version": 3,
    "sources": [
        "../../../../../core/Float.ff"
    ],
    "sourcesContent": [
        "data Float {}\r\n\r\nextend self: Float {\r\n\r\n    toInt(): Int {\r\n        Js->Math->trunc(self).coalesce(0)?\r\n    }\r\n\r\n    round(): Float {\r\n        Js->Math->round(self)?\r\n    }\r\n\r\n    floor(): Float {\r\n        Js->Math->floor(self)?\r\n    }\r\n\r\n    ceil(): Float {\r\n        Js->Math->ceil(self)?\r\n    }\r\n\r\n    truncate(): Float {\r\n        Js->Math->trunc(self)?\r\n    }\r\n\r\n    sign(): Float {\r\n        Js->Math->sign(self)?\r\n    }\r\n\r\n    abs(): Float {\r\n        Js->Math->abs(self)?\r\n    }\r\n\r\n    toFixed(digits: Int): String {\r\n        self!->toFixed(digits)?\r\n    }\r\n\r\n    min(that: Float): Float  {\r\n        Js->Math->min(self, that)?\r\n    }\r\n\r\n    max(that: Float): Float {\r\n        Js->Math->max(self, that)?\r\n    }\r\n\r\n    clamp(from: Float, to: Float): Float {\r\n        Js->Math->min(Js->Math->max(self, from), to)?\r\n    }\r\n    \r\n    lerp(that: Float, factor: Float): Float {\r\n        self + factor * (that - self)\r\n    }\r\n    \r\n    smoothstep(that: Float, factor: Float): Float {\r\n        let t = ((factor - self) / (that - self)).clamp(0.0, 1.0)\r\n        t * t * (3.0 - 2.0 * t)\r\n    }\r\n    \r\n    expDecay(that: Float, decay: Float, factor: Float): Float {\r\n        that + (self - that) * (-decay * factor).exp()\r\n    }\r\n    \r\n    acos(): Float {\r\n        Js->Math->acos(self)?\r\n    }\r\n        \r\n    acosh(): Float {\r\n        Js->Math->acosh(self)?\r\n    }\r\n        \r\n    asin(): Float {\r\n        Js->Math->asin(self)?\r\n    }\r\n        \r\n    asinh(): Float {\r\n        Js->Math->asinh(self)?\r\n    }\r\n        \r\n    atan(): Float {\r\n        Js->Math->atan(self)?\r\n    }\r\n        \r\n    atan2(that: Float): Float {\r\n        Js->Math->atan2(self, that)?\r\n    }\r\n        \r\n    atanh(): Float {\r\n        Js->Math->atanh(self)?\r\n    }\r\n        \r\n    cbrt(): Float {\r\n        Js->Math->cbrt(self)?\r\n    }\r\n        \r\n    cos(): Float {\r\n        Js->Math->cos(self)?\r\n    }\r\n        \r\n    cosh(): Float {\r\n        Js->Math->cosh(self)?\r\n    }\r\n        \r\n    exp(): Float {\r\n        Js->Math->exp(self)?\r\n    }\r\n        \r\n    expm1(): Float {\r\n        Js->Math->expm1(self)?\r\n    }\r\n        \r\n    log(that: Float): Float {\r\n        let l: Float = Js->Math->log2(self)?\r\n        l / Js->Math->log2(that)?\r\n    }\r\n        \r\n    log10(): Float {\r\n        Js->Math->log10(self)?\r\n    }\r\n        \r\n    log2(): Float {\r\n        Js->Math->log2(self)?\r\n    }\r\n        \r\n    ln(): Float {\r\n        Js->Math->log(self)?\r\n    }\r\n        \r\n    ln1p(): Float {\r\n        Js->Math->log1p(self)?\r\n    }\r\n\r\n    sin(): Float {\r\n        Js->Math->sin(self)?\r\n    }\r\n        \r\n    sinh(): Float {\r\n        Js->Math->sinh(self)?\r\n    }\r\n        \r\n    sqrt(): Float {\r\n        Js->Math->sqrt(self)?\r\n    }\r\n        \r\n    tan(): Float {\r\n        Js->Math->tan(self)?\r\n    }\r\n        \r\n    tanh(): Float {\r\n        Js->Math->tanh(self)?\r\n    }\r\n        \r\n    isFinite(): Bool {\r\n        Js->Number->isFinite(self)?\r\n    }\r\n        \r\n    isNan(): Bool {\r\n        Js->Number->isNaN(self)?\r\n    }\r\n\r\n    isSafeInteger(): Bool {\r\n        Js->Number->isSafeInteger(self)?\r\n    }\r\n\r\n}\r\n\r\nhypot(a: Float, b: Float, c: Float = 0.0, d: Float = 0.0) {\r\n    Js->Math->hypot(a, b, c, d)?\r\n}\r\n\r\ne(): Float {\r\n    Js->Math->E?\r\n}\r\n\r\nln10(): Float {\r\n    Js->Math->LN10?\r\n}\r\n\r\nln2(): Float {\r\n    Js->Math->LN2?\r\n}\r\n\r\nlog10e(): Float {\r\n    Js->Math->LOG10E?\r\n}\r\n\r\nlog2e(): Float {\r\n    Js->Math->LOG2E?\r\n}\r\n\r\npi(): Float {\r\n    Js->Math->PI?\r\n}\r\n\r\nsqrtHalf(): Float {\r\n    Js->Math->\"SQRT1_2\"?\r\n}\r\n\r\nsqrt2(): Float {\r\n    Js->Math->SQRT2?\r\n}\r\n\r\nnan(): Float {\r\n    Js->NaN?\r\n}\r\n\r\ninfinity(): Float {\r\n    Js->Infinity?\r\n}\r\n"
    ],
    "names": [
        "hypot",
        "a",
        "b",
        "c",
        "d",
        "\"Math\"",
        "e",
        "E",
        "ln10",
        "LN10",
        "ln2",
        "LN2",
        "log10e",
        "LOG10E",
        "log2e",
        "LOG2E",
        "pi",
        "PI",
        "sqrtHalf",
        "sqrt2",
        "SQRT2",
        "nan",
        "\"NaN\"",
        "infinity",
        "\"Infinity\"",
        "toInt",
        "self",
        "coalesce",
        "trunc",
        "round",
        "floor",
        "ceil",
        "truncate",
        "sign",
        "abs",
        "toFixed",
        "digits",
        "min",
        "that",
        "max",
        "clamp",
        "from",
        "to",
        "lerp",
        "factor",
        "smoothstep",
        "t",
        "expDecay",
        "decay",
        "exp",
        "acos",
        "acosh",
        "asin",
        "asinh",
        "atan",
        "atan2",
        "atanh",
        "cbrt",
        "cos",
        "cosh",
        "expm1",
        "log",
        "l",
        "log2",
        "log10",
        "ln",
        "ln1p",
        "log1p",
        "sin",
        "sinh",
        "sqrt",
        "tan",
        "tanh",
        "isFinite",
        "\"Number\"",
        "isNan",
        "isNaN",
        "isSafeInteger",
        "Float",
        "anyTag",
        "internalAnyTag"
    ],
    "mappings": ""
}