{
    "version": 3,
    "sources": [
        "../../../../../core/Channel.ff"
    ],
    "sourcesContent": [
        "capability Channel[T](\r\n    capacity: Int\r\n    buffer: Array[T]\r\n    readers: JsValue\r\n    writers: JsValue\r\n)\r\n\r\nextend self[T]: Channel[T] {\r\n\r\n    read(): T {\r\n        readOr(self, {_}).wait()\r\n    }\r\n\r\n    write(message: T): Unit {\r\n        writeOr(self, message, {}).wait()\r\n    }\r\n\r\n}\r\n\r\n\r\ncapability ChannelAction[T](\r\n    channel: Channel[JsValue]\r\n    body: JsValue\r\n    message: Option[JsValue]\r\n    previous: Option[ChannelAction[T]]\r\n)\r\n\r\nextend self[T]: ChannelAction[T] {\r\n    \r\n    readOr[M](channel: Channel[M], body: M => T): ChannelAction[T] {\r\n        ChannelAction(channel!?, body!, None, Some(self))\r\n    }\r\n\r\n    writeOr[M](channel: Channel[M], message: M, body: () => T): ChannelAction[T] {\r\n        ChannelAction(channel!?, body!, Some(message!), Some(self))\r\n    }\r\n\r\n    wait(): T {\r\n        internalRunChannelAction(self, None)\r\n    }\r\n\r\n    timeout(duration: Duration, body: () => T): T {\r\n        internalRunChannelAction(self, Some(Pair(body, Some(duration))))\r\n    }\r\n\r\n    immediately(body: () => T): T {\r\n        internalRunChannelAction(self, Some(Pair(body, None)))\r\n    }\r\n\r\n}\r\n\r\nreadOr[M, T](channel: Channel[M], body: M => T): ChannelAction[T] {\r\n    ChannelAction(channel!?, body!, None, None)\r\n}\r\n\r\nwriteOr[M, T](channel: Channel[M], message: M, body: () => T): ChannelAction[T] {\r\n    ChannelAction(channel!?, body!, Some(message!), None)\r\n}\r\n\r\ninternalRunChannelAction[T](action: ChannelAction[T], mode: Option[Pair[() => T, Option[Duration]]]): T {\r\n    Js.throwIfCancelled()\r\n    \r\n    // Convert the linked actions into an array.\r\n    let actions = [].toArray()\r\n    function findActions(action: ChannelAction[T]) {\r\n        actions.push(action)\r\n        action.previous.each {findActions(_)}\r\n    }\r\n    findActions(action)\r\n    \r\n    // If any reads or writes can be done immediately, do the first one and return.\r\n    mutable foundPromise = None\r\n    actions.eachWhile {action =>\r\n        action.message.{\r\n            | Some(message) {action.channel.readers->size !== 0} => \r\n                let reader = action.channel.readers->values()->next()->value\r\n                action.channel.readers->delete(reader)\r\n                reader->resolve(message)\r\n                foundPromise = Some(action.body.callValue1(Js.currentTask()!))\r\n            | Some(message) {action.channel.buffer.size() < action.channel.capacity} =>\r\n                action.channel.buffer.push(message)\r\n                foundPromise = Some(action.body.callValue1(Js.currentTask()!))\r\n            | Some(_) =>\r\n            | None {action.channel.buffer.size() != 0} => \r\n                action.channel.buffer.reverse()\r\n                let message = action.channel.buffer.pop()\r\n                action.channel.buffer.reverse()\r\n                foundPromise = Some(action.body.callValue2(message!, Js.currentTask()!))\r\n            | None {action.channel.writers->size !== 0} => \r\n                let writer = action.channel.writers->values()->next()->value\r\n                action.channel.writers->delete(writer)\r\n                writer->resolve()\r\n                foundPromise = Some(action.body.callValue2(writer->message!, Js.currentTask()!))\r\n            | None => \r\n        }\r\n        foundPromise.isEmpty()\r\n    }\r\n    foundPromise.map {Js.await(_)?}.else:\r\n    \r\n    // If there's an \"immediately(body)\" action, do that now.\r\n    if(mode.any {_.second.isEmpty()}) {\r\n        let makePromise = mode.grab().first\r\n        Js.await(makePromise()!)?\r\n    } else:\r\n    \r\n    // Otherwise, start waiting for one of the readers or writers (or timeout(body), or cancellation) to happen.\r\n    let body = Js.awaitCancellablePromise {resolve, reject, onSettled =>\r\n        mode.each {m =>\r\n            let timeout = Js->setTimeout(Js->{resolve(m.first)}, m.second.grab().seconds * 1000.0)\r\n            onSettled {_ => Js->clearTimeout(timeout)}\r\n        }\r\n        actions.each {action =>\r\n            action.message.{\r\n                | Some(message) => \r\n                    let writer = Js->(\r\n                        resolve = Js->{resolve({action.body.callValue1(Js.currentTask()!)?})}\r\n                        message = message\r\n                    )\r\n                    action.channel.writers->add(writer)\r\n                    onSettled {_ => action.channel.writers->delete(writer)}\r\n                | None =>\r\n                    let reader = Js->(\r\n                        resolve = Js->{m =>\r\n                            resolve({action.body.callValue2(m, Js.currentTask()!)?})\r\n                        }\r\n                    )\r\n                    action.channel.readers->add(reader)\r\n                    onSettled {_ => action.channel.readers->delete(reader)}\r\n            }\r\n        }\r\n    }\r\n    body()\r\n    \r\n}\r\n"
    ],
    "names": [
        "Channel",
        "capacity",
        "buffer",
        "readers",
        "writers",
        "ChannelAction",
        "channel",
        "body",
        "message",
        "previous",
        "readOr",
        "None",
        "writeOr",
        "Some",
        "internalRunChannelAction",
        "action",
        "mode",
        "actions",
        "toArray",
        "findActions",
        "w1",
        "foundPromise",
        "size",
        "reader",
        "values",
        "next",
        "value",
        "delete",
        "resolve",
        "reverse",
        "pop",
        "writer",
        "isEmpty",
        "else",
        "map",
        "any",
        "second",
        "makePromise",
        "grab",
        "first",
        "awaitCancellablePromise",
        "reject",
        "onSettled",
        "m",
        "timeout",
        "\"setTimeout\"",
        "\"clearTimeout\"",
        "add",
        "read",
        "self",
        "wait",
        "write",
        "duration",
        "Pair",
        "immediately"
    ],
    "mappings": ""
}