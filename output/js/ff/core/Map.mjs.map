{
    "version": 3,
    "sources": [
        "../../../../../core/Map.ff"
    ],
    "sourcesContent": [
        "import RbMap\r\n\r\nnewtype Map[K, V](redBlack: RB[K, V])\r\n\r\nnew[K, V](): Map[K, V] {Map(E)}\r\n\r\nextend self[K: Order, V]: Map[K, V] {\r\n\r\n    add(key: K, value: V): Map[K, V] {\r\n        Map(RbMap.insert(key, value, self.redBlack))\r\n    }\r\n\r\n    addAll(that: Map[K, V]): Map[K, V] {\r\n        mutable result = self.redBlack\r\n        that.redBlack.each {k, v =>\r\n            result = RbMap.insert(k, v, result)\r\n        }\r\n        Map(result)\r\n    }\r\n\r\n    addList(that: List[Pair[K, V]]): Map[K, V] {\r\n        mutable result = self.redBlack\r\n        that.each {| Pair(k, v) =>\r\n            result = RbMap.insert(k, v, result)\r\n        }\r\n        Map(result)\r\n    }\r\n\r\n    get(key: K): Option[V] {\r\n        self.redBlack.get(key)\r\n    }\r\n    \r\n    first(): Option[Pair[K, V]] {\r\n        self.redBlack.first()\r\n    }\r\n\r\n    last(): Option[Pair[K, V]] {\r\n        self.redBlack.last()\r\n    }\r\n\r\n    lastBefore(key: K): Option[Pair[K, V]] {\r\n        self.redBlack.lastBefore(key)\r\n    }\r\n    \r\n    firstAfter(key: K): Option[Pair[K, V]] {\r\n        self.redBlack.firstAfter(key)\r\n    }\r\n\r\n    remove(key: K): Map[K, V] {\r\n        Map(RbMap.delete(key, self.redBlack))\r\n    }\r\n\r\n    removeAll(that: Map[K, V]): Map[K, V] {\r\n        mutable result = self.redBlack\r\n        that.redBlack.each {| k, _ =>\r\n            result = RbMap.delete(k, result)\r\n        }\r\n        Map(result)\r\n    }\r\n    \r\n    removeList(keys: List[K]): Map[K, V] {\r\n        mutable result = self.redBlack\r\n        keys.each {k =>\r\n            result = RbMap.delete(k, result)\r\n        }\r\n        Map(result)\r\n    }\r\n\r\n    pairs(): List[Pair[K, V]] { // TODO: Remove this method (use toList)\r\n        self.toList()\r\n    }\r\n\r\n    toList(): List[Pair[K, V]] {\r\n        self.redBlack.pairs()\r\n    }\r\n\r\n    toStream(cycle: Bool = False): Stream[Pair[K, V]] {\r\n        self.redBlack.toStream(cycle)\r\n    }\r\n\r\n    keys(): Set[K] {\r\n        self.pairs().map {_.first}.toSet()\r\n    }\r\n\r\n    values(): List[V] {\r\n        self.pairs().map {_.second}\r\n    }\r\n\r\n    size(): Int {\r\n        self.redBlack.size()\r\n    }\r\n\r\n    map[K1: Order, V1](body: (K, V) => Pair[K1, V1]): Map[K1, V1] {\r\n        Map(self.redBlack.map(body))\r\n    }\r\n\r\n    mapValues[V1](body: (K, V) => V1): Map[K, V1] {\r\n        Map(self.redBlack.mapValues(body))\r\n    }\r\n\r\n    contains(key: K): Bool {\r\n        !self.get(key).isEmpty()\r\n    }\r\n\r\n    grab(key: K): V {\r\n        self.get(key).grab()\r\n    }\r\n\r\n    updateOrInsert(key: K, update: V => V, default: () => V): Map[K, V] {\r\n        self.get(key).{\r\n            | None => self.add(key, default())\r\n            | Some(v) => self.add(key, update(v))\r\n        }\r\n    }\r\n\r\n    each(body: (K, V) => Unit): Unit {\r\n        self.redBlack.each(body)\r\n    }\r\n\r\n    eachWhile(body: (K, V) => Bool): Bool {\r\n        self.redBlack.eachWhile(body)\r\n    }\r\n\r\n    find(body: (K, V) => Bool): Option[Pair[K, V]] {\r\n        self.redBlack.find(body)\r\n    }\r\n\r\n}\r\n\r\nextend self[K: Order, V]: Map[K, List[V]] {\r\n\r\n    addToList(key: K, value: V): Map[K, List[V]] {\r\n        self.updateOrInsert(key, {[value, ..._]}, {[value]})\r\n    }\r\n\r\n}\r\n\r\nextend self[K: Order, V]: Map[K, Array[V]] {\r\n\r\n    push(key: K, value: V): Map[K, Array[V]] {\r\n        self.get(key).{\r\n            | None => self.add(key, [value].toArray())\r\n            | Some(array) => array.push(value); self\r\n        }\r\n    }\r\n\r\n}\r\n\r\ninstance Map[K: Equal: Order, V: Equal]: Equal {\r\n    equals(x: Map[K, V], y: Map[K, V]): Bool {\r\n        Equal.equals(x.pairs(), y.pairs())\r\n    }\r\n}\r\n\r\ninstance Map[K: Order, V: Order]: Order {\r\n    compare(x: Map[K, V], y: Map[K, V]): Ordering {\r\n        Ordering.compare(x.pairs(), y.pairs())\r\n    }\r\n}\r\n\r\ninstance Map[K: Show: Order, V: Show]: Show {\r\n    show(value: Map[K, V]): String {\r\n        Show.show(value.pairs()) + \".toMap()\"\r\n    }\r\n}\r\n"
    ],
    "names": [
        "new",
        "E",
        "add",
        "self",
        "key",
        "value",
        "insert",
        "addAll",
        "that",
        "result",
        "each",
        "k",
        "v",
        "addList",
        "get",
        "first",
        "last",
        "lastBefore",
        "firstAfter",
        "remove",
        "delete",
        "removeAll",
        "removeList",
        "keys",
        "pairs",
        "toList",
        "toStream",
        "cycle",
        "toSet",
        "map",
        "w1",
        "values",
        "second",
        "size",
        "body",
        "mapValues",
        "contains",
        "isEmpty",
        "grab",
        "updateOrInsert",
        "update",
        "default",
        "None",
        "eachWhile",
        "find",
        "addToList",
        "push",
        "toArray",
        "array",
        "Map",
        "equals",
        "x",
        "y",
        "compare",
        "show"
    ],
    "mappings": ""
}