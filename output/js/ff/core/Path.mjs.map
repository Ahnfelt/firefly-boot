{
    "version": 3,
    "sources": [
        "../../../../../core/Path.ff"
    ],
    "sourcesContent": [
        "capability Path(absolutePath: String)\ncapability PathEntry {}\n\nextend self: Path {\n\n    exists(checkReadable: Bool = False, checkWritable: Bool = False, checkExecutable: Bool = False): Bool {\n        let fs = Js.import(\"fs\")\n        let fsPromises = Js.import(\"fs/promises\")\n        let flagsR: Int = (fs->constants->\"R_OK\" * checkReadable!)?\n        let flagsW: Int = (fs->constants->\"W_OK\" * checkWritable!)?\n        let flagsX: Int = (fs->constants->\"X_OK\" * checkExecutable!)?\n        let flags = flagsR.bitOr(flagsW.bitOr(flagsX))\n        try {\n            Js.await(\n                fsPromises->access(self.absolutePath, if(flags == 0) {fs->constants->\"F_OK\"} else {flags!})\n            )\n            True\n        } catchAny {_ => \n            False\n        }\n    }\n\n    isReadable(): Bool {\n        self.exists(checkReadable = True)\n    }\n        \n    isWritable(): Bool {\n        self.exists(checkWritable = True)\n    }\n\n    isExecutable(): Bool {\n        self.exists(checkExecutable = True)\n    }\n\n    isDirectory(): Bool {\n        let fsPromises = Js.import(\"fs/promises\")        \n        try {\n            Js.await(fsPromises->lstat(self.absolutePath))->isDirectory()?\n        } catchAny {_ => \n            False\n        }\n    }\n\n    isFile(): Bool {\n        let fsPromises = Js.import(\"fs/promises\")        \n        try {\n            Js.await(fsPromises->lstat(self.absolutePath))->isFile()?\n        } catchAny {_ => \n            False\n        }        \n    }\n\n    isSymbolicLink(): Bool {\n        let fsPromises = Js.import(\"fs/promises\")        \n        try {\n            Js.await(fsPromises->lstat(self.absolutePath))->isSymbolicLink()?\n        } catchAny {_ => \n            False\n        }        \n    }\n\n    isInsideOf(path: Path): Bool {\n        let nodePath = Js.import(\"path\")\n        if(path.absolutePath == \"/\") {True} else:\n        let childPath = self.absolutePath\n        let parentPath = path.absolutePath\n        childPath.startsWith(parentPath + nodePath->sep?) || childPath == parentPath\n    }\n    \n    size(): Int {\n        let fs = Js.import(\"fs\")\n        Js.await(fs->promises->stat(self.absolutePath))?\n    }\n        \n    modified(): Date {\n        let fs = Js.import(\"fs\")\n        Date.newEpochMilliseconds(\"UTC\", Js.await(fs->promises->stat(self.absolutePath))->mtimeMs?)\n    }\n\n    entries(): Stream[PathEntry] {\n        let fsPromises = Js.import(\"fs/promises\")\n        mutable dir = Js.null()\n        Stream {\n            if(dir.isNull()) {\n                dir = Js.await(fsPromises->opendir(self.absolutePath, Js->(bufferSize = 128)))\n            }\n            let entry = Js.await(dir->read())\n            if(!entry.isNull()) {\n                entry->ffPath = self.absolutePath\n                entry?\n            }\n        } {\n            if(!dir.isNull()) {\n                Js.await(dir->close())\n            }\n        }\n    }\n\n    absolute(): String {\n        self.absolutePath\n    }\n\n    relativeTo(path: Path): String {\n        let nodePath = Js.import(\"path\")\n        nodePath->relative(path.absolutePath, self.absolutePath)?\n    }\n    \n    relativeListTo(path: Path): List[String] {\n        let nodePath = Js.import(\"path\")\n        let relative = self.relativeTo(path)\n        if(nodePath->sep === \"\\\\\") {\n            relative.split('/').flatMap {_.split('\\\\')}.filter {_ != \"\"}\n        } else {\n            relative.split('/').filter {_ != \"\"}\n        }\n    }\n    \n    endsWith(parts: List[String]): Bool {\n        function go(pathOption: Option[Path], reversed: List[String]): Bool {\n            | _, [] => True\n            | Some(path), [p, ...ps] => path.base() == p && go(path.parent(), ps)\n            | None, _ => False\n        }\n        go(Some(self), parts.reverse())\n    }\n\n    contains(parts: List[String]): Bool {\n        self.endsWith(parts) || self.parent().any {_.contains(parts)}\n    }\n\n    base(): String {\n        let path = Js.import(\"path\")\n        path->basename(self.absolutePath)?        \n    }\n\n    extension(): String {\n        let path = Js.import(\"path\")\n        path->extname(self.absolutePath)?\n    }\n\n    url(): String {\n        let url = Js.import(\"url\")\n        \"\" + url->pathToFileURL(self.absolutePath)?        \n    }\n\n    delimiter(): String {\n        let path = Js.import(\"path\")\n        path->delimiter(self.absolutePath)?        \n    }\n\n    separator(): String {\n        let path = Js.import(\"path\")\n        path->separator(self.absolutePath)?        \n    }\n\n    parent(): Option[Path] {\n        let path = Js.import(\"path\")\n        let result: String = path->dirname(self.absolutePath)?\n        if(result != \"\" && result != self.absolutePath) {Path(result)}\n    }\n\n    slash(relativePath: String): Path {\n        let path = Js.import(\"path\")\n        Path(path->join(self.absolutePath, relativePath)?)\n    }\n\n    path(absoluteOrRelativePath: String): Path {\n        let path = Js.import(\"path\")\n        Path(path->resolve(self.absolutePath, absoluteOrRelativePath)?)\n    }\n\n    copyTo(path: Path, retries: Int = 0, retryDelay: Int = 100) {\n        if(self.isDirectory()) {\n            if(path.exists()) {path.delete(retries, retryDelay)}\n            path.createDirectory()\n            self.entries().each {file =>\n                file.path().copyTo(path.slash(file.path().relativeTo(self)), retries, retryDelay)\n            }\n        } elseIf {self.isSymbolicLink()} {\n            path.createSymlinkTo(self.path(self.readSymbolicLink()), junction = True)\n        } else {\n            path.writeStream(self.readStream())\n        }\n    }\n\n    createDirectory(createParentDirectories: Bool = False) {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.await(fsPromises->mkdir(self.absolutePath, Js->(recursive = createParentDirectories)))\n    }\n\n    createSymlinkTo(path: Path, junction: Bool = False) {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.await(fsPromises->symlink(path.absolutePath, self.absolutePath, if(junction) {\"junction\"!} else {Js.null()}))\n    }\n\n    delete(retries: Int = 0, retryDelay: Int = 100) {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.await(fsPromises->rm(self.absolutePath, Js->(recursive = True, retries = retries, retryDelay = retryDelay)))\n    }\n    \n    truncate(length: Int = 0) {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.await(fsPromises->truncate(self.absolutePath, length))\n    }\n\n    renameTo(path: Path) {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.await(fsPromises->rename(self.absolutePath, path.absolutePath))\n    }\n\n    readSymbolicLink(): String {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.await(fsPromises->readlink(self.absolutePath))?\n    }\n\n    readText(): String {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.withSignal {signal =>\n            Js.await(fsPromises->readFile(self.absolutePath, Js->(encoding = \"UTF-8\", signal = signal)))?\n        }\n    }\n\n    writeText(text: String) {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.withSignal {signal =>\n            Js.await(fsPromises->writeFile(self.absolutePath, text, Js->(encoding = \"UTF-8\", signal = signal)))\n        }\n    }\n\n    appendText(text: String) {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.withSignal {signal =>\n            Js.await(fsPromises->appendFile(self.absolutePath, text, Js->(encoding = \"UTF-8\", signal = signal)))\n        }\n    }\n\n    readBuffer(): Buffer {\n        self.readStream().toBuffer()\n    }\n    \n    writeBuffer(buffer: Buffer) {\n        self.writeStream([buffer].toStream())\n    }\n    \n    appendBuffer(buffer: Buffer) {\n        self.appendStream([buffer].toStream())\n    }\n\n    readStream(): Stream[Buffer] {\n        let fs = Js.import(\"fs\")\n        internalReadStream {fs->createReadStream(self.absolutePath)}\n    }\n    \n    writeStream(stream: Stream[Buffer], createOnly: Bool = False) {\n        internalWriteStream(self, stream, if(createOnly) {\"wx\"} else {\"w\"})\n    }\n\n    appendStream(stream: Stream[Buffer]) {\n        internalWriteStream(self, stream, \"a\")\n    }\n\n    readHandle(alsoWrite: Bool = False): FileHandle {\n        let fsPromises = Js.import(\"fs/promises\")\n        Js.await(fsPromises->open(self.absolutePath, if(alsoWrite) {\"r+\"} else {\"r\"}))?\n    }\n\n    writeHandle(alsoRead: Bool = False, mustCreate: Bool = False): FileHandle {\n        let fsPromises = Js.import(\"fs/promises\")\n        let flags = if(mustCreate) {\"wx\"} else {\"w\"} + if(alsoRead) {\"+\"} else {\"\"}\n        Js.await(fsPromises->open(self.absolutePath, flags))?\n    }\n   \n    appendHandle(alsoRead: Bool = False, mustCreate: Bool = False): FileHandle {\n        let fsPromises = Js.import(\"fs/promises\")\n        let flags = if(mustCreate) {\"ax\"} else {\"a\"} + if(alsoRead) {\"+\"} else {\"\"}\n        Js.await(fsPromises->open(self.absolutePath, flags))?\n    }\n\n}\n\nextend self: PathEntry {\n    \n    path(): Path {\n        let path = Js.import(\"path\")\n        Path(path->join(self!->ffPath, self!->name)?)\n    }\n\n    isDirectory(): Bool {\n        self!->isDirectory()?\n    }\n\n    isFile(): Bool {\n        self!->isFile()?\n    }\n\n    isSymbolicLink(): Bool {\n        self!->isSymbolicLink()?\n    }\n\n}\n\ninternalReadStream(createReadStream: () => JsValue): Stream[Buffer] {\n    mutable readable = None\n    mutable seenError = Js.null()\n    let emptyResolve = {}\n    let emptyReject = {_ => }\n    mutable doResolve = emptyResolve\n    mutable doReject = emptyReject\n    let open = {\n        let newReadable = createReadStream()\n        newReadable->on(\"readable\", Js->{\n            doResolve()\n        })\n        newReadable->on(\"error\", Js->{error =>\n            seenError = error\n            doReject(error)\n        })\n        newReadable->on(\"close\", Js->{\n            doResolve()\n        })\n        readable = Some(newReadable)\n        newReadable\n    }\n    Stream {\n        Js.throwIfCancelled()\n        let jsStream = readable.else(open)\n        function go(): Option[Buffer] {\n            let jsBuffer = jsStream->read()\n            if(!jsBuffer.isNullOrUndefined()) {\n                let buffer: Buffer = Js->DataView->(jsBuffer->buffer, jsBuffer->byteOffset, jsBuffer->length)?\n                Some(buffer)\n            } else:\n            if(!seenError.isNullOrUndefined()) {\n                Js.throw(seenError?)\n            } else:\n            if(jsStream->destroyed?) {None} else:\n            Js.withSignal {signal =>\n                let promise = Js->Promise->(Js->{resolve, reject =>\n                    let jsDoReject = Js->{_ => doReject(signal->reason?)}\n                    doResolve = {\n                        signal->removeEventListener(\"abort\", jsDoReject)\n                        doResolve = emptyResolve\n                        doReject = emptyReject\n                        resolve.callValue0()\n                    }\n                    doReject = {error => \n                        signal->removeEventListener(\"abort\", jsDoReject)\n                        doResolve = emptyResolve\n                        doReject = emptyReject\n                        reject.callValue1(error)\n                    }\n                    signal->addEventListener(\"abort\", jsDoReject)\n                })\n                Js.await(promise)\n            }\n            tailcall go()\n        }\n        go()\n    } {\n        readable.each {_->destroy()}\n    }\n}\n\ninternalWriteStream(path: Path, stream: Stream[Buffer], flags: String) {\n    let fs = Js.import(\"fs\")\n    let writable = fs->createWriteStream(path.absolutePath, Js->(flags = flags))\n    try {\n        stream.each {buffer =>\n            if(!writable->write(Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength))?) {\n                Js.withSignal {signal =>\n                    Js.await(Js->Promise->(Js->{resolve, reject =>\n                        let jsDoReject = Js->{_ => reject->callValue1(signal->reason?)}\n                        signal->addEventListener(\"abort\", jsDoReject)\n                        writable->once(\"drain\", Js->{\n                            signal->removeEventListener(\"abort\", jsDoReject)\n                            resolve.callValue0()\n                        })\n                    }))\n                }\n            }\n        }\n    } finally {\n        Js.await(Js->Promise->(Js->{resolve, reject =>\n            writable->close(Js->{err => if(err?) {reject.callValue1(err)} else {resolve.callValue0()}})\n        }))\n    }\n}\n\n"
    ],
    "names": [
        "Path",
        "absolutePath",
        "internalReadStream",
        "createReadStream",
        "readable",
        "None",
        "seenError",
        "emptyResolve",
        "emptyReject",
        "doResolve",
        "doReject",
        "open",
        "newReadable",
        "on",
        "error",
        "Some",
        "Stream",
        "jsStream",
        "else",
        "go",
        "jsBuffer",
        "read",
        "isNullOrUndefined",
        "buffer",
        "\"DataView\"",
        "byteOffset",
        "length",
        "destroyed",
        "withSignal",
        "signal",
        "promise",
        "\"Promise\"",
        "resolve",
        "reject",
        "jsDoReject",
        "reason",
        "removeEventListener",
        "addEventListener",
        "w1",
        "destroy",
        "internalWriteStream",
        "path",
        "stream",
        "flags",
        "fs",
        "writable",
        "createWriteStream",
        "each",
        "write",
        "\"Uint8Array\"",
        "byteLength",
        "callValue1",
        "once",
        "close",
        "err",
        "exists",
        "self",
        "checkReadable",
        "checkWritable",
        "checkExecutable",
        "fsPromises",
        "flagsR",
        "constants",
        "flagsW",
        "flagsX",
        "bitOr",
        "access",
        "isReadable",
        "isWritable",
        "isExecutable",
        "isDirectory",
        "lstat",
        "isFile",
        "isSymbolicLink",
        "isInsideOf",
        "nodePath",
        "childPath",
        "parentPath",
        "startsWith",
        "sep",
        "size",
        "promises",
        "stat",
        "modified",
        "newEpochMilliseconds",
        "mtimeMs",
        "entries",
        "dir",
        "isNull",
        "opendir",
        "bufferSize",
        "entry",
        "ffPath",
        "absolute",
        "relativeTo",
        "relative",
        "relativeListTo",
        "filter",
        "flatMap",
        "split",
        "endsWith",
        "parts",
        "pathOption",
        "reversed",
        "p",
        "ps",
        "base",
        "parent",
        "reverse",
        "contains",
        "any",
        "basename",
        "extension",
        "extname",
        "url",
        "pathToFileURL",
        "delimiter",
        "separator",
        "result",
        "dirname",
        "slash",
        "relativePath",
        "join",
        "absoluteOrRelativePath",
        "copyTo",
        "retries",
        "retryDelay",
        "delete",
        "createDirectory",
        "file",
        "createSymlinkTo",
        "readSymbolicLink",
        "writeStream",
        "readStream",
        "createParentDirectories",
        "mkdir",
        "recursive",
        "junction",
        "symlink",
        "rm",
        "truncate",
        "renameTo",
        "rename",
        "readlink",
        "readText",
        "readFile",
        "encoding",
        "writeText",
        "text",
        "writeFile",
        "appendText",
        "appendFile",
        "readBuffer",
        "toBuffer",
        "writeBuffer",
        "toStream",
        "appendBuffer",
        "appendStream",
        "createOnly",
        "readHandle",
        "alsoWrite",
        "writeHandle",
        "alsoRead",
        "mustCreate",
        "appendHandle",
        "name"
    ],
    "mappings": ""
}