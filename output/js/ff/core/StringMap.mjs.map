{
    "version": 3,
    "sources": [
        "../../../../../core/StringMap.ff"
    ],
    "sourcesContent": [
        "class StringMap[V] {}\r\n\r\nnew[V](): StringMap[V] {\r\n    Js->Map->()?\r\n}\r\n    \r\nextend self[V]: StringMap[V] {\r\n\r\n    get(key: String): Option[V] {\r\n        let result = self!->get(key)\r\n        if(!result.isUndefined() || self!->has(key)?) {result?}\r\n    }\r\n\r\n    grab(key: String): V {\r\n        let result = self!->get(key)\r\n        if(result.isUndefined() && !self.has(key)) {throw(GrabException())}\r\n        result?\r\n    }\r\n        \r\n    set(key: String, value: V): Unit {\r\n        self!->set(key, value!)\r\n    }\r\n\r\n    has(key: String): Bool {\r\n        self!->has(key)?\r\n    }\r\n\r\n    remove(key: String): Bool {\r\n        self!->delete(key)?\r\n    }\r\n\r\n    clear(): Unit {\r\n        self!->clear()\r\n    }\r\n\r\n    size(): Int {\r\n        self!->size?\r\n    }\r\n    \r\n    isEmpty(): Bool {\r\n        self.size() == 0\r\n    }\r\n\r\n    each(body: (String, V) => Unit): Unit {\r\n        if(Js.inAsync()) {\r\n            let iterator = self!->entries()\r\n            mutable result = iterator->next()\r\n            while {!result->done?} {\r\n                let value = result->value\r\n                body(value.get(0)?, value.get(1)?)\r\n                result = iterator->next()\r\n            }\r\n        } else {\r\n            self!->forEach(Js->{v, k => body(k?, v?)})\r\n        }\r\n    }\r\n    \r\n    eachWhile(body: (String, V) => Bool): Unit {\r\n        self!.eachWhile {value =>\r\n            body(value.get(0)?, value.get(1)?)\r\n        }\r\n    }\r\n            \r\n    toArray(): Array[Pair[String, V]] {\r\n        let array = Array.new()\r\n        self.each {k, v => array.push(Pair(k, v))}\r\n        array\r\n    }\r\n\r\n    toList(): List[Pair[String, V]] {\r\n        self.toArray().drain()\r\n    }\r\n\r\n    toStream(): Stream[Pair[String, V]] {\r\n        self.toList().toStream()\r\n    }\r\n\r\n    toMap(): Map[String, V] {\r\n        self.toList().toMap()\r\n    }\r\n\r\n    keys(): List[String] {\r\n        let array = Array.new()\r\n        self.each {k, v => array.push(k)}\r\n        array.drain()\r\n    }\r\n\r\n    values(): List[V] {\r\n        let array = Array.new()\r\n        self.each {k, v => array.push(v)}\r\n        array.drain()\r\n    }\r\n\r\n    copy(): StringMap[V] {\r\n        Js->Map->(self!)?\r\n    }\r\n\r\n    getOrSet(key: String, body: () => V): V {\r\n        if(!self.has(key)) {self.set(key, body())}\r\n        self.grab(key)\r\n    }\r\n            \r\n}\r\n\r\nextend self[V]: StringMap[Array[V]] {\r\n\r\n    push(key: String, value: V) {\r\n        self.get(key).{\r\n            | None => self.set(key, [value].toArray())\r\n            | Some(array) => array.push(value)\r\n        }\r\n    }\r\n\r\n}\r\n"
    ],
    "names": [
        "new",
        "\"Map\"",
        "get",
        "self",
        "key",
        "result",
        "isUndefined",
        "has",
        "grab",
        "throw",
        "GrabException",
        "set",
        "value",
        "remove",
        "delete",
        "clear",
        "size",
        "isEmpty",
        "each",
        "body",
        "iterator",
        "entries",
        "next",
        "done",
        "forEach",
        "v",
        "k",
        "eachWhile",
        "toArray",
        "array",
        "Pair",
        "toList",
        "drain",
        "toStream",
        "toMap",
        "keys",
        "values",
        "copy",
        "getOrSet",
        "push",
        "None"
    ],
    "mappings": "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"
}