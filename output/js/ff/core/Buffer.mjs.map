{
    "version": 3,
    "sources": [
        "../../../../../core/Buffer.ff"
    ],
    "sourcesContent": [
        "class Buffer {}\r\n\r\nnew(size: Int, shared: Bool = False): Buffer {\r\n    Js->DataView->(if(shared) {Js->SharedArrayBuffer->(size)} else {Js->ArrayBuffer->(size)})?\r\n}\r\n\r\nextend self: Buffer {\r\n\r\n    /*grabBigInt64(byteOffset: Int, littleEndian: Bool = True): BigInt\r\n        target js sync \"return self_.getBigInt64(byteOffset_, littleEndian_)\"*/\r\n\r\n    /*grabBigUint64(byteOffset: Int, littleEndian: Bool = True): BigInt\r\n        target js sync \"return self_.getBigUint64(byteOffset_, littleEndian_)\"*/\r\n\r\n    grabUint64(byteOffset: Int, littleEndian: Bool = True): Int {\r\n        let high = self!->getUint32(byteOffset + if(littleEndian) {4} else {0}, littleEndian)\r\n        let low = self!->getUint32(byteOffset + if(littleEndian) {0} else {4}, littleEndian)\r\n        let result = (high? * 0x100000000) + low?\r\n        if(!Js->Number->isSafeInteger(result)?) {\r\n            throw(GrabException)\r\n        }\r\n        result\r\n    }\r\n    \r\n    grabInt64(byteOffset: Int, littleEndian: Bool = True): Int {\r\n        let high = self!->getInt32(byteOffset + if(littleEndian) {4} else {0}, littleEndian)\r\n        let low = self!->getUint32(byteOffset + if(littleEndian) {0} else {4}, littleEndian)\r\n        let result = (high? * 0x100000000) + low?\r\n        if(!Js->Number->isSafeInteger(result)?) {\r\n            throw(GrabException()) //grabInt64 out of range (consider grabBigInt64)'\r\n        }\r\n        result\r\n    }\r\n\r\n    grabFloat32(byteOffset: Int, littleEndian: Bool = True): Float {\r\n        self!->getFloat32(byteOffset, littleEndian)?\r\n    }\r\n    \r\n    grabFloat64(byteOffset: Int, littleEndian: Bool = True): Float {\r\n        self!->getFloat64(byteOffset, littleEndian)?\r\n    }\r\n\r\n    grabInt16(byteOffset: Int, littleEndian: Bool = True): Int {\r\n        self!->getInt16(byteOffset, littleEndian)?\r\n    }\r\n\r\n    grabInt32(byteOffset: Int, littleEndian: Bool = True): Int {\r\n        self!->getInt32(byteOffset, littleEndian)?\r\n    }\r\n\r\n    grabInt8(byteOffset: Int): Int {\r\n        self!->getInt8(byteOffset)?\r\n    }\r\n\r\n    grabUint16(byteOffset: Int, littleEndian: Bool = True): Int {\r\n        self!->getUint16(byteOffset, littleEndian)?\r\n    }\r\n\r\n    grabUint32(byteOffset: Int, littleEndian: Bool = True): Int {\r\n        self!->getUint32(byteOffset, littleEndian)?\r\n    }\r\n\r\n    grabUint8(byteOffset: Int): Int {\r\n        self!->getUint8(byteOffset)?\r\n    }\r\n\r\n    /*setBigInt64(byteOffset: Int, value: BigInt, littleEndian: Bool = False): Unit\r\n        target js sync \"self_.setBigInt64(byteOffset_, value_, littleEndian_)\"*/\r\n\r\n    /*setBigUint64(byteOffset: Int, value: BigInt, littleEndian: Bool = False): Unit\r\n        target js sync \"self_.setBigUint64(byteOffset_, value_, littleEndian_)\"*/\r\n\r\n    setUint64(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {\r\n        self!->setUint32(byteOffset + if(littleEndian) {4} else {0}, value.bitRightUnsigned(16).bitRightUnsigned(16), littleEndian)\r\n        self!->setUint32(byteOffset + if(littleEndian) {0} else {4}, value.bitAnd(0xffffffff), littleEndian)\r\n    }\r\n        \r\n    setInt64(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {\r\n        self!->setUint32(byteOffset + if(littleEndian) {4} else {0}, value.bitRight(16).bitRight(16), littleEndian)\r\n        self!->setUint32(byteOffset + if(littleEndian) {0} else {4}, value.bitAnd(0xffffffff), littleEndian)\r\n    }\r\n\r\n    setFloat32(byteOffset: Int, value: Float, littleEndian: Bool = True): Unit {\r\n        self!->setFloat32(byteOffset, value, littleEndian)\r\n    }\r\n\r\n    setFloat64(byteOffset: Int, value: Float, littleEndian: Bool = True): Unit {\r\n        self!->setFloat64(byteOffset, value, littleEndian)\r\n    }\r\n\r\n    setInt16(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {\r\n        self!->setInt16(byteOffset, value, littleEndian)\r\n    }\r\n\r\n    setInt32(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {\r\n        self!->setInt32(byteOffset, value, littleEndian)\r\n    }\r\n\r\n    setInt8(byteOffset: Int, value: Int): Unit {\r\n        self!->setInt8(byteOffset, value)\r\n    }\r\n\r\n    setUint16(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {\r\n        self!->setUint16(byteOffset, value, littleEndian)\r\n    }\r\n\r\n    setUint32(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {\r\n        self!->setUint32(byteOffset, value, littleEndian)\r\n    }\r\n\r\n    setUint8(byteOffset: Int, value: Int): Unit {\r\n        self!->setUint8(byteOffset, value)\r\n    }\r\n\r\n    setAll(byteOffset: Int, buffer: Buffer): Unit {\r\n        let sourceBuffer = Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength)\r\n        let targetBuffer = Js->Uint8Array->(self!->buffer, self!->byteOffset, self!->byteLength)\r\n        targetBuffer->set(sourceBuffer, byteOffset)\r\n    }\r\n\r\n    size(): Int {\r\n        self!->byteLength?\r\n    }\r\n\r\n    shared(): Bool {\r\n        Js->SharedArrayBuffer.typeof() != \"undefined\" && self!->buffer.instanceof(Js->SharedArrayBuffer)\r\n    }\r\n\r\n    view(begin: Int, end: Int): Buffer {\r\n        Js->DataView->(self!->buffer, self!->byteOffset + begin!, end - begin)?\r\n    }\r\n\r\n    copy(): Buffer {\r\n        Js->DataView->(self!->buffer->slice(self!->byteOffset, self!->byteOffset + self!->byteLength))?\r\n    }\r\n\r\n    toString(encoding: String = \"utf8\"): String {\r\n        if(encoding == \"utf8\") {\r\n            if(Js->TextDecoder->ffSingleton.typeof() == \"undefined\") {\r\n                Js->TextDecoder->ffSingleton = Js->TextDecoder->()\r\n            }\r\n            Js->TextDecoder->ffSingleton->decode(self!)?\r\n        } else {\r\n            Js->TextDecoder->()->decode(self!)?\r\n        }\r\n    }\r\n\r\n    toByteList(): List[Int] {\r\n        Js->Uint8Array->(self!->buffer, self!->byteOffset, self!->byteLength).spreadToArray()!?\r\n    }\r\n    \r\n    toHex(): String {\r\n        mutable hex = \"\"\r\n        0.until(self!->byteLength?).each {i =>\r\n            hex = hex + self!->getUint8(i)->toString(16)->padStart(2, \"0\")?\r\n        }\r\n        hex\r\n    }\r\n    \r\n    toBase64(): String {\r\n        let view = Js->Uint8Array->(self!->buffer, self!->byteOffset, self!->byteLength)\r\n        //let binaryString = Js->TextDecoder->(\"latin1\")->decode(view)\r\n        let binaryString = Js->Array->from(view, Js->{byte => Js->String->fromCodePoint(byte)})->join(\"\");\r\n        Js->btoa(binaryString)?\r\n    }\r\n    \r\n    toLetter16(): String {\r\n        let result = Buffer.new(self.size().bitLeft(1))\r\n        0.until(self.size()).each {i =>\r\n            let b = self.grabUint8(i)\r\n            result.setUint16(i.bitLeft(1), (b.bitRightUnsigned(4).bitAnd(0xf) + 0x68).bitOr(\r\n                (b.bitAnd(0xf) + 0x68).bitLeft(8)\r\n            ), littleEndian = True)\r\n        }\r\n        result.toString()\r\n    }\r\n\r\n}\r\n\r\nfromByteList(array: List[Int]): Buffer {\r\n    Js->DataView->(Js->Uint8Array->(array)->buffer)?\r\n}\r\n\r\nfromBufferList(array: List[Buffer]): Buffer {\r\n    mutable length = 0\r\n    array.each {length += _!->byteLength?}\r\n    let arrayBuffer = Js->ArrayBuffer->(length)\r\n    let result = Js->Uint8Array->(arrayBuffer)\r\n    mutable offset = 0\r\n    array.each {b =>\r\n        result->set(Js->Uint8Array->(b!->buffer, b!->byteOffset, b!->byteLength), offset)\r\n        offset += b!->byteLength?\r\n    }\r\n    Js->DataView->(arrayBuffer)?\r\n}\r\n\r\nfromHex(hex: String): Buffer {\r\n    let byteCount = (hex.size() * 0.5).ceil().toInt()\r\n    let arrayBuffer = Js->ArrayBuffer->(byteCount)\r\n    let result = Js->Uint8Array->(arrayBuffer)\r\n    0.until(byteCount).each {i =>\r\n        result.set(i, Js->parseInt(hex!->slice(i * 2, i * 2 + 2), 16))\r\n    }\r\n    Js->DataView->(arrayBuffer)?\r\n}\r\n\r\nfromBase64(base64: String): Buffer {\r\n    let binaryString = Js->atob(base64)\r\n    let bytes = Js->Uint8Array->from(binaryString, Js->{char => char->codePointAt(0)})\r\n    Js->DataView->(bytes->buffer)?\r\n}\r\n\r\nfromLetter16(letters: String): Buffer {\r\n    let buffer = Buffer.new(letters.size().bitRightUnsigned(1))\r\n    0.until(buffer.size()).each {i =>\r\n        buffer.setUint8(i, (letters.grab(i.bitLeft(1)).codeUnit.bitAnd(0x1f) - 0x8).bitLeft(4).bitOr(\r\n            letters.grab(i.bitLeft(1).bitOr(1)).codeUnit.bitAnd(0x1f) - 0x8\r\n        ))\r\n    }\r\n    buffer\r\n}\r\n\r\ninstance Buffer: Show {\r\n    show(value: Buffer): String {\r\n        \"\"\"Buffer.fromHex(\"\"\"\" + value.toHex() + \"\"\"\")\"\"\"\r\n    }\r\n}\r\n\r\ninstance Buffer: Equal {\r\n    equals(x: Buffer, y: Buffer): Bool {\r\n        if(x.size() != y.size()) {False} else:\r\n        if(x! === y!) {True} else:\r\n        mutable i = 0\r\n        mutable same = True\r\n        while {i + 4 < x.size() && same} {\r\n            same = x!->getInt32(i) === y!->getInt32(i)\r\n            i += 4\r\n        }\r\n        if(!same) {False} else:\r\n        i.until(x.size()).eachWhile {i =>\r\n            same = x!->getUint8(i) === y!->getUint8(i)\r\n            same\r\n        }\r\n        same\r\n    }\r\n}\r\n\r\ninstance Buffer: Order {\r\n    compare(x: Buffer, y: Buffer): Ordering {\r\n        if(x!.equals(y!)) {OrderingSame} else:\r\n        let minLength = x.size().min(y.size())\r\n        mutable ordering = OrderingSame\r\n        0.until(minLength).eachWhile {i =>\r\n            if(x!->getUint8(i) !== x!->getUint8(i)) {\r\n                ordering = Ordering.fromInt((x!->getUint8(i) - y!->getUint8(i))?)\r\n                False\r\n            } else {\r\n                True\r\n            }\r\n        }\r\n        if(ordering == OrderingSame) {\r\n            Ordering.fromInt(x.size() - y.size())\r\n        } else {\r\n            ordering\r\n        }\r\n    }\r\n}\r\n"
    ],
    "names": [
        "new",
        "size",
        "shared",
        "\"DataView\"",
        "\"SharedArrayBuffer\"",
        "\"ArrayBuffer\"",
        "fromByteList",
        "array",
        "\"Uint8Array\"",
        "buffer",
        "fromBufferList",
        "length",
        "byteLength",
        "arrayBuffer",
        "result",
        "offset",
        "set",
        "b",
        "byteOffset",
        "fromHex",
        "hex",
        "byteCount",
        "toInt",
        "ceil",
        "i",
        "\"parseInt\"",
        "slice",
        "fromBase64",
        "base64",
        "binaryString",
        "\"atob\"",
        "bytes",
        "from",
        "char",
        "codePointAt",
        "fromLetter16",
        "letters",
        "setUint8",
        "bitOr",
        "bitLeft",
        "grab",
        "grabUint64",
        "self",
        "littleEndian",
        "high",
        "getUint32",
        "low",
        "\"Number\"",
        "isSafeInteger",
        "throw",
        "GrabException",
        "grabInt64",
        "getInt32",
        "grabFloat32",
        "getFloat32",
        "grabFloat64",
        "getFloat64",
        "grabInt16",
        "getInt16",
        "grabInt32",
        "grabInt8",
        "getInt8",
        "grabUint16",
        "getUint16",
        "grabUint32",
        "grabUint8",
        "getUint8",
        "setUint64",
        "value",
        "setUint32",
        "setInt64",
        "setFloat32",
        "setFloat64",
        "setInt16",
        "setInt32",
        "setInt8",
        "setUint16",
        "setAll",
        "sourceBuffer",
        "targetBuffer",
        "view",
        "begin",
        "end",
        "copy",
        "toString",
        "encoding",
        "\"TextDecoder\"",
        "ffSingleton",
        "decode",
        "toByteList",
        "toHex",
        "padStart",
        "toBase64",
        "\"Array\"",
        "byte",
        "\"String\"",
        "fromCodePoint",
        "join",
        "\"btoa\"",
        "toLetter16",
        "Buffer",
        "show",
        "equals",
        "x",
        "y",
        "same",
        "compare",
        "OrderingSame",
        "minLength",
        "min",
        "ordering",
        "fromInt"
    ],
    "mappings": ""
}