{
    "version": 3,
    "sources": [
        "../../../../../core/Serializable.ff"
    ],
    "sourcesContent": [
        "data DeserializationChecksumException()\r\n\r\nserialize[T: Serializable](value: T, initialBufferSize: Int = 1024): Buffer {\r\n    let serialization = Serialization(Buffer.new(initialBufferSize), 0, 0)\r\n    serializeUsing(serialization, value)\r\n    serialization.autoResize(4)\r\n    serialization.buffer.setInt32(serialization.offset, serialization.checksum)\r\n    serialization.offset += 4\r\n    serialization.buffer.view(0, serialization.offset)\r\n}\r\n\r\ndeserialize[T: Serializable](buffer: Buffer): T {\r\n    let serialization = Serialization(buffer, 0, 0)\r\n    let result = deserializeUsing(serialization)\r\n    let checksum = serialization.buffer.grabInt32(serialization.offset)\r\n    if(checksum != serialization.checksum) {\r\n        throw(DeserializationChecksumException)\r\n    }\r\n    result\r\n}\r\n\r\ntrait T: Serializable {\r\n    serializeUsing(serialization: Serialization, value: T): Unit\r\n    deserializeUsing(serialization: Serialization): T\r\n}\r\n\r\nclass Serialization(\r\n    mutable buffer: Buffer\r\n    mutable offset: Int\r\n    mutable checksum: Int\r\n)\r\n\r\nextend self: Serialization {\r\n    autoResize(minSpareCapacity: Int) {\r\n        if(self.offset + minSpareCapacity > self.buffer.size()) {\r\n            let minSize = self.buffer.size() + minSpareCapacity\r\n            let newBuffer = Buffer.new((self.buffer.size() * 2).max(minSize))\r\n            newBuffer.setAll(0, self.buffer)\r\n            self.buffer = newBuffer\r\n        }\r\n    }\r\n}\r\n\r\ninstance Int: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Int): Unit {\r\n        serialization.autoResize(8)\r\n        serialization.buffer.setInt64(serialization.offset, value)\r\n        serialization.offset += 8\r\n    }\r\n    deserializeUsing(serialization: Serialization): Int {\r\n        let result = serialization.buffer.grabInt64(serialization.offset)\r\n        serialization.offset += 8\r\n        result\r\n    }\r\n}\r\n\r\ninstance Bool: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Bool): Unit {\r\n        serialization.autoResize(1)\r\n        serialization.buffer.setUint8(serialization.offset, if(value) {1} else {0})\r\n        serialization.offset += 1\r\n    }\r\n    deserializeUsing(serialization: Serialization): Bool {\r\n        let result = serialization.buffer.grabUint8(serialization.offset)\r\n        serialization.offset += 1\r\n        result == 1\r\n    }\r\n}\r\n\r\ninstance List[T: Serializable]: Serializable {\r\n    serializeUsing(serialization: Serialization, value: List[T]): Unit {\r\n        if(value.size() < 255) {\r\n            serialization.autoResize(1)\r\n            serialization.buffer.setUint8(serialization.offset, value.size())\r\n            serialization.offset += 1\r\n        } elseIf {value.size() < 1073741824} {\r\n            serialization.autoResize(1 + 4)\r\n            serialization.buffer.setUint8(serialization.offset, 255)\r\n            serialization.buffer.setUint32(1 + serialization.offset, value.size())\r\n            serialization.offset += 1 + 4\r\n        } else {\r\n            panic(\"Can't serialize arrays where size() >= 1073741824\")\r\n        }\r\n        value.each {serializeUsing(serialization, _)}\r\n    }\r\n    deserializeUsing(serialization: Serialization): List[T] {\r\n        let smallSize = serialization.buffer.grabUint8(serialization.offset)\r\n        if(smallSize != 255) {\r\n            serialization.offset += 1\r\n            List.fillBy(smallSize) {_ => deserializeUsing(serialization)}\r\n        } else {\r\n            let size = serialization.buffer.grabUint32(serialization.offset + 1)\r\n            serialization.offset += 1 + 4\r\n            List.fillBy(size) {_ => deserializeUsing(serialization)}\r\n        }\r\n    }\r\n}\r\n\r\ninstance Set[T: Serializable: Order]: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Set[T]): Unit {\r\n        serializeUsing(serialization, value.toList())\r\n    }\r\n    deserializeUsing(serialization: Serialization): Set[T] {\r\n        deserializeUsing[List[T]](serialization).toSet()\r\n    }\r\n}\r\n\r\ninstance Map[K: Serializable: Order, V: Serializable]: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Map[K, V]): Unit {\r\n        serializeUsing(serialization, value.toList())\r\n    }\r\n    deserializeUsing(serialization: Serialization): Map[K, V] {\r\n        deserializeUsing[List[Pair[K, V]]](serialization).toMap()\r\n    }\r\n}\r\n\r\ninstance String: Serializable {\r\n    serializeUsing(serialization: Serialization, value: String): Unit {\r\n        serialization.autoResize(1 + value.size())\r\n        serialization.buffer.setUint8(serialization.offset, value.size())\r\n        if(value.size() < 255 && internalSetLatin1(serialization.buffer, serialization.offset + 1, value)) {\r\n            serialization.offset += 1 + value.size()\r\n        } elseIf {value.size() < 1073741824} {\r\n            let stringBuffer = value.toBuffer()\r\n            serialization.autoResize(5 + stringBuffer.size())\r\n            serialization.buffer.setUint8(serialization.offset, 255)\r\n            serialization.buffer.setUint32(serialization.offset + 1, stringBuffer.size())\r\n            serialization.buffer.setAll(serialization.offset + 5, stringBuffer)\r\n            serialization.offset += 5 + stringBuffer.size()\r\n        } else {\r\n            panic(\"Can't serialize strings where size() >= 1073741824\")\r\n        }\r\n    }\r\n    deserializeUsing(serialization: Serialization): String {\r\n        let smallSize = serialization.buffer.grabUint8(serialization.offset)\r\n        if(smallSize != 255) {\r\n            let result = internalGrabLatin1(serialization.buffer, serialization.offset + 1, smallSize)\r\n            serialization.offset += 1 + smallSize\r\n            result\r\n        } else {\r\n            let size = serialization.buffer.grabUint32(serialization.offset + 1)\r\n            let stringBuffer = serialization.buffer.view(serialization.offset + 5, serialization.offset + 5 + size)\r\n            serialization.offset += 5 + size\r\n            stringBuffer.toString()\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninternalSetLatin1(self: Buffer, byteOffset: Int, value: String): Bool {\r\n    mutable result = True\r\n    0.until(value.size()).eachWhile {i =>\r\n        let charCode: Int = value!->charCodeAt(i)?\r\n        if(charCode >= 256) {\r\n            result = False\r\n        } else {\r\n            self!->setUint8(byteOffset + i, charCode)\r\n        }\r\n        result\r\n    }\r\n    result\r\n}\r\n\r\ninternalGrabLatin1(self: Buffer, byteOffset: Int, size: Int): String {\r\n    let codeUnits = Js->Uint8Array->(self!->buffer, self!->byteOffset + byteOffset!, size)\r\n    Js->String->fromCharCode->apply(Js.null(), codeUnits)?\r\n}\r\n"
    ],
    "names": [
        "DeserializationChecksumException",
        "Serialization",
        "buffer",
        "offset",
        "checksum",
        "serialize",
        "value",
        "initialBufferSize",
        "serialization",
        "new",
        "serializeUsing",
        "autoResize",
        "setInt32",
        "view",
        "deserialize",
        "result",
        "deserializeUsing",
        "grabInt32",
        "throw",
        "internalSetLatin1",
        "self",
        "byteOffset",
        "i",
        "charCode",
        "charCodeAt",
        "setUint8",
        "internalGrabLatin1",
        "size",
        "codeUnits",
        "\"Uint8Array\"",
        "\"String\"",
        "fromCharCode",
        "apply",
        "minSpareCapacity",
        "minSize",
        "newBuffer",
        "max",
        "setAll",
        "Int",
        "setInt64",
        "grabInt64",
        "Bool",
        "grabUint8",
        "List",
        "setUint32",
        "panic",
        "smallSize",
        "",
        "grabUint32",
        "Set",
        "toList",
        "toSet",
        "Map",
        "toMap",
        "String",
        "stringBuffer",
        "toBuffer",
        "toString",
        "anyTag",
        "internalAnyTag",
        "show",
        "z"
    ],
    "mappings": ""
}