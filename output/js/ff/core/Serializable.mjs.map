{
    "version": 3,
    "sources": [
        "../../../../../core/Serializable.ff"
    ],
    "sourcesContent": [
        "data DeserializationChecksumException()\r\n\r\nserialize[T: Serializable](value: T, initialBufferSize: Int = 1024): Buffer {\r\n    let serialization = Serialization(Buffer.new(initialBufferSize), 0, 0)\r\n    serializeUsing(serialization, value)\r\n    serialization.autoResize(4)\r\n    serialization.buffer.setInt32(serialization.offset, serialization.checksum)\r\n    serialization.offset += 4\r\n    serialization.buffer.view(0, serialization.offset)\r\n}\r\n\r\ndeserialize[T: Serializable](buffer: Buffer): T {\r\n    let serialization = Serialization(buffer, 0, 0)\r\n    let result = deserializeUsing(serialization)\r\n    let checksum = serialization.buffer.grabInt32(serialization.offset)\r\n    if(checksum != serialization.checksum) {\r\n        throw(DeserializationChecksumException)\r\n    }\r\n    result\r\n}\r\n\r\ntrait T: Serializable {\r\n    serializeUsing(serialization: Serialization, value: T): Unit\r\n    deserializeUsing(serialization: Serialization): T\r\n}\r\n\r\nclass Serialization(\r\n    mutable buffer: Buffer\r\n    mutable offset: Int\r\n    mutable checksum: Int\r\n)\r\n\r\nextend self: Serialization {\r\n    autoResize(minSpareCapacity: Int) {\r\n        if(self.offset + minSpareCapacity > self.buffer.size()) {\r\n            let minSize = self.buffer.size() + minSpareCapacity\r\n            let newBuffer = Buffer.new((self.buffer.size() * 2).max(minSize))\r\n            newBuffer.setAll(0, self.buffer)\r\n            self.buffer = newBuffer\r\n        }\r\n    }\r\n}\r\n\r\ninstance Int: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Int): Unit {\r\n        serialization.autoResize(8)\r\n        serialization.buffer.setInt64(serialization.offset, value)\r\n        serialization.offset += 8\r\n    }\r\n    deserializeUsing(serialization: Serialization): Int {\r\n        let result = serialization.buffer.grabInt64(serialization.offset)\r\n        serialization.offset += 8\r\n        result\r\n    }\r\n}\r\n\r\ninstance Bool: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Bool): Unit {\r\n        serialization.autoResize(1)\r\n        serialization.buffer.setUint8(serialization.offset, if(value) {1} else {0})\r\n        serialization.offset += 1\r\n    }\r\n    deserializeUsing(serialization: Serialization): Bool {\r\n        let result = serialization.buffer.grabUint8(serialization.offset)\r\n        serialization.offset += 1\r\n        result == 1\r\n    }\r\n}\r\n\r\ninstance List[T: Serializable]: Serializable {\r\n    serializeUsing(serialization: Serialization, value: List[T]): Unit {\r\n        if(value.size() < 255) {\r\n            serialization.autoResize(1)\r\n            serialization.buffer.setUint8(serialization.offset, value.size())\r\n            serialization.offset += 1\r\n        } elseIf {value.size() < 1073741824} {\r\n            serialization.autoResize(1 + 4)\r\n            serialization.buffer.setUint8(serialization.offset, 255)\r\n            serialization.buffer.setUint32(1 + serialization.offset, value.size())\r\n            serialization.offset += 1 + 4\r\n        } else {\r\n            panic(\"Can't serialize arrays where size() >= 1073741824\")\r\n        }\r\n        value.each {serializeUsing(serialization, _)}\r\n    }\r\n    deserializeUsing(serialization: Serialization): List[T] {\r\n        let smallSize = serialization.buffer.grabUint8(serialization.offset)\r\n        if(smallSize != 255) {\r\n            serialization.offset += 1\r\n            List.fillBy(smallSize) {_ => deserializeUsing(serialization)}\r\n        } else {\r\n            let size = serialization.buffer.grabUint32(serialization.offset + 1)\r\n            serialization.offset += 1 + 4\r\n            List.fillBy(size) {_ => deserializeUsing(serialization)}\r\n        }\r\n    }\r\n}\r\n\r\ninstance Set[T: Serializable: Order]: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Set[T]): Unit {\r\n        serializeUsing(serialization, value.toList())\r\n    }\r\n    deserializeUsing(serialization: Serialization): Set[T] {\r\n        deserializeUsing[List[T]](serialization).toSet()\r\n    }\r\n}\r\n\r\ninstance Map[K: Serializable: Order, V: Serializable]: Serializable {\r\n    serializeUsing(serialization: Serialization, value: Map[K, V]): Unit {\r\n        serializeUsing(serialization, value.toList())\r\n    }\r\n    deserializeUsing(serialization: Serialization): Map[K, V] {\r\n        deserializeUsing[List[Pair[K, V]]](serialization).toMap()\r\n    }\r\n}\r\n\r\ninstance String: Serializable {\r\n    serializeUsing(serialization: Serialization, value: String): Unit {\r\n        serialization.autoResize(1 + value.size())\r\n        serialization.buffer.setUint8(serialization.offset, value.size())\r\n        if(value.size() < 255 && internalSetLatin1(serialization.buffer, serialization.offset + 1, value)) {\r\n            serialization.offset += 1 + value.size()\r\n        } elseIf {value.size() < 1073741824} {\r\n            let stringBuffer = value.toBuffer()\r\n            serialization.autoResize(5 + stringBuffer.size())\r\n            serialization.buffer.setUint8(serialization.offset, 255)\r\n            serialization.buffer.setUint32(serialization.offset + 1, stringBuffer.size())\r\n            serialization.buffer.setAll(serialization.offset + 5, stringBuffer)\r\n            serialization.offset += 5 + stringBuffer.size()\r\n        } else {\r\n            panic(\"Can't serialize strings where size() >= 1073741824\")\r\n        }\r\n    }\r\n    deserializeUsing(serialization: Serialization): String {\r\n        let smallSize = serialization.buffer.grabUint8(serialization.offset)\r\n        if(smallSize != 255) {\r\n            let result = internalGrabLatin1(serialization.buffer, serialization.offset + 1, smallSize)\r\n            serialization.offset += 1 + smallSize\r\n            result\r\n        } else {\r\n            let size = serialization.buffer.grabUint32(serialization.offset + 1)\r\n            let stringBuffer = serialization.buffer.view(serialization.offset + 5, serialization.offset + 5 + size)\r\n            serialization.offset += 5 + size\r\n            stringBuffer.toString()\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninternalSetLatin1(self: Buffer, byteOffset: Int, value: String): Bool {\r\n    mutable result = True\r\n    0.until(value.size()).eachWhile {i =>\r\n        let charCode: Int = value!->charCodeAt(i)?\r\n        if(charCode >= 256) {\r\n            result = False\r\n        } else {\r\n            self!->setUint8(byteOffset + i, charCode)\r\n        }\r\n        result\r\n    }\r\n    result\r\n}\r\n\r\ninternalGrabLatin1(self: Buffer, byteOffset: Int, size: Int): String {\r\n    let codeUnits = Js->Uint8Array->(self!->buffer, self!->byteOffset + byteOffset!, size)\r\n    Js->String->fromCharCode->apply(Js.null(), codeUnits)?\r\n}\r\n"
    ],
    "names": [
        "DeserializationChecksumException",
        "Serialization",
        "buffer",
        "offset",
        "checksum",
        "serialize",
        "value",
        "initialBufferSize",
        "serialization",
        "new",
        "serializeUsing",
        "autoResize",
        "setInt32",
        "view",
        "deserialize",
        "result",
        "deserializeUsing",
        "grabInt32",
        "throw",
        "internalSetLatin1",
        "self",
        "byteOffset",
        "i",
        "charCode",
        "charCodeAt",
        "setUint8",
        "internalGrabLatin1",
        "size",
        "codeUnits",
        "\"Uint8Array\"",
        "\"String\"",
        "fromCharCode",
        "apply",
        "minSpareCapacity",
        "minSize",
        "newBuffer",
        "max",
        "setAll",
        "Int",
        "setInt64",
        "grabInt64",
        "Bool",
        "grabUint8",
        "List",
        "setUint32",
        "panic",
        "smallSize",
        "",
        "grabUint32",
        "Set",
        "toList",
        "toSet",
        "Map",
        "toMap",
        "String",
        "stringBuffer",
        "toBuffer",
        "toString",
        "anyTag",
        "internalAnyTag",
        "show",
        "z"
    ],
    "mappings": "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"
}