{
    "version": 3,
    "sources": [
        "../../../../../core/Int.ff"
    ],
    "sourcesContent": [
        "data Int {}\r\n\r\nextend self: Int {\r\n\r\n    abs(): Int {\r\n        Js->Math->abs(self)?\r\n    }\r\n\r\n    toFloat(): Float {\r\n        self!?\r\n    }\r\n\r\n    bitNot(): Int {\r\n        Js.unaryOperator(\"~\", self)?\r\n    }\r\n\r\n    bitOr(that: Int): Int {\r\n        Js.binaryOperator(\"|\", self, that)?\r\n    }\r\n\r\n    bitAnd(that: Int): Int {\r\n        Js.binaryOperator(\"&\", self, that)?\r\n    }\r\n\r\n    bitXor(that: Int): Int {\r\n        Js.binaryOperator(\"^\", self, that)?\r\n    }\r\n\r\n    bitLeft(bits: Int): Int {\r\n        Js.binaryOperator(\"<<\", self, bits)?\r\n    }\r\n\r\n    bitRight(bits: Int): Int {\r\n        Js.binaryOperator(\">>\", self, bits)?\r\n    }\r\n\r\n    bitRightUnsigned(bits: Int): Int {\r\n        Js.binaryOperator(\">>>\", self, bits)?\r\n    }\r\n    \r\n    bitLeadingZeros(): Int {\r\n        Js->Math->clz32(self)?\r\n    }\r\n\r\n    to(inclusiveEnd: Int): List[Int] {\r\n        let result = Array.new()\r\n        mutable n = self\r\n        while {n <= inclusiveEnd} {\r\n            result.push(n)\r\n            n += 1\r\n        }\r\n        result.drain()\r\n    }\r\n\r\n    until(exclusiveEnd: Int): List[Int] {\r\n        let result = Array.new()\r\n        mutable n = self\r\n        while {n < exclusiveEnd} {\r\n            result.push(n)\r\n            n += 1\r\n        }\r\n        result.drain()\r\n    }\r\n\r\n    min(that: Int): Int {\r\n        Js->Math->min(self, that)?\r\n    }\r\n\r\n    max(that: Int): Int {\r\n        Js->Math->max(self, that)?\r\n    }\r\n\r\n    clamp(from: Int, to: Int): Int {\r\n        self.max(from).min(to)\r\n    }\r\n    \r\n    pad(padding: String): String {\r\n        (\"\" + self).padStart(padding.size(), padding)\r\n    }\r\n    \r\n    div(divisor: Int): Int {\r\n        (self / divisor).toInt()\r\n    }\r\n\r\n    rem(divisor: Int): Int {\r\n        (self % divisor).toInt()\r\n    }\r\n\r\n}\r\n"
    ],
    "names": [
        "abs",
        "self",
        "\"Math\"",
        "toFloat",
        "bitNot",
        "bitOr",
        "that",
        "bitAnd",
        "bitXor",
        "bitLeft",
        "bits",
        "bitRight",
        "bitRightUnsigned",
        "bitLeadingZeros",
        "clz32",
        "to",
        "inclusiveEnd",
        "result",
        "new",
        "n",
        "drain",
        "until",
        "exclusiveEnd",
        "min",
        "max",
        "clamp",
        "from",
        "pad",
        "padding",
        "padStart",
        "div",
        "divisor",
        "toInt",
        "rem",
        "Int",
        "anyTag",
        "internalAnyTag"
    ],
    "mappings": "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"
}