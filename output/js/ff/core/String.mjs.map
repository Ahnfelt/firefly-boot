{
    "version": 3,
    "sources": [
        "../../../../../core/String.ff"
    ],
    "sourcesContent": [
        "data String {}\r\n\r\nextend self: String {\r\n\r\n    size(): Int {\r\n        self!->length?\r\n    }\r\n\r\n    grab(index: Int): Char {\r\n        if(index < 0 || index >= self.size()) {\r\n            throw(GrabException())\r\n        }\r\n        self!->charCodeAt(index)?\r\n    }\r\n    \r\n    replace(needle: String, replacement: String): String {\r\n        self!->replaceAll(needle, replacement)?\r\n    }\r\n\r\n    replaceFirst(needle: String, replacement: String): String {\r\n        self!->replace(needle, replacement)?\r\n    }\r\n\r\n    reverse(): String {\r\n        self!->split(\"\")->reverse()->join(\"\")?\r\n    }\r\n\r\n    repeat(count: Int): String {\r\n        self!->repeat(count)?\r\n    }\r\n\r\n    trim(): String {\r\n        self!->trim()?\r\n    }\r\n\r\n    trimStart(): String {\r\n        self!->trimStart()?\r\n    }\r\n\r\n    trimEnd(): String {\r\n        self!->trimEnd()?\r\n    }\r\n\r\n    lower(): String {\r\n        self!->toLowerCase()?\r\n    }\r\n\r\n    upper(): String {\r\n        self!->toUpperCase()?\r\n    }\r\n\r\n    dropWhile(p: Char => Bool): String {\r\n        mutable i = 0\r\n        while {i < self.size() && p(self!->charCodeAt(i)?)} {\r\n            i += 1\r\n        }\r\n        self!->slice(i)?\r\n    }\r\n\r\n    takeWhile(p: Char => Bool): String {\r\n        mutable i = 0\r\n        while {i < self.size() && p(self!->charCodeAt(i)?)} {\r\n            i += 1\r\n        }\r\n        self!->slice(0, i)?\r\n    }\r\n\r\n    slice(from: Int, until: Int): String {\r\n        self!->slice(from, until)?\r\n    }\r\n\r\n    split(char: Char): List[String] {\r\n        self!->split(Js->String->fromCharCode(char))?\r\n    }\r\n    \r\n    splitFirst(char: Char): Option[Pair[String, String]] {\r\n        let array: List[String] = self!->split(Js->String->fromCharCode(char), 2)?\r\n        if(array.size() == 2) {\r\n            Pair(array!.get(0)?, array!.get(1)?)\r\n        }\r\n    }    \r\n\r\n    lines(): List[String] {\r\n        self!->split(\r\n            Js->RegExp->(\"[\" + Js->String->fromCharCode(13)? + \"]?[\" + Js->String->fromCharCode(10)? + \"]\", \"g\")\r\n        )?\r\n    }\r\n\r\n    dropFirst(count: Int = 1): String {\r\n        self!->slice(count)?\r\n    }\r\n\r\n    dropLast(count: Int = 1): String {\r\n        self!->slice(0, self.size() - count)?\r\n    }\r\n    \r\n    getInt(): Option[Int] {\r\n        if(self.size() > 0 && self.all {c => 48 <= c.codeUnit && c.codeUnit <= 57}) {\r\n            Js->parseInt(self!, 10)?\r\n        }\r\n    }\r\n            \r\n    getFloat(): Option[Float] {\r\n        // TODO return None for invalid input\r\n        let result = Js->parseFloat(self!, 10)\r\n        if(Js->isFinite(result)?) {result?}\r\n    }\r\n\r\n    grabInt(): Int {\r\n        self.getInt().else {\r\n            throw(GrabException())\r\n        }\r\n    }\r\n        \r\n    grabFloat(): Float {\r\n        self.getFloat().else {\r\n            throw(GrabException())\r\n        }\r\n    }\r\n\r\n    first(): Option[Char] {\r\n        if(self.size() > 0) {\r\n            Char(self!->charCodeAt(0)?)\r\n        }\r\n    }\r\n\r\n    last(): Option[Char] {\r\n        if(self.size() > 0) {\r\n            Char(self!->charCodeAt(self.size() - 1)?)\r\n        }\r\n    }\r\n\r\n    grabFirst(): Char {\r\n        self.first().else {\r\n            throw(GrabException())\r\n        }\r\n    }\r\n\r\n    grabLast(): Char {\r\n        self.last().else {\r\n            throw(GrabException())\r\n        }\r\n    }\r\n\r\n    contains(substring: String): Bool {\r\n        self!->includes(substring)?\r\n    }\r\n\r\n    startsWith(prefix: String, offset: Int = 0): Bool {\r\n        self!->startsWith(prefix, offset)?\r\n    }\r\n\r\n    endsWith(suffix: String): Bool {\r\n        self!->endsWith(suffix)?\r\n    }\r\n\r\n    removeFirst(prefix: String): Option[String] {\r\n        if(self.startsWith(prefix)) {Some(self.dropFirst(prefix.size()))} else {None}\r\n    }\r\n\r\n    removeLast(suffix: String): Option[String] {\r\n        if(self.endsWith(suffix)) {Some(self.dropLast(suffix.size()))} else {None}\r\n    }\r\n    \r\n    padStart(length: Int, padding: String = \" \"): String {\r\n        self!->padStart(length, padding)?\r\n    }\r\n\r\n    padEnd(length: Int, padding: String = \" \"): String {\r\n        self!->padEnd(length, padding)?\r\n    }\r\n    \r\n    each(body: Char => Unit): Unit {\r\n        mutable i = 0\r\n        while {i < self.size()} {\r\n            body(Char(self!->charCodeAt(i)?))\r\n            i += 1\r\n        }\r\n    }\r\n\r\n    eachWhile(body: Char => Bool): Unit {\r\n        mutable i = 0\r\n        while {i < self.size()} {\r\n            if(body(Char(self!->charCodeAt(i)?))) {\r\n                i += 1\r\n            } else {\r\n                i = self.size()\r\n            }\r\n        }\r\n    }    \r\n    \r\n    all(body: Char => Bool): Bool {\r\n        mutable result = True\r\n        self.eachWhile {x =>\r\n            result = body(x)\r\n            result\r\n        }\r\n        result\r\n    }\r\n\r\n    any(body: Char => Bool): Bool {\r\n        mutable result = False\r\n        self.eachWhile {x =>\r\n            result = body(x)\r\n            (!result)\r\n        }\r\n        result\r\n    }\r\n    \r\n    find(body: Char => Bool): Option[Char] {\r\n        mutable result = None\r\n        self.eachWhile {x =>\r\n            if(body(x)) {\r\n                result = Some(x)\r\n                False\r\n            } else {\r\n                True\r\n            }\r\n        }\r\n        result\r\n    }\r\n\r\n    indexOf(needle: String, position: Int = 0): Option[Int] {\r\n        let index = self!->indexOf(needle, position)?\r\n        if(index != -1) {index}\r\n    }\r\n    \r\n    indexWhere(body: Char => Bool): Option[Int] {\r\n        mutable i = -1\r\n        mutable result = False\r\n        self.eachWhile {x =>\r\n            i += 1\r\n            result = body(x)\r\n            (!result)\r\n        }\r\n        if(result) {i}\r\n    }    \r\n    \r\n    filter(body: Char => Bool): String {\r\n        let result = Array.new()\r\n        self.each {x =>\r\n            if(body(x)) {\r\n                result.push(x.toString())\r\n            }\r\n        }\r\n        result.join()\r\n    }    \r\n\r\n    toBuffer(): Buffer {\r\n        let encoded = Js->TextEncoder->()->encode(self)\r\n        Js->DataView->(encoded->buffer, encoded->byteOffset, encoded->byteLength)?\r\n    }\r\n}\r\n"
    ],
    "names": [
        "size",
        "self",
        "length",
        "grab",
        "index",
        "throw",
        "GrabException",
        "charCodeAt",
        "replace",
        "needle",
        "replacement",
        "replaceAll",
        "replaceFirst",
        "reverse",
        "split",
        "join",
        "repeat",
        "count",
        "trim",
        "trimStart",
        "trimEnd",
        "lower",
        "toLowerCase",
        "upper",
        "toUpperCase",
        "dropWhile",
        "p",
        "i",
        "slice",
        "takeWhile",
        "from",
        "until",
        "char",
        "\"String\"",
        "fromCharCode",
        "splitFirst",
        "array",
        "Pair",
        "lines",
        "\"RegExp\"",
        "dropFirst",
        "dropLast",
        "getInt",
        "all",
        "c",
        "\"parseInt\"",
        "getFloat",
        "result",
        "\"parseFloat\"",
        "\"isFinite\"",
        "grabInt",
        "else",
        "grabFloat",
        "first",
        "last",
        "grabFirst",
        "grabLast",
        "contains",
        "substring",
        "includes",
        "startsWith",
        "prefix",
        "offset",
        "endsWith",
        "suffix",
        "removeFirst",
        "Some",
        "None",
        "removeLast",
        "padStart",
        "padding",
        "padEnd",
        "each",
        "body",
        "eachWhile",
        "x",
        "any",
        "find",
        "indexOf",
        "position",
        "indexWhere",
        "filter",
        "new",
        "toString",
        "toBuffer",
        "encoded",
        "\"TextEncoder\"",
        "encode",
        "\"DataView\"",
        "buffer",
        "byteOffset",
        "byteLength",
        "String",
        "anyTag",
        "internalAnyTag"
    ],
    "mappings": ""
}