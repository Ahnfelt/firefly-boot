{
    "version": 3,
    "sources": [
        "../../../../../core/NodeSystem.ff"
    ],
    "sourcesContent": [
        "capability NodeSystem {}\r\n\r\nclass ProcessResult(exitCode: Int, standardOut: Buffer, standardError: Buffer)\r\ndata ProcessException(problem: String)\r\n\r\nextend self: NodeSystem {\r\n\r\n    arguments(): List[String] {\r\n        self!->\"array_\"?\r\n    }\r\n\r\n    assets(): AssetSystem {\r\n        let assetPkgSnapshotPath = self.path(\"/snapshot/output/assets\")\r\n        if(assetPkgSnapshotPath.isDirectory()) {\r\n            // Opendir gives ENOENT: no such file or directory, opendir '/snapshot/output/assets'\r\n            function streams(path: Path): Stream[Pair[String, () => Stream[Buffer]]] {\r\n                internalListDirectoryWithoutOpendir(self, path).toStream().flatMap {file =>\r\n                    if(file.isDirectory()) {\r\n                        streams(file)\r\n                    } else {\r\n                        [Pair(\"/\" + file.relativeTo(assetPkgSnapshotPath), {file.readStream()})].toStream()\r\n                    }\r\n                }\r\n            }\r\n            AssetSystem(streams(assetPkgSnapshotPath).toMap())\r\n        } else {\r\n            self!->\"assets_\"?\r\n        }\r\n    }\r\n\r\n    path(relativePath: String): Path {\r\n        let nodePath = Js.import(\"path\")\r\n        Path(nodePath->resolve(relativePath)?)\r\n    }\r\n\r\n    pathFromUrl(url: String): Path {\r\n        let nodeUrl = Js.import(\"url\")\r\n        Path(nodeUrl->fileURLToPath(Js->URL->(url))?)\r\n    }\r\n\r\n    httpClient(): HttpClient {\r\n        Js.globalThis()?\r\n    }\r\n\r\n    mainTask(): Task {\r\n        self!->\"task_\"?\r\n    }\r\n\r\n    crypto(): Crypto {\r\n        Js.globalThis()->crypto?\r\n    }\r\n\r\n    js(): JsSystem {\r\n        Js.jsSystem()\r\n    }\r\n\r\n    date(timeZoneId: Option[String] = None, calendarId: String = Date.isoCalendarId): Date {\r\n        let date = Date(Js->Temporal->Now->zonedDateTimeISO(timeZoneId.map {_!}.else {Js.undefined()}))\r\n        if(calendarId == Date.isoCalendarId) {date} else {date.withCalendar(calendarId)}\r\n    }\r\n\r\n    exit[T](exitCode: Int = 0): T {\r\n        Js->process->exit(exitCode)?\r\n    }\r\n\r\n    readStream(): Stream[Buffer] {\r\n        Path.internalReadStream {Js->process->stdin}\r\n    }\r\n\r\n    writeBuffer(buffer: Buffer): Unit {\r\n        Js->process->stdout->write(Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength))\r\n    }\r\n\r\n    writeStream(stream: Stream[Buffer]): Unit {\r\n        stream.each {self.writeBuffer(_)}\r\n    }\r\n\r\n    writeText(text: String): Unit {\r\n        self.writeBuffer(text.toBuffer())\r\n    }\r\n\r\n    writeLine(text: String): Unit {\r\n        self.writeText(text + \"\\n\")\r\n    }\r\n\r\n    writeErrorBuffer(buffer: Buffer): Unit {\r\n        Js->process->stderr->write(Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength))\r\n    }\r\n\r\n    writeErrorStream(stream: Stream[Buffer]): Unit {\r\n        stream.each {self.writeErrorBuffer(_)}\r\n    }\r\n\r\n    writeErrorText(text: String): Unit {\r\n        self.writeErrorBuffer(text.toBuffer())\r\n    }\r\n\r\n    writeErrorLine(text: String): Unit {\r\n        self.writeErrorText(text + \"\\n\")\r\n    }\r\n    \r\n    environment(): Map[String, String] {\r\n        mutable result = Map.new()\r\n        Js->process->env.each {key =>\r\n            result = result.add(key?, Js->process->env.get(key)?)\r\n        }\r\n        result\r\n    }\r\n\r\n    execute(\r\n        command: String\r\n        arguments: List[String]\r\n        standardIn: Buffer = Buffer.new(0)\r\n        directory: Option[Path] = None\r\n        environment: Option[Map[String, String]] = None\r\n        maxBuffer: Int = 16777216\r\n        killSignal: Int = 9\r\n        shell: Bool = False\r\n    ): ProcessResult {\r\n        let childProcess = Js.import(\"node:child_process\")\r\n        let env = environment.map {e =>\r\n            let o = Js.object()\r\n            e.each {k, v => o.set(k, v)}\r\n            o\r\n        }.else {Js->process->env}\r\n        Js.withSignal {signal => Js.awaitCancellablePromise {resolve, reject, onSettle =>\r\n            let newProcess = childProcess->spawn(command, arguments, Js->(\r\n                cwd = directory.map {_.absolutePath!}.else {Js.undefined()}\r\n                windowsHide = True\r\n                signal = signal\r\n                killSignal = killSignal\r\n                env = env\r\n                shell = shell\r\n            ))\r\n            mutable size = 0\r\n            let out = Array.new()\r\n            let err = Array.new()\r\n            newProcess->stdout->on(\"data\", Js->{data =>\r\n                if(size <= maxBuffer) {\r\n                    size += data->byteLength?\r\n                    if(size > maxBuffer) {\r\n                        newProcess->kill(killSignal)\r\n                    } else {\r\n                        out.push(data)\r\n                    }\r\n                }\r\n                Unit\r\n            })\r\n            newProcess->stderr->on(\"data\", Js->{data =>\r\n                if(size <= maxBuffer) {\r\n                    size += data->byteLength?\r\n                    if(size > maxBuffer) {\r\n                        newProcess->kill(killSignal)\r\n                    } else {\r\n                        err.push(data)\r\n                    }\r\n                }\r\n                Unit\r\n            })\r\n            if(standardIn!->byteLength !== 0) {\r\n                newProcess->stdin->write(standardIn!)\r\n            }\r\n            newProcess->stdin->end()\r\n            newProcess->on(\"error\", Js->{error =>\r\n                if(size > maxBuffer) {\r\n                    reject(internalProcessError(\"maxBuffer exceeded\"))\r\n                } else {\r\n                    reject(internalProcessError(error->message?))\r\n                }\r\n            })\r\n            newProcess->on(\"close\", Js->{code =>\r\n                let o = Js->Buffer->concat(out.drain()!)\r\n                let e = Js->Buffer->concat(err.drain()!)\r\n                resolve(ProcessResult(\r\n                    code?\r\n                    Js->DataView->(o->buffer, o->byteOffset, o->byteLength)?\r\n                    Js->DataView->(e->buffer, e->byteOffset, e->byteLength)?\r\n                ))\r\n            })\r\n            onSettle {fulfilled =>\r\n                if(!fulfilled) {\r\n                    newProcess->kill(killSignal)\r\n                }\r\n            }\r\n        }}\r\n    }\r\n\r\n}\r\n\r\ninternalListDirectoryWithoutOpendir(system: NodeSystem, path: Path): List[Path] {\r\n    let fsPromises = Js.import(\"fs/promises\")\r\n    let nodePath = Js.import(\"path\")\r\n    let files = Js.await(fsPromises->readdir(path.absolutePath))\r\n    files.grabArray().map {file => Path(nodePath->join(path.absolutePath, file)?)}\r\n}\r\n\r\ninternalProcessError(problem: String): Error {\r\n    try {\r\n        throw(ProcessException(problem))\r\n    } catchAny {error =>\r\n        error\r\n    }\r\n}\r\n"
    ],
    "names": [
        "ProcessResult",
        "exitCode",
        "standardOut",
        "standardError",
        "ProcessException",
        "problem",
        "internalListDirectoryWithoutOpendir",
        "system",
        "path",
        "fsPromises",
        "nodePath",
        "files",
        "readdir",
        "absolutePath",
        "map",
        "grabArray",
        "file",
        "Path",
        "join",
        "internalProcessError",
        "throw",
        "error",
        "arguments",
        "self",
        "assets",
        "assetPkgSnapshotPath",
        "isDirectory",
        "streams",
        "flatMap",
        "toStream",
        "Pair",
        "relativeTo",
        "readStream",
        "AssetSystem",
        "toMap",
        "relativePath",
        "resolve",
        "pathFromUrl",
        "url",
        "nodeUrl",
        "fileURLToPath",
        "\"URL\"",
        "httpClient",
        "mainTask",
        "crypto",
        "js",
        "date",
        "timeZoneId",
        "None",
        "calendarId",
        "isoCalendarId",
        "\"Temporal\"",
        "Now",
        "zonedDateTimeISO",
        "else",
        "w1",
        "withCalendar",
        "exit",
        "\"process\"",
        "internalReadStream",
        "stdin",
        "writeBuffer",
        "buffer",
        "stdout",
        "write",
        "\"Uint8Array\"",
        "byteOffset",
        "byteLength",
        "writeStream",
        "stream",
        "each",
        "writeText",
        "text",
        "toBuffer",
        "writeLine",
        "writeErrorBuffer",
        "stderr",
        "writeErrorStream",
        "writeErrorText",
        "writeErrorLine",
        "environment",
        "result",
        "new",
        "env",
        "key",
        "add",
        "execute",
        "command",
        "standardIn",
        "directory",
        "maxBuffer",
        "killSignal",
        "shell",
        "childProcess",
        "e",
        "o",
        "k",
        "v",
        "withSignal",
        "signal",
        "awaitCancellablePromise",
        "reject",
        "onSettle",
        "newProcess",
        "spawn",
        "cwd",
        "windowsHide",
        "size",
        "out",
        "err",
        "on",
        "data",
        "kill",
        "end",
        "message",
        "code",
        "\"Buffer\"",
        "concat",
        "drain",
        "\"DataView\"",
        "fulfilled",
        "anyTag",
        "internalAnyTag",
        "show",
        "value",
        "z"
    ],
    "mappings": ""
}