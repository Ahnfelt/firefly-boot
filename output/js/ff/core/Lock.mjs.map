{
    "version": 3,
    "sources": [
        "../../../../../core/Lock.ff"
    ],
    "sourcesContent": [
        "capability Lock(\r\n    mutable owner: JsValue\r\n    mutable level: Int\r\n    queue: Queue[Pair[JsValue, Unit => Unit]]\r\n)\r\n\r\ncapability LockCondition(\r\n    lock: Lock\r\n    queue: Queue[Unit => Unit]\r\n)\r\n\r\nextend self: Lock {\r\n\r\n    condition(): LockCondition {\r\n        LockCondition(self, Queue.new())\r\n    }\r\n    \r\n    acquire(): Unit {\r\n        if(self.level == 0 || self.owner === Js.currentTask()!) {\r\n            self.owner = Js.currentTask()!\r\n            self.level += 1\r\n        } else {\r\n            Js.awaitCancellablePromise {resolve, reject, onSettle =>\r\n                let key = self.queue.push(Pair(Js.currentTask()!, resolve))\r\n                onSettle {_ => self.queue.remove(key)}\r\n            }\r\n        }\r\n    }\r\n    \r\n    release(): Unit {\r\n        if(self.owner !== Js.currentTask()!) {\r\n            throw(GrabException)\r\n        } elseIf {self.level > 1} {\r\n            self.level -= 1\r\n        } else {\r\n            self.owner = Js.undefined()\r\n            self.level = 0\r\n            if(!self.queue.isEmpty()) {\r\n                let pending = self.queue.pop().grab()\r\n                self.owner = pending.first\r\n                self.level = 1\r\n                pending.second(Unit)\r\n            }\r\n        }\r\n    }\r\n    \r\n    do[T](body: () => T): T {\r\n        self.acquire()\r\n        try {\r\n            body()\r\n        } finally {\r\n            self.release()\r\n        }\r\n    }\r\n\r\n}\r\n\r\nextend self: LockCondition {\r\n\r\n    sleep(): Unit {\r\n        if(self.lock.owner !== Js.currentTask()!) {\r\n            throw(GrabException)\r\n        }\r\n        Js.throwIfCancelled()\r\n        let level = self.lock.level\r\n        self.lock.level = 1\r\n        self.lock.release()\r\n        try {\r\n            Js.awaitCancellablePromise {resolve, reject, onSettle =>\r\n                let key = self.queue.push(resolve)\r\n                onSettle {_ => self.queue.remove(key)}\r\n            }\r\n        } finally {\r\n            mutable error = Js.undefined()\r\n            mutable acquired = False\r\n            while {!acquired} {\r\n                try {\r\n                    self.lock.acquire()\r\n                    self.lock.level = level\r\n                    acquired = True\r\n                } catchAny {e =>\r\n                    error = e!\r\n                }\r\n            }\r\n            if(!error.isUndefined()) {Js.throw(error)}\r\n        }\r\n    }\r\n\r\n    sleepUntil[T](body: () => Option[T]): T {\r\n        body().{\r\n            | Some(value) =>\r\n                value\r\n            | None =>\r\n                self.sleep()\r\n                tailcall self.sleepUntil(body)\r\n        }\r\n    }\r\n\r\n    wakeOne(): Unit {\r\n        self.queue.pop().each {resolve => resolve(Unit)}\r\n    }\r\n\r\n    wakeAll(): Unit {\r\n        self.queue.each {_, resolve => resolve(Unit)}\r\n        self.queue.clear()\r\n    }\r\n\r\n}\r\n"
    ],
    "names": [
        "Lock",
        "owner",
        "level",
        "queue",
        "LockCondition",
        "lock",
        "condition",
        "self",
        "new",
        "acquire",
        "awaitCancellablePromise",
        "resolve",
        "reject",
        "onSettle",
        "key",
        "push",
        "Pair",
        "remove",
        "release",
        "throw",
        "GrabException",
        "isEmpty",
        "pending",
        "grab",
        "pop",
        "first",
        "second",
        "do",
        "body",
        "sleep",
        "error",
        "acquired",
        "e",
        "isUndefined",
        "sleepUntil",
        "Some",
        "value",
        "wakeOne",
        "wakeAll",
        "each",
        "clear"
    ],
    "mappings": "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"
}