{
    "version": 3,
    "sources": [
        "../../../../../core/Lock.ff"
    ],
    "sourcesContent": [
        "capability Lock(\n    mutable owner: JsValue\n    mutable level: Int\n    queue: Queue[Pair[JsValue, Unit => Unit]]\n)\n\ncapability LockCondition(\n    lock: Lock\n    queue: Queue[Unit => Unit]\n)\n\nextend self: Lock {\n\n    condition(): LockCondition {\n        LockCondition(self, Queue.new())\n    }\n    \n    acquire(): Unit {\n        if(self.level == 0 || self.owner === Js.currentTask()!) {\n            self.owner = Js.currentTask()!\n            self.level += 1\n        } else {\n            Js.awaitCancellablePromise {resolve, reject, onSettle =>\n                let key = self.queue.push(Pair(Js.currentTask()!, resolve))\n                onSettle {_ => self.queue.remove(key)}\n            }\n        }\n    }\n    \n    release(): Unit {\n        if(self.owner !== Js.currentTask()!) {\n            throw(GrabException)\n        } elseIf {self.level > 1} {\n            self.level -= 1\n        } else {\n            self.owner = Js.undefined()\n            self.level = 0\n            if(!self.queue.isEmpty()) {\n                let pending = self.queue.pop().grab()\n                self.owner = pending.first\n                self.level = 1\n                pending.second(Unit)\n            }\n        }\n    }\n    \n    do[T](body: () => T): T {\n        self.acquire()\n        try {\n            body()\n        } finally {\n            self.release()\n        }\n    }\n\n}\n\nextend self: LockCondition {\n\n    sleep(): Unit {\n        if(self.lock.owner !== Js.currentTask()!) {\n            throw(GrabException)\n        }\n        Js.throwIfCancelled()\n        let level = self.lock.level\n        self.lock.level = 1\n        self.lock.release()\n        try {\n            Js.awaitCancellablePromise {resolve, reject, onSettle =>\n                let key = self.queue.push(resolve)\n                onSettle {_ => self.queue.remove(key)}\n            }\n        } finally {\n            mutable error = Js.undefined()\n            mutable acquired = False\n            while {!acquired} {\n                try {\n                    self.lock.acquire()\n                    self.lock.level = level\n                    acquired = True\n                } catchAny {e =>\n                    error = e!\n                }\n            }\n            if(!error.isUndefined()) {Js.throw(error)}\n        }\n    }\n\n    sleepUntil[T](body: () => Option[T]): T {\n        body().{\n            | Some(value) =>\n                value\n            | None =>\n                self.sleep()\n                tailcall self.sleepUntil(body)\n        }\n    }\n\n    wakeOne(): Unit {\n        self.queue.pop().each {resolve => resolve(Unit)}\n    }\n\n    wakeAll(): Unit {\n        self.queue.each {_, resolve => resolve(Unit)}\n        self.queue.clear()\n    }\n\n}\n"
    ],
    "names": [
        "Lock",
        "owner",
        "level",
        "queue",
        "LockCondition",
        "lock",
        "condition",
        "self",
        "new",
        "acquire",
        "awaitCancellablePromise",
        "resolve",
        "reject",
        "onSettle",
        "key",
        "push",
        "Pair",
        "remove",
        "release",
        "throw",
        "GrabException",
        "isEmpty",
        "pending",
        "grab",
        "pop",
        "first",
        "second",
        "do",
        "body",
        "sleep",
        "error",
        "acquired",
        "e",
        "isUndefined",
        "sleepUntil",
        "Some",
        "value",
        "wakeOne",
        "wakeAll",
        "each",
        "clear"
    ],
    "mappings": "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"
}