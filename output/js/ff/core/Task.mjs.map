{
    "version": 3,
    "sources": [
        "../../../../../core/Task.ff"
    ],
    "sourcesContent": [
        "capability Task(\n    mutable controller: JsValue\n    subtasks: JsValue\n    mutable promise: JsValue\n    started: Duration\n)\n\nextend self: Task {\n\n    // Spawns a task running body. The return value as well as the argument to body is the task handle.\n    // Automatically aborts and then joins subtasks when body returns or throws an unhandled exception.\n    // If body throws, the parent task is also aborted with the dueToSubtask flag set to true.\n    spawn(body: Task => Unit): Task {\n        self.throwIfAborted()\n        let task = Task(\n            controller = Js->AbortController->()\n            subtasks = Js->Set->()\n            promise = Js.undefined()\n            started = Duration(Js->performance->now()? * 0.001)\n        )\n        self.subtasks->add(task!)\n        task.promise = Js->Promise->resolve(task!)->then(Js.async0 {\n            try {\n                Js.await(body!.callValue2(task!, task!))\n            } tryCatchAny {e => \n                Js.await(self.controller->abort())\n                e.rethrow()\n            } finally {\n                task.subtasks.each {subtask => \n                    Js.fromValue[Task](subtask).controller->abort()\n                }\n                Js.await(Js->Promise->allSettled(\n                    task.subtasks.spreadToArray().map {subtask => \n                        Js.fromValue[Task](subtask).promise\n                    }                    \n                ))\n                self.subtasks->delete(task!)\n            }\n        })\n        task\n    }\n\n    // If the aborted flag is set for the current task, clears it and throws TaskAbortedException.\n    // You don't normally need to call this, but you might want to before doing an expensive computation.\n    throwIfAborted(): Unit {\n        let signal = self.controller->signal\n        if(signal->aborted?) {\n            self.controller = Js->AbortController->()\n            signal->throwIfAborted()\n        }\n    }\n\n    // Sets the tasks aborted flag, which causes the ongoing/next async call to throw TaskAbortedException.\n    abort(): Unit {\n        self.controller->abort()\n    }\n    \n    // Create a blocking channel with the specified capacity. The channel is not tied to the task.\n    channel[T](capacity: Int = 0): Channel[T] {\n        Channel(\n            capacity = capacity\n            buffer = Array.new()\n            readers = Js->Set->()\n            writers = Js->Set->()\n        )\n    }\n\n    // Create a mutex. The mutex is not tied to the task.\n    lock(): Lock {\n        Lock(\n            owner = Js.undefined()\n            level = 0\n            queue = Queue.new()\n        )\n    }\n    \n    elapsed(): Duration {\n        let now = Js->performance->now()? * 0.001\n        Duration(now - self.started.seconds)\n    }\n\n    time[R](body: () => R): Pair[R, Duration] {\n        let start = self.elapsed()\n        let result = body()\n        let stop = self.elapsed()\n        let duration = Duration(stop.seconds - start.seconds)\n        Pair(result, duration)\n    }\n\n}\n\n// Convenience methods\nextend self: Task {\n\n    sleep(duration: Duration): Unit {\n        Channel.\n            readOr(self.channel()) {_ => }.\n            timeout(duration) {}\n    }\n    \n    mapList[T, R](list: List[T], body: T => R): List[R] {\n        self.all(list.map {x => {body(x)}})\n    }\n    \n    raceList[T, R](list: List[T], body: T => R): R {\n        self.race(list.map {x => {body(x)}})\n    }\n\n    all[T](tasks: List[() => T]): List[T] {\n        let successChannel = self.channel()\n        let failureChannel = self.channel()\n        self.spawn {t =>\n            let channel = t.channel()\n            try {\n                tasks.pairs().each {| Pair(i, task) =>\n                    t.spawn {_ =>\n                        channel.write(Pair(i, task()))\n                    }\n                }\n                let result = tasks.map {_ =>\n                    channel.read()\n                }.sortBy {_.first}.map {_.second}\n                successChannel.write(result)\n            } catchAny {error =>\n                failureChannel.write(error)\n                t.abort()\n            }\n        }\n        Channel.\n            readOr(successChannel, {_}).\n            readOr(failureChannel, {_.rethrow()}).\n            wait()\n    }\n\n    race[T](tasks: List[() => T]): T {\n        let successChannel = self.channel()\n        let failureChannel = self.channel()\n        mutable live = tasks.size()\n        let started = tasks.map {task =>\n            self.spawn {_ =>\n                try {\n                    successChannel.write(task())\n                } catchAny {e =>\n                    live -= 1 // Not thread safe (but OK in JS)\n                    if(live == 0) {\n                        failureChannel.write(e)\n                    }\n                }\n            }\n        }\n        try {\n            Channel.\n                readOr(successChannel, {_}).\n                readOr(failureChannel, {_.rethrow()}).\n                wait()\n        } finally {\n            started.each {_.abort()}\n        }\n    }\n            \n}\n"
    ],
    "names": [
        "Task",
        "controller",
        "subtasks",
        "promise",
        "started",
        "spawn",
        "self",
        "body",
        "throwIfAborted",
        "task",
        "\"AbortController\"",
        "\"Set\"",
        "\"performance\"",
        "now",
        "add",
        "\"Promise\"",
        "resolve",
        "then",
        "finally",
        "tryCatchAny",
        "try",
        "e",
        "abort",
        "rethrow",
        "each",
        "subtask",
        "allSettled",
        "map",
        "delete",
        "signal",
        "aborted",
        "channel",
        "capacity",
        "Channel",
        "new",
        "lock",
        "Lock",
        "elapsed",
        "time",
        "start",
        "result",
        "stop",
        "duration",
        "Pair",
        "sleep",
        "timeout",
        "readOr",
        "mapList",
        "list",
        "all",
        "x",
        "raceList",
        "race",
        "tasks",
        "successChannel",
        "failureChannel",
        "t",
        "write",
        "i",
        "sortBy",
        "read",
        "w1",
        "first",
        "second",
        "error",
        "wait",
        "live"
    ],
    "mappings": ""
}