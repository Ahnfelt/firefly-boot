{
    "version": 3,
    "sources": [
        "../../../../../core/Task.ff"
    ],
    "sourcesContent": [
        "capability Task(\n    mutable controller: JsValue\n    subtasks: JsValue\n    mutable promise: JsValue\n    started: Duration\n)\n\nextend self: Task {\n\n    // Spawns a task running body. The return value as well as the argument to body is the task handle.\n    // Automatically aborts and then joins subtasks when body returns or throws an unhandled exception.\n    // If body throws, the parent task is also aborted with the dueToSubtask flag set to true.\n    spawn(body: Task => Unit): Task {\n        self.throwIfAborted()\n        let task = Task(\n            controller = Js->AbortController->()\n            subtasks = Js->Set->()\n            promise = Js.undefined()\n            started = Duration(Js->performance->now()? * 0.001)\n        )\n        self.subtasks->add(task!)\n        task.promise = Js->Promise->resolve(task!)->then(Js.async0 {\n            try {\n                Js.await(body!.callValue2(task!, task!))\n            } tryCatchAny {e => \n                Js.await(self.controller->abort())\n                e.rethrow()\n            } finally {\n                task.subtasks.each {subtask => \n                    Js.fromValue[Task](subtask).controller->abort()\n                }\n                Js.await(Js->Promise->allSettled(\n                    task.subtasks.spreadToArray().map {subtask => \n                        Js.fromValue[Task](subtask).promise\n                    }                    \n                ))\n                self.subtasks->delete(task!)\n            }\n        })\n        task\n    }\n\n    // If the aborted flag is set for the current task, clears it and throws TaskAbortedException.\n    // You don't normally need to call this, but you might want to before doing an expensive computation.\n    throwIfAborted(): Unit {\n        let signal = self.controller->signal\n        if(signal->aborted?) {\n            self.controller = Js->AbortController->()\n            signal->throwIfAborted()\n        }\n    }\n\n    // Sets the tasks aborted flag, which causes the ongoing/next async call to throw TaskAbortedException.\n    abort(): Unit {\n        self.controller->abort()\n    }\n    \n    // Create a blocking channel with the specified capacity. The channel is not tied to the task.\n    channel[T](capacity: Int = 0): Channel[T] {\n        Channel(\n            capacity = capacity\n            buffer = Array.new()\n            readers = Js->Set->()\n            writers = Js->Set->()\n        )\n    }\n\n    // Create a mutex. The mutex is not tied to the task.\n    lock(): Lock {\n        Lock(\n            owner = Js.undefined()\n            level = 0\n            queue = Queue.new()\n        )\n    }\n    \n    elapsed(): Duration {\n        let now = Js->performance->now()? * 0.001\n        Duration(now - self.started.seconds)\n    }\n\n    time[R](body: () => R): Pair[R, Duration] {\n        let start = self.elapsed()\n        let result = body()\n        let stop = self.elapsed()\n        let duration = Duration(stop.seconds - start.seconds)\n        Pair(result, duration)\n    }\n\n}\n\n// Convenience methods\nextend self: Task {\n\n    sleep(duration: Duration): Unit {\n        Channel.\n            readOr(self.channel()) {_ => }.\n            timeout(duration) {}\n    }\n    \n    mapList[T, R](list: List[T], body: T => R): List[R] {\n        self.all(list.map {x => {body(x)}})\n    }\n    \n    raceList[T, R](list: List[T], body: T => R): R {\n        self.race(list.map {x => {body(x)}})\n    }\n\n    all[T](tasks: List[() => T]): List[T] {\n        let successChannel = self.channel()\n        let failureChannel = self.channel()\n        self.spawn {t =>\n            let channel = t.channel()\n            try {\n                tasks.pairs().each {| Pair(i, task) =>\n                    t.spawn {_ =>\n                        channel.write(Pair(i, task()))\n                    }\n                }\n                let result = tasks.map {_ =>\n                    channel.read()\n                }.sortBy {_.first}.map {_.second}\n                successChannel.write(result)\n            } catchAny {error =>\n                failureChannel.write(error)\n                t.abort()\n            }\n        }\n        Channel.\n            readOr(successChannel, {_}).\n            readOr(failureChannel, {_.rethrow()}).\n            wait()\n    }\n\n    race[T](tasks: List[() => T]): T {\n        let successChannel = self.channel()\n        let failureChannel = self.channel()\n        mutable live = tasks.size()\n        let started = tasks.map {task =>\n            self.spawn {_ =>\n                try {\n                    successChannel.write(task())\n                } catchAny {e =>\n                    live -= 1 // Not thread safe (but OK in JS)\n                    if(live == 0) {\n                        failureChannel.write(e)\n                    }\n                }\n            }\n        }\n        try {\n            Channel.\n                readOr(successChannel, {_}).\n                readOr(failureChannel, {_.rethrow()}).\n                wait()\n        } finally {\n            started.each {_.abort()}\n        }\n    }\n            \n}\n"
    ],
    "names": [
        "Task",
        "controller",
        "subtasks",
        "promise",
        "started",
        "spawn",
        "self",
        "body",
        "throwIfAborted",
        "task",
        "\"AbortController\"",
        "\"Set\"",
        "\"performance\"",
        "now",
        "add",
        "\"Promise\"",
        "resolve",
        "then",
        "finally",
        "tryCatchAny",
        "try",
        "e",
        "abort",
        "rethrow",
        "each",
        "subtask",
        "allSettled",
        "map",
        "delete",
        "signal",
        "aborted",
        "channel",
        "capacity",
        "Channel",
        "new",
        "lock",
        "Lock",
        "elapsed",
        "time",
        "start",
        "result",
        "stop",
        "duration",
        "Pair",
        "sleep",
        "timeout",
        "readOr",
        "mapList",
        "list",
        "all",
        "x",
        "raceList",
        "race",
        "tasks",
        "successChannel",
        "failureChannel",
        "t",
        "write",
        "i",
        "sortBy",
        "read",
        "w1",
        "first",
        "second",
        "error",
        "wait",
        "live"
    ],
    "mappings": "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"
}