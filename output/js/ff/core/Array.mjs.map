{
    "version": 3,
    "sources": [
        "../../../../../core/Array.ff"
    ],
    "sourcesContent": [
        "class Array[T] {}\n\nnew[T](): Array[T] {\n    Js->(array = [])?\n}\n \nfill[T](size: Int, value: T): List[T] {\n    Js->(array = List.fill(size, value)!)?\n}\n\nfillBy[T](size: Int, body: Int => T): List[T] {\n    Js->(array = List.fillBy(size, body)!)?\n}\n\nrange(size: Int): List[Int] {\n    Js->(array = List.range(size)!)?\n}\n\nextend self[T]: Array[T] {\n\n    isEmpty(): Bool {\n        self.size() == 0\n    }\n\n    size(): Int {\n        self!->array->length?\n    }\n\n    get(index: Int): Option[T] {\n        if(index >= 0 && index < self.size()) {\n            Some(self!->array.get(index)?)\n        } else {\n            None\n        }\n    }\n\n    grab(index: Int): T {\n        if(index < 0 || index >= self.size()) {\n            throw(GrabException())\n        }\n        self!->array.get(index)?\n    }\n\n    first(): Option[T] {self.get(0)}\n\n    last(): Option[T] {self.get(self.size() - 1)}\n\n    grabFirst(): T {self.grab(0)}\n\n    grabLast(): T {self.grab(self.size() - 1)}\n\n    push(value: T): Unit {\n        self!->array->push(value!)?\n    }\n\n    pushArray(value: Array[T]): Unit {\n        self.pushList(value!->array?)\n    }\n\n    pushList(list: List[T]): Unit {\n        let originalLength = self.size()\n        self!->array->length += list.size()\n        0.until(list.size()).each {i =>\n            self!->array.set(originalLength + i, list!.get(i))\n        }\n    }        \n\n    pop(): Option[T] {\n        if(self.size() > 0) {\n            self!->array->pop()?\n        }\n    }\n\n    set(index: Int, value: T): Unit {\n        if(index < 0 || index >= self.size()) {\n            throw(GrabException())\n        }\n        self!->array.set(index, value!)\n    }\n\n    modify(index: Int, body: T => T): Unit {\n        if(index < 0 || index >= self.size()) {\n            throw(GrabException())\n        }\n        self!->array.set(index, body(self!->array.get(index)?)!)\n    }\n\n    fill(value: T, start: Int = 0, end: Int = 9007199254740991): Unit {\n        self!->array->fill(value!, start, end)\n    }\n\n    copy(target: Int, start: Int, end: Int): Unit {\n        self!->array->copyWithin(target, start, end)\n    }\n\n    delete(start: Int, deleteCount: Int): Unit {\n        self!->array->splice(start, deleteCount)\n    }\n\n    insert(start: Int, value: T, deleteCount: Int = 0): Unit {\n        self!->array->splice(start, deleteCount, value!)\n    }\n\n    insertArray(start: Int, array: Array[T], deleteCount: Int = 0): Unit {\n        self.insertList(start, array!->array?, deleteCount)\n    }\n\n    insertList(start: Int, list: List[T], deleteCount: Int = 0): Unit {\n        if(start < 0 || start > self.size()) {\n            throw(GrabException())\n        }\n\n        let deleteEnd = start + deleteCount\n\n        if(deleteEnd < 0 || deleteEnd > self.size()) {\n            throw(GrabException())\n        }\n\n        let insertCount = list.size()\n        let delta = insertCount - deleteCount\n        \n        if(delta > 0) {\n            self!->array->length += delta\n            self!->array->copyWithin(start + insertCount, deleteEnd)\n        } elseIf {delta < 0} {\n            self!->array->copyWithin(start + insertCount, deleteEnd)\n            self!->array->length += delta\n        }\n\n        0.until(insertCount).each {i => \n            self!->array.set(start + i, list!.get(i))\n        }        \n    }\n\n    mapInPlace[S](body: T => S): Unit {\n        mutable i = 0\n        while {i < self.size()} {\n            self!->array.set(i, body(self!->array.get(i)?)!)\n            i += 1\n        }\n    }\n    \n    each(body: T => Unit): Unit {\n        mutable i = 0\n        while {i < self.size()} {\n            body(self!->array.get(i)?)\n            i += 1\n        }\n    }\n    \n    eachWithIndex(body: (Int, T) => Unit): Unit {\n        mutable i = 0\n        while {i < self.size()} {\n            body(i, self!->array.get(i)?)\n            i += 1\n        }\n    }\n\n    eachWhile(body: T => Bool): Unit {\n        mutable i = 0\n        while {i < self.size()} {\n            if(body(self!->array.get(i)?)) {\n                i += 1\n            } else {\n                i = self.size()\n            }\n        }\n    }\n\n    all(body: T => Bool): Bool {\n        mutable result = True\n        self.eachWhile {x =>\n            result = body(x)\n            result\n        }\n        result\n    }\n\n    any(body: T => Bool): Bool {\n        mutable result = False\n        self.eachWhile {x =>\n            result = body(x)\n            (!result)\n        }\n        result\n    }\n    \n    find(body: T => Bool): Option[T] {\n        mutable result = None\n        self.eachWhile {x =>\n            if(body(x)) {\n                result = Some(x)\n                False\n            } else {\n                True\n            }\n        }\n        result\n    }\n\n    indexWhere(body: T => Bool): Option[Int] {\n        mutable i = -1\n        mutable result = False\n        self.eachWhile {x =>\n            i += 1\n            result = body(x)\n            (!result)\n        }\n        if(result) {i}\n    }\n\n    drain(): List[T] {\n        let result = self!->array\n        self!->array = []\n        result?\n    }\n\n    toList(start: Int = 0, end: Int = 9007199254740991): List[T] {\n        self!->array->slice(start, end)?\n    }\n\n    toStream(start: Int = 0, end: Int = 9007199254740991): Stream[T] {\n        self.toList(start, end).toStream()\n    }\n\n    reverse(): Unit {\n        self!->array->reverse()?\n    }\n\n    sortBy[S: Order](body: T => S): Unit {\n        self.sortWith {Ordering.compare(body(_), body(_))}\n    }\n\n    sortWith(ordering: (T, T) => Ordering): Unit {\n        if(Js.inAsync()) {\n            sortRange(self, ordering, 0, self.size())\n        } else {\n            self!->array->sort(Js->{x, y => ordering(x?, y?).toInt()})\n        }\n    }\n\n}\n\nextend self[T: Order]: Array[T] {\n\n    sort(): Unit {\n        self.sortWith(Ordering.compare)\n    }\n\n}\n\nextend self: Array[String] {\n\n    join(separator: String = \"\"): String {\n        self!->array->join(separator)?\n    }\n\n}\n\ninstance Array[T: Show]: Show {\n    show(value: Array[T]): String {\n        let array = Array.new()\n        array.push(\"[\")\n        value.each {x =>\n            if(array.size() > 1) {array.push(\", \")}\n            array.push(Show.show(x))\n        }\n        array.push(\"].toArray()\")\n        array.join()\n    }\n}\n\nsortRange[T](array: Array[T], compare: (T, T) => Ordering, start: Int, end: Int): Unit {\n    if(end - start < 2) {} else:\n\n    mutable middle = start + (end - start).div(2)\n    sortRange(array, compare, start, middle)\n    sortRange(array, compare, middle, end)\n\n    mutable i = start\n    mutable j = middle\n    while {i < middle && j < end} {\n        if(compare(array.grab(i), array.grab(j)) != OrderingAfter) {\n            i += 1\n        } else {\n            let value = array.grab(j)\n            mutable k = j\n            while {k > i} {\n                array.set(k, array.grab(k - 1))\n                k -= 1\n            }\n            array.set(i, value)\n            i += 1\n            middle += 1\n            j += 1\n        }\n    }\n}\n"
    ],
    "names": [
        "new",
        "array",
        "fill",
        "size",
        "value",
        "fillBy",
        "body",
        "range",
        "sortRange",
        "compare",
        "start",
        "end",
        "middle",
        "div",
        "i",
        "j",
        "OrderingAfter",
        "k",
        "set",
        "grab",
        "isEmpty",
        "self",
        "length",
        "get",
        "index",
        "Some",
        "None",
        "throw",
        "GrabException",
        "first",
        "last",
        "grabFirst",
        "grabLast",
        "push",
        "pushArray",
        "pushList",
        "list",
        "originalLength",
        "pop",
        "modify",
        "copy",
        "target",
        "copyWithin",
        "delete",
        "deleteCount",
        "splice",
        "insert",
        "insertArray",
        "insertList",
        "deleteEnd",
        "insertCount",
        "delta",
        "mapInPlace",
        "each",
        "eachWithIndex",
        "eachWhile",
        "all",
        "result",
        "x",
        "any",
        "find",
        "indexWhere",
        "drain",
        "toList",
        "slice",
        "toStream",
        "reverse",
        "sortBy",
        "sortWith",
        "w1",
        "w2",
        "ordering",
        "sort",
        "y",
        "toInt",
        "join",
        "separator",
        "Array",
        "show"
    ],
    "mappings": ""
}