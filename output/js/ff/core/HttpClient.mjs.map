{
    "version": 3,
    "sources": [
        "../../../../../core/HttpClient.ff"
    ],
    "sourcesContent": [
        "capability HttpClient {}\ncapability FetchBody {}\ncapability FetchResponse {}\ndata FetchRedirect {\n    RedirectFollow\n    RedirectError\n    RedirectManual\n}\ndata FetchOptions(\n    redirect: FetchRedirect = RedirectFollow\n    referrer: Option[String] = None\n    integrity: Option[String] = None\n    mode: Option[String] = None\n    credentials: Option[String] = None\n    cache: Option[String] = None\n)\n\nextend self: HttpClient {\n    \n    get[T](\n        url: String\n        headers: List[Pair[String, String]]\n        body: FetchResponse => T\n    ): T {\n        self.fetch(\"GET\", url, headers, None, FetchOptions(), body)\n    }\n    \n    post[T](\n        url: String\n        headers: List[Pair[String, String]]\n        payload: Buffer\n        body: FetchResponse => T\n    ): T {\n        self.fetch(\"POST\", url, headers, Some(payload), FetchOptions(), body)\n    }\n    \n    put[T](\n        url: String\n        headers: List[Pair[String, String]]\n        payload: Buffer\n        body: FetchResponse => T\n    ): T {\n        self.fetch(\"PUT\", url, headers, Some(payload), FetchOptions(), body)\n    }\n    \n    delete[T](\n        url: String\n        headers: List[Pair[String, String]]\n        body: FetchResponse => T\n    ): T {\n        self.fetch(\"DELETE\", url, headers, None, FetchOptions(), body)\n    }\n\n    fetch[T](\n        method: String\n        url: String\n        headers: List[Pair[String, String]] = []\n        payload: Option[Buffer] = None\n        options: FetchOptions = FetchOptions()\n        body: FetchResponse => T\n    ): T {\n        let fetchResponse = Js->(response = Js.null(), statusChecked = False)\n        Js.withSignal {signal =>\n            try {\n                let fetchOptions = Js->(headers = Js->(), signal = signal, method = method)\n                headers.each {| Pair(k, v) =>\n                    fetchOptions->headers.set(k, v)\n                }\n                payload.each {v => fetchOptions->body = v}\n                options.redirect.{\n                    | RedirectError => fetchOptions->redirect = \"error\"\n                    | RedirectFollow => \n                    | RedirectManual => fetchOptions->redirect = \"manual\"\n                }\n                options.referrer.each {v => fetchOptions->referrer = v}\n                options.integrity.each {v => fetchOptions->integrity = v}\n                options.mode.each {v => fetchOptions->mode = v}\n                options.credentials.each {v => fetchOptions->credentials = v}\n                options.cache.each {v => fetchOptions->cache = v}\n                fetchResponse->response = Js.await(self!->fetch(url, fetchOptions))\n                let result = Js.await(body(fetchResponse?)!)\n                internalCheck(fetchResponse?)\n                result?\n            } finally {\n                fetchResponse->response = Js.null()\n            }\n        }\n    }\n\n}\n\nextend self: FetchResponse {\n\n    ok(): Bool {\n        self!->statusChecked = True\n        internalCheck(self)\n        self!->response->ok?\n    }\n\n    status(): Int {\n        self!->statusChecked = True\n        internalCheck(self)\n        self!->response->status?\n    }\n\n    statusText(): String {\n        self!->statusChecked = True\n        internalCheck(self)\n        self!->response->statusText?\n    }\n\n    header(name: String): Option[String] {\n        internalCheck(self)\n        let header = self!->response->headers->get(name)\n        if(!header.isNullOrUndefined()) {header?}\n    }\n\n    readText(): String {\n        internalCheck(self)\n        Js.await(self!->response->text())?\n    }\n\n    readJson(): Json {\n        internalCheck(self)\n        Js.await(self!->response->json())?\n    }\n\n    readBuffer(): Buffer {\n        internalCheck(self)\n        Js->DataView->(Js.await(self!->response->arrayBuffer()))?\n    }\n\n}\n\ninternalCheck(fetchResponse: FetchResponse) {\n    if(fetchResponse!->response.isNull()) {\n        Js.throw(Js->Error->(\"Response closed\"))\n    }\n    if(!fetchResponse!->statusChecked? && !fetchResponse!->response->ok?) {\n        Js.throw(Js->Error->(\"Unchecked HTTP status code: \" + fetchResponse!->response->status?))\n    }\n}\n"
    ],
    "names": [
        "RedirectFollow",
        "RedirectError",
        "RedirectManual",
        "FetchOptions",
        "redirect",
        "referrer",
        "integrity",
        "mode",
        "credentials",
        "cache",
        "internalCheck",
        "fetchResponse",
        "isNull",
        "response",
        "\"Error\"",
        "statusChecked",
        "ok",
        "status",
        "get",
        "self",
        "url",
        "headers",
        "body",
        "fetch",
        "None",
        "post",
        "payload",
        "Some",
        "put",
        "delete",
        "method",
        "options",
        "withSignal",
        "signal",
        "fetchOptions",
        "each",
        "k",
        "v",
        "result",
        "statusText",
        "header",
        "name",
        "isNullOrUndefined",
        "readText",
        "text",
        "readJson",
        "json",
        "readBuffer",
        "\"DataView\"",
        "arrayBuffer"
    ],
    "mappings": ""
}