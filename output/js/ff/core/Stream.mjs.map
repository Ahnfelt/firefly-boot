{
    "version": 3,
    "sources": [
        "../../../../../core/Stream.ff"
    ],
    "sourcesContent": [
        "capability Stream[T](\r\n    next: () => Option[T]\r\n    close: () => Unit\r\n)\r\n\r\nnew[T](next: () => Option[T], close: () => Unit = {}): Stream[T] {\r\n    Stream(next, close)\r\n}\r\n\r\ndo[T](body: () => Stream[T]): Stream[T] {\r\n    mutable initialized = False\r\n    mutable stream = Stream {None} {}\r\n    Stream({\r\n        if(initialized) {\r\n            stream.next()\r\n        } else {\r\n            initialized = True\r\n            stream = body()\r\n            stream.next()\r\n        }\r\n    }, {\r\n        initialized = True\r\n        stream.close()\r\n    })\r\n}\r\n\r\nextend self[T]: Stream[T] {\r\n\r\n    addAll(that: Stream[T]): Stream[T] {\r\n        mutable firstDone = False\r\n        Stream {\r\n            if(firstDone) {\r\n                that.next()\r\n            } else {\r\n                self.next().orElse {\r\n                    firstDone = True\r\n                    that.next()\r\n                }\r\n            }\r\n        } {\r\n            try {\r\n                self.close()\r\n            } finally {\r\n                that.close()\r\n            }\r\n        }\r\n    }\r\n\r\n    map[S](body: T => S): Stream[S] {\r\n        Stream {\r\n            self.next().map(body)\r\n        } {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    flatMap[S](body: T => Stream[S]): Stream[S] {\r\n        mutable inner = Stream {None} {}\r\n        Stream {\r\n            mutable result = None\r\n            while {result.isEmpty()} {\r\n                inner.next().{\r\n                    | Some(_)@i => result = Some(i)\r\n                    | None =>\r\n                        self.next().{\r\n                            | None => result = Some(None)\r\n                            | Some(o) => \r\n                                inner.close()\r\n                                inner = body(o)\r\n                        }\r\n                }\r\n            }\r\n            result.grab()\r\n        } {\r\n            try {\r\n                inner.close()\r\n            } finally {\r\n                self.close()\r\n            }\r\n        }\r\n    }\r\n\r\n    collect[S](body: T => Option[S]): Stream[S] {\r\n        self.flatMap {body(_).toStream()}\r\n    }\r\n\r\n    filter(body: T => Bool): Stream[T] {\r\n        Stream {\r\n            mutable result = None\r\n            while {result.isEmpty()} {\r\n                self.next().{\r\n                    | Some(x) {body(x)} => result = Some(Some(x))\r\n                    | Some(_) =>\r\n                    | None => result = Some(None)\r\n                }\r\n            }\r\n            result.grab()\r\n        } {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    zip[S](that: Stream[S]): Stream[Pair[T, S]] {\r\n        Stream {\r\n            Pair(self.next(), that.next()).{\r\n                | Pair(Some(x), Some(y)) => Some(Pair(x, y))\r\n                | _ => None\r\n            }\r\n        } {\r\n            try {\r\n                self.close()\r\n            } finally {\r\n                that.close()\r\n            }\r\n        }\r\n    }\r\n\r\n    takeFirst(count: Int = 1): Stream[T] {\r\n        mutable remaining = count\r\n        Stream {\r\n            self.next().filter {_ =>\r\n                remaining -= 1\r\n                remaining >= 0\r\n            }\r\n        } {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    dropFirst(count: Int = 1): Stream[T] {\r\n        mutable remaining = count\r\n        Stream {\r\n            while {remaining >= 1} {\r\n                self.next().{\r\n                    | None => remaining = 0\r\n                    | Some(_) => remaining -= 1\r\n                }\r\n            }\r\n            self.next()\r\n        } {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    takeWhile(body: T => Bool): Stream[T] {\r\n        mutable done = False\r\n        Stream {\r\n            if(done) {None} else:\r\n            self.next().{\r\n                | None =>\r\n                    done = True\r\n                    None\r\n                | Some(x)@o =>\r\n                    done = !body(x)\r\n                    if(done) {None} else {o}\r\n            }\r\n        } {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    dropWhile(body: T => Bool): Stream[T] {\r\n        mutable done = False\r\n        Stream {\r\n            if(!done) {\r\n                mutable result = None\r\n                while {!done} {\r\n                    self.next().{\r\n                        | None => done = True\r\n                        | Some(x) {body(x)} =>\r\n                        | Some(x)@o =>\r\n                            result = o\r\n                            done = True\r\n                    }\r\n                }\r\n                result\r\n            } else {\r\n                self.next()\r\n            }\r\n        } {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    pairs(): Stream[Pair[Int, T]] {\r\n        mutable i = 0\r\n        self.map {x =>\r\n            let r = Pair(i, x)\r\n            i += 1\r\n            r\r\n        }\r\n    }\r\n\r\n    chunked(size: Int): Stream[List[T]] {\r\n        mutable remaining = size\r\n        Stream {\r\n            if(remaining <= 0) {None} else:\r\n            self.next().{\r\n                | None =>\r\n                    remaining = -1\r\n                    None\r\n                | Some(x) =>\r\n                    mutable list = [x]\r\n                    remaining -= 1\r\n                    while {remaining > 0} {\r\n                        remaining -= 1\r\n                        self.next().{\r\n                            | None => remaining = -1\r\n                            | Some(x) => list = [x, ...list]\r\n                        }\r\n                    }\r\n                    if(remaining != -1) {remaining = size}\r\n                    Some(list.reverse())\r\n            }\r\n        } {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    // Consuming methods\r\n\r\n    use[R](body: Stream[T] => R): R {\r\n        try {\r\n            body(self)\r\n        } finally {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    each(body: T => Unit): Unit {\r\n        try {\r\n            mutable done = False\r\n            while {!done} {\r\n                self.next().{\r\n                    | None => done = True\r\n                    | Some(x) => body(x)\r\n                }\r\n            }\r\n        } finally {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    eachWhile(body: T => Bool): Unit {\r\n        try {\r\n            mutable done = False\r\n            while {!done} {\r\n                self.next().{\r\n                    | None => done = True\r\n                    | Some(x) => done = !body(x)\r\n                }\r\n            }\r\n        } finally {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    all(body: T => Bool): Bool {\r\n        mutable result = True\r\n        self.eachWhile {x =>\r\n            result = result && body(x)\r\n            result\r\n        }\r\n        result\r\n    }\r\n\r\n    any(body: T => Bool): Bool {\r\n        mutable result = False\r\n        self.eachWhile {x =>\r\n            result = result || body(x)\r\n            (!result)\r\n        }\r\n        result\r\n    }\r\n\r\n    first(): Option[T] {\r\n        try {\r\n            self.next()\r\n        } finally {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    last(): Option[T] {\r\n        try {\r\n            mutable done = False\r\n            mutable result = None\r\n            while {!done} {\r\n                self.next().{\r\n                    | None => done = True\r\n                    | Some(x)@o => result = o\r\n                }\r\n            }\r\n            result\r\n        } finally {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    grabFirst(): T {\r\n        self.first().else {panic(\"grabFirst() on empty iterator\")}\r\n    }\r\n\r\n    grabLast(): T {\r\n        self.last().else {panic(\"grabLast() on empty iterator\")}\r\n    }\r\n\r\n    collectFirst[R](body: T => Option[R]): Option[R] {\r\n        try {\r\n            mutable done = False\r\n            mutable result = None\r\n            while {!done} {\r\n                self.next().{\r\n                    | None => done = True\r\n                    | Some(x) =>\r\n                        body(x).{\r\n                            | None =>\r\n                            | o =>\r\n                                done = True\r\n                                result = o\r\n                        }\r\n                }\r\n            }\r\n            result\r\n        } finally {\r\n            self.close()\r\n        }\r\n    }\r\n\r\n    find(body: T => Bool): Option[T] {\r\n        self.filter(body).first()\r\n    }\r\n\r\n    foldLeft[R](initial: R, body: (R, T) => R): R {\r\n        mutable result = initial\r\n        self.each {result = body(result, _)}\r\n        result\r\n    }\r\n\r\n    toArray(): Array[T] {\r\n        let array = Array.new()\r\n        self.each {array.push(_)}\r\n        array\r\n    }\r\n\r\n    toList(): List[T] {\r\n        self.toArray().drain()\r\n    }\r\n\r\n}\r\n\r\nextend self[T]: Stream[Stream[T]] {\r\n    flatten(): Stream[T] {\r\n        self.flatMap {_}\r\n    }\r\n}\r\n\r\nextend self[T: Order]: Stream[T] {\r\n    toSet(): Set[T] {\r\n        self.toList().toSet()\r\n    }\r\n}\r\n\r\nextend self[K: Order, V]: Stream[Pair[K, V]] {\r\n    toMap(): Map[K, V] {\r\n        self.toList().toMap()\r\n    }\r\n}\r\n\r\nextend self: Stream[Buffer] {\r\n\r\n    toBuffer(): Buffer {\r\n        let builder = Array.new()\r\n        self.each {builder.push(_)}\r\n        Buffer.fromBufferList(builder.drain())\r\n    }\r\n\r\n    toString(encoding: String = \"utf8\"): String {\r\n        self.toBuffer().toString(encoding)\r\n    }\r\n\r\n    readBytes(bytes: Int): Pair[List[Buffer], Stream[Buffer]] {\r\n        if(bytes <= 0) {Pair([], self)} else:\r\n        let buffers = Array.new()\r\n        mutable buffer = self.next().grab()\r\n        mutable taken = 0\r\n        mutable remainder = None\r\n        while {remainder == None} {\r\n            let needed = bytes - taken\r\n            if(needed > buffer.size()) {\r\n                buffers.push(buffer)\r\n                taken += buffer.size()\r\n                buffer = self.next().grab()\r\n            } else {\r\n                buffers.push(buffer.view(0, needed))\r\n                remainder = Some(buffer.view(needed, buffer.size()))\r\n            }\r\n        }\r\n        Pair(buffers.drain(), remainder.toStream().addAll(self))\r\n    }\r\n\r\n}\r\n"
    ],
    "names": [
        "Stream",
        "next",
        "close",
        "new",
        "do",
        "body",
        "initialized",
        "stream",
        "None",
        "addAll",
        "self",
        "that",
        "firstDone",
        "orElse",
        "map",
        "flatMap",
        "inner",
        "result",
        "isEmpty",
        "Some",
        "i",
        "o",
        "grab",
        "collect",
        "w1",
        "toStream",
        "filter",
        "x",
        "zip",
        "Pair",
        "y",
        "takeFirst",
        "count",
        "remaining",
        "dropFirst",
        "takeWhile",
        "done",
        "dropWhile",
        "pairs",
        "r",
        "chunked",
        "size",
        "list",
        "reverse",
        "use",
        "each",
        "eachWhile",
        "all",
        "any",
        "first",
        "last",
        "grabFirst",
        "else",
        "panic",
        "grabLast",
        "collectFirst",
        "find",
        "foldLeft",
        "initial",
        "toArray",
        "array",
        "toList",
        "drain",
        "flatten",
        "toSet",
        "toMap",
        "toBuffer",
        "builder",
        "fromBufferList",
        "toString",
        "encoding",
        "readBytes",
        "bytes",
        "buffers",
        "buffer",
        "taken",
        "remainder",
        "equals",
        "needed",
        "view"
    ],
    "mappings": ""
}