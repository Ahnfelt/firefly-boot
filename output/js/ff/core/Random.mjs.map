{
    "version": 3,
    "sources": [
        "../../../../../core/Random.ff"
    ],
    "sourcesContent": [
        "class Random(\n    mutable s0: Float\n    mutable s1: Float\n    mutable s2: Float\n    mutable c: Float\n    mutable spareGauss: Float\n)\n\n// Using Alea PRNG by Johannes Baag√∏e <baagoe@baagoe.com>, 2010\n// Typical use: Random.seedInstant(system.task().now())\n\nnewFromInt(seed: Int): Random {\n    newFromFloat(seed.toFloat())\n}\n\nnewFromFloat(seed: Float): Random {\n    let buffer = Buffer.new(8)\n    buffer.setFloat64(0, seed)\n    newFromBuffer(buffer)\n}\n\nnewFromBuffer(buffer: Buffer): Random {\n    mutable n: Float = (0xefc8249d).toFloat()\n    function mash(data: Buffer): Float {\n        0.until(data.size()).each {i =>\n            n += data.grabUint8(i).toFloat()\n            mutable h = 0.02519603282416938 * n\n            n = Js.binaryOperator(\">>>\", h, 0)?\n            h -= n\n            h *= n\n            n = Js.binaryOperator(\">>>\", h, 0)?\n            h -=n\n            n += h * 0x100000000 // 2^32\n        }\n        Js.binaryOperator(\">>>\", n, 0)? * 2.3283064365386963e-10\n    }\n    let space: Buffer = Js->DataView->(Js->Uint8Array->([32])->buffer)?\n    let r = Random(\n        s0 = mash(space)\n        s1 = mash(space)\n        s2 = mash(space)\n        c = 1.0\n        spareGauss = Float.nan()\n    )\n    r.s0 -= mash(buffer)\n    if(r.s0 < 0.0) {r.s0 += 1.0}\n    r.s1 -= mash(buffer);\n    if(r.s1 < 0.0) {r.s1 +=1.0}\n    r.s2 -= mash(buffer);\n    if(r.s2 < 0.0) {r.s2 += 1.0}\n    r\n}\n\nextend self: Random {\n    \n    copy(): Random {\n        self.Random()\n    }\n\n    nextInt(from: Int, until: Int): Int {\n        Js.binaryOperator(\"|\", self.nextFloat(from.toFloat(), until.toFloat())!, 0)?\n    }\n\n    nextFloat(from: Float, until: Float): Float {\n        let t = 2091639 * self.s0 + self.c * 2.3283064365386963e-10\n        self.s0 = self.s1;\n        self.s1 = self.s2;\n        self.c = Js.binaryOperator(\"|\", t, 0)?\n        let uniform = t - self.c\n        self.s2 = uniform\n        from + uniform * (until - from)\n    }\n        \n    nextBool(): Bool {\n        self.nextInt(0, 2) == 0\n    }\n\n    nextBytes(buffer: Buffer, start: Int, stop: Int): Unit {\n        start.until(stop).each {i =>\n            buffer.setUint8(i, self.nextInt(0, 256))\n        }\n    }\n\n    nextGauss(mean: Float, standardDeviation: Float): Float {\n        if(!self.spareGauss.isNan()) {\n            let result = self.spareGauss * standardDeviation + mean\n            self.spareGauss = Float.nan()\n            result\n        } else {\n            mutable u = 0.5\n            mutable v = 0.5\n            mutable s = 0.5\n            doWhile {\n                u = self.nextFloat(0.0, 1.0) * 2 - 1\n                v = self.nextFloat(0.0, 1.0) * 2 - 1\n                s = u * u + v * v\n                s >= 1.0 || s == 0.0\n            }\n            s = (-2.0 * s.ln() / s).sqrt()\n            self.spareGauss = v * s\n            mean + standardDeviation * u * s\n        }\n    }\n\n    shuffleArray[T](array: Array[T]): Unit {\n        0.until(array.size() - 1).each {i =>\n            let j = self.nextInt(0, array.size() - i) + i\n            let value = array.grab(i)\n            array.set(i, array.grab(j))\n            array.set(j, value)\n        }\n    }\n    \n    shuffleList[T](list: List[T]): List[T] {\n        let array = list.toArray()\n        self.shuffleArray(list.toArray())\n        array.drain()\n    }\n\n    sampleArray[T](count: Int, array: Array[T], body: T => Unit): Unit {\n        self.shuffleList(array.toList()).takeFirst(count).each {body(_)}\n    }\n\n    sampleList[T](count: Int, list: List[T]): List[T] {\n        self.shuffleList(list).takeFirst(count)\n    }\n\n    grabArray[T](array: Array[T]): T {\n        array.grab(self.nextInt(0, array.size()))\n    }\n\n    grabList[T](list: List[T]): T {\n        list.grab(self.nextInt(0, list.size()))\n    }\n    \n}\n"
    ],
    "names": [
        "Random",
        "s0",
        "s1",
        "s2",
        "c",
        "spareGauss",
        "newFromInt",
        "seed",
        "newFromFloat",
        "toFloat",
        "buffer",
        "new",
        "setFloat64",
        "newFromBuffer",
        "n",
        "mash",
        "data",
        "size",
        "i",
        "grabUint8",
        "h",
        "space",
        "\"DataView\"",
        "\"Uint8Array\"",
        "r",
        "nan",
        "copy",
        "self",
        "nextInt",
        "from",
        "until",
        "nextFloat",
        "t",
        "uniform",
        "nextBool",
        "nextBytes",
        "start",
        "stop",
        "setUint8",
        "nextGauss",
        "mean",
        "standardDeviation",
        "isNan",
        "result",
        "u",
        "v",
        "s",
        "sqrt",
        "ln",
        "shuffleArray",
        "array",
        "j",
        "value",
        "set",
        "shuffleList",
        "list",
        "toArray",
        "drain",
        "sampleArray",
        "count",
        "body",
        "toList",
        "sampleList",
        "takeFirst",
        "grabArray",
        "grab",
        "grabList"
    ],
    "mappings": ""
}