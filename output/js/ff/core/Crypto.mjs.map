{
    "version": 3,
    "sources": [
        "../../../../../core/Crypto.ff"
    ],
    "sourcesContent": [
        "capability Crypto {}\r\n\r\nextend self: Crypto {\r\n    \r\n    randomUuid(): String {\r\n        self!->randomUUID()?\r\n    }\r\n    \r\n    randomBuffer(size: Int): Buffer {\r\n        let buffer = Buffer.new(size)\r\n        self.randomizeBuffer(buffer)\r\n        buffer\r\n    }\r\n\r\n    randomizeBuffer(buffer: Buffer): Unit {\r\n        self!->getRandomValues(Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength))\r\n    }\r\n\r\n    hmacSha256(key: Buffer, buffer: Buffer): Buffer {\r\n        Js.throwIfCancelled()\r\n        let cryptoKey = Js.await(self!->subtle->importKey(\r\n            \"raw\"\r\n            key!\r\n            Js->(name = \"HMAC\", hash = Js->(name = \"SHA-256\"))\r\n            False\r\n            [\"sign\"]\r\n        ))\r\n        let signature = Js.await(self!->subtle->sign(\r\n            \"HMAC\"\r\n            cryptoKey\r\n            buffer!\r\n        )) \r\n        Js->DataView->(signature)?\r\n    }\r\n        \r\n    sha256(buffer: Buffer): Buffer {\r\n        Js.throwIfCancelled()\r\n        let hash = Js.await(self!->subtle->digest(\"SHA-256\", buffer))\r\n        Js->DataView->(hash)?\r\n    }\r\n\r\n    hashPassword(password: String, iterations: Int = 600000): String {\r\n        let salt = self.randomBuffer(16)\r\n        let hash = internalHashPassword(self, salt, password.toBuffer(), iterations)\r\n        \"$pbkdf2-sha256-hex$\" + iterations + \"$\" + salt.toHex() + \"$\" + hash.toHex()\r\n    }\r\n    \r\n    checkPassword(password: String, passwordHash: String): Bool {\r\n        passwordHash.split('$').{\r\n            | [\"\", \"pbkdf2-sha256-hex\", iterationsText, saltText, hashText] {\r\n                iterationsText.getInt() | Some(iterations)\r\n            } =>\r\n                let computedHash = \r\n                    internalHashPassword(self, Buffer.fromHex(saltText), password.toBuffer(), iterations)\r\n                let hash = Buffer.fromHex(hashText)\r\n                self.constantTimeEquals(computedHash, hash)\r\n            | _ => False\r\n        }\r\n    }\r\n\r\n    constantTimeEquals(buffer1: Buffer, buffer2: Buffer): Bool {\r\n        if(buffer1.size() != buffer2.size()) {False} else: \r\n        mutable v = 0\r\n        mutable i = 0\r\n        while {i < buffer1.size()} {\r\n            v = v.bitOr(buffer1.grabUint8(i).bitXor(buffer2.grabUint8(i)))\r\n            i += 1\r\n        }\r\n        v == 0\r\n    }\r\n\r\n}\r\n\r\ninternalHashPassword(system: Crypto, salt: Buffer, password: Buffer, iterations: Int): Buffer {\r\n    Js.throwIfCancelled()\r\n    let keyMaterial = Js.await(system!->subtle->importKey(\r\n        \"raw\"\r\n        password!\r\n        Js->(name = \"PBKDF2\")\r\n        False\r\n        [\"deriveBits\"]\r\n    ))\r\n    let hashBuffer = Js.await(system!->subtle->deriveBits(\r\n        Js->(\r\n            name = \"PBKDF2\"\r\n            salt = salt\r\n            iterations = iterations\r\n            hash = \"SHA-256\"\r\n        )\r\n        keyMaterial\r\n        256\r\n    ))\r\n    Js->DataView->(hashBuffer)?\r\n}\r\n"
    ],
    "names": [
        "internalHashPassword",
        "system",
        "salt",
        "password",
        "iterations",
        "keyMaterial",
        "subtle",
        "importKey",
        "name",
        "hashBuffer",
        "deriveBits",
        "hash",
        "\"DataView\"",
        "randomUuid",
        "self",
        "randomUUID",
        "randomBuffer",
        "size",
        "buffer",
        "new",
        "randomizeBuffer",
        "getRandomValues",
        "\"Uint8Array\"",
        "byteOffset",
        "byteLength",
        "hmacSha256",
        "key",
        "cryptoKey",
        "signature",
        "sign",
        "sha256",
        "digest",
        "hashPassword",
        "toBuffer",
        "toHex",
        "checkPassword",
        "passwordHash",
        "split",
        "iterationsText",
        "saltText",
        "hashText",
        "getInt",
        "Some",
        "computedHash",
        "fromHex",
        "constantTimeEquals",
        "buffer1",
        "buffer2",
        "v",
        "i",
        "bitOr",
        "bitXor",
        "grabUint8"
    ],
    "mappings": "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"
}