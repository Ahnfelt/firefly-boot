{
    "version": 3,
    "sources": [
        "../../../../../core/List.ff"
    ],
    "sourcesContent": [
        "data List[T] {}\n\nnew[T](): List[T] {\n    []\n}\n\nfill[T](size: Int, value: T): List[T] {\n    Js->Array->(size)->fill(value!)?\n}\n\nfillBy[T](size: Int, body: Int => T): List[T] {\n    if(Js.inAsync()) {\n        let array = Js->Array->(size)\n        1.until(size).each {i => \n            array.set(i, body(i)!)\n        }\n        array?\n    } else {\n        Js->Array->from(Js->(length = size), Js->{_, i => body(i?)})?\n    }\n}\n\n\nrange(size: Int): List[Int] {\n    Js->Array->from(Js->(length = size), Js->{_, i => i})?\n}\n\nextend self[T]: List[T] {\n\n    addAll(that: List[T]): List[T] {\n        self!->concat(that!)?\n    }\n\n    isEmpty(): Bool {\n        self.size() == 0\n    }\n\n    size(): Int {\n        self!->length?\n    }\n\n    get(index: Int): Option[T] {\n        if(index >= 0 && index < self.size()) {\n            Some(self!.get(index)?)\n        } else {\n            None\n        }\n    }\n\n    grab(index: Int): T {\n        if(index < 0 || index >= self.size()) {\n            throw(GrabException())\n        }\n        self!.get(index)?\n    }\n\n    first(): Option[T] {self.get(0)}\n\n    last(): Option[T] {self.get(self.size() - 1)}\n\n    grabFirst(): T {self.grab(0)}\n\n    grabLast(): T {self.grab(self.size() - 1)}\n\n    takeFirst(count: Int = 1): List[T] {\n        self!->slice(0, count)?\n    }\n\n    takeLast(count: Int = 1): List[T] {\n        self!->slice(-count)?\n    }\n\n    dropFirst(count: Int = 1): List[T] {\n        self!->slice(count)?\n    }\n\n    dropLast(count: Int = 1): List[T] {\n        self!->slice(0, self.size() - count)?\n    }\n        \n    count(body: T => Bool): Int {\n        mutable result = 0\n        mutable i = 0\n        while {i < self.size()} {\n            if(body(self.grab(i))) {result += 1}\n            i += 1\n        }\n        result\n    }\n\n    countWhile(body: T => Bool): Int {\n        mutable i = 0\n        while {i < self.size() && body(self.grab(i))} {\n            i += 1\n        }\n        i\n    }\n\n    takeWhile(body: T => Bool): List[T] {\n        let result = Array.new()\n        mutable i = 0\n        while {i < self.size() && body(self.grab(i))} {\n            result.push(self.grab(i))\n            i += 1\n        }\n        result.drain()\n    }\n\n    dropWhile(body: T => Bool): List[T] {\n        let result = Array.new()\n        mutable i = 0\n        while {i < self.size() && body(self.grab(i))} {\n            i += 1\n        }\n        while {i < self.size()} {\n            result.push(self.grab(i))\n            i += 1\n        }\n        result.drain()\n    }\n    \n    partitionWhile(body: T => Bool): Pair[List[T], List[T]] {\n        let first = Array.new()\n        let second = Array.new()\n        mutable i = 0\n        while {i < self.size() && body(self.grab(i))} {\n            first.push(self.grab(i))\n            i += 1\n        }\n        while {i < self.size()} {\n            second.push(self.grab(i))\n            i += 1\n        }\n        Pair(first.drain(), second.drain())\n    }\n    \n    pairs(): List[Pair[Int, T]] {\n        mutable i = 0\n        self.map {x =>\n            let r = Pair(i, x)\n            i += 1\n            r\n        }\n    }\n    \n    slice(from: Int, until: Int): List[T] {\n        self.dropFirst(from).takeFirst(until - from)\n    }\n    \n    foldLeft[R](initial: R, body: (R, T) => R): R {\n        mutable result = initial\n        self.each {x =>\n            result = body(result, x)\n        }\n        result\n    }    \n\n    update(index: Int, value: T): List[T] {\n        self.modify(index) {_ => value}\n    }\n    \n    modify(index: Int, body: T => T): List[T] {\n        if(index < 0 || index >= self.size()) {\n            throw(GrabException())\n        }\n        let result = self!->slice()\n        result.set(index, body(result.get(index)?)!)\n        result?\n    }\n        \n    zip[S](that: List[S]): List[Pair[T, S]] {\n        if(self.size() <= that.size()) {\n            mutable i = -1\n            self.map {x => \n                i += 1\n                Pair(x, that.grab(i))\n            }\n        } else {\n            mutable i = -1\n            that.map {y => \n                i += 1\n                Pair(self.grab(i), y)\n            }\n        }\n    }\n\n    chunk(chunkSize: Int): List[List[T]] {\n        let results = Array.new()\n        let result = Array.new()\n        mutable added = 0\n        self.each {item =>\n            if(added < chunkSize) {\n                added += 1\n            } else {\n                results.push(result.drain())\n                added = 1\n            }\n            result.push(item)\n        }\n        if(added != 0) {\n            results.push(result.drain())\n        }\n        results.drain()\n    }\n\n    toStream(cycle: Bool = False): Stream[T] {\n        mutable index = 0\n        Stream.new {\n            if(index < self.size()) {\n                let result = self.grab(index)\n                index += 1\n                result\n            } elseIf {cycle && index != 0} {\n                let result = self.grab(0)\n                index = 1\n                result\n            }\n        }\n    }\n\n    toArray(): Array[T] {\n        Js->(array = self!->slice())?\n    }\n    \n    toQueue(): Queue[T] {\n        let queue = Queue.new()\n        self.each {v => queue.push(v)}\n        queue\n    }\n\n    each(body: T => Unit): Unit {\n        mutable i = 0\n        while {i < self.size()} {\n            body(self!.get(i)?)\n            i += 1\n        }\n    }\n        \n    eachWhile(body: T => Bool): Unit {\n        mutable i = 0\n        while {i < self.size()} {\n            if(body(self!.get(i)?)) {\n                i += 1\n            } else {\n                i = self.size()\n            }\n        }\n    }\n\n    all(body: T => Bool): Bool {\n        mutable result = True\n        self.eachWhile {x =>\n            result = body(x)\n            result\n        }\n        result\n    }\n\n    any(body: T => Bool): Bool {\n        mutable result = False\n        self.eachWhile {x =>\n            result = body(x)\n            (!result)\n        }\n        result\n    }\n   \n    find(body: T => Bool): Option[T] {\n        mutable result = None\n        self.eachWhile {x =>\n            if(body(x)) {\n                result = Some(x)\n                False\n            } else {\n                True\n            }\n        }\n        result\n    }\n\n    indexWhere(body: T => Bool): Option[Int] {\n        mutable i = -1\n        mutable result = False\n        self.eachWhile {x =>\n            i += 1\n            result = body(x)\n            (!result)\n        }\n        if(result) {i}\n    }    \n    \n    filter(body: T => Bool): List[T] {\n        let result = Array.new()\n        self.each {x =>\n            if(body(x)) {\n                result.push(x)\n            }\n        }\n        result.drain()\n    }\n    \n    partition(body: T => Bool): Pair[List[T], List[T]] {\n        Pair(self.filter(body), self.filter {!body(_)})\n    }\n\n    map[S](body: T => S): List[S] {\n        let array = Array.new()\n        self.each {e => \n            array.push(body(e))\n        }\n        array.drain()\n    }\n        \n    flatMap[S](body: T => List[S]): List[S] {\n        let results = Array.new()\n        self.each {x =>\n            results.pushList(body(x))\n        }\n        results.drain()\n    }\n    \n    collect[R](body: T => Option[R]): List[R] {\n        mutable result = Array.new()\n        self.each {x =>\n            body(x).each {result.push(_)}\n        }\n        result.drain()\n    }\n\n    collectFirst[R](body: T => Option[R]): Option[R] {\n        mutable result = None\n        self.eachWhile {x =>\n            body(x).{\n                | None =>\n                    True\n                | o =>\n                    result = o\n                    False\n            }\n        }\n        result\n    }\n\n    sortBy[S: Order](body: T => S): List[T] {\n        self.sortWith {Ordering.compare(body(_), body(_))}\n    }\n\n    sortWith(ordering: (T, T) => Ordering): List[T] {\n        let array = self.toArray()\n        array.sortWith(ordering)\n        array.drain()\n    }\n    \n    reverse(): List[T] {\n        1.to(self.size()).map {i =>\n            self.grab(self.size() - i)\n        }\n    }\n    \n    separate(separator: List[T]): List[T] {\n        let array = Array.new()\n        self.pairs().each {| Pair(i, x) =>\n            if(i != 0) {\n                array.pushList(separator)\n            }\n            array.push(x)\n        }\n        array.drain()\n    }\n    \n}\n\nextend self[T: Order]: List[T] {\n\n    sort(): List[T] {\n        self.sortWith(Ordering.compare)\n    }\n\n    toSet(): Set[T] {\n        self.foldLeft(Set.new()) {_.add(_)}\n    }\n    \n    distinct(): List[T] {\n        mutable seen = [].toSet()\n        self.filter {\n            | item {!seen.contains(item)} =>\n                seen = seen.add(item)\n                True\n            | _ =>\n                False\n        }\n    }\n\n}\n\nextend self[T]: List[List[T]] {\n\n    flatten(): List[T] {\n        let result = Array.new()\n        self.each {xs =>\n            result.pushList(xs)\n        }\n        result.drain()\n    }\n\n}\n\nextend self[K: Order, V]: List[Pair[K, V]] {\n    \n    toMap(): Map[K, V] {\n        self.foldLeft(Map.new()) {| map, Pair(key, value) => map.add(key, value)}\n    }\n    \n    group(): Map[K, List[V]] {\n        mutable map = Map.new[K, Array[V]]()\n        self.each {| Pair(k, v) => map = map.push(k, v)}\n        map.mapValues {_, v => v.drain()}\n    }\n    \n}\n\nextend self[K, V]: List[Pair[K, V]] {\n\n    unzip(): Pair[List[K], List[V]] {\n        let first = Array.new()\n        let second = Array.new()\n        self.each {| Pair(x, y) =>\n            first.push(x)\n            second.push(y)\n        }\n        Pair(first.drain(), second.drain())\n    }\n\n}\n\nextend self: List[String] {\n\n    join(separator: String = \"\"): String {\n        self!->join(separator)?\n    }\n\n}\n\ninstance List[T: Show]: Show {\n    show(value: List[T]): String {\n        let array = Array.new()\n        array.push(\"[\")\n        value.each {x =>\n            if(array.size() > 1) {array.push(\", \")}\n            array.push(Show.show(x))\n        }\n        array.push(\"]\")\n        array.join()\n    }\n}\n\ninstance List[T: Equal]: Equal {\n    equals(x: List[T], y: List[T]): Bool {\n        if(x!.equals(y!)) {True} else:\n        if(x.size() != y.size()) {False} else:\n        mutable i = -1\n        x.all {l =>\n            i += 1\n            l == y.grab(i)\n        }\n    }\n}\n\ninstance List[T: Order]: Order {\n    compare(x: List[T], y: List[T]): Ordering {\n        if(x!.equals(y!)) {OrderingSame} else:\n        let size = x.size().min(y.size())\n        mutable i = 0\n        mutable ordering = OrderingSame\n        while {ordering == OrderingSame && i < size} {\n            ordering = Ordering.compare(x.grab(i), y.grab(i))\n            i += 1\n        }\n        if(ordering != OrderingSame) {ordering} else:\n        Ordering.compare(x.size(), y.size())\n    }\n}\n"
    ],
    "names": [
        "new",
        "fill",
        "size",
        "value",
        "\"Array\"",
        "fillBy",
        "body",
        "array",
        "i",
        "from",
        "length",
        "range",
        "addAll",
        "self",
        "that",
        "concat",
        "isEmpty",
        "get",
        "index",
        "Some",
        "None",
        "grab",
        "throw",
        "GrabException",
        "first",
        "last",
        "grabFirst",
        "grabLast",
        "takeFirst",
        "count",
        "slice",
        "takeLast",
        "dropFirst",
        "dropLast",
        "result",
        "countWhile",
        "takeWhile",
        "drain",
        "dropWhile",
        "partitionWhile",
        "second",
        "Pair",
        "pairs",
        "map",
        "x",
        "r",
        "until",
        "foldLeft",
        "initial",
        "update",
        "modify",
        "zip",
        "y",
        "chunk",
        "chunkSize",
        "results",
        "added",
        "item",
        "toStream",
        "cycle",
        "toArray",
        "toQueue",
        "queue",
        "push",
        "v",
        "each",
        "eachWhile",
        "all",
        "any",
        "find",
        "indexWhere",
        "filter",
        "partition",
        "w1",
        "e",
        "flatMap",
        "pushList",
        "collect",
        "collectFirst",
        "o",
        "sortBy",
        "sortWith",
        "w2",
        "compare",
        "ordering",
        "reverse",
        "to",
        "separate",
        "separator",
        "sort",
        "toSet",
        "add",
        "distinct",
        "seen",
        "contains",
        "flatten",
        "xs",
        "toMap",
        "key",
        "group",
        "k",
        "mapValues",
        "unzip",
        "join",
        "List",
        "show",
        "equals",
        "l",
        "OrderingSame",
        "min",
        "anyTag",
        "internalAnyTag"
    ],
    "mappings": ""
}