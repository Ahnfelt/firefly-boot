{
    "version": 3,
    "sources": [
        "../../../../../compiler/Builder.ff"
    ],
    "sourcesContent": [
        "import Tokenizer\nimport Parser\nimport Syntax\nimport Resolver\nimport Compiler\nimport Unification\nimport Dependencies\nimport JsEmitter\nimport ModuleCache\nimport LspHook\nimport DependencyLock\n\nbuild(\n    system: NodeSystem\n    emitTarget: EmitTarget\n    mainModules: List[ModuleKey]\n    resolvedDependencies: ResolvedDependencies\n    compilerModulePath: Option[Path]\n    tempPath: Path\n    jsOutputPath: Path\n    printMeasurements: Bool\n    moduleCache: ModuleCache\n): Unit {\n\n    if(tempPath.exists()) {tempPath.delete()}\n    tempPath.createDirectory()\n\n    let jsPathFile = tempPath.slash(\"js\")\n    jsPathFile.createDirectory(createParentDirectories = True)\n\n    let success = do {\n        let compiler = Compiler.new(\n            emitTarget\n            system.mainTask()\n            compilerModulePath\n            jsPathFile\n            resolvedDependencies\n            Map.new()\n            moduleCache\n            lspHook = LspHook.disabled()\n        )\n        mainModules.each {moduleKey => compiler.emit(moduleKey, isMainModule = True)}\n        if(printMeasurements) {compiler.printMeasurements()}\n        resolvedDependencies.packagePaths.each {packagePair, packagePath =>\n            resolvedDependencies.packages.get(packagePair).each {packageInfo =>\n                processNodeModules(system, jsPathFile, packagePath, packageInfo)\n                processIncludes(jsPathFile, packagePath, packageInfo)\n            }\n        }\n        True\n    }\n\n    if(success) {\n        if(jsOutputPath.exists()) {jsOutputPath.delete()}\n        jsPathFile.renameTo(jsOutputPath)\n    }\n\n}\n\nprocessIncludes(jsPathFile: Path, packagePath: Path, info: PackageInfo) {\n    info.includes.each {include =>\n        let fromPath = packagePath.slash(\".firefly\").slash(\"include\").slash(include.path)\n        let toPath = jsPathFile.slash(info.package.packagePair.groupName(\"/\")).slash(include.path)\n        toPath.createSymlinkTo(fromPath, junction = True)\n    }\n}\n\nprocessNodeModules(system: NodeSystem, jsPathFile: Path, packagePath: Path, info: PackageInfo) {\n    if(info.includes.any {_.path == \"node_modules\"}) {\n        let includePath = packagePath.slash(\".firefly\").slash(\"include\")\n        let nodeModules = includePath.slash(\"node_modules\")\n        let packageJson = includePath.slash(\"package.json\")\n        if(!nodeModules.exists() && packageJson.exists()) {\n            system.writeErrorLine(\"Running npm install --no-bin-links in \" + includePath.absolute())\n            let result = system.execute(\"npm\", [\n                \"install\", \"--no-bin-links\"\n            ], directory = Some(includePath), shell = True)\n            if(result.exitCode != 0) {\n                system.writeErrorLine(\"Running npm failed with exit code \" + result.exitCode + \":\")\n                system.writeErrorBuffer(result.standardOut)\n                system.writeErrorBuffer(result.standardError)\n            }\n        }\n    }\n}\n\nbuildViaBuildSystem(system: NodeSystem, fireflyPath: Path, mainFiles: List[Path], target: String) {\n    let resolvedDependencies = Dependencies.process(\n        system.httpClient()\n        DependencyLock.new(system.mainTask())\n        mainFiles.grabFirst()\n    )\n    let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair(\"ff\", \"core\"))) {\n        resolvedDependencies.packagePaths\n    } else {\n        resolvedDependencies.packagePaths.add(PackagePair(\"ff\", \"core\"), fireflyPath.slash(\"core\"))\n    }\n    let packageRoot = resolvedDependencies.packagePaths.grab(resolvedDependencies.mainPackagePair)\n    let mainModuleKeys = mainFiles.map {mainFile =>\n        resolvedDependencies.mainPackagePair.moduleKey(packageRoot, mainFile).else {\n            panic(\n                \"Can't build multiple main files in different packages: \" + \n                mainFile.absolute() + \" isn't part of \" + packageRoot.absolute()\n            )\n        }\n    }\n    if(target != \"browser\") {\n        panic(\"buildViaBuildSystem is currently limited to browser target only - the restriction can be lifted\")\n    }\n    build(\n        system = system\n        emitTarget = EmitBrowser\n        mainModules = mainModuleKeys\n        resolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)\n        compilerModulePath = None\n        tempPath = system.path(\".firefly/temporary\")\n        jsOutputPath = system.path(\".firefly/output\").slash(target)\n        printMeasurements = False\n        moduleCache = ModuleCache.new(0)\n    )\n}\n\ncheck(\n    system: NodeSystem\n    fireflyPath: Path\n    path: Path\n    mustContain: Option[String]\n    skipFiles: Set[String]\n    virtualFiles: Map[String, String]\n    cache: ModuleCache\n    dependencyLock: DependencyLock\n    newVersion: Int\n    lspHook: LspHook\n    infer: Bool\n): List[CompileError] {\n    let packages = path.isDirectory().{\n        | False {path.endsWith([\".firefly\", \"package.ff\"])} => [PackageFiles(path.parent().grab(), Some(path), [])]\n        | True => findPackageFilesForDirectory(path, virtualFiles, mustContain, skipFiles)\n        | False => findPackageFilesForFile(path).toList()\n    }\n    let errors = Array.new()\n\n    let filteredPackages = packages.filter {!_.root.contains([\".firefly\", \"dependencies\"])}\n    filteredPackages.filter {!_.files.isEmpty()}.each {package => \n        let firstFile = package.files.grabFirst()\n        try {\n            Some(Dependencies.process(system.httpClient(), dependencyLock, firstFile))\n        } tryCatch {| CompileError(_, _) @ c, error =>\n            errors.push(c)\n            None\n        } catch {| CompileErrors(compileErrors), error =>\n            errors.pushList(compileErrors)\n            None\n        }.each: resolvedDependencies => \n        let fixedPackagePaths = if(resolvedDependencies.packagePaths.contains(PackagePair(\"ff\", \"core\"))) {\n            resolvedDependencies.packagePaths\n        } else {\n            resolvedDependencies.packagePaths.add(PackagePair(\"ff\", \"core\"), fireflyPath.slash(\"core\"))\n        }\n        let fixedResolvedDependencies = resolvedDependencies.ResolvedDependencies(packagePaths = fixedPackagePaths)\n        let newCache = cache.without(newVersion, path)\n        let compiler = Compiler.new(\n            EmitBuild\n            system.mainTask() \n            None\n            package.root.slash(\".firefly\").slash(\"temporary\")\n            fixedResolvedDependencies\n            virtualFiles\n            newCache\n            lspHook\n        )\n        package.files.each {file =>\n            let packagePair = resolvedDependencies.mainPackagePair\n            let folders = file.parent().grab().relativeListTo(package.root)\n            let name = file.base().removeLast(\".ff\").grab()\n            let moduleKey = ModuleKey(packagePair, folders, name)\n            try {\n                if(infer) {\n                    compiler.infer(moduleKey)\n                } else {\n                    compiler.resolve(moduleKey)\n                }\n            } tryCatch {| CompileError(_, _) @ c, error =>\n                errors.push(c)\n            } catch {| CompileErrors(compileErrors), error =>\n                errors.pushList(compileErrors)\n            }\n        }\n        cache.mergeVersions(compiler.cache)\n    }\n    errors.drain()\n\n}\n\ncapability PackageFiles(\n    root: Path\n    packageFile: Option[Path]\n    files: List[Path]\n)\n\n\nfindPackageFilesForFile(file: Path): Option[PackageFiles] {\n    if(file.extension() == \".ff\"):\n    mutable packageFile = None\n    mutable currentDirectory = file.parent()\n    while {!currentDirectory.isEmpty() && packageFile.isEmpty()} {\n        packageFile = currentDirectory.map {_.slash(\".firefly\").slash(\"package.ff\")}.filter {_.exists()}\n        currentDirectory = currentDirectory.grab().parent()\n    }\n    let projectRoot = packageFile.map {_.parent().grab().parent().grab()}.else {file.parent().grab()}\n    PackageFiles(projectRoot, packageFile, [file])\n}\n\nfindPackageFilesForDirectory(\n    directory: Path\n    virtualFiles: Map[String, String]\n    mustContain: Option[String]\n    skipFiles: Set[String]\n): List[PackageFiles] {\n    let files = findFireflyFiles(directory, virtualFiles, mustContain, skipFiles)\n    let split = files.partition {_.endsWith([\".firefly\", \"package.ff\"])}\n    let packageFiles = split.first\n    mutable singleFiles = split.second\n    let multiFileProjects = packageFiles.map {packageFile => \n        let projectRoot = packageFile.parent().grab().parent().grab()\n        let files = singleFiles.partition {_.isInsideOf(projectRoot)}\n        singleFiles = files.second\n        let packageFiles = files.first\n        PackageFiles(projectRoot, Some(packageFile), packageFiles)\n    }\n    let singleFileProjects = singleFiles.map {file => \n        let projectRoot = file.parent().grab()\n        PackageFiles(projectRoot, None, [file])\n    }\n    [...multiFileProjects, ...singleFileProjects]\n}\n\nfindFireflyFiles(\n    path: Path\n    virtualFiles: Map[String, String]\n    mustContain: Option[String]\n    skipFiles: Set[String]\n): List[Path] {\n    let split = path.entries().toList().partition {_.isDirectory()}\n    let directories = split.first\n    let files = split.second\n    let relevantDirectories = directories.map {_.path()}.filter {_.base().all {c => \n        c == '.' || c.isAsciiLower() || c.isAsciiDigit()\n    }}\n    let fireflyFiles = files.map {_.path()}.filter {file => \n        file.extension() == \".ff\" && !skipFiles.contains(file.absolute()) && (\n            file.endsWith([\".firefly\", \"package.ff\"]) || mustContain.all {s => \n                let code = virtualFiles.get(file.absolute()).else {file.readText()}\n                code.contains(s)\n            }\n        )\n    }\n    [...fireflyFiles, ...relevantDirectories.flatMap {findFireflyFiles(_, virtualFiles, mustContain, skipFiles)}]\n}\n\ninternalCreateExecutable(\n    self: BuildSystem\n    mainJsFile: Path = \".firefly/output/executable/Main.bundle.js\"\n    outputPath: Path = \".firefly/output\"\n    targets: List[String] = [\"host\"]\n    assets: AssetSystem = AssetSystem.create()\n): Unit {\n    let assetOutputPath = outputPath.slash(\"assets\")\n    assets.files.pairs().each {| Pair(path, makeStream) =>\n        let p = assetOutputPath.slash(path)\n        p.parent().grab().createDirectory(createParentDirectories = True)\n        p.writeStream(makeStream())\n    }\n    let json = \"\"\"{\n        \"name\": \"main\",\n        \"bin\": {\n            \"firefly-main\": \"Main.bundle.js\"\n        },\n        \"devDependencies\": {\n            \"pkg\": \"^5.8.0\"\n        },\n        \"pkg\": {\n            \"scripts\": \"Main.bundle.js\",\n            \"outputPath\": \"bin\",\n            \"assets\": [\"../assets/**/*\"],\n            \"targets\": [\n                \"node18-linux-x64\",\n                \"node18-macos-x64\",\n                \"node18-win-x64\"\n            ]\n        }\n    }\"\"\"\n    let packageFile = outputPath.slash(\"executable/package.json\")\n    packageFile.writeText(json)\n    internalCallPkg(self, packageFile, outputPath, targets)\n}\n\ninternalCallPkg(\n    self: BuildSystem\n    packageFile: Path\n    outputPath: Path\n    targets: List[String]\n): Unit {\n    let pkg = Js.import(\"pkg\")\n    Js.await(pkg->exec([\n        packageFile.absolutePath\n        \"--out-path\", outputPath.absolutePath\n        \"--target\", targets.join(\",\")\n    ]))\n}\n"
    ],
    "names": [
        "PackageFiles",
        "root",
        "packageFile",
        "files",
        "build",
        "system",
        "emitTarget",
        "mainModules",
        "resolvedDependencies",
        "compilerModulePath",
        "tempPath",
        "jsOutputPath",
        "printMeasurements",
        "moduleCache",
        "exists",
        "delete",
        "createDirectory",
        "jsPathFile",
        "slash",
        "success",
        "do",
        "compiler",
        "new",
        "mainTask",
        "disabled",
        "emit",
        "moduleKey",
        "each",
        "packagePaths",
        "packagePair",
        "packagePath",
        "get",
        "packages",
        "packageInfo",
        "processNodeModules",
        "processIncludes",
        "renameTo",
        "info",
        "includes",
        "fromPath",
        "include",
        "path",
        "toPath",
        "groupName",
        "package",
        "createSymlinkTo",
        "any",
        "w1",
        "includePath",
        "nodeModules",
        "packageJson",
        "writeErrorLine",
        "absolute",
        "result",
        "execute",
        "Some",
        "None",
        "exitCode",
        "writeErrorBuffer",
        "standardOut",
        "standardError",
        "buildViaBuildSystem",
        "fireflyPath",
        "mainFiles",
        "target",
        "process",
        "httpClient",
        "grabFirst",
        "fixedPackagePaths",
        "contains",
        "PackagePair",
        "add",
        "packageRoot",
        "grab",
        "mainPackagePair",
        "mainModuleKeys",
        "map",
        "mainFile",
        "else",
        "panic",
        "EmitBrowser",
        "c",
        "ResolvedDependencies",
        "singleFilePackages",
        "check",
        "mustContain",
        "skipFiles",
        "virtualFiles",
        "cache",
        "dependencyLock",
        "newVersion",
        "lspHook",
        "infer",
        "endsWith",
        "parent",
        "findPackageFilesForDirectory",
        "toList",
        "findPackageFilesForFile",
        "isDirectory",
        "errors",
        "filteredPackages",
        "filter",
        "isEmpty",
        "firstFile",
        "catch",
        "tryCatch",
        "try",
        "error",
        "compileErrors",
        "pushList",
        "fixedResolvedDependencies",
        "newCache",
        "without",
        "EmitBuild",
        "folders",
        "relativeListTo",
        "file",
        "name",
        "removeLast",
        "base",
        "ModuleKey",
        "resolve",
        "mergeVersions",
        "drain",
        "extension",
        "currentDirectory",
        "projectRoot",
        "directory",
        "findFireflyFiles",
        "split",
        "partition",
        "packageFiles",
        "first",
        "singleFiles",
        "second",
        "multiFileProjects",
        "isInsideOf",
        "singleFileProjects",
        "entries",
        "directories",
        "relevantDirectories",
        "all",
        "isAsciiLower",
        "isAsciiDigit",
        "fireflyFiles",
        "s",
        "code",
        "readText",
        "flatMap",
        "internalCreateExecutable",
        "self",
        "mainJsFile",
        "outputPath",
        "targets",
        "assets",
        "create",
        "assetOutputPath",
        "pairs",
        "makeStream",
        "p",
        "writeStream",
        "json",
        "writeText",
        "internalCallPkg",
        "pkg",
        "exec",
        "absolutePath",
        "join"
    ],
    "mappings": ""
}