{
    "version": 3,
    "sources": [
        "../../../../../compiler/Inference.ff"
    ],
    "sourcesContent": [
        "import Syntax\r\nimport Unification\r\nimport Environment\r\nimport Substitution\r\nimport LspHook\r\n\r\nclass Inference(\r\n    unification: Unification\r\n    missing: StringMap[Pair[Instantiated, Option[List[Argument]]]]\r\n    lspHook: LspHook\r\n)\r\n\r\nnew(modules: List[Module], lspHook: LspHook): Inference {\r\n    Inference(\r\n        unification = Unification.new(modules, attemptFixes = lspHook.isEnabled())\r\n        missing = StringMap.new()\r\n        lspHook = lspHook\r\n    )\r\n}\r\n\r\nfail[T](at: Location, message: String): T {\r\n    throw(CompileError(at, message))\r\n}\r\n\r\ncore(name: String): String {\r\n    \"ff:core/\" + name + \".\" + name\r\n}\r\n\r\nextend self: Inference {\r\n    \r\n    inferModule(module: Module, otherModules: List[Module]): Module {\r\n        let environment = Environment.new(module, otherModules, alreadyFlat = False)\r\n\r\n        let errors = Array.new()\r\n        let traits = Syntax.catchManyInto(errors, module.traits) {\r\n            self.inferTraitDefinition(environment, _)\r\n        }\r\n        let instances = Syntax.catchManyInto(errors, module.instances) {\r\n            self.inferInstanceDefinition(environment, _)\r\n        }\r\n        let lets = Syntax.catchManyInto(errors, module.lets) {\r\n            self.inferLetDefinition(environment, _)\r\n        }\r\n        let functions = Syntax.catchManyInto(errors, module.functions) {\r\n            self.inferFunctionDefinition(environment, _)\r\n        }\r\n        let extends = Syntax.catchManyInto(errors, module.extends) {\r\n            self.inferExtendDefinition(environment, _)\r\n        }\r\n        errors.drain().{\r\n            | [] =>\r\n            | [Pair(_, error)] => error.rethrow()\r\n            | allErrors => throw(CompileErrors(allErrors.map {_.first}))\r\n        }        \r\n        \r\n        let result = module.Module(\r\n            traits = traits\r\n            instances = instances\r\n            extends = extends\r\n            lets = lets\r\n            functions = functions\r\n        )\r\n        let subsititution = Substitution(self.unification.substitution)\r\n        subsititution.substituteModule(result)\r\n    }\r\n\r\n    inferTraitDefinition(environment: Environment, definition: DTrait): DTrait {\r\n        definition.DTrait(\r\n\r\n        )\r\n    }\r\n\r\n    inferInstanceDefinition(environment: Environment, definition: DInstance): DInstance {\r\n        if(self.lspHook.isEnabled() && definition.derived) {definition} else:\r\n        let instances = constraintsToInstances(definition.constraints)\r\n        self.unification.withLocalInstances(instances) {\r\n            let traitName = definition.traitName\r\n            let traitDefinition = environment.traits.get(traitName).else {\r\n                throw(CompileError(definition.at\r\n                    \"No such trait: \" + traitName\r\n                ))\r\n            }\r\n\r\n            if(traitDefinition.generics.size() != definition.typeArguments.size()) {\r\n                throw(CompileError(definition.at\r\n                    \"Wrong number of type arguments for \" + traitName +\r\n                    \", expected \" + (traitDefinition.generics.size() - 1) +\r\n                    \", got \" + (definition.typeArguments.size() - 1)\r\n                ))\r\n            }            \r\n            \r\n            let instantiationMap = traitDefinition.generics.zip(definition.typeArguments).toMap()\r\n            \r\n            traitDefinition.methods.each {traitMethod =>\r\n                let found = definition.methods.filter {_.signature.name == traitMethod.name}\r\n                if(found.isEmpty()) {\r\n                    throw(CompileError(definition.at\r\n                        \"Missing instance method: \" + traitMethod.name\r\n                    ))\r\n                }\r\n                found.dropFirst().each {duplicateMethod =>\r\n                    throw(CompileError(duplicateMethod.at\r\n                        \"Duplicated instance method: \" + traitMethod.name\r\n                    ))\r\n                }\r\n            }\r\n            \r\n            definition.DInstance(\r\n                methods = Syntax.catchMany(definition.methods) {instanceFunction =>\r\n                    let methodName = instanceFunction.signature.name\r\n                    let traitMethodName = traitName.reverse().dropWhile {_ != '.'}.reverse() + methodName\r\n                    let traitMethodScheme = environment.symbols.get(traitMethodName).else {\r\n                        throw(CompileError(instanceFunction.at\r\n                            \"Trait \" + traitName + \" has no such method: \" + methodName\r\n                        ))\r\n                    }\r\n                    let parameters = traitMethodScheme.signature.parameters.map {p =>\r\n                        p.Parameter(valueType = self.unification.instantiate(instantiationMap, p.valueType))\r\n                    }\r\n                    let returnType = self.unification.instantiate(instantiationMap, traitMethodScheme.signature.returnType)\r\n                                        \r\n                    instanceFunction.signature.parameters.dropFirst(parameters.size()).each {instanceParameter => \r\n                        throw(CompileError(instanceParameter.at, \"Unexpected parameter: \" + instanceParameter.name))\r\n                    }\r\n\r\n                    parameters.dropFirst(instanceFunction.signature.parameters.size()).each {traitParameter => \r\n                        throw(CompileError(instanceFunction.at, \"Missing parameter: \" + traitParameter.name))\r\n                    }\r\n\r\n                    parameters.zip(instanceFunction.signature.parameters).each {| Pair(traitParameter, instanceParameter) => \r\n                        self.unification.unify(instanceParameter.valueType.at, traitParameter.valueType, instanceParameter.valueType)\r\n                    }\r\n\r\n                    self.unification.unify(instanceFunction.signature.returnType.at, returnType, instanceFunction.signature.returnType)\r\n                    \r\n                    if(self.lspHook.isAt(instanceFunction.at) || self.lspHook.isDefinedAt(traitMethodScheme.signature.at)) {\r\n                        let symbolHook = SymbolHook(instanceFunction.signature.name, instanceFunction.at, traitMethodScheme.signature.at)\r\n                        let h = InferLookupHook(self.unification, environment, instanceFunction.signature.returnType, None, Box(symbolHook), Box(None))\r\n                        self.lspHook.emit(h)\r\n                    }\r\n                    \r\n                    self.inferFunctionDefinition(environment, instanceFunction)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    inferLetDefinition(environment: Environment, definition: DLet): DLet {\r\n        let value = self.inferTerm(environment, definition.variableType, definition.value)\r\n        definition.DLet(\r\n            value = value\r\n        )\r\n    }\r\n\r\n    inferExtendDefinition(environment: Environment, definition: DExtend): DExtend {\r\n        let selfParameter = Parameter(\r\n            at = definition.at\r\n            mutable = False\r\n            name = definition.name\r\n            valueType = definition.type\r\n            default = None\r\n        )\r\n        let functions = Syntax.catchMany(definition.methods) {method =>\r\n            let signature = method.signature.Signature(\r\n                generics = [...definition.generics, ...method.signature.generics]\r\n                constraints = [...definition.constraints, ...method.signature.constraints]\r\n                parameters = [selfParameter, ...method.signature.parameters]\r\n            )\r\n            let body = method.body.Lambda(\r\n                cases = method.body.cases.map {case =>\r\n                    case.MatchCase(\r\n                        patterns = [PVariable(method.at, None), ...case.patterns]\r\n                    )\r\n                }\r\n            )\r\n            let function = method.DFunction(\r\n                signature = signature\r\n                body = body\r\n            )\r\n            self.inferFunctionDefinition(environment.Environment(selfVariable = Some(definition.name)), function)\r\n        }\r\n        definition.DExtend(\r\n            methods = functions\r\n        )\r\n    }\r\n\r\n    inferFunctionDefinition(environment: Environment, definition: DFunction): DFunction {\r\n        if(self.lspHook.isAt(definition.at)) {\r\n            self.lspHook.emit(\r\n                InferFunctionDefinitionHook(self.unification, environment, definition, self.missing)\r\n            )\r\n        }\r\n        let parameters = definition.signature.parameters.map {p =>\r\n            let noEffect = TConstructor(p.at, \"ff:core/Nothing.Nothing\", [])\r\n            let scheme = Scheme(True, False, False, False\r\n                Signature(p.at, p.name, False, [], [], [], p.valueType, noEffect)\r\n            )\r\n            if(self.lspHook.isAt(p.at)) {\r\n                self.lspHook.emit(\r\n                    InferParameterHook(self.unification, environment, p, self.missing)\r\n                )\r\n            }\r\n            Pair(p.name, scheme)\r\n        }\r\n        let parameterMap = parameters.toMap()\r\n        let environment2 = environment.Environment(symbols = environment.symbols.addAll(parameterMap))\r\n        let parameterTypes = parameters.map {_.second.signature.returnType}\r\n        let functionType = TConstructor(\r\n            definition.at\r\n            \"Function$\" + parameterTypes.size()\r\n            [definition.signature.effect, ...parameterTypes, definition.signature.returnType]\r\n        )\r\n        let instances = constraintsToInstances(definition.signature.constraints)\r\n        self.unification.withLocalInstances(instances) {\r\n            definition.DFunction(\r\n                body = self.inferLambda(environment2, functionType, definition.body)\r\n            )\r\n        }\r\n    }\r\n\r\n    inferLambda(environment: Environment, expected: Type, lambda: Lambda): Lambda {\r\n        let unitName = core(\"Unit\")\r\n        let returnsUnit = self.unification.substitute(expected).{\r\n            | TConstructor(_, name, ts) {name.startsWith(\"Function$\")} =>\r\n                ts.grabLast().{\r\n                    | TConstructor(_, n, []) => n == unitName\r\n                    | _ => False\r\n                }\r\n            | _ => False\r\n        }\r\n        let cases = if(!returnsUnit) {lambda.cases} else {\r\n            lambda.cases.map {c =>\r\n                c.MatchCase(body = ESequential(c.at, c.body, EVariant(c.at, unitName, [], None)))\r\n            }\r\n        }\r\n        let newEnvironment = environment.Environment(effect = lambda.effect)\r\n        lambda.Lambda(\r\n            cases = cases.map {self.inferMatchCase(newEnvironment, expected, _)}\r\n        )\r\n    }\r\n\r\n    inferMatchCase(environment: Environment, expected: Type, case: MatchCase): MatchCase {\r\n        let parameterTypes = case.patterns.map {self.unification.freshUnificationVariable(_.at)}\r\n        let returnType = self.unification.freshUnificationVariable(case.at)\r\n        let functionType = TConstructor(\r\n            case.at\r\n            \"Function$\" + case.patterns.size()\r\n            [environment.effect, ...parameterTypes, returnType]\r\n        )\r\n        self.unification.unify(case.at, expected, functionType)\r\n        let environment1 = parameterTypes.zip(case.patterns).foldLeft(environment) {| environment1, Pair(t, c) =>\r\n            let symbols = self.inferPattern(environment, t, c).mapValues {| name, Pair(at, type) =>\r\n                let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n                Scheme(True, False, False, False, Signature(at, name, False, [], [], [], type, noEffect))\r\n            }\r\n            environment.Environment(symbols = environment1.symbols.addAll(symbols))\r\n        }\r\n        let guards = [].toArray()\r\n        let environment3 = case.guards.foldLeft(environment1) {environment2, g =>\r\n            let guardType = self.unification.freshUnificationVariable(g.at)\r\n            let guardTerm = self.inferTerm(environment2, guardType, g.term)\r\n            let symbols = self.inferPattern(environment2, guardType, g.pattern).mapValues {| name, Pair(at, type) =>\r\n                let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n                Scheme(True, False, False, False, Signature(at, name, False, [], [], [], type, noEffect))\r\n            }\r\n            guards.push(g.MatchGuard(term = guardTerm))\r\n            environment2.Environment(symbols = environment2.symbols.addAll(symbols))\r\n        }\r\n        case.MatchCase(\r\n            body = self.inferTerm(environment3, returnType, case.body)\r\n            guards = guards.drain()\r\n        )\r\n    }\r\n\r\n    inferPattern(environment: Environment, expected: Type, pattern: MatchPattern): Map[String, Pair[Location, Type]] {\r\n        if(self.lspHook.isEnabled()) {\r\n            if(pattern.{\r\n                | PVariantAs(at, _, variableAt, _) => \r\n                    self.lspHook.isAt(at) || self.lspHook.isAt(variableAt) || self.lspHook.isDefinedAt(variableAt)\r\n                | PAlias(at, _, _) => \r\n                    self.lspHook.isAt(at) || self.lspHook.isDefinedAt(at)\r\n                | _ => \r\n                    self.lspHook.isAt(pattern.at)\r\n            }) {\r\n                self.lspHook.emit(\r\n                    InferPatternHook(self.unification, environment, expected, pattern)\r\n                )\r\n            }\r\n        }\r\n        function literal(coreTypeName: String): Map[String, Pair[Location, Type]] {\r\n            self.unification.unify(pattern.at, expected, TConstructor(pattern.at, core(coreTypeName), []))\r\n            Map.new()\r\n        }\r\n        pattern.{\r\n            | PString _ =>\r\n                literal(\"String\")\r\n            | PInt _ =>\r\n                literal(\"Int\")\r\n            | PChar _ =>\r\n                literal(\"Char\")\r\n            | PVariable(at, None) =>\r\n                Map.new()\r\n            | PVariable(at, Some(name)) =>\r\n                [Pair(name, Pair(at, expected))].toMap()\r\n            | PAlias(at, pattern, variable) =>\r\n                self.inferPattern(environment, expected, pattern).add(variable, Pair(at, expected))\r\n            | PVariantAs(at, name, variableAt, variableOption) =>\r\n                let instantiated = self.lookup(environment, expected, at, name, [], None).else {\r\n                    throw(CompileError(at, \"No such variant: \" + name))\r\n                }\r\n                if(instantiated.scheme.isNewtype) {\r\n                     throw(CompileError(at, \"This kind of pattern is not allowed for newtypes\"))\r\n                }\r\n                self.unification.unify(at, expected, instantiated.scheme.signature.returnType)\r\n                let parameters = instantiated.scheme.signature.parameters.sortBy {_.name}\r\n                let paramtersWithFieldAt = parameters.map {p => p.valueType.{\r\n                    | TConstructor t => t.TConstructor(at = p.at)\r\n                    | TVariable t => t.TVariable(at = p.at)\r\n                }}\r\n                let recordType = TConstructor(at, \"Record$\" + parameters.map {_.name}.join(\"$\"), paramtersWithFieldAt)\r\n                variableOption.toList().map {Pair(_, Pair(variableAt, recordType))}.toMap()\r\n            | PVariant(at, \"List$Empty\", []) =>\r\n                let itemType = self.unification.freshUnificationVariable(at)\r\n                let listType = TConstructor(at, core(\"List\"), [itemType])\r\n                self.unification.unify(at, expected, listType)\r\n                [].toMap()\r\n            | PVariant(at, \"List$Link\", [head, tail]) =>\r\n                let itemType = self.unification.freshUnificationVariable(at)\r\n                let listType = TConstructor(at, core(\"List\"), [itemType])\r\n                self.unification.unify(at, expected, listType)\r\n                let headVariables = self.inferPattern(environment, itemType, head)\r\n                let tailVariables = self.inferPattern(environment, listType, tail)\r\n                headVariables.addAll(tailVariables)\r\n            | PVariant(at, name, patterns) =>\r\n                let instantiated = self.lookup(environment, expected, at, name, [], None).else {\r\n                    throw(CompileError(at, \"No such variant: \" + name))\r\n                }\r\n                self.unification.unify(at, expected, instantiated.scheme.signature.returnType)\r\n                if(patterns.size() != instantiated.scheme.signature.parameters.size() && !self.lspHook.isEnabled()) {\r\n                    throw(CompileError(at, \"Wrong number of subpatterns, expected \" +\r\n                        instantiated.scheme.signature.parameters.size() + \", got \" + patterns.size() + \".\"\r\n                    ))\r\n                }\r\n                patterns.zip(instantiated.scheme.signature.parameters).map {| Pair(pattern, parameter) =>\r\n                    self.inferPattern(environment, parameter.valueType, pattern)\r\n                }.foldLeft(Map.new[String, Pair[Location, Type]]()) {_.addAll(_)}\r\n        }\r\n    }\r\n\r\n    inferTerm(environment: Environment, expected: Type, term: Term): Term {\r\n        let hookRecordTypeBox = if(self.lspHook.isAt(term.at)) {\r\n            let box = Box(None)\r\n            self.lspHook.emit(\r\n                InferTermHook(self.unification, environment, expected, term, box, self.missing)\r\n            )\r\n            box\r\n        }\r\n        function literal(coreTypeName: String): Term {\r\n            self.unification.unify(term.at, expected, TConstructor(term.at, core(coreTypeName), []))\r\n            term\r\n        }\r\n        term.{\r\n            | EString _ => literal(\"String\")\r\n            | EChar _ => literal(\"Char\")\r\n            | EInt _ => literal(\"Int\")\r\n            | EFloat _ => literal(\"Float\")\r\n            | EVariable e =>\r\n                self.lookup(environment, expected, e.at, e.name, [], None).map {instantiated =>\r\n                    if(instantiated.scheme.isVariable) {\r\n                        self.unification.unify(e.at, expected, instantiated.scheme.signature.returnType)\r\n                        term\r\n                    } else {\r\n                        self.inferEtaExpansion(\r\n                            environment\r\n                            expected\r\n                            e.at\r\n                            instantiated.scheme.signature\r\n                            term\r\n                        )\r\n                    }\r\n                }.else {\r\n                    throw(CompileError(e.at, \"Symbol not in scope: \" + e.name))\r\n                }\r\n            | EField e =>\r\n                let recordType = self.unification.freshUnificationVariable(e.at)\r\n                if(self.lspHook.isAt(term.at)) {\r\n                    hookRecordTypeBox.each {_.value = Some(recordType)}\r\n                }\r\n                let record = self.inferTerm(environment, recordType, e.record)\r\n                self.unification.substitute(recordType).{\r\n                    | TConstructor(_, name, typeArguments)@t {name.startsWith(\"Record$\")} =>\r\n                        let fieldNames = name.split('$').dropFirst(1)\r\n                        if(self.lspHook.isEnabled()) {\r\n                            let definedAt = fieldNames.zip(typeArguments).collectFirst {| Pair(fieldName, fieldType) => \r\n                                if(e.field == fieldName):\r\n                                self.unification.substitute(fieldType).at\r\n                            }\r\n                            if(self.lspHook.isAt(e.at) || definedAt.any {self.lspHook.isDefinedAt(_)}) {\r\n                                self.lspHook.emit(\r\n                                    InferRecordFieldHook(e.at, self.unification, environment, expected, t, e.field)\r\n                                )\r\n                            }\r\n                        }\r\n                        fieldNames.pairs().find {_.second == e.field}.map {_.first}.map {index =>\r\n                            let t1 = typeArguments.grab(index)\r\n                            self.unification.unify(e.at, expected, t1)\r\n                            e.EField(record = record)\r\n                        }.elseIf {self.lspHook.isEnabled()} {\r\n                            term\r\n                        }.else {\r\n                            throw(CompileError(e.at, \"No such field \" + e.field + \" on type: \" + t.show([])))\r\n                        }\r\n                    | TConstructor(_, name, typeArguments)@t =>\r\n                        let memberPrefix = name + \"_\"\r\n                        let memberName = memberPrefix + e.field\r\n                        self.lookup(environment, expected, e.at, memberName, typeArguments, None).{\r\n                            | Some(instantiated) {!instantiated.scheme.isVariable} =>\r\n                                let signature = instantiated.scheme.signature.Signature(\r\n                                    // Drop self for eta expansion\r\n                                    parameters = instantiated.scheme.signature.parameters.dropFirst(1)\r\n                                )\r\n                                self.unification.unify(\r\n                                    e.at\r\n                                    recordType\r\n                                    instantiated.scheme.signature.parameters.grab(0).valueType\r\n                                )\r\n                                self.inferEtaExpansion(environment, expected, e.at, signature, term)\r\n                            | Some(instantiated) =>\r\n                                /*self.unification.unify(\r\n                                    e.at,\r\n                                    recordType,\r\n                                    instantiated.scheme.signature.parameters.grab(0).valueType\r\n                                )*/\r\n                                self.unification.unify(e.at, expected, instantiated.scheme.signature.returnType)\r\n                                e.EField(newtype = instantiated.scheme.isNewtype, record = record)\r\n                            | None =>\r\n                                throw(CompileError(e.at, \"No such field \" + e.field + \" on type: \" + t.show([])))\r\n                        }\r\n                    | TVariable(_, _) {self.lspHook.isEnabled()} =>\r\n                        term\r\n                    | TVariable(_, index) =>\r\n                        throw(CompileError(e.at, \"No such field \" + e.field + \" on unknown type: $\" + index))\r\n                }\r\n            | EWildcard e =>\r\n                self.lookup(environment, expected, e.at, \"_w\" + e.index, [], None).map {instantiated =>\r\n                    self.unification.unify(e.at, expected, instantiated.scheme.signature.returnType)\r\n                    term\r\n                }.grab()\r\n            | EList(at, t, items) =>\r\n                let listType = TConstructor(term.at, core(\"List\"), [t])\r\n                self.unification.unify(at, expected, listType)\r\n                EList(at, t, items.map {| Pair(item, spread) =>\r\n                    Pair(self.inferTerm(environment, if(spread) {listType} else {t}, item), spread)\r\n                })\r\n            | ESequential(at, before, after) =>\r\n                if(self.lspHook.isAt(before.at)) {\r\n                    self.lspHook.emit(\r\n                        InferSequentialStartHook(self.unification, term, self.missing)\r\n                    )\r\n                }\r\n                let newExpected = self.unification.freshUnificationVariable(at)\r\n                before.{\r\n                    | EPipe(at1, value, effect1, ELambda(at2, Lambda(at3, effect3, cases))) =>\r\n                        let e = EVariant(at, \"ff:core/Unit.Unit\", [], None)\r\n                        let newCases = cases.map {case => case.MatchCase(body = ESequential(case.at, case.body, e))}\r\n                        let newPipe = EPipe(at1, value, effect1, ELambda(at2, Lambda(at3, effect3, newCases)))\r\n                        after.{\r\n                            | EVariant(at, \"ff:core/Unit.Unit\", _, _) =>\r\n                                let unitType = TConstructor(at, core(\"Unit\"), [])\r\n                                self.unification.unify(at, expected, unitType)\r\n                                self.inferTerm(environment, newExpected, newPipe)\r\n                            | _ =>\r\n                                ESequential(\r\n                                    at = at\r\n                                    before = self.inferTerm(environment, newExpected, newPipe)\r\n                                    after = self.inferTerm(environment, expected, after)\r\n                                )\r\n                        }\r\n                    | _ =>\r\n                        let unitName = core(\"Unit\")\r\n                        function semicolonUnit(body: Term): Term {\r\n                            | ECall e {e.target | DynamicCall c} {c.function | EVariable x} {\r\n                                x.name == \"ff:core/Core.if\" || x.name == \"ff:core/Core.try\"\r\n                            } =>\r\n                                e.ECall(arguments = e.arguments.map {\r\n                                    | Argument a {a.value | ELambda l} =>\r\n                                        a.Argument(value = l.ELambda(lambda = \r\n                                            l.lambda.Lambda(cases = l.lambda.cases.map {c =>\r\n                                                c.MatchCase(body = \r\n                                                    ESequential(c.at, c.body, EVariant(c.at, unitName, [], None))\r\n                                                )\r\n                                            })\r\n                                        ))\r\n                                    | a => a\r\n                                })\r\n                            | ECall e {e.target | DynamicCall c} {c.function | EField f} {\r\n                                f.field == \"else\" || f.field == \"elseIf\" ||\r\n                                f.field == \"tryCatch\" || f.field == \"tryCatchAny\" || f.field == \"tryFinally\" ||\r\n                                f.field == \"catch\" || f.field == \"catchAny\" || f.field == \"finally\"\r\n                            } =>\r\n                                e.ECall(target = c.DynamicCall(function = f.EField(record = semicolonUnit(f.record))))\r\n                            | ESequential e =>\r\n                                e.ESequential(after = semicolonUnit(e.after))\r\n                            | ELet e =>\r\n                                e.ELet(body = semicolonUnit(e.body))\r\n                            | EFunctions e =>\r\n                                e.EFunctions(body = semicolonUnit(e.body))\r\n                            | _ => \r\n                                body\r\n                        }\r\n                        ESequential(\r\n                            at = at\r\n                            before = self.inferTerm(environment, newExpected, semicolonUnit(before))\r\n                            after = self.inferTerm(environment, expected, after)\r\n                        )\r\n                }\r\n            | ELet e =>\r\n                let noEffect = TConstructor(e.at, \"ff:core/Nothing.Nothing\", [])\r\n                let scheme = Scheme(True, e.mutable, False, False\r\n                    Signature(e.at, e.name, False, [], [], [], e.valueType, noEffect)\r\n                )\r\n                let environment2 = environment.Environment(symbols = environment.symbols.add(e.name, scheme))\r\n                e.ELet(\r\n                    value = self.inferTerm(environment, e.valueType, e.value)\r\n                    body = self.inferTerm(environment2, expected, e.body)\r\n                )\r\n            | ELambda(at, l) =>\r\n                l.cases.{\r\n                    | [MatchCase(_, [], [], EVariable(insideAt, \"\"))] {self.lspHook.isAt(insideAt)} =>\r\n                        self.lspHook.emit(InferLambdaStartHook(self.unification, environment, expected))\r\n                    | [MatchCase(_, [], [],\r\n                        ESequential(_, EVariable(insideAt, \"\"), EVariant(_, \"ff:core/Unit.Unit\", _, _))\r\n                    )] {self.lspHook.isAt(insideAt)} =>\r\n                        self.lspHook.emit(InferLambdaStartHook(self.unification, environment, expected))\r\n                    | _ =>\r\n                }\r\n                let lambda = self.inferLambda(environment, expected, l)\r\n                ELambda(at, lambda)\r\n            | EVariant e =>\r\n                let instantiated = self.lookup(environment, expected, e.at, e.name, e.typeArguments, e.arguments).else {\r\n                    throw(CompileError(e.at, \"Symbol not in scope: \" + e.name))\r\n                }\r\n                self.unification.unify(e.at, expected, instantiated.scheme.signature.returnType)\r\n                let arguments = e.arguments.map {\r\n                    self.inferArguments(e.at, e.name, environment, instantiated.scheme.signature.parameters, _)\r\n                }\r\n                e.EVariant(\r\n                    typeArguments = instantiated.typeArguments.map {_.second}\r\n                    arguments = arguments\r\n                )\r\n            | EVariantIs e =>\r\n                let instantiated = self.lookup(environment, expected, e.at, e.name, e.typeArguments, None).else {\r\n                    throw(CompileError(e.at, \"Symbol not in scope: \" + e.name))\r\n                }\r\n                let parameters = instantiated.scheme.signature.parameters.sortBy {_.name}\r\n                let recordType =\r\n                    TConstructor(e.at, \"Record$\" + parameters.map {_.name}.join(\"$\"), parameters.map {_.valueType})\r\n                let functionType = TConstructor(e.at, \"Function$1\", [\r\n                    self.unification.freshUnificationVariable(e.at)\r\n                    instantiated.scheme.signature.returnType\r\n                    TConstructor(e.at, core(\"Option\"), [recordType])\r\n                ])\r\n                self.unification.unify(e.at, expected, functionType)\r\n                e.EVariantIs(\r\n                    typeArguments = instantiated.typeArguments.map {_.second}\r\n                )\r\n            | ECopy e =>\r\n                let scheme = self.lookup(environment, expected, e.at, e.name, [], None).else {\r\n                    throw(CompileError(e.at, \"Symbol not in scope: \" + e.name))\r\n                }.scheme\r\n                if(scheme.isNewtype) {\r\n                    throw(CompileError(e.at, \"Newtypes can't be copied\"))\r\n                }\r\n                let signature = scheme.signature\r\n                if(self.lspHook.isEnabled()) {\r\n                    e.arguments.pairs().each {| Pair(i, a) =>\r\n                        let p = signature.parameters.find {_.name == a.name}\r\n                        if(self.lspHook.isAt(a.at) || p.any {self.lspHook.isDefinedAt(_.at)}) {\r\n                            let arguments = e.arguments.map {f => f.Argument(name = Some(f.name))}\r\n                            self.lspHook.emit(\r\n                                InferArgumentHook(\r\n                                    self.unification, environment\r\n                                    True, term.at, e.name, signature.parameters, arguments, i\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n                let parameterNames = signature.parameters.map {_.name}\r\n                e.arguments.find {a => !parameterNames.any {_ == a.name}}.each {\r\n                    | Field(at, name, value) => throw(CompileError(at, \"Unknown parameter: \" + name))\r\n                }\r\n                let arguments = parameterNames.map {name =>\r\n                    e.arguments.find {_.name == name}.map {\r\n                        | Field(at, _, value) => Argument(at, Some(name), value)\r\n                    }.else {\r\n                        let at = e.at.Location(file = e.at.file + \"/<copy>\")\r\n                        Argument(at, Some(name), EField(at, False, EVariable(at, \"_c\"), name))\r\n                    }\r\n                }\r\n                let body = EVariant(e.at, e.name, [], Some(arguments))\r\n                let effect = self.unification.freshUnificationVariable(e.at)\r\n                let e1 = EPipe(e.at, e.record, effect\r\n                    ELambda(e.at, Lambda(e.at, effect, [MatchCase(e.at, [PVariable(e.at, Some(\"_c\"))], [], body)]))\r\n                )\r\n                self.inferTerm(environment, expected, e1)\r\n            | EPipe e =>\r\n                let valueType = self.unification.freshUnificationVariable(e.at)\r\n                let functionType = TConstructor(e.at, \"Function$1\", [\r\n                    e.effect\r\n                    valueType\r\n                    expected\r\n                ])\r\n                let value = self.inferTerm(environment, valueType, e.value)\r\n                let function = self.inferTerm(environment, functionType, e.function)\r\n                self.unification.affect(term.at, e.effect, environment.effect)\r\n                e.EPipe(\r\n                    value = value\r\n                    function = function\r\n                )\r\n            | ECall e =>\r\n                if((self.lspHook.isEnabled()) && e.target.{| StaticCall _ => True | _ => False}) {term} else:\r\n                let call = e.target.{\r\n                    | DynamicCall call => (function = call.function, tailCall = call.tailCall)\r\n                    | StaticCall _ => fail(e.at, \"Internal error: Static calls not expected in the Inference phase\")\r\n                }\r\n                call.function.{\r\n                    | EVariable(variableAt, x) =>\r\n                        if(x.first().any {c => c != '_' && !c.isAsciiLetter()}) {\r\n                            self.inferOperator(environment, expected, x, term)\r\n                        } else {\r\n                            self.lookup(environment, expected, e.at, x, e.typeArguments, Some(e.arguments)).{\r\n                                | Some(instantiated) =>\r\n                                    if(instantiated.scheme.isVariable) {\r\n                                        self.inferLambdaCall(environment, expected, term)\r\n                                    } else {\r\n                                        let signature = instantiated.scheme.signature\r\n                                        self.inferFunctionCall(\r\n                                            environment\r\n                                            expected\r\n                                            signature\r\n                                            instantiated.scheme.isTraitMethod\r\n                                            instantiated.typeArguments\r\n                                            term\r\n                                            x\r\n                                        )\r\n                                    }\r\n                                | None =>\r\n                                    throw(CompileError(variableAt, \"No such function: \" + x))\r\n                            }\r\n                        }\r\n                    | EField f =>\r\n                        let recordType = self.unification.freshUnificationVariable(f.at)\r\n                        if(self.lspHook.isAt(term.at)) {\r\n                            hookRecordTypeBox.each {_.value = Some(recordType)}\r\n                        }\r\n                        let record = self.inferTerm(environment, recordType, f.record)\r\n                        let e2 = e.ECall(target = call.DynamicCall(function = f.EField(record = record)))\r\n                        self.unification.substitute(recordType).{\r\n                            | TConstructor(_, name, _)@t =>\r\n                                let methodName = name + \"_\" + f.field\r\n                                let arguments = [Argument(f.record.at, None, f.record), ...e.arguments]\r\n                                self.lookup(environment, expected, f.at, methodName, [], Some(arguments)).{\r\n                                    | Some(instantiated) {!instantiated.scheme.isVariable} =>\r\n                                        self.inferMethodCall(\r\n                                            environment\r\n                                            expected\r\n                                            instantiated.scheme.signature\r\n                                            instantiated.typeArguments\r\n                                            e2\r\n                                            record\r\n                                            recordType\r\n                                            methodName\r\n                                        )\r\n                                    | Some(instantiated) =>\r\n                                        self.inferLambdaCall(environment, expected, e2)\r\n                                    | None =>\r\n                                        throw(CompileError(f.at\r\n                                            \"No such field \" + f.field + \" on type: \" + t.show([])\r\n                                        ))\r\n                                }\r\n                            | TVariable _ {self.lspHook.isEnabled()} =>\r\n                                self.inferLambdaCall(environment, expected, e2)\r\n                            | TVariable(_, index) =>\r\n                                throw(CompileError(f.at\r\n                                    \"No such field \" + f.field + \" on unknown type: $\" + index\r\n                                ))\r\n                        }\r\n                    | _ =>\r\n                        self.inferLambdaCall(environment, expected, term)\r\n                }\r\n            | ERecord e =>\r\n                let fields = e.fields.sortBy {_.name}\r\n                let fieldTypes = fields.map {self.unification.freshUnificationVariable(_.at)}\r\n                let recordType =\r\n                    TConstructor(e.at, \"Record$\" + fields.map {_.name}.join(\"$\"), fieldTypes)\r\n                self.unification.unify(e.at, expected, recordType)\r\n                let newFields = fields.zip(fieldTypes).map {| Pair(field, t) =>\r\n                    field.Field(value = self.inferTerm(environment, t, field.value))\r\n                }\r\n                e.ERecord(\r\n                    fields = newFields\r\n                )\r\n            | EFunctions(at, functions, body) =>\r\n                let functionMap = functions.map {f =>\r\n                    let scheme = Scheme(False, False, False, False, f.signature)\r\n                    Pair(f.signature.name, scheme)\r\n                }.toMap()\r\n                let environment2 = environment.Environment(symbols = environment.symbols.addAll(functionMap))\r\n                let newFunctions = functions.map {self.inferFunctionDefinition(environment2, _)}\r\n                let newBody = self.inferTerm(environment2, expected, body)\r\n                EFunctions(\r\n                    at = at\r\n                    functions = newFunctions\r\n                    body = newBody\r\n                )\r\n            | EAssign e =>\r\n                self.lookup(environment, expected, e.at, e.variable, [], None).map {instantiated =>\r\n                    if(instantiated.scheme.isMutable || self.lspHook.isEnabled()) {\r\n                        let value = self.inferAssignment(\r\n                            environment = environment\r\n                            expected = expected\r\n                            at = e.at\r\n                            operator = e.operator\r\n                            value = e.value\r\n                            signature = instantiated.scheme.signature\r\n                        )\r\n                        e.EAssign(\r\n                            value = value\r\n                        )\r\n                    } else {\r\n                        throw(CompileError(e.at, \"Symbol is not mutable: \" + e.variable))\r\n                    }\r\n                } else {\r\n                    throw(CompileError(e.at, \"Symbol not in scope: \" + e.variable))\r\n                }\r\n            | EAssignField e =>\r\n                let recordType = self.unification.freshUnificationVariable(e.at)\r\n                let record = self.inferTerm(environment, recordType, e.record)\r\n                self.unification.substitute(recordType).{\r\n                    | TConstructor(_, name, typeArguments)@t {name.startsWith(\"Record$\")} =>\r\n                        throw(CompileError(e.at, \"Can't assign fields of anonymous records: \" + e.field))\r\n                    | TConstructor(_, name, typeArguments)@t =>\r\n                        let methodName = name + \"_\" + e.field\r\n                        self.lookup(environment, expected, e.at, methodName, typeArguments, None).{\r\n                            | Some(instantiated) {instantiated.scheme.isMutable || self.lspHook.isEnabled()} =>\r\n                                let value = self.inferAssignment(\r\n                                    environment = environment\r\n                                    expected = expected\r\n                                    at = e.at\r\n                                    operator = e.operator\r\n                                    value = e.value\r\n                                    signature = instantiated.scheme.signature\r\n                                )\r\n                                e.EAssignField(\r\n                                    record = record\r\n                                    value = value\r\n                                )\r\n                            | Some(instantiated) =>\r\n                                throw(CompileError(e.at\r\n                                    \"Can't assign an immutable field \" + e.field + \" on type: \" + t.show([])\r\n                                ))\r\n                            | None =>\r\n                                throw(CompileError(e.at, \"No such field \" + e.field + \" on type: \" + t.show([])))\r\n                        }\r\n                    | TVariable(_, _) {self.lspHook.isEnabled()} =>\r\n                        term\r\n                    | TVariable(_, index) =>\r\n                        throw(CompileError(e.at, \"No such field \" + e.field + \" on unknown type: $\" + index))\r\n                }\r\n        }\r\n    }\r\n\r\n    inferAssignment(\r\n        environment: Environment\r\n        expected: Type\r\n        at: Location\r\n        operator: String\r\n        value: Term\r\n        signature: Signature\r\n    ): Term {\r\n        let t = signature.returnType\r\n        let newValue = self.inferTerm(environment, t, value)\r\n        if(operator == \"+\" || operator == \"-\" || operator == \"*\" || operator == \"/\") {\r\n            self.unification.substitute(t).{\r\n                | TConstructor(_, name, _) {\r\n                    name == core(\"Int\") || name == core(\"Float\") || name == core(\"JsValue\") ||\r\n                    (name == core(\"String\") && operator == \"+\")\r\n                } => \r\n                | _ => \r\n                    self.unification.unify(at, t, TConstructor(at, core(\"Int\"), []))\r\n            }\r\n        } elseIf {operator != \"\"} {\r\n            throw(CompileError(at, \"Only +=, -=, *=, /= and = assignments are supported. Got: \" + operator + \"=\"))\r\n        }\r\n        self.unification.unify(at, expected, TConstructor(at, core(\"Unit\"), []))\r\n        newValue\r\n    }\r\n\r\n    inferMethodCall(\r\n        environment: Environment\r\n        expected: Type\r\n        signature: Signature\r\n        instantiation: List[Pair[String, Type]]\r\n        term: Term\r\n        record: Term\r\n        recordType: Type\r\n        name: String\r\n    ): Term {\r\n        term.{\r\n            | ECall e =>\r\n                let tailCall = e.target.{\r\n                    | DynamicCall call => call.tailCall\r\n                    | StaticCall _ => fail(e.at, \"Internal error: Static calls not expected in inferMethodCall\")\r\n                }\r\n                let selfParameter = signature.parameters.grabFirst()\r\n                let selfArgument = Argument(record.at, Some(selfParameter.name), record) // Be careful not to infer again\r\n                self.unification.unify(term.at, expected, signature.returnType)\r\n                self.unification.unify(term.at, selfParameter.valueType, recordType)\r\n                let arguments = self.inferArguments(term.at, name, environment, signature.parameters.dropFirst(), e.arguments)\r\n                self.unification.affect(term.at, signature.effect, environment.effect)\r\n                e.ECall(\r\n                    target = StaticCall(name, instanceCall = False, tailCall = tailCall)\r\n                    typeArguments = instantiation.map {_.second}\r\n                    arguments = [selfArgument, ...arguments]\r\n                    effect = signature.effect\r\n                )\r\n            | _ => fail(term.at, \"Call expected\")\r\n        }\r\n    }\r\n\r\n    inferFunctionCall(\r\n        environment: Environment\r\n        expected: Type\r\n        signature: Signature\r\n        instanceCall: Bool\r\n        instantiation: List[Pair[String, Type]]\r\n        term: Term\r\n        name: String\r\n    ): Term {\r\n        term.{\r\n            | ECall e =>\r\n                mutable isUnsafeJsAwaitCall = False\r\n                let tailCall = e.target.{\r\n                    | DynamicCall call => \r\n                        call.function.{\r\n                            | EVariable(_, \"ff:core/Js.await\") => \r\n                                isUnsafeJsAwaitCall = True\r\n                            | EVariable(_, \"ff:core/Js.awaitCancellablePromise\") => \r\n                                isUnsafeJsAwaitCall = True\r\n                            | _ => \r\n                        }\r\n                        call.tailCall\r\n                    | StaticCall _ => \r\n                        fail(e.at, \"Internal error: Static calls not expected in inferFunctionCall\")\r\n                }\r\n                self.unification.unify(e.at, expected, signature.returnType)\r\n                let arguments = self.inferArguments(e.at, name, environment, signature.parameters, e.arguments)\r\n                let effect = if(isUnsafeJsAwaitCall) {TConstructor(term.at, \"Q$\", [])} else {signature.effect}\r\n                self.unification.affect(term.at, effect, environment.effect)\r\n                e.ECall(\r\n                    target = StaticCall(name, instanceCall = instanceCall, tailCall = tailCall)\r\n                    typeArguments = instantiation.map {_.second}\r\n                    arguments = arguments\r\n                    effect = effect\r\n                )\r\n            | _ => fail(term.at, \"Call expected\")\r\n        }\r\n    }\r\n\r\n    inferLambdaCall(environment: Environment, expected: Type, term: Term): Term {\r\n        term.{\r\n            | ECall e =>\r\n                let call = e.target.{\r\n                    | DynamicCall call {!call.tailCall} => (function = call.function, tailCall = call.tailCall)\r\n                    | DynamicCall _ => throw(CompileError(e.at, \"Tailcalls not supported on lambda functions\"))\r\n                    | StaticCall _ => fail(e.at, \"Internal error: Static calls not expected in inferLambdaCall\")\r\n                }\r\n                let effect = self.unification.freshUnificationVariable(term.at)\r\n                let argumentTypes = e.arguments.map {self.unification.freshUnificationVariable(_.at)}\r\n                let functionType = TConstructor(e.at, \"Function$\" + e.arguments.size(), [\r\n                    effect\r\n                    ...argumentTypes\r\n                    expected\r\n                ])\r\n                let function = self.inferTerm(environment, functionType, call.function)\r\n                let arguments = e.arguments.zip(argumentTypes).map {| Pair(argument, t) =>\r\n                    argument.name.each {name =>\r\n                        throw(CompileError(argument.at, \"Named argument not allowed here: \" + name))\r\n                    }\r\n                    argument.Argument(value = self.inferTerm(environment, t, argument.value))\r\n                }\r\n                e.typeArguments.first().each {typeArgument =>\r\n                    throw(CompileError(typeArgument.at, \"Type arguments not allowed here\"))\r\n                }\r\n                self.unification.affect(term.at, effect, environment.effect)\r\n                e.ECall(\r\n                    target = call.DynamicCall(function = function)\r\n                    typeArguments = []\r\n                    arguments = arguments\r\n                    effect = effect\r\n                )\r\n            | _ => fail(term.at, \"Call expected\")\r\n        }\r\n    }\r\n\r\n    inferOperator(environment: Environment, expected: Type, operator: String, term: Term): Term {\r\n        term.{\r\n            | ECall e =>\r\n                let target = StaticCall(operator, instanceCall = False, tailCall = False)\r\n                e.arguments.{\r\n                    | [a1] {\r\n                        operator == \"!\"\r\n                    } =>\r\n                        let t = TConstructor(e.at, core(\"Bool\"), [])\r\n                        let e1 = self.inferTerm(environment, t, a1.value)\r\n                        self.unification.unify(e.at, expected, t)\r\n                        e.ECall(target = target, arguments = [a1.Argument(value = e1)])\r\n                    | [a1] {\r\n                        operator == \"-\"\r\n                    } =>\r\n                        let t1 = self.unification.freshUnificationVariable(e.at)\r\n                        let e1 = self.inferTerm(environment, t1, a1.value)\r\n                        self.unification.substitute(t1).{\r\n                            | TConstructor(_, name, []) {name == core(\"Float\")} =>\r\n                                self.unification.unify(e.at, expected, t1)\r\n                            | TConstructor(_, name, []) {name == core(\"Int\")} =>\r\n                                self.unification.unify(e.at, expected, t1)\r\n                            | _ {self.lspHook.isEnabled()} =>\r\n                            | _ =>\r\n                                throw(CompileError(e.at, \"Operators on unknown types not currently supported\"))\r\n                        }\r\n                        e.ECall(target = target, arguments = [a1.Argument(value = e1)])\r\n                    | [a1, a2] {\r\n                        operator == \"||\" || operator == \"&&\"\r\n                    } =>\r\n                        let t = TConstructor(e.at, core(\"Bool\"), [])\r\n                        let e1 = self.inferTerm(environment, t, a1.value)\r\n                        let e2 = self.inferTerm(environment, t, a2.value)\r\n                        self.unification.unify(e.at, expected, t)\r\n                        e.ECall(target = target, arguments = [a1.Argument(value = e1), a2.Argument(value = e2)])\r\n                    | [a1, a2] {\r\n                        operator == \"===\" || operator == \"!==\" // For internal use\r\n                    } =>\r\n                        let t1 = self.unification.freshUnificationVariable(e.at)\r\n                        let e1 = self.inferTerm(environment, t1, a1.value)\r\n                        let e2 = self.inferTerm(environment, t1, a2.value)\r\n                        self.unification.unify(e.at, expected, TConstructor(e.at, core(\"Bool\"), []))\r\n                        e.ECall(target = target, arguments = [a1.Argument(value = e1), a2.Argument(value = e2)])\r\n                    | [a1, a2] {\r\n                        operator == \"/\" || operator == \"%\"\r\n                    } =>\r\n                        let t1 = self.unification.freshUnificationVariable(e.at)\r\n                        let t2 = self.unification.freshUnificationVariable(e.at)\r\n                        let e1 = self.inferTerm(environment, t1, a1.value)\r\n                        let e2 = self.inferTerm(environment, t2, a2.value)\r\n                        let magic: Type => Unit = {t =>\r\n                            self.unification.substitute(t).{\r\n                                | TConstructor(_, name, []) {name == core(\"Float\")} =>\r\n                                | TConstructor(_, name, []) {name == core(\"Int\")} =>\r\n                                | _ => self.unification.unify(e.at, t, TConstructor(e.at, core(\"Float\"), []))\r\n                            }\r\n                        }\r\n                        magic(t1)\r\n                        magic(t2)\r\n                        self.unification.unify(e.at, expected, TConstructor(e.at, core(\"Float\"), []))\r\n                        e.ECall(target = target, arguments = [a1.Argument(value = e1), a2.Argument(value = e2)])\r\n                    | [a1, a2] {\r\n                        operator == \"+\" || operator == \"-\" || operator == \"*\" || operator == \"^\"\r\n                    } =>\r\n                        let t1 = self.unification.freshUnificationVariable(e.at)\r\n                        let t2 = self.unification.freshUnificationVariable(e.at)\r\n                        let e1 = self.inferTerm(environment, t1, a1.value)\r\n                        let e2 = self.inferTerm(environment, t2, a2.value)\r\n                        let magic: Type => Option[String] = {t =>\r\n                            self.unification.substitute(t).{\r\n                                | TConstructor(_, name, []) {name == core(\"JsValue\")} => Some(\"JsValue\")\r\n                                | TConstructor(_, name, []) {name == core(\"Float\")} => Some(\"Float\")\r\n                                | TConstructor(_, name, []) {name == core(\"Int\")} => Some(\"Int\")\r\n                                | TConstructor(_, name, []) {operator == \"+\" && name == core(\"String\")} => Some(\"String\")\r\n                                | _ => None\r\n                            }\r\n                        }\r\n                        let chooseType: (Option[String], Option[String]) => Unit = {\r\n                            | Some(\"JsValue\"), _ =>\r\n                                self.unification.unify(e2.at, t1, t2)\r\n                                self.unification.unify(e.at, expected, t1)\r\n                            | _, Some(\"JsValue\") =>\r\n                                self.unification.unify(e1.at, t2, t1)\r\n                                self.unification.unify(e.at, expected, t2)\r\n                            | Some(\"String\"), Some(_) => self.unification.unify(e.at, expected, t1)\r\n                            | Some(_), Some(\"String\") => self.unification.unify(e.at, expected, t2)\r\n                            | Some(\"Float\"), Some(_) => self.unification.unify(e.at, expected, t1)\r\n                            | Some(_), Some(\"Float\") => self.unification.unify(e.at, expected, t2)\r\n                            | Some(\"Int\"), Some(_) => self.unification.unify(e.at, expected, t1)\r\n                            | Some(_), Some(\"Int\") => self.unification.unify(e.at, expected, t2)\r\n                            | Some(_), None =>\r\n                                self.unification.unify(e2.at, t1, t2)\r\n                                self.unification.unify(e.at, expected, t1)\r\n                            | None, Some(_) =>\r\n                                self.unification.unify(e1.at, t2, t1)\r\n                                self.unification.unify(e.at, expected, t2)\r\n                            | _, _ {self.lspHook.isEnabled()} =>\r\n                            | Some(_), Some(_) =>\r\n                                throw(CompileError(e.at, \"Operators on these types not currently supported\"))\r\n                            | None, None =>\r\n                                throw(CompileError(e.at, \"Operators on unknown types not currently supported\"))\r\n                        }\r\n                        chooseType(magic(t1), magic(t2))\r\n                        e.ECall(target = target, arguments = [a1.Argument(value = e1), a2.Argument(value = e2)])\r\n                    | _ {self.lspHook.isEnabled()} =>\r\n                        term\r\n                    | _ =>\r\n                        fail(e.at, \"Unknown operator: \" + operator)\r\n                }\r\n            | _ => fail(term.at, \"Call expected\")\r\n        }\r\n    }\r\n\r\n    inferEtaExpansion(\r\n        environment: Environment\r\n        expected: Type\r\n        at: Location\r\n        signature: Signature\r\n        term: Term\r\n    ): Term {\r\n        let parameters = signature.parameters.filter {_.default.isEmpty()}.map {p =>\r\n            p.name\r\n        }\r\n        let effect1 = self.unification.freshUnificationVariable(at)\r\n        let body = ECall(at, DynamicCall(term, False), effect1, [], parameters.map {x =>\r\n            Argument(at, Some(x), EVariable(at, x))\r\n        }, [])\r\n        let effect2 = self.unification.freshUnificationVariable(at)\r\n        let lambda = ELambda(at, Lambda(at, effect2, [MatchCase(\r\n            at = at\r\n            patterns = parameters.map {PVariable(at, Some(_))}\r\n            guards = []\r\n            body = body\r\n        )]))\r\n        self.inferTerm(environment.Environment(effect = effect2), expected, lambda)\r\n    }\r\n\r\n    inferArguments(\r\n        callAt: Location\r\n        callName: String\r\n        environment: Environment\r\n        parameters: List[Parameter]\r\n        arguments: List[Argument]\r\n    ): List[Argument] {\r\n        if(self.lspHook.isEnabled()) {\r\n            arguments.pairs().each {| Pair(i, a) =>\r\n                let p = parameters.find {p => a.name.any {_ == p.name}}\r\n                if(self.lspHook.isAt(a.at) || p.any {self.lspHook.isDefinedAt(_.at)}) {\r\n                    self.lspHook.emit(\r\n                        InferArgumentHook(\r\n                            self.unification, environment\r\n                            False, callAt, callName, parameters, arguments, i\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        mutable remainingArguments = arguments.toArray()\r\n        remainingArguments.reverse()\r\n        let newArguments = parameters.map {p =>\r\n            let t = p.valueType\r\n            function defaultArgument(): Argument {\r\n                p.default.map {e =>\r\n                    let e2 = self.inferTerm(environment, t, e)\r\n                    Argument(callAt, Some(p.name), e2)\r\n                }.else {\r\n                    if(!self.lspHook.isEnabled()) {\r\n                        fail(callAt, \"Missing argument: \" + p.name)\r\n                    } else {\r\n                        Argument(callAt, Some(p.name), EVariable(callAt, \"\"))\r\n                    }\r\n                }\r\n            }\r\n            if(remainingArguments.isEmpty()) {\r\n                defaultArgument()\r\n            } elseIf {remainingArguments.grabLast().name.isEmpty()} {\r\n                let a = remainingArguments.pop().grab()\r\n                let e2 = self.inferTerm(environment, t, a.value)\r\n                Argument(a.at, Some(p.name), e2)\r\n            } else {\r\n                remainingArguments.find {_.name.contains(p.name)}.map {| Argument(at, _, e) =>\r\n                    remainingArguments.indexWhere {_.name.contains(p.name)}.each {remainingArguments.delete(_, 1)}\r\n                    let e2 = self.inferTerm(environment, t, e)\r\n                    Argument(at, Some(p.name), e2)\r\n                }.else {\r\n                    defaultArgument()\r\n                }\r\n            }\r\n        }\r\n        if(!self.lspHook.isEnabled()) {\r\n            remainingArguments.first().each {\r\n                | Argument(callAt, None, _) => fail(callAt, \"Too many arguments\")\r\n                | Argument(callAt, Some(n), _) => fail(callAt, \"Unknown argument: \" + n)\r\n            }\r\n            newArguments\r\n        } else {\r\n            [...newArguments, ...remainingArguments.drain().map {a => a.Argument(\r\n                value = self.inferTerm(environment, self.unification.freshUnificationVariable(a.at), a.value)\r\n            )}]\r\n        }\r\n    }\r\n\r\n    lookup(\r\n        environment: Environment\r\n        expected: Type\r\n        at: Location\r\n        symbol: String\r\n        typeArguments: List[Type]\r\n        arguments: Option[List[Argument]]\r\n    ): Option[Instantiated] {\r\n        self.lookupOption(environment, expected, at, symbol, typeArguments).elseIf {self.lspHook.isEnabled()} {\r\n            let instantiated = Instantiated([], Scheme(arguments.isEmpty(), False, False, False, Signature(\r\n                at = at\r\n                name = symbol\r\n                member = False // Should be true when looking up a member or method\r\n                generics = []\r\n                constraints = []\r\n                parameters = arguments.toList().flatten().pairs().map {| Pair(i, a) =>\r\n                    let t = self.unification.freshUnificationVariable(at)\r\n                    Parameter(a.at, False, a.name.else {\"_p\" + i}, t, None)\r\n                }\r\n                returnType = self.unification.freshUnificationVariable(at)\r\n                effect = self.unification.freshUnificationVariable(at)\r\n            )))\r\n            if(!self.lspHook.isAt(at) && !self.missing.has(symbol)) {\r\n                self.missing.set(symbol, Pair(instantiated, arguments))\r\n            }\r\n            instantiated\r\n        }\r\n    }\r\n\r\n    lookupOption(environment: Environment, expected: Type, at: Location, symbol: String, typeArguments: List[Type]): Option[Instantiated] {\r\n        let hook = if(self.lspHook.isAt(at)) {\r\n            let symbolHook = SymbolHook(symbol, at, at)\r\n            let selfName = environment.selfVariable\r\n            let h = InferLookupHook(self.unification, environment, expected, selfName, Box(symbolHook), Box(None))\r\n            self.lspHook.emit(h)\r\n            h\r\n        }\r\n\r\n        environment.symbols.get(symbol).map: scheme =>\r\n\r\n        let instantiation =\r\n            if(!typeArguments.isEmpty()) {\r\n                let newTypeArguments = if(!scheme.isVariable && scheme.signature.generics.first().any {_ == \"Q$\"}) {\r\n                    [self.unification.freshUnificationVariable(at), ...typeArguments]\r\n                } else {\r\n                    typeArguments\r\n                }\r\n                if(scheme.signature.generics.size() != newTypeArguments.size() && !self.lspHook.isEnabled()) {\r\n                    let extra = newTypeArguments.size() - typeArguments.size()\r\n                    throw(CompileError(at\r\n                        \"Wrong number of type arguments for \" + symbol +\r\n                        \", expected \" + (scheme.signature.generics.size() - extra) +\r\n                        \", got \" + (newTypeArguments.size() - extra)\r\n                    ))\r\n                }\r\n                scheme.signature.generics.zip(newTypeArguments)\r\n            } else {\r\n                scheme.signature.generics.map {name =>\r\n                    Pair(name, self.unification.freshUnificationVariable(at))\r\n                }\r\n            }\r\n\r\n        let instantiationMap = instantiation.toMap()\r\n        let parameters = scheme.signature.parameters.map {p =>\r\n            p.Parameter(valueType = self.unification.instantiate(instantiationMap, p.valueType))\r\n        }\r\n        let returnType = self.unification.instantiate(instantiationMap, scheme.signature.returnType)\r\n        let effect = self.unification.instantiate(instantiationMap, scheme.signature.effect)\r\n\r\n        scheme.signature.constraints.each {c =>\r\n            let generics = c.generics.map {self.unification.instantiate(instantiationMap, _)}\r\n            self.unification.constrain(at, generics.grabFirst(), c.name, generics.dropFirst())\r\n        }\r\n\r\n        let signature = scheme.signature.Signature(\r\n            generics = []\r\n            constraints = []\r\n            parameters = parameters\r\n            returnType = returnType\r\n            effect = effect\r\n        )\r\n\r\n        let instantiated = Instantiated(\r\n            typeArguments = instantiation\r\n            scheme = scheme.Scheme(signature = signature)\r\n        )\r\n\r\n        if(self.lspHook.isAt(at) || self.lspHook.isDefinedAt(scheme.signature.at)) {\r\n            let symbolHook = SymbolHook(symbol, at, scheme.signature.at)\r\n            let emittedHook = hook.else {\r\n                let selfName = environment.selfVariable\r\n                let h = InferLookupHook(self.unification, environment, expected, selfName, Box(symbolHook), Box(None))\r\n                self.lspHook.emit(h)\r\n                h\r\n            }.{\r\n                | InferLookupHook h =>\r\n                    h.symbol.value = symbolHook\r\n                    h.instantiated.value = Some(instantiated)\r\n                | _ =>\r\n            }\r\n        }\r\n\r\n        instantiated\r\n\r\n    }\r\n\r\n}\r\n\r\nconstraintsToInstances(constraints: List[Constraint]): Map[InstanceKey, InstanceValue] {\r\n    constraints.map {c =>\r\n        let typeName = c.generics.grabFirst().{\r\n            | TConstructor(_, name, _) => name\r\n            | TVariable(at, i) => fail(c.at, \"Unexpected unification variable: $\" + i)\r\n        }\r\n        Pair(\r\n            InstanceKey(c.name, typeName)\r\n            InstanceValue(\r\n                generics = []\r\n                constraints = []\r\n                moduleKey = ModuleKey(PackagePair(\"\", \"\"), [], \"\")\r\n                traitName = c.name\r\n                typeArguments = c.generics\r\n            )\r\n        )\r\n    }.toMap()\r\n}\r\n"
    ],
    "names": [
        "Inference",
        "unification",
        "missing",
        "lspHook",
        "new",
        "modules",
        "isEnabled",
        "fail",
        "at",
        "message",
        "throw",
        "CompileError",
        "core",
        "name",
        "constraintsToInstances",
        "constraints",
        "toMap",
        "map",
        "c",
        "typeName",
        "TConstructor",
        "i",
        "grabFirst",
        "generics",
        "Pair",
        "InstanceKey",
        "InstanceValue",
        "ModuleKey",
        "PackagePair",
        "inferModule",
        "self",
        "module",
        "otherModules",
        "environment",
        "errors",
        "traits",
        "catchManyInto",
        "w1",
        "inferTraitDefinition",
        "instances",
        "inferInstanceDefinition",
        "lets",
        "inferLetDefinition",
        "functions",
        "inferFunctionDefinition",
        "extends",
        "inferExtendDefinition",
        "drain",
        "error",
        "rethrow",
        "allErrors",
        "CompileErrors",
        "first",
        "result",
        "Module",
        "moduleKey",
        "imports",
        "types",
        "subsititution",
        "Substitution",
        "substitution",
        "substituteModule",
        "definition",
        "DTrait",
        "generatorParameters",
        "methods",
        "methodDefaults",
        "methodGenerators",
        "derived",
        "withLocalInstances",
        "traitName",
        "traitDefinition",
        "else",
        "get",
        "typeArguments",
        "instantiationMap",
        "zip",
        "found",
        "filter",
        "signature",
        "traitMethod",
        "isEmpty",
        "duplicateMethod",
        "DInstance",
        "generatorArguments",
        "catchMany",
        "instanceFunction",
        "methodName",
        "traitMethodName",
        "reverse",
        "dropWhile",
        "traitMethodScheme",
        "symbols",
        "parameters",
        "p",
        "Parameter",
        "mutable",
        "instantiate",
        "valueType",
        "default",
        "returnType",
        "instanceParameter",
        "traitParameter",
        "unify",
        "isAt",
        "isDefinedAt",
        "symbolHook",
        "SymbolHook",
        "h",
        "InferLookupHook",
        "None",
        "Box",
        "emit",
        "value",
        "inferTerm",
        "variableType",
        "DLet",
        "selfParameter",
        "type",
        "method",
        "Signature",
        "member",
        "effect",
        "body",
        "Lambda",
        "cases",
        "case",
        "MatchCase",
        "PVariable",
        "patterns",
        "guards",
        "function",
        "DFunction",
        "Environment",
        "modulePrefix",
        "Some",
        "DExtend",
        "InferFunctionDefinitionHook",
        "noEffect",
        "scheme",
        "Scheme",
        "InferParameterHook",
        "parameterMap",
        "environment2",
        "addAll",
        "selfVariable",
        "parameterTypes",
        "second",
        "functionType",
        "inferLambda",
        "expected",
        "lambda",
        "unitName",
        "returnsUnit",
        "ts",
        "startsWith",
        "grabLast",
        "n",
        "substitute",
        "ESequential",
        "EVariant",
        "newEnvironment",
        "inferMatchCase",
        "freshUnificationVariable",
        "environment1",
        "foldLeft",
        "t",
        "mapValues",
        "inferPattern",
        "toArray",
        "environment3",
        "g",
        "guardType",
        "guardTerm",
        "term",
        "pattern",
        "MatchGuard",
        "PVariantAs",
        "variableAt",
        "PAlias",
        "InferPatternHook",
        "literal",
        "coreTypeName",
        "PString",
        "PInt",
        "PChar",
        "variable",
        "add",
        "variableOption",
        "instantiated",
        "lookup",
        "isNewtype",
        "sortBy",
        "paramtersWithFieldAt",
        "TVariable",
        "index",
        "recordType",
        "join",
        "toList",
        "PVariant",
        "itemType",
        "listType",
        "head",
        "tail",
        "headVariables",
        "tailVariables",
        "parameter",
        "w2",
        "hookRecordTypeBox",
        "box",
        "InferTermHook",
        "EString",
        "EChar",
        "EInt",
        "EFloat",
        "EVariable",
        "e",
        "isVariable",
        "inferEtaExpansion",
        "EField",
        "record",
        "fieldNames",
        "dropFirst",
        "split",
        "definedAt",
        "collectFirst",
        "fieldName",
        "fieldType",
        "field",
        "any",
        "InferRecordFieldHook",
        "elseIf",
        "find",
        "pairs",
        "t1",
        "newtype",
        "show",
        "memberPrefix",
        "memberName",
        "EWildcard",
        "grab",
        "EList",
        "items",
        "item",
        "spread",
        "before",
        "after",
        "InferSequentialStartHook",
        "newExpected",
        "EPipe",
        "ELambda",
        "at1",
        "effect1",
        "at2",
        "at3",
        "effect3",
        "newCases",
        "newPipe",
        "unitType",
        "semicolonUnit",
        "ECall",
        "target",
        "DynamicCall",
        "x",
        "arguments",
        "a",
        "l",
        "Argument",
        "dictionaries",
        "f",
        "tailCall",
        "ELet",
        "EFunctions",
        "insideAt",
        "InferLambdaStartHook",
        "inferArguments",
        "EVariantIs",
        "ECopy",
        "InferArgumentHook",
        "parameterNames",
        "each",
        "Location",
        "file",
        "line",
        "column",
        "e1",
        "affect",
        "StaticCall",
        "call",
        "isAsciiLetter",
        "inferOperator",
        "inferLambdaCall",
        "inferFunctionCall",
        "isTraitMethod",
        "e2",
        "inferMethodCall",
        "ERecord",
        "fields",
        "fieldTypes",
        "newFields",
        "Field",
        "functionMap",
        "newFunctions",
        "newBody",
        "EAssign",
        "isMutable",
        "inferAssignment",
        "operator",
        "EAssignField",
        "newValue",
        "instantiation",
        "selfArgument",
        "instanceCall",
        "isUnsafeJsAwaitCall",
        "argumentTypes",
        "argument",
        "typeArgument",
        "a1",
        "a2",
        "t2",
        "magic",
        "chooseType",
        "effect2",
        "callAt",
        "callName",
        "remainingArguments",
        "newArguments",
        "defaultArgument",
        "pop",
        "contains",
        "indexWhere",
        "delete",
        "symbol",
        "lookupOption",
        "Instantiated",
        "flatten",
        "has",
        "set",
        "hook",
        "selfName",
        "newTypeArguments",
        "extra",
        "constrain",
        "emittedHook"
    ],
    "mappings": ""
}