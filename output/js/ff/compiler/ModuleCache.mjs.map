{
    "version": 3,
    "sources": [
        "../../../../../compiler/ModuleCache.ff"
    ],
    "sourcesContent": [
        "import Syntax\r\n\r\nclass ModuleCache(\r\n    version: Int\r\n    mutable parsedModules: Map[String, Pair[Module, Int]]\r\n    mutable resolvedModules: Map[String, Pair[Module, Int]]\r\n    mutable derivedModules: Map[String, Pair[Module, Int]]\r\n    mutable inferredModules: Map[String, Pair[Module, Int]]\r\n    mutable emittedModules: Map[String, Int]\r\n)\r\n\r\nnew(version: Int): ModuleCache {\r\n    ModuleCache(\r\n        version = version\r\n        parsedModules = Map.new()\r\n        resolvedModules = Map.new()\r\n        derivedModules = Map.new()\r\n        inferredModules = Map.new()\r\n        emittedModules = Map.new()\r\n    )\r\n}\r\n\r\nextend self: ModuleCache {\r\n    \r\n    remove(keys: List[String]) {\r\n        if(!keys.isEmpty()):\r\n        self.parsedModules = self.parsedModules.removeList(keys)\r\n        self.resolvedModules = self.resolvedModules.removeList(keys)\r\n        self.derivedModules = self.derivedModules.removeList(keys)\r\n        self.inferredModules = self.inferredModules.removeList(keys)\r\n        self.emittedModules = self.emittedModules.removeList(keys)\r\n    }\r\n    \r\n    invalidate(key: String) {\r\n        //Log.trace(\"Invalidate: \" + uri)\r\n        self.parsedModules.get(key).each: | Pair(module, _) =>\r\n        self.remove([key])\r\n        self.parsedModules.each {| k, Pair(m, _) =>\r\n            if(m.imports.any {i => i.moduleKey == module.moduleKey}) {\r\n                //Log.trace(\"Invalidating due to import of invalidated module: \" + m.packagePair.groupName() + \"/\" + m.file)\r\n                self.remove([k])\r\n            }\r\n        }\r\n    }\r\n    \r\n    filesNotImporting(moduleKey: ModuleKey): List[String] {\r\n        self.parsedModules.toList().collect {| Pair(k, Pair(m, _)) =>\r\n            if(!m.imports.any {i => i.moduleKey == moduleKey}): k\r\n        }\r\n    }\r\n    \r\n    without(newVersion: Int, path: Path): ModuleCache {\r\n        let key = path.absolute()\r\n        if(path.isFile()) {\r\n            self.ModuleCache(\r\n                version = newVersion\r\n                parsedModules = self.parsedModules.remove(key)\r\n                resolvedModules = self.resolvedModules.remove(key)\r\n                derivedModules = self.derivedModules.remove(key)\r\n                inferredModules = self.inferredModules.remove(key)\r\n                emittedModules = self.emittedModules.remove(key)\r\n            )\r\n        } else {\r\n            function invalidated(p: String): Bool {\r\n                p.startsWith(key) && !p.contains(\".firefly/dependencies\") && !p.contains(\".firefly\\\\dependencies\")\r\n            }\r\n            self.ModuleCache(\r\n                version = newVersion\r\n                parsedModules = self.parsedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()\r\n                resolvedModules = self.resolvedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()\r\n                derivedModules = self.derivedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()\r\n                inferredModules = self.inferredModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()\r\n                emittedModules = self.emittedModules.toList().filter {| Pair(p, _) => !invalidated(p)}.toMap()\r\n            )\r\n        }\r\n    }\r\n    \r\n    mergeVersions(cache: ModuleCache): Unit {\r\n        self.parsedModules = mergeVersionedMap(self.parsedModules, cache.parsedModules) {_.second}\r\n        self.resolvedModules = mergeVersionedMap(self.resolvedModules, cache.resolvedModules) {_.second}\r\n        self.derivedModules = mergeVersionedMap(self.derivedModules, cache.derivedModules) {_.second}\r\n        self.inferredModules = mergeVersionedMap(self.inferredModules, cache.inferredModules) {_.second}\r\n        self.emittedModules = mergeVersionedMap(self.emittedModules, cache.emittedModules) {_}\r\n    }\r\n    \r\n    cacheParsedModule(\r\n        packagePaths: Map[PackagePair, Path]\r\n        moduleKey: ModuleKey\r\n        body: Path => Module\r\n    ): Module {\r\n        let path = modulePath(packagePaths, moduleKey)\r\n        self.parsedModules.get(path.absolute()).map {_.first}.else:\r\n        let result = body(path)\r\n        self.parsedModules = self.parsedModules.add(path.absolute(), Pair(result, self.version))\r\n        result\r\n    }\r\n    \r\n    cacheResolvedModule(\r\n        packagePaths: Map[PackagePair, Path]\r\n        moduleKey: ModuleKey\r\n        body: Path => Module\r\n    ): Module {\r\n        let path = modulePath(packagePaths, moduleKey)\r\n        self.resolvedModules.get(path.absolute()).map {_.first}.else:\r\n        let result = body(path)\r\n        self.resolvedModules = self.resolvedModules.add(path.absolute(), Pair(result, self.version))\r\n        result\r\n    }\r\n\r\n    cacheDerivedModule(\r\n        packagePaths: Map[PackagePair, Path]\r\n        moduleKey: ModuleKey\r\n        body: Path => Module\r\n    ): Module {\r\n        let path = modulePath(packagePaths, moduleKey)\r\n        self.derivedModules.get(path.absolute()).map {_.first}.else:\r\n        let result = body(path)\r\n        self.derivedModules = self.derivedModules.add(path.absolute(), Pair(result, self.version))\r\n        result\r\n    }\r\n        \r\n    cacheInferredModule(\r\n        packagePaths: Map[PackagePair, Path]\r\n        moduleKey: ModuleKey\r\n        body: Path => Module\r\n    ): Module {\r\n        let path = modulePath(packagePaths, moduleKey)\r\n        self.inferredModules.get(path.absolute()).map {_.first}.else:\r\n        let result = body(path)\r\n        self.inferredModules = self.inferredModules.add(path.absolute(), Pair(result, self.version))\r\n        result\r\n    }\r\n \r\n    cacheEmittedModule(\r\n        packagePaths: Map[PackagePair, Path]\r\n        moduleKey: ModuleKey\r\n        isMainModule: Bool\r\n        body: Path => Unit\r\n    ): Unit {\r\n        let path = modulePath(packagePaths, moduleKey)\r\n        if(isMainModule || !self.emittedModules.contains(path.absolute())):\r\n        self.emittedModules = self.emittedModules.add(path.absolute(), self.version)\r\n        try {\r\n            body(path)\r\n        } catchAny {error =>\r\n            self.emittedModules = self.emittedModules.remove(path.absolute())\r\n            error.rethrow()\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nmergeVersionedMap[T](oldMap: Map[String, T], newMap: Map[String, T], getVersion: T => Int): Map[String, T] {\r\n    mutable result = newMap\r\n    oldMap.each {k, v =>\r\n        if(!newMap.get(k).any {getVersion(_) >= getVersion(v)}) {\r\n            result = result.add(k, v)\r\n        }\r\n    }\r\n    result\r\n}\r\n\r\nmodulePath(\r\n    packagePaths: Map[PackagePair, Path]\r\n    moduleKey: ModuleKey\r\n): Path {\r\n    let packagePath = packagePaths.get(moduleKey.packagePair).else {\r\n        panic(\"Internal error - package path missing: \" + moduleKey.packagePair.groupName())\r\n    }\r\n    moduleKey.path(packagePath)\r\n}\r\n"
    ],
    "names": [
        "ModuleCache",
        "version",
        "parsedModules",
        "resolvedModules",
        "derivedModules",
        "inferredModules",
        "emittedModules",
        "new",
        "mergeVersionedMap",
        "oldMap",
        "newMap",
        "getVersion",
        "result",
        "each",
        "k",
        "v",
        "any",
        "get",
        "w1",
        "add",
        "modulePath",
        "packagePaths",
        "moduleKey",
        "packagePath",
        "else",
        "packagePair",
        "panic",
        "groupName",
        "path",
        "remove",
        "self",
        "keys",
        "isEmpty",
        "removeList",
        "invalidate",
        "key",
        "module",
        "m",
        "imports",
        "i",
        "equals",
        "filesNotImporting",
        "collect",
        "toList",
        "without",
        "newVersion",
        "absolute",
        "isFile",
        "c",
        "invalidated",
        "p",
        "startsWith",
        "contains",
        "toMap",
        "filter",
        "mergeVersions",
        "cache",
        "second",
        "cacheParsedModule",
        "body",
        "map",
        "first",
        "Pair",
        "cacheResolvedModule",
        "cacheDerivedModule",
        "cacheInferredModule",
        "cacheEmittedModule",
        "isMainModule",
        "error",
        "rethrow"
    ],
    "mappings": ""
}