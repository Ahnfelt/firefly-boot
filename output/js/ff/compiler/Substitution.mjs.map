{
    "version": 3,
    "sources": [
        "../../../../../compiler/Substitution.ff"
    ],
    "sourcesContent": [
        "import Syntax\r\n\r\nclass Substitution(mutable substitution: Map[Int, Type])\r\n\r\ncore(name: String): String {\r\n    \"ff:core/\" + name + \".\" + name\r\n}\r\n\r\nextend self: Substitution {\r\n\r\n    substituteModule(module: Module): Module {\r\n        let lets = module.lets.map { self.substituteLetDefinition(_) }\r\n        let functions = module.functions.map { self.substituteFunctionDefinition(_) }\r\n        let extends = module.extends.map { self.substituteExtendDefinition(_) }\r\n        //let traits = module.traits.map { self.substituteTraitDefinition(_) }\r\n        let instances = module.instances.map { self.substituteInstanceDefinition(_) }\r\n        module.Module(\r\n            //traits = traits,\r\n            instances = instances\r\n            extends = extends\r\n            lets = lets\r\n            functions = functions\r\n        )\r\n    }\r\n\r\n    substituteLetDefinition(definition: DLet): DLet {\r\n        definition.DLet(\r\n            variableType = self.substituteType(definition.variableType)\r\n            value = self.substituteTerm(definition.value)\r\n        )\r\n    }\r\n\r\n    substituteExtendDefinition(definition: DExtend): DExtend {\r\n        definition.DExtend(\r\n            methods = definition.methods.map { self.substituteFunctionDefinition(_) }\r\n        )\r\n    }\r\n\r\n    substituteFunctionDefinition(definition: DFunction): DFunction {\r\n        definition.DFunction(\r\n            signature = self.substituteSignature(definition.signature)\r\n            body = self.substituteLambda(definition.body)\r\n        )\r\n    }\r\n\r\n    substituteSignature(signature: Signature): Signature {\r\n        signature.Signature(\r\n            constraints = signature.constraints.map {self.substituteConstraint(_)}\r\n            parameters = signature.parameters.map {self.substituteParameter(_)}\r\n            returnType = self.substituteType(signature.returnType)\r\n            effect = self.substituteType(signature.effect)\r\n        )\r\n    }\r\n\r\n    substituteConstraint(constraint: Constraint): Constraint {\r\n        constraint.Constraint(\r\n            generics = constraint.generics.map {self.substituteType(_)}\r\n        )\r\n    }\r\n\r\n    substituteParameter(parameter: Parameter): Parameter {\r\n        parameter.Parameter(\r\n            valueType = self.substituteType(parameter.valueType)\r\n            default = parameter.default.map {self.substituteTerm(_)}\r\n        )\r\n    }\r\n\r\n    substituteInstanceDefinition(definition: DInstance): DInstance {\r\n        definition.DInstance(\r\n            methods = definition.methods.map { self.substituteFunctionDefinition(_) }\r\n        )\r\n    }\r\n\r\n    substituteLambda(definition: Lambda): Lambda {\r\n        definition.Lambda(\r\n            effect = self.substituteType(definition.effect)\r\n            cases = definition.cases.map { case =>\r\n                case.MatchCase(\r\n                    guards = case.guards.map { g => g.MatchGuard(term = self.substituteTerm(g.term)) }\r\n                    body = self.substituteTerm(case.body)\r\n                )\r\n            }\r\n        )\r\n    }\r\n\r\n    substituteTerm(term: Term): Term {\r\n        term.{\r\n            | EString _ => term\r\n            | EChar _ => term\r\n            | EInt _ => term\r\n            | EFloat _ => term\r\n            | EVariable _ => term\r\n            | EField e => e.EField(record = self.substituteTerm(e.record))\r\n            | EWildcard e => term\r\n            | EList e => e.EList(\r\n                elementType = self.substituteType(e.elementType)\r\n                items = e.items.map {| Pair(item, b) => Pair(self.substituteTerm(item), b) }\r\n            )\r\n            | ESequential e => e.ESequential(\r\n                before = self.substituteTerm(e.before)\r\n                after = self.substituteTerm(e.after)\r\n            )\r\n            | ELet e => e.ELet(\r\n                valueType = self.substituteType(e.valueType)\r\n                value = self.substituteTerm(e.value)\r\n                body = self.substituteTerm(e.body)\r\n            )\r\n            | ELambda e => e.ELambda(lambda = self.substituteLambda(e.lambda))\r\n            | EVariant e => e.EVariant(\r\n                typeArguments = e.typeArguments.map {self.substituteType(_)}\r\n                arguments = e.arguments.map { _.map {self.substituteArgument(_)} }\r\n            )\r\n            | EVariantIs e => e.EVariantIs(\r\n                typeArguments = e.typeArguments.map {self.substituteType(_)}\r\n            )\r\n            | ECopy e => e.ECopy(\r\n                record = self.substituteTerm(e.record)\r\n                arguments = e.arguments.map {self.substituteField(_)}\r\n            )\r\n            | EPipe e => e.EPipe(\r\n                value = self.substituteTerm(e.value)\r\n                effect = self.substituteType(e.effect)\r\n                function = self.substituteTerm(e.function)\r\n            )\r\n            | ECall e => e.ECall(\r\n                target = e.target.{\r\n                    | DynamicCall call => call.DynamicCall(function = self.substituteTerm(call.function))\r\n                    | StaticCall _ => e.target\r\n                }\r\n                effect = self.substituteType(e.effect)\r\n                typeArguments = e.typeArguments.map {self.substituteType(_)}\r\n                arguments = e.arguments.map {self.substituteArgument(_)}\r\n            )\r\n            | ERecord e => e.ERecord(fields = e.fields.map {self.substituteField(_)})\r\n            | EFunctions e => e.EFunctions(\r\n                functions = e.functions.map {self.substituteFunctionDefinition(_)}\r\n                body = self.substituteTerm(e.body)\r\n            )\r\n            | EAssign e => e.EAssign(value = self.substituteTerm(e.value))\r\n            | EAssignField e => e.EAssignField(\r\n                record = self.substituteTerm(e.record)\r\n                value = self.substituteTerm(e.value)\r\n            )\r\n        }\r\n    }\r\n\r\n    substituteArgument(argument: Argument): Argument {\r\n        argument.Argument(value = self.substituteTerm(argument.value))\r\n    }\r\n\r\n    substituteField(field: Field): Field {\r\n        field.Field(value = self.substituteTerm(field.value))\r\n    }\r\n\r\n    substituteType(type: Type): Type {\r\n        | TVariable(at, i) =>\r\n            if(self.has(i)) {self.substituteType(self.get(i))} else {TConstructor(at, core(\"Nothing\"), [])}\r\n        | TConstructor t =>\r\n            t.TConstructor(generics = t.generics.map {g => self.substituteType(g)})\r\n    }\r\n\r\n    get(index: Int): Type {\r\n        self.substitution.grab(index).{\r\n            | TVariable(_, i) { self.has(i) } =>\r\n                let t = self.get(i)\r\n                self.substitution = self.substitution.add(index, t)\r\n                t\r\n            | TVariable(at, _) =>\r\n                TConstructor(at, core(\"Nothing\"), [])\r\n            | t => t\r\n        }\r\n    }\r\n\r\n    has(index: Int): Bool {\r\n        self.substitution.contains(index)\r\n    }\r\n\r\n}\r\n"
    ],
    "names": [
        "Substitution",
        "substitution",
        "core",
        "name",
        "substituteModule",
        "self",
        "module",
        "lets",
        "map",
        "w1",
        "substituteLetDefinition",
        "functions",
        "substituteFunctionDefinition",
        "extends",
        "substituteExtendDefinition",
        "instances",
        "substituteInstanceDefinition",
        "c",
        "Module",
        "moduleKey",
        "imports",
        "types",
        "traits",
        "definition",
        "DLet",
        "at",
        "substituteType",
        "variableType",
        "substituteTerm",
        "value",
        "DExtend",
        "generics",
        "constraints",
        "type",
        "methods",
        "DFunction",
        "substituteSignature",
        "signature",
        "substituteLambda",
        "body",
        "Signature",
        "member",
        "substituteConstraint",
        "parameters",
        "substituteParameter",
        "returnType",
        "effect",
        "constraint",
        "Constraint",
        "parameter",
        "Parameter",
        "mutable",
        "valueType",
        "default",
        "DInstance",
        "traitName",
        "typeArguments",
        "generatorArguments",
        "derived",
        "Lambda",
        "cases",
        "case",
        "MatchCase",
        "patterns",
        "guards",
        "g",
        "MatchGuard",
        "term",
        "pattern",
        "EString",
        "EChar",
        "EInt",
        "EFloat",
        "EVariable",
        "EField",
        "e",
        "newtype",
        "record",
        "field",
        "EWildcard",
        "EList",
        "elementType",
        "items",
        "item",
        "b",
        "Pair",
        "ESequential",
        "before",
        "after",
        "ELet",
        "ELambda",
        "lambda",
        "EVariant",
        "arguments",
        "substituteArgument",
        "EVariantIs",
        "ECopy",
        "substituteField",
        "EPipe",
        "function",
        "ECall",
        "DynamicCall",
        "call",
        "tailCall",
        "target",
        "dictionaries",
        "ERecord",
        "fields",
        "EFunctions",
        "EAssign",
        "operator",
        "variable",
        "EAssignField",
        "argument",
        "Argument",
        "Field",
        "TVariable",
        "i",
        "has",
        "get",
        "TConstructor",
        "t",
        "index",
        "grab",
        "add",
        "contains"
    ],
    "mappings": ""
}