{
    "version": 3,
    "sources": [
        "../../../../../compiler/Parser.ff"
    ],
    "sourcesContent": [
        "import Token\r\nimport Wildcards\r\nimport Syntax\r\nimport LspHook\r\n\r\nclass Parser(\r\n    moduleKey: ModuleKey\r\n    tokens: List[Token]\r\n    end: Token\r\n    targetIsNode: Bool\r\n    lspHook: LspHook\r\n    mutable lspEmittedArgumentHook: Bool\r\n    mutable offset: Int\r\n    mutable nextUnificationVariableIndex: Int\r\n)\r\n\r\ndata Poly(generics: List[String], constraints: List[Constraint])\r\n\r\nnew(\r\n    moduleKey: ModuleKey\r\n    tokens: List[Token]\r\n    targetIsNode: Bool\r\n    lspHook: LspHook\r\n): Parser {\r\n    Parser(\r\n        moduleKey = moduleKey\r\n        tokens = tokens\r\n        end = tokens.grabLast()\r\n        targetIsNode = targetIsNode\r\n        lspHook = lspHook\r\n        lspEmittedArgumentHook = False\r\n        offset = 0\r\n        nextUnificationVariableIndex = 1 // To avoid collision with the unification and resolver\r\n    )\r\n}\r\n\r\nextend self: Parser {\r\n\r\n    fail[T](at: Location, message: String): T {\r\n        panic(message + \" \" + at.show())\r\n    }\r\n\r\n    behind(): Token {\r\n        if(self.offset == 0) {self.current()} else {\r\n            if(self.offset - 1 < self.tokens.size()) {self.tokens.grab(self.offset - 1)} else {self.end}\r\n        }\r\n    }\r\n\r\n    current(): Token {\r\n        if(self.offset < self.tokens.size()) {self.tokens.grab(self.offset)} else {self.end}\r\n    }\r\n\r\n    ahead(): Token {\r\n        if(self.offset + 1 < self.tokens.size()) {self.tokens.grab(self.offset + 1)} else {self.end}\r\n    }\r\n\r\n    aheadAhead(): Token {\r\n        if(self.offset + 2 < self.tokens.size()) {self.tokens.grab(self.offset + 2)} else {self.end}\r\n    }\r\n\r\n    skip(kind: TokenKind): Token {\r\n        let c = self.current()\r\n        if(c.kind != kind) {\r\n            if(self.lspHook.isEnabled() && kind == LUpper && c.kind == LLower) {} else:\r\n            throw(CompileError(c.at(), \"Expected \" + Show.show(kind) + \", got \" + c.raw()))\r\n        }\r\n        self.offset += 1\r\n        c\r\n    }\r\n\r\n    rawSkip(kind: TokenKind, value: String): Token {\r\n        let c = self.current()\r\n        if(c.kind != kind) {\r\n            if(self.lspHook.isEnabled() && (value == \")\" || value == \"]\" || value == \"}\")) {} else:\r\n            throw(CompileError(c.at(), \"Expected \" + Show.show(kind) + \" \" + value + \", got \" + c.raw()))\r\n        }\r\n        if(!c.rawIs(value)) {\r\n            if(self.lspHook.isEnabled() && (value == \")\" || value == \"]\" || value == \"}\")) {self.offset -= 1} else:\r\n            throw(CompileError(c.at(), \"Expected \" + value + \" got \" + c.raw()))\r\n        }\r\n        self.offset += 1\r\n        c\r\n    }\r\n\r\n    freshUnificationVariable(at: Location): Type {\r\n        let result = TVariable(at, self.nextUnificationVariableIndex)\r\n        self.nextUnificationVariableIndex += 3\r\n        result\r\n    }\r\n\r\n    currentIsSeparator(kind: TokenKind): Bool {\r\n        self.current().is(kind) || self.current().is(LSeparator)\r\n    }\r\n\r\n    skipSeparator(kind: TokenKind): Token {\r\n        if(self.current().is(LSeparator)) {\r\n            self.skip(LSeparator)\r\n        } else {\r\n            self.skip(kind)\r\n        }\r\n    }\r\n\r\n    parseModuleWithoutPackageInfo(): Module {\r\n        let moduleWithPackageInfo = self.parseModuleWithPackageInfo()\r\n        moduleWithPackageInfo.packageInfo.each {info =>\r\n            throw(CompileError(info.package.at, \"Package and dependencies already declared in package.ff\"))\r\n        }\r\n        moduleWithPackageInfo.module\r\n    }\r\n\r\n    parseModuleWithPackageInfo(): ModuleWithPackageInfo {\r\n        let packageInfo = if(self.current().is(LKeyword) && self.current().rawIs3(\"package\", \"dependency\", \"include\")) {\r\n            self.parsePackageInfo()\r\n        }\r\n        let module = self.parseModule()\r\n        ModuleWithPackageInfo(packageInfo, module)\r\n    }\r\n\r\n    parsePackageInfo(): PackageInfo {\r\n        let location = self.current().at()\r\n        let package = if(self.current().is(LKeyword) && self.current().rawIs(\"package\")) {\r\n            let p = self.parsePackageDefinition()\r\n            if(!self.current().is(LEnd)) {self.skipSeparator(LSemicolon)}\r\n            p\r\n        } else {\r\n            DPackage(\r\n                location\r\n                self.moduleKey.packagePair\r\n                Version(location, 0, 0, 0)\r\n                TargetNames(node = self.targetIsNode, browser = !self.targetIsNode)\r\n            )\r\n        }\r\n        if(self.current().is(LKeyword) && self.current().rawIs(\"package\")) {\r\n            throw(CompileError(self.current().at(), \"Duplicate package definition\"))\r\n        }\r\n        /* TODO: if(self.package != None && self.current().is(LKeyword) && self.current().rawIs(\"dependency\")) {\r\n            self.fail(self.current().at(), \"Dependencies must be defined in the same file as the package declaration\")\r\n        }*/\r\n        let dependencies = Array.new[DDependency]()\r\n        while {self.current().is(LKeyword) && self.current().rawIs(\"dependency\")} {\r\n            dependencies.push(self.parseDependencyDefinition(package.targets))\r\n            if(!self.current().is(LEnd)) {self.skipSeparator(LSemicolon)}\r\n        }\r\n        let includes = Array.new[DInclude]()\r\n        while {self.current().is(LKeyword) && self.current().rawIs(\"include\")} {\r\n            includes.push(self.parseIncludeDefinition())\r\n            if(!self.current().is(LEnd)) {self.skipSeparator(LSemicolon)}\r\n        }\r\n        // TODO: When this method is called directly for package.ff, check that the whole file has been consumed\r\n        PackageInfo(package, dependencies.toList(), includes.toList())\r\n    }\r\n\r\n    parseModule(): Module {\r\n        let imports = Array.new[DImport]()\r\n        let types = Array.new[DType]()\r\n        let traits = Array.new[DTrait]()\r\n        let instances = Array.new[DInstance]()\r\n        let extends = Array.new[DExtend]()\r\n        let lets = Array.new[DLet]()\r\n        let functions = Array.new[DFunction]()\r\n        while {!self.current().is(LEnd)} {\r\n            if(self.current().is(LLower) && (self.ahead().is(LAssign) || self.ahead().is(LColon))) {\r\n                lets.push(self.parseLetDefinition())\r\n            } elseIf {self.current().is(LLower)} {\r\n                functions.push(self.parseFunctionDefinition(member = False))\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs(\"extend\")} {\r\n                extends.push(self.parseExtendDefinition())\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs(\"trait\")} {\r\n                traits.push(self.parseTraitDefinition())\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs(\"instance\")} {\r\n                instances.push(self.parseInstanceDefinition())\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs4(\"data\", \"class\", \"capability\", \"newtype\")} {\r\n                types.push(self.parseTypeDefinition())\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs(\"import\")} {\r\n                if(self.lspHook.isEnabled() && self.ahead().is(LLower) && !self.aheadAhead().is(LDot)) {\r\n                    self.skip(LKeyword)\r\n                    self.skip(LLower)\r\n                } else {\r\n                    imports.push(self.parseImportDefinition(self.moduleKey.packagePair))\r\n                }\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs(\"include\")} {\r\n                throw(CompileError(self.current().at()\r\n                    \"Includes must be at the top of the file or below 'package'\"\r\n                ))\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs(\"dependency\")} {\r\n                throw(CompileError(self.current().at()\r\n                    \"Dependencies must be at the top of the file or below 'package'\"\r\n                ))\r\n            } elseIf {self.current().is(LKeyword) && self.current().rawIs(\"package\")} {\r\n                throw(CompileError(self.current().at()\r\n                    \"Package definition must be at the top of the file\"\r\n                ))\r\n            } else {\r\n                self.skip(LEnd)\r\n            }\r\n            if(!self.current().is(LEnd)) {self.skipSeparator(LSemicolon)}\r\n        }\r\n\r\n        Module(\r\n            moduleKey = self.moduleKey\r\n            imports = imports.toList()\r\n            lets = lets.toList()\r\n            functions = functions.toList()\r\n            extends = extends.toList()\r\n            types = types.toList()\r\n            traits = traits.toList()\r\n            instances = instances.toList()\r\n        )\r\n    }\r\n\r\n    parseLetDefinition(): DLet {\r\n        if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n        let nameToken = self.skip(LLower)\r\n        let variableType = if(self.current().is(LColon)) {\r\n            self.skip(LColon)\r\n            self.parseType()\r\n        } else {self.freshUnificationVariable(nameToken.at())}\r\n        self.skip(LAssign)\r\n        let value = self.parseTerm()\r\n        let retult = DLet(nameToken.at(), nameToken.raw(), variableType, value)\r\n        if(self.lspHook.trackSymbols) {\r\n            self.lspHook.emit(ParseSymbolEnd(\r\n                name = nameToken.raw()\r\n                kind = SLet(mutable = False)\r\n                selectionStart = nameToken.at()\r\n                selectionEnd = nameToken.end()\r\n                start = nameToken.at()\r\n                end = self.behind().end()\r\n            ))\r\n        }\r\n        retult\r\n    }\r\n\r\n    parseFunctionDefinition(member: Bool): DFunction {\r\n        if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n        let signature = self.parseSignature(member)\r\n        let body = self.parseLambda(signature.parameters.size())\r\n        let result = DFunction(\r\n            signature.at\r\n            signature\r\n            body\r\n        )\r\n        if(self.lspHook.trackSymbols) {\r\n            self.lspHook.emit(ParseSymbolEnd(\r\n                name = signature.name\r\n                kind = SFunction(member)\r\n                selectionStart = signature.at\r\n                selectionEnd = signature.at.Location(column = signature.at.column + signature.name.size())\r\n                start = signature.at\r\n                end = self.behind().end()\r\n            ))\r\n        }\r\n        result\r\n    }\r\n\r\n    parseSignature(member: Bool): Signature {\r\n        let nameToken = self.skip(LLower)\r\n        let poly = if(self.current().rawIs(\"[\")) {self.parseTypeParameters()} else {Poly([], [])}\r\n        let parameters = if(self.lspHook.isEnabled() && !self.current().rawIs(\"(\")) {[]} else {self.parseFunctionParameters()}\r\n        let returnType = if(self.current().is(LColon)) {\r\n            self.skip(LColon)\r\n            self.parseType()\r\n        } else {\r\n            TConstructor(self.current().at(), \"ff:core/Unit.Unit\", [])\r\n        }\r\n        let temporaryEffect = TConstructor(nameToken.at(), \"TemporaryEffect$\", [])\r\n        Signature(nameToken.at(), nameToken.raw(), member, poly.generics, poly.constraints, parameters, returnType, temporaryEffect)\r\n    }\r\n\r\n    parseExtendDefinition(): DExtend {\r\n        if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n        let extendToken = self.rawSkip(LKeyword, \"extend\")\r\n        let nameToken = self.skip(LLower)\r\n        let poly = if(self.current().rawIs(\"[\")) {self.parseTypeParameters()} else {Poly([], [])}\r\n        self.skip(LColon)\r\n        let type = self.parseType()\r\n        self.rawSkip(LBracketLeft, \"{\")\r\n        let methods = Array.new[DFunction]()\r\n        while {!self.current().is(LBracketRight)} {\r\n            methods.push(self.parseFunctionDefinition(member = True))\r\n            if(!self.current().is(LBracketRight)) {self.skipSeparator(LSemicolon)}\r\n        }\r\n        self.rawSkip(LBracketRight, \"}\")\r\n        if(self.lspHook.trackSymbols) {\r\n            mutable name = type.show([])\r\n            poly.generics.zip(poly.constraints).each {| Pair(generic, constraint) => \r\n                name = name.replace(\"[\" + generic + \"]\",  \"[\" + generic + \": \" + constraint.name + \"]\")\r\n                name = name.replace(\"[\" + generic + \",\",  \"[\" + generic + \": \" + constraint.name + \",\")\r\n                name = name.replace(\", \" + generic + \",\", \", \" + generic + \": \" + constraint.name + \",\")\r\n                name = name.replace(\", \" + generic + \"]\", \", \" + generic + \": \" + constraint.name + \"]\")\r\n            }\r\n            self.lspHook.emit(ParseSymbolEnd(\r\n                name = name\r\n                kind = SExtend\r\n                selectionStart = nameToken.at()\r\n                selectionEnd = nameToken.end()\r\n                start = extendToken.at()\r\n                end = self.behind().end()\r\n            ))\r\n        }        \r\n        DExtend(\r\n            nameToken.at()\r\n            nameToken.raw()\r\n            poly.generics\r\n            poly.constraints\r\n            type\r\n            methods.toList()\r\n        )\r\n    }\r\n\r\n    parseTraitDefinition(): DTrait {\r\n        if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n        let traitToken = self.rawSkip(LKeyword, \"trait\")\r\n        let typeParameterToken = self.skip(LUpper)\r\n        self.skip(LColon)\r\n        let nameToken = self.skip(LUpper)\r\n        let poly = if(!self.current().rawIs(\"[\")) {Poly([], [])} else {self.parseTypeParameters()}\r\n        let constraints = Array.new[Constraint]()\r\n        while {self.current().is(LColon)} {\r\n            self.fail(self.current().at(), \"Trait constraints is not yet implemented\")\r\n            self.skip(LColon)\r\n            let constraint = self.parseConstraint()\r\n            constraints.push(constraint.Constraint(generics =\r\n                [TConstructor(typeParameterToken.at(), typeParameterToken.raw(), []), ...constraint.generics]\r\n            ))\r\n        }\r\n        let generatorParameters = if(!self.current().rawIs(\"(\")) {[]} else {self.parseFunctionParameters()}\r\n        let methodGenerators = Array.new[Pair[String, Lambda]]()\r\n        let methodDefaults = Array.new[Pair[String, Lambda]]()\r\n        let methodSignatures = if(!self.current().rawIs(\"{\")) {[]} else {\r\n            let signatures = Array.new[Signature]()\r\n            self.rawSkip(LBracketLeft, \"{\")\r\n            while {!self.current().is(LBracketRight)} {\r\n                if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n                let signatureNameToken = self.current()\r\n                let signature = self.parseSignature(member = True)\r\n                if(self.lspHook.trackSymbols) {\r\n                    self.lspHook.emit(ParseSymbolEnd(\r\n                        name = signatureNameToken.raw() \r\n                        kind = STraitFunction\r\n                        selectionStart = signatureNameToken.at()\r\n                        selectionEnd = signatureNameToken.end()\r\n                        start = signatureNameToken.at()\r\n                        end = self.behind().end()\r\n                    ))\r\n                }        \r\n                signatures.push(signature)\r\n                if(self.current().rawIs(\"{\")) {\r\n                    let generator = self.ahead().is(LKeyword) && self.ahead().rawIs(\"generate\")\r\n                    let body = self.parseLambda(signature.parameters.size(), ignoreGenerateKeyword = True)\r\n                    if(generator) {\r\n                        methodGenerators.push(Pair(signature.name, body))\r\n                    } else {\r\n                        methodDefaults.push(Pair(signature.name, body))\r\n                    }\r\n                }\r\n                if(!self.current().is(LBracketRight)) {self.skipSeparator(LSemicolon)}\r\n            }\r\n            self.rawSkip(LBracketRight, \"}\")\r\n            signatures.toList()\r\n        }\r\n        if(self.lspHook.trackSymbols) {\r\n            self.lspHook.emit(ParseSymbolEnd(\r\n                name = nameToken.raw() \r\n                kind = STrait \r\n                selectionStart = nameToken.at()\r\n                selectionEnd = nameToken.end()\r\n                start = traitToken.at()\r\n                end = self.behind().end()\r\n            ))\r\n        }        \r\n        DTrait(\r\n            nameToken.at()\r\n            nameToken.raw()\r\n            [typeParameterToken.raw(), ...poly.generics]\r\n            [...constraints.toList(), ...poly.constraints]\r\n            generatorParameters\r\n            methodSignatures\r\n            methodDefaults.toList()\r\n            methodGenerators.toList()\r\n        )\r\n    }\r\n\r\n    parseInstanceDefinition(): DInstance {\r\n        if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n        let instanceToken = self.rawSkip(LKeyword, \"instance\")\r\n        let token = self.skip(LUpper)\r\n        let poly = if(!self.current().rawIs(\"[\")) {Poly([], [])} else {self.parseTypeParameters()}\r\n        let typeArguments = Array.new[Type]()\r\n        typeArguments.push(TConstructor(token.at(), token.raw(), poly.generics.map {TConstructor(token.at(), _, [])}))\r\n        self.skip(LColon)\r\n        let nameToken = self.skip(LUpper)\r\n        if(self.current().rawIs(\"[\")) {\r\n            self.rawSkip(LBracketLeft, \"[\")\r\n            while {!self.current().is(LBracketRight)} {\r\n                typeArguments.push(self.parseType())\r\n                if(!self.current().is(LBracketRight)) {self.skip(LComma)}\r\n            }\r\n            self.rawSkip(LBracketRight, \"]\")\r\n        }\r\n        let generatorArguments = self.parseFunctionArguments(nameToken.at(), False).first\r\n        let methods = if(!self.current().rawIs(\"{\")) {[]} else {\r\n            let definitions = Array.new[DFunction]()\r\n            self.rawSkip(LBracketLeft, \"{\")\r\n            while {!self.current().is(LBracketRight)} {\r\n                definitions.push(self.parseFunctionDefinition(member = False))\r\n                if(!self.current().is(LBracketRight)) {self.skipSeparator(LSemicolon)}\r\n            }\r\n            self.rawSkip(LBracketRight, \"}\")\r\n            definitions.toList()\r\n        }\r\n        if(self.lspHook.trackSymbols) {\r\n            let name = token.raw() + \": \" + nameToken.raw()\r\n            self.lspHook.emit(ParseSymbolEnd(\r\n                name = name\r\n                kind = SInstance  \r\n                selectionStart = nameToken.at()\r\n                selectionEnd = nameToken.end()\r\n                start = instanceToken.at()\r\n                end = self.behind().end()\r\n            ))\r\n        }            \r\n        DInstance(\r\n            at = nameToken.at()\r\n            generics = poly.generics\r\n            constraints = poly.constraints\r\n            traitName = nameToken.raw()\r\n            typeArguments = typeArguments.toList()\r\n            generatorArguments = generatorArguments\r\n            methods = methods\r\n            derived = False\r\n        )\r\n    }\r\n\r\n    parseTypeDefinition(): DType {\r\n        if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n        let newtype = self.current().rawIs(\"newtype\")\r\n        let effectParameter = if(self.current().rawIs(\"capability\")) {[\"Q$\"]} else {[]}\r\n        let allowMutable = self.current().rawIs2(\"class\", \"capability\")\r\n        let kindToken = if(self.current().rawIs(\"newtype\")) {\r\n            self.rawSkip(LKeyword, \"newtype\")\r\n        } elseIf {self.current().rawIs(\"data\")} {\r\n            self.rawSkip(LKeyword, \"data\")\r\n        } elseIf {self.current().rawIs(\"class\")} {\r\n            self.rawSkip(LKeyword, \"class\")\r\n        } else {\r\n            self.rawSkip(LKeyword, \"capability\")\r\n        }\r\n        let nameToken = self.skip(LUpper)\r\n        let poly = if(!self.current().rawIs(\"[\")) {Poly([], [])} else {self.parseTypeParameters()}\r\n        if(!self.current().rawIs(\"(\") && !self.current().rawIs(\"{\")) {self.rawSkip(LBracketLeft, \"{\")}\r\n        let commonFields = if(!self.current().rawIs(\"(\")) {[]} else {self.parseFunctionParameters(allowMutable = True)}\r\n        let variants = if(newtype || !self.current().rawIs(\"{\")) {\r\n            [Variant(nameToken.at(), nameToken.raw(), [])]\r\n        } else {\r\n            self.rawSkip(LBracketLeft, \"{\")\r\n            let variantsBuilder = Array.new[Variant]()\r\n            while {!self.current().is(LBracketRight)} {\r\n                if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n                let variantNameToken = self.skip(LUpper)\r\n                let variantFields = if(!self.current().rawIs(\"(\")) {[]} else {self.parseFunctionParameters(allowMutable = True)}\r\n                if(!allowMutable && variantFields.any {_.mutable}) {\r\n                    throw(CompileError(variantFields.find {_.mutable}.grab().at\r\n                        \"Only classes can have mutable fields\"\r\n                    ))\r\n                }\r\n                variantsBuilder.push(\r\n                    Variant(variantNameToken.at(), variantNameToken.raw(), variantFields)\r\n                )\r\n                if(!self.current().is(LBracketRight)) {self.skipSeparator(LSemicolon)}\r\n                if(self.lspHook.trackSymbols) {\r\n                    self.lspHook.emit(ParseSymbolEnd(\r\n                        name = variantNameToken.raw()\r\n                        kind = SVariant\r\n                        selectionStart = variantNameToken.at()\r\n                        selectionEnd = variantNameToken.end()\r\n                        start = variantNameToken.at()\r\n                        end = self.behind().end()\r\n                    ))\r\n                }                     \r\n            }\r\n            self.rawSkip(LBracketRight, \"}\")\r\n            variantsBuilder.toList()\r\n        }\r\n        if(newtype && commonFields.size() != 1) {\r\n            Log.show(commonFields)\r\n            throw(CompileError(nameToken.at(), \"Newtypes must have exactly one field\"))\r\n        }\r\n        if(!allowMutable && commonFields.any {_.mutable}) {\r\n            throw(CompileError(\r\n                commonFields.find {_.mutable}.grab().at\r\n                \"Only classes and capabilities can have mutable fields\"\r\n            ))\r\n        }\r\n        let generics = [...effectParameter, ...poly.generics]\r\n        let result = DType(nameToken.at(), newtype, !allowMutable, nameToken.raw(), generics, poly.constraints, commonFields, variants)\r\n        if(self.lspHook.trackSymbols) {\r\n            self.lspHook.emit(ParseSymbolEnd(\r\n                name = nameToken.raw()\r\n                kind = SType\r\n                selectionStart = nameToken.at()\r\n                selectionEnd = nameToken.end()\r\n                start = kindToken.at()\r\n                end = self.behind().end()\r\n            ))\r\n        }        \r\n        result\r\n    }\r\n\r\n    parseImportDefinition(currentPackagePair: PackagePair): DImport {\r\n        let importToken = self.rawSkip(LKeyword, \"import\")\r\n        let path = Array.new[String]()\r\n        while {self.current().is(LLower)} {\r\n            path.push(self.parseDashedName())\r\n            self.skip(LDot)\r\n        }\r\n        let fileToken = self.skip(LUpper)\r\n        let alias = if(self.current().rawIs(\"as\")) {\r\n            self.rawSkip(LKeyword, \"as\")\r\n            self.skip(LUpper).raw()\r\n        } else {fileToken.raw()}\r\n        let packagePair = if(self.current().rawIs(\"from\")) {\r\n            self.rawSkip(LKeyword, \"from\")\r\n            let userName = self.parseDashedName()\r\n            self.skip(LColon)\r\n            let packageName = self.parseDashedName()\r\n            PackagePair(userName, packageName)\r\n        } else {\r\n            currentPackagePair\r\n        }\r\n        DImport(fileToken.at(), alias, ModuleKey(packagePair, path.toList(), fileToken.raw()))\r\n    }\r\n\r\n    parsePackageDefinition(): DPackage {\r\n        let at = self.skip(LKeyword).at()\r\n        let user = self.skip(LLower).raw()\r\n        self.skip(LColon)\r\n        let name = self.skip(LLower).raw()\r\n        self.skip(LColon)\r\n        let version = self.parseVersion()\r\n        let targets = self.parseTargetNames(TargetNames(True, True))\r\n        DPackage(\r\n            at = at\r\n            packagePair = PackagePair(user, name)\r\n            version = version\r\n            targets = targets\r\n        )\r\n    }\r\n\r\n    parseDependencyDefinition(defaultTargetNames: TargetNames): DDependency {\r\n        let at = self.skip(LKeyword).at()\r\n        let user = self.skip(LLower).raw()\r\n        self.skip(LColon)\r\n        let name = self.skip(LLower).raw()\r\n        self.skip(LColon)\r\n        let version = self.parseVersion()\r\n        let safety = (\r\n            if(self.current().rawIs(\"trusted\")) {Trusted} else:\r\n            if(self.current().rawIs(\"unsafe\")) {Unsafe} else:\r\n            Safe\r\n        )\r\n        let targets = self.parseTargetNames(defaultTargetNames)\r\n        DDependency(\r\n            at = at\r\n            packagePair = PackagePair(user, name)\r\n            version = version\r\n            safety = safety\r\n            targets = targets\r\n        )\r\n    }\r\n\r\n    parseIncludeDefinition(): DInclude {\r\n        let at = self.skip(LKeyword).at()\r\n        let path = self.skip(LString).raw()\r\n        DInclude(\r\n            at = at\r\n            path = path.dropFirst().dropLast() // TODO: Fix string escaping\r\n        )\r\n    }\r\n\r\n    parseTargetNames(defaultTargets: TargetNames): TargetNames {\r\n        mutable targets = TargetNames(False, False)\r\n        while {self.current().is2(LKeyword, LLower)} {\r\n            let token = if(self.current().is(LLower)) {self.skip(LLower)} else {self.skip(LKeyword)}\r\n            token.raw().{\r\n                | \"node\" {targets.node} => throw(CompileError(token.at(), \"Duplicate target name\"))\r\n                | \"node\" => targets = targets.TargetNames(node = True)\r\n                | \"browser\" {targets.browser} => throw(CompileError(token.at(), \"Duplicate target name\"))\r\n                | \"browser\" => targets = targets.TargetNames(browser = True)\r\n                | t => throw(CompileError(token.at(), \"Unexpected target: \" + t))\r\n            }\r\n        }\r\n        if(!targets.node && !targets.browser) {\r\n            defaultTargets\r\n        } else {\r\n            targets\r\n        }\r\n    }\r\n\r\n    parseVersion(): Version {\r\n        if(self.current().is(LFloat)) {\r\n            let majorMinor = self.skip(LFloat)\r\n            let parts = majorMinor.raw().split('.')\r\n            let patch = if(self.current().is(LDot)) {\r\n                 self.skip(LDot)\r\n                 self.skip(LInt).raw().grabInt()\r\n            } else {0}\r\n            Version(majorMinor.at(), parts.grab(0).grabInt(), parts.grab(1).grabInt(), patch)\r\n        } else {\r\n            let major = self.skip(LInt)\r\n            Version(major.at(), major.raw().grabInt(), 0, 0)\r\n        }\r\n    }\r\n\r\n    parseDashedName(): String {\r\n        let at = self.current().at()\r\n        function readPart(): String {\r\n            if(self.current().is(LInt)) {\r\n                let prefix = self.skip(LInt).raw()\r\n                if(self.current().is(LLower)) {prefix + self.skip(LLower).raw()} else {prefix}\r\n            } else {\r\n                self.skip(LLower).raw()\r\n            }\r\n        }\r\n        mutable part = readPart()\r\n        while {self.current().rawIs(\"-\")} {\r\n            self.skip(LOperator)\r\n            part = part + \"-\" + readPart()\r\n        }\r\n        if(part.any {_.isAsciiUpper()}) {\r\n            throw(CompileError(at, \"Package names and paths must not contain upper case letters: \" + part))\r\n        }\r\n        if(part.any {_ == '_'} || part.any {_ == '.'}) {\r\n            throw(CompileError(at, \"Package names and paths must not contain underscores or dots: \" + part))\r\n        }\r\n        part\r\n    }\r\n\r\n    parseTypeParameters(): Poly {\r\n        self.rawSkip(LBracketLeft, \"[\")\r\n        let parameters = Array.new[String]()\r\n        let constraints = Array.new[Constraint]()\r\n        while {!self.current().is(LBracketRight) && !self.current().is(LSemicolon)} {\r\n            if(self.ahead().is(LBracketLeft)) {\r\n                constraints.push(self.parseConstraint())\r\n            } else {\r\n                let parameterNameToken = self.skip(LUpper)\r\n                parameters.push(parameterNameToken.raw())\r\n                while {self.current().is(LColon)} {\r\n                    self.skip(LColon)\r\n                    let constraint = self.parseConstraint()\r\n                    constraints.push(constraint.Constraint(generics =\r\n                        [TConstructor(parameterNameToken.at(), parameterNameToken.raw(), []), ...constraint.generics]\r\n                    ))\r\n                }\r\n            }\r\n            if(!self.current().is(LBracketRight)) {self.skip(LComma)}\r\n        }\r\n        self.rawSkip(LBracketRight, \"]\")\r\n        Poly(parameters.toList(), constraints.toList())\r\n    }\r\n\r\n    parseTypeArguments(parenthesis: Bool = False): List[Type] {\r\n        self.rawSkip(LBracketLeft, if(parenthesis) {\"(\"} else {\"[\"})\r\n        let types = Array.new[Type]()\r\n        while {!self.current().is(LBracketRight)} {\r\n            types.push(self.parseType())\r\n            if(!self.current().is(LBracketRight)) {self.skip(LComma)}\r\n        }\r\n        self.rawSkip(LBracketRight, if(parenthesis) {\")\"} else {\"]\"})\r\n        types.toList()\r\n    }\r\n\r\n    parseFunctionParameters(allowMutable: Bool = False): List[Parameter] {\r\n        let parameters = Array.new[Parameter]()\r\n        self.rawSkip(LBracketLeft, \"(\")\r\n        while {!self.current().is(LBracketRight)} {\r\n            let lspTrackSymbols = self.lspHook.trackSymbols && allowMutable\r\n            if(lspTrackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n            let lspFirst = self.current()\r\n            let mutable = allowMutable && self.current().is(LKeyword) && self.current().rawIs(\"mutable\")\r\n            if(mutable) {self.skip(LKeyword)}\r\n            let parameterNameToken = self.skip(LLower)\r\n            if(self.lspHook.isEnabled() && !self.current().is(LColon)) {\r\n                let t = TConstructor(parameterNameToken.at(), \"ff:core/Nothing.Nothing\", [])\r\n                parameters.push(Parameter(parameterNameToken.at(), mutable, parameterNameToken.raw(), t, None))\r\n                if(!self.current().is(LBracketRight)) {self.skipSeparator(LComma)}\r\n            } else:\r\n            self.skip(LColon)\r\n            let parameterType = self.parseType()\r\n            let default = if(!self.current().is(LAssign)) {None} else {\r\n                self.skip(LAssign)\r\n                Some(self.parseTerm())\r\n            }\r\n            parameters.push(Parameter(parameterNameToken.at(), mutable, parameterNameToken.raw(), parameterType, default))\r\n            if(lspTrackSymbols) {\r\n                self.lspHook.emit(ParseSymbolEnd(\r\n                    name = parameterNameToken.raw()\r\n                    kind = SParameter\r\n                    selectionStart = parameterNameToken.at()\r\n                    selectionEnd = parameterNameToken.end()\r\n                    start = lspFirst.at()\r\n                    end = self.behind().end()\r\n                ))\r\n            }                       \r\n            if(!self.current().is(LBracketRight)) {self.skipSeparator(LComma)}\r\n        }\r\n        self.rawSkip(LBracketRight, \")\")\r\n        parameters.toList()\r\n    }\r\n\r\n    parseFunctionArguments(callAt: Location, trailing: Bool): Pair[List[Argument], Bool] {\r\n        let arguments = Array.new[Argument]()\r\n        if(self.current().rawIs(\"(\")){\r\n            self.rawSkip(LBracketLeft, \"(\")\r\n            while {!self.current().is(LBracketRight)} {\r\n                let argumentToken = self.current()\r\n                let nameToken = if(self.current().is(LLower) && self.ahead().is(LAssign)) {\r\n                    let token = self.skip(LLower)\r\n                    self.skip(LAssign)\r\n                    Some(token)\r\n                } else {None}\r\n                let value = self.parseTerm()\r\n                if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n                    if(LspHook.strictlyBetween(callAt, self.current().at(), self.lspHook.at, 1)) {\r\n                        self.lspHook.emit(ParseArgumentHook(callAt, arguments.size(), nameToken.map {_.raw()}))\r\n                        self.lspEmittedArgumentHook = True\r\n                    }\r\n                }\r\n                arguments.push(Argument(argumentToken.at(), nameToken.map {_.raw()}, value))\r\n                if(!self.current().is(LBracketRight)) {self.skipSeparator(LComma)}\r\n            }\r\n            if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n                if(LspHook.strictlyBetween(callAt, self.current().at(), self.lspHook.at, 1)) {\r\n                    self.lspHook.emit(ParseArgumentHook(callAt, arguments.size(), None))\r\n                    self.lspEmittedArgumentHook = True\r\n                }\r\n            }\r\n            self.rawSkip(LBracketRight, \")\")\r\n        }\r\n        mutable lastWasCurly = False\r\n        if(trailing) {\r\n            if(self.lspHook.isEnabled() &&\r\n                (self.current().is3(LLower, LUpper, LString) || self.current().is3(LInt, LChar, LFloat))\r\n            ) {\r\n                lastWasCurly = True\r\n                let term = self.parseTerm()\r\n                let temporaryEffect = TConstructor(term.at, \"TemporaryEffect$\", [])\r\n                let cases = [MatchCase(term.at, [], [], term)]\r\n                if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n                    if(LspHook.strictlyBetween(callAt, self.current().at(), self.lspHook.at, 1)) {\r\n                        self.lspHook.emit(ParseArgumentHook(callAt, arguments.size(), None))\r\n                        self.lspEmittedArgumentHook = True\r\n                    }\r\n                }\r\n                arguments.push(Argument(term.at, None, ELambda(term.at, Lambda(term.at, temporaryEffect, cases))))\r\n            } else {\r\n                while {self.current().rawIs(\"{\") || self.current().is(LColon)} {\r\n                    lastWasCurly = self.current().rawIs(\"{\")\r\n                    let lambda = self.parseLambda(allowColon = True)\r\n                    if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n                        if(LspHook.strictlyBetween(callAt, self.current().at(), self.lspHook.at, 1)) {\r\n                            self.lspHook.emit(ParseArgumentHook(callAt, arguments.size(), None))\r\n                            self.lspEmittedArgumentHook = True\r\n                        }\r\n                    }\r\n                    arguments.push(Argument(lambda.at, None, ELambda(lambda.at, lambda)))\r\n                }\r\n            }\r\n        }\r\n        Pair(arguments.toList(), lastWasCurly)\r\n    }\r\n\r\n    parseLambda(\r\n        defaultParameterCount: Int = 0\r\n        ignoreGenerateKeyword: Bool = False\r\n        allowColon: Bool = False\r\n    ): Lambda {\r\n        let colon = allowColon && self.current().is(LColon)\r\n        let token = if(colon) {self.skip(LColon)} else {self.rawSkip(LBracketLeft, \"{\")}\r\n        if(ignoreGenerateKeyword && self.current().is(LKeyword) && self.current().rawIs(\"generate\")) {self.skip(LKeyword)}\r\n        let result = if(self.current().is(LPipe)) {\r\n            let cases = Array.new[MatchCase]()\r\n            while {self.current().is(LPipe)} {\r\n                cases.push(self.parseCase())\r\n            }\r\n            cases.toList()\r\n        } elseIf {self.current().is2(LLower, LWildcard) && self.ahead().is2(LComma, LArrowThick)} {\r\n            let parameters = Array.new[MatchPattern]()\r\n            while {!self.current().is(LArrowThick)} {\r\n                let isVariable = self.current().is(LLower)\r\n                let parameterToken = if(isVariable) {self.skip(LLower)} else {self.skip(LWildcard)}\r\n                parameters.push(PVariable(parameterToken.at(), if(isVariable) {Some(parameterToken.raw())} else {None}))\r\n                if(!self.current().is(LArrowThick)) {self.skip(LComma)}\r\n            }\r\n            self.skip(LArrowThick)\r\n            let term = self.parseStatements()\r\n            [MatchCase(token.at(), parameters.toList(), [], term)]\r\n        } else {\r\n            let term = self.parseStatements()\r\n            let wildcards = Wildcards.new()\r\n            let e = wildcards.fixWildcards(term)\r\n            let arguments = if(wildcards.seenWildcards != 0) {\r\n                List.range(wildcards.seenWildcards).map {i => PVariable(token.at(), Some(\"_w\" + (i + 1)))}\r\n            } else {\r\n                List.range(defaultParameterCount).map {i => PVariable(token.at(), None)}\r\n            }\r\n            [MatchCase(token.at(), arguments, [], e)]\r\n        }\r\n        if(!colon) {self.rawSkip(LBracketRight, \"}\")}\r\n        let temporaryEffect = TConstructor(token.at(), \"TemporaryEffect$\", [])\r\n        Lambda(token.at(), temporaryEffect, result)\r\n    }\r\n\r\n    parseCase(): MatchCase {\r\n        let token = self.skip(LPipe)\r\n        let patterns = Array.new[MatchPattern]()\r\n        while {!self.current().is3(LArrowThick, LPipe, LBracketRight) && !self.current().rawIs(\"{\")} {\r\n            patterns.push(self.parsePattern())\r\n            if(!self.current().is3(LArrowThick, LPipe, LBracketRight) && !self.current().rawIs(\"{\")) {\r\n                self.skip(LComma)\r\n            }\r\n        }\r\n        let guards = Array.new[MatchGuard]()\r\n        while {self.current().rawIs(\"{\")} {\r\n            guards.push(self.parseCaseGuard())\r\n        }\r\n        if(!self.lspHook.isEnabled() || self.current().is(LArrowThick)) {\r\n            self.skip(LArrowThick)\r\n        }\r\n        let body = self.parseStatements()\r\n        MatchCase(token.at(), patterns.toList(), guards.toList(), body)\r\n    }\r\n\r\n    parseCaseGuard(): MatchGuard {\r\n        let guardToken = self.skip(LBracketLeft)\r\n        let term = self.parseStatements()\r\n        let p = if(!self.current().is(LPipe)) {\r\n            PVariant(guardToken.at(), \"True\", [])\r\n        } else {\r\n            self.skip(LPipe)\r\n            self.parsePattern()\r\n        }\r\n        self.skip(LBracketRight)\r\n        MatchGuard(guardToken.at(), term, p)\r\n    }\r\n\r\n    parsePattern(): MatchPattern {\r\n        let pattern = if(self.current().is(LWildcard)) {\r\n            let token = self.skip(LWildcard)\r\n            PVariable(token.at(), None)\r\n        } elseIf {self.current().is(LLower)} {\r\n            let token = self.skip(LLower)\r\n            PVariable(token.at(), Some(token.raw()))\r\n        } elseIf {self.current().rawIs(\"(\")} {\r\n            let at = self.current().at()\r\n            let pair = self.parseRecordPattern().unzip()\r\n            PVariant(at, \"Record$\" + pair.first.join(\"$\"), pair.second)\r\n        } elseIf {self.current().rawIs(\"[\")} {\r\n            self.parseListPattern()\r\n        } elseIf {self.current().is(LString)} {\r\n            let token = self.skip(LString)\r\n            PString(token.at(), token.raw())\r\n        } elseIf {self.current().is(LInt)} {\r\n            let token = self.skip(LInt)\r\n            PInt(token.at(), token.raw())\r\n        } elseIf {self.current().is(LChar)} {\r\n            let token = self.skip(LChar)\r\n            PChar(token.at(), token.raw())\r\n        } else {\r\n            let token = self.skip(LUpper)\r\n            if(self.current().rawIs(\"(\")) {\r\n                let patterns = Array.new[MatchPattern]()\r\n                self.rawSkip(LBracketLeft, \"(\")\r\n                while {!self.current().is(LBracketRight)} {\r\n                    let pattern = self.parsePattern()\r\n                    if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n                        if(LspHook.strictlyBetween(token.at(), self.current().at(), self.lspHook.at, 1)) {\r\n                            self.lspHook.emit(ParseArgumentHook(token.at(), patterns.size(), None))\r\n                            self.lspEmittedArgumentHook = True\r\n                        }\r\n                    }\r\n                    patterns.push(pattern)\r\n                    if(!self.current().is(LBracketRight)) {self.skip(LComma)}\r\n                }\r\n                if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n                    if(LspHook.strictlyBetween(token.at(), self.current().at(), self.lspHook.at, 1)) {\r\n                        self.lspHook.emit(ParseArgumentHook(token.at(), patterns.size(), None))\r\n                        self.lspEmittedArgumentHook = True\r\n                    }\r\n                }\r\n                self.rawSkip(LBracketRight, \")\")\r\n                PVariant(token.at(), token.raw(), patterns.toList())\r\n            } else {\r\n                if(self.current().is(LLower)) {\r\n                    let asToken = self.skip(LLower)\r\n                    PVariantAs(token.at(), token.raw(), asToken.at(), Some(asToken.raw()))\r\n                } elseIf {self.current().is(LWildcard)} {\r\n                    let wildcardToken = self.skip(LWildcard)\r\n                    PVariantAs(token.at(), token.raw(), wildcardToken.at(), None)\r\n                } else {\r\n                    PVariant(token.at(), token.raw(), [])\r\n                }\r\n            }\r\n        }\r\n        if(self.current().rawIs(\"@\")) {\r\n            let atToken = self.skip(LOperator)\r\n            let asToken = self.skip(LLower)\r\n            PAlias(asToken.at(), pattern, asToken.raw())\r\n        } else {pattern}\r\n    }\r\n\r\n    parseType(): Type {\r\n        let leftTypes = if(self.current().rawIs(\"(\") && self.ahead().is(LLower) && self.aheadAhead().is(LColon)) {\r\n            let at = self.current().at()\r\n            let pair = self.parseRecordType().unzip()\r\n            [TConstructor(at, \"Record$\" + pair.first.join(\"$\"), pair.second)]\r\n        } elseIf {self.current().rawIs(\"(\")} {\r\n            self.parseTypeArguments(parenthesis = True)\r\n        } else {\r\n            let namespace = if(self.current().is(LNamespace)) {self.skip(LNamespace).raw()} else {\"\"}\r\n            let token = self.skip(LUpper)\r\n            let arguments = if(!self.current().rawIs(\"[\")) {[]} else {self.parseTypeArguments()}\r\n            [TConstructor(token.at(), namespace + token.raw(), arguments)]\r\n        }\r\n        if(!self.current().is(LArrowThick) && leftTypes.size() == 1) {leftTypes.grabFirst()} else {\r\n            let arrowToken = self.skip(LArrowThick)\r\n            let rightType = self.parseType()\r\n            TConstructor(arrowToken.at(), \"Function$\" + leftTypes.size(), [...leftTypes, rightType])\r\n        }\r\n    }\r\n\r\n    parseConstraint(): Constraint {\r\n        let namespace = if(self.current().is(LNamespace)) {self.skip(LNamespace).raw()} else {\"\"}\r\n        let token = self.skip(LUpper)\r\n        let arguments = if(!self.current().rawIs(\"[\")) {[]} else {self.parseTypeArguments()}\r\n        Constraint(token.at(), namespace + token.raw(), arguments)\r\n    }\r\n\r\n    parseStatements(): Term {\r\n        if(self.current().is2(LBracketRight, LPipe)) {EVariant(self.current().at(), \"Unit\", [], None)} else {\r\n            mutable result = self.parseStatement()\r\n            while {self.currentIsSeparator(LSemicolon)} {\r\n                let token = self.skipSeparator(LSemicolon)\r\n                result = ESequential(token.at(), result, self.parseStatement())\r\n            }\r\n            result\r\n        }\r\n    }\r\n\r\n    parseStatement(): Term {\r\n        if(self.current().is(LKeyword) && (self.current().rawIs(\"let\") || self.current().rawIs(\"mutable\"))) {self.parseLet()} else:\r\n        if(self.current().is(LKeyword) && self.current().rawIs(\"function\")) {self.parseFunctions()} else:\r\n        let term = self.parseTerm()\r\n        if(!self.current().is5(\r\n            LAssign, LAssignPlus, LAssignMinus, LAssignMultiplication, LAssignDivision\r\n        )) {term} else:\r\n        let token = do {\r\n            if(self.current().is(LAssignPlus)) {self.skip(LAssignPlus)} else:\r\n            if(self.current().is(LAssignMinus)) {self.skip(LAssignMinus)} else:\r\n            if(self.current().is(LAssignMultiplication)) {self.skip(LAssignMultiplication)} else:\r\n            if(self.current().is(LAssignDivision)) {self.skip(LAssignDivision)} else:\r\n            self.skip(LAssign)\r\n        }\r\n        let operator = token.raw().dropLast(1)\r\n        let value = self.parseTerm()\r\n        term.{\r\n            | EVariable(at, name) => EAssign(at, operator, name, value)\r\n            | EField e => EAssignField(e.at, operator, e.record, e.field, value)\r\n            | _ => throw(CompileError(token.at(), \"Only variables and fields are assignable\"))\r\n        }\r\n    }\r\n\r\n    parseLet(): Term {\r\n        if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n        let mutableToken = self.current()\r\n        let mutable = mutableToken.rawIs(\"mutable\")\r\n        let keywordToken = if(mutable) {self.rawSkip(LKeyword, \"mutable\")} else {self.rawSkip(LKeyword, \"let\")}\r\n        let nameToken = self.skip(LLower)\r\n        let valueType = if(!self.current().is(LColon)) {self.freshUnificationVariable(nameToken.at())} else {\r\n            self.skip(LColon)\r\n            self.parseType()\r\n        }\r\n        if(self.lspHook.isEnabled() && !self.current().is(LAssign)) {\r\n            let unit = EVariant(keywordToken.at(), \"Unit\", [], None)\r\n            ELet(nameToken.at(), mutable, nameToken.raw(), valueType, unit, unit)\r\n        } else:\r\n        self.skip(LAssign)\r\n        let value = self.parseTerm()\r\n        if(self.lspHook.trackSymbols) {\r\n            self.lspHook.emit(ParseSymbolEnd(\r\n                name = nameToken.raw()\r\n                kind = SLet(mutable)\r\n                selectionStart = nameToken.at()\r\n                selectionEnd = nameToken.end()\r\n                start = mutableToken.at()\r\n                end = self.behind().end()                \r\n            ))\r\n        }\r\n        let body = if(self.currentIsSeparator(LSemicolon)) {\r\n            self.skipSeparator(LSemicolon)\r\n            self.parseStatements()\r\n        } else {\r\n            EVariant(keywordToken.at(), \"Unit\", [], None)\r\n        }\r\n        ELet(nameToken.at(), mutable, nameToken.raw(), valueType, value, body)\r\n    }\r\n\r\n    parseFunctions(): Term {\r\n        let at = self.current().at()\r\n        let functions = Array.new[DFunction]()\r\n        while {self.current().rawIs(\"function\")} {\r\n            if(self.lspHook.trackSymbols) {self.lspHook.emit(ParseSymbolBegin)}\r\n            let functionAt = self.rawSkip(LKeyword, \"function\").at()\r\n            let signature = self.parseSignature(member = False)\r\n            let body = if(self.lspHook.isEnabled() && !self.current().rawIs(\"{\")) {\r\n                let temporaryEffect = TConstructor(functionAt, \"TemporaryEffect$\", [])\r\n                Lambda(functionAt, temporaryEffect, [])\r\n            } else {\r\n                self.parseLambda(defaultParameterCount = signature.parameters.size())\r\n            }\r\n            functions.push(DFunction(signature.at, signature, body))\r\n            if(self.lspHook.trackSymbols) {\r\n                self.lspHook.emit(ParseSymbolEnd(\r\n                    name = signature.name\r\n                    kind = SFunction(member = False)\r\n                    selectionStart = signature.at\r\n                    selectionEnd = signature.at.Location(column = signature.at.column + signature.name.size())\r\n                    start = functionAt\r\n                    end = self.behind().end()                \r\n                ))\r\n            }            \r\n            if(self.lspHook.isEnabled() && !self.currentIsSeparator(LSemicolon)) {} else {self.skipSeparator(LSemicolon)}\r\n        }\r\n        let body = self.parseStatements()\r\n        EFunctions(at, functions.toList(), body)\r\n    }\r\n\r\n    parseTerm(): Term {\r\n        self.parseBinary(0)\r\n    }\r\n\r\n    parseBinary(level: Int): Term {\r\n        if(level >= binaryOperators.size()) {\r\n            if(self.lspHook.isEnabled() && self.current().is(LBracketRight)) {\r\n                EVariable(self.current().at(), \"\")\r\n            } else {\r\n                self.parseUnary()\r\n            }\r\n        } else:\r\n        let operators = binaryOperators.grab(level)\r\n        mutable result = self.parseBinary(level + 1)\r\n        if(self.current().is(LOperator)) {\r\n            while {operators.any(self.current().rawIs)} {\r\n                let token = self.skip(LOperator)\r\n                let right = self.parseBinary(level + 1)\r\n                let arguments = [Argument(result.at, None, result), Argument(right.at, None, right)]\r\n                let effect = self.freshUnificationVariable(token.at())\r\n                let target = token.raw().{\r\n                    | \"==\" => DynamicCall(EVariable(token.at(), \"ff:core/Equal.equals\"), False)\r\n                    | \"!=\" => DynamicCall(EVariable(token.at(), \"ff:core/Equal.notEquals\"), False)\r\n                    | \"<\" => DynamicCall(EVariable(token.at(), \"ff:core/Ordering.before\"), False)\r\n                    | \"<=\" => DynamicCall(EVariable(token.at(), \"ff:core/Ordering.notAfter\"), False)\r\n                    | \">\" => DynamicCall(EVariable(token.at(), \"ff:core/Ordering.after\"), False)\r\n                    | \">=\" => DynamicCall(EVariable(token.at(), \"ff:core/Ordering.notBefore\"), False)\r\n                    | \"===\" => DynamicCall(EVariable(token.at(), \"ff:core/JsValue.JsValue_equals\"), False)\r\n                    | \"!==\" => DynamicCall(EVariable(token.at(), \"ff:core/JsValue.JsValue_notEquals\"), False)\r\n                    | o => DynamicCall(EVariable(token.at(), o), False)\r\n                }\r\n                result = ECall(token.at(), target, effect, [], arguments, [])\r\n            }\r\n        }\r\n        result\r\n    }\r\n\r\n    parseUnary(): Term {\r\n        if(self.current().is2(LUnary, LOperator)) {\r\n            let token = if(self.current().is(LUnary)) {self.skip(LUnary)} else {self.skip(LOperator)}\r\n            let term = self.parseUnary()\r\n            let effect = self.freshUnificationVariable(token.at())\r\n            let target = DynamicCall(EVariable(token.at(), token.raw()), False)\r\n            ECall(token.at(), target, effect, [], [Argument(term.at, None, term)], [])\r\n        } else {\r\n            self.parseFieldsAndCalls()\r\n        }\r\n    }\r\n\r\n    parseFieldsAndCalls(): Term {\r\n        let tailCall = if(self.current().is(LKeyword) && self.current().rawIs(\"tailcall\")) {\r\n            self.skip(LKeyword)\r\n            True\r\n        } else {False}\r\n        mutable result = self.parseAtom()\r\n        while {self.current().is5(LBracketLeft, LColon, LDot, LArrowThin, LUnary)} {\r\n            if(self.current().is(LDot)) {\r\n                self.skip(LDot)\r\n                if(self.current().rawIs(\"{\")) {\r\n                    let term = self.parseAtom()\r\n                    let effect = self.freshUnificationVariable(term.at)\r\n                    result = EPipe(term.at, result, effect, term)\r\n                } elseIf {self.current().is2(LUpper, LNamespace)} {\r\n                    result = self.parseCopy(result)\r\n                } else {\r\n                    let token = self.skip(LLower)\r\n                    result = EField(token.at(), False, result, token.raw())\r\n                }\r\n            } elseIf {self.current().is(LArrowThin)} {\r\n                result = self.parseDynamicMember(result, False)\r\n            } elseIf {self.current().is(LUnary)} {\r\n                let token = self.skip(LUnary)\r\n                let method = if(token.rawIs(\"!\")) {\"ff:core/Js.value\"} else {\"ff:core/Js.fromValue\"}\r\n                let target = DynamicCall(EVariable(token.at(), method), False)\r\n                let effect = self.freshUnificationVariable(token.at())\r\n                result = ECall(token.at(), target, effect, [], [\r\n                    Argument(result.at, None, result)\r\n                ], [])\r\n            } else {\r\n                let at = self.current().at()\r\n                let typeArguments = if(!self.current().rawIs(\"[\")) {[]} else {self.parseTypeArguments()}\r\n                let arguments = self.parseFunctionArguments(result.at, True)\r\n                let effect = self.freshUnificationVariable(at)\r\n                let target = DynamicCall(result, tailCall)\r\n                result = ECall(result.at, target, effect, typeArguments, arguments.first, [])\r\n                if(arguments.second && self.current().is(LLower)) {\r\n                    let token = self.skip(LLower)\r\n                    result = EField(token.at(), False, result, token.raw())\r\n                }\r\n            }\r\n        }\r\n        result\r\n    }\r\n    \r\n    parseDynamicMember(record: Term, isModule: Bool): Term {\r\n        function recordField(at: Location, name: String): Term {\r\n            record.{\r\n                | EVariant e {isModule} => EVariable(at, e.name + \".\" + name)\r\n                | _ => EField(at, False, record, name)\r\n            }\r\n        }\r\n        let token = self.skip(LArrowThin)\r\n        if(self.current().rawIs(\"(\")) {\r\n            let arguments = self.parseFunctionArguments(token.at(), trailing = False)\r\n            let effect = self.freshUnificationVariable(record.at)\r\n            arguments.first.indexWhere {!_.name.isEmpty()}.{\r\n                | None =>\r\n                    let target = DynamicCall(recordField(token.at(), \"new\" + arguments.first.size()), False)\r\n                    ECall(record.at, target, effect, [], arguments.first, [])\r\n                | Some(0) => \r\n                    let objectTarget = DynamicCall(recordField(token.at(), \"object\"), False)\r\n                    mutable result = ECall(record.at, objectTarget, effect, [], [], [])\r\n                    arguments.first.each {argument =>\r\n                        if(argument.name.isEmpty()) {\r\n                            throw(CompileError(argument.at, \"Expected a named argument\"))\r\n                        }\r\n                        let target = DynamicCall(EField(token.at(), False, result, \"with\"), False)\r\n                        result = ECall(record.at, target, effect, [], [\r\n                            Argument(argument.at, None, EString(argument.at, \"\\\"\" + argument.name.grab() + \"\\\"\"))\r\n                            Argument(argument.value.at, None, argument.value)\r\n                        ], [])\r\n                    }\r\n                    result\r\n                | Some(i) => \r\n                    throw(CompileError(arguments.first.grab(i).at, \"Unexpected named argument\"))\r\n            }\r\n        } elseIf {self.current().rawIs(\"{\")} {\r\n            let lambda = self.parseLambda()\r\n            let effect = self.freshUnificationVariable(record.at)\r\n            let arguments = lambda.cases.grabFirst().patterns.size()\r\n            let target = DynamicCall(recordField(token.at(), \"function\" + arguments), False)\r\n            ECall(record.at, target, effect, [], [\r\n                Argument(lambda.at, None, ELambda(lambda.at, lambda))\r\n            ], [])\r\n        } else:\r\n        let token = if(self.current().is(LLower)) {\r\n            self.skip(LLower)\r\n        } elseIf {self.current().is(LUpper)} {\r\n            self.skip(LUpper)\r\n        } else {\r\n            self.skip(LString)\r\n        }\r\n        let member = EString(token.at(), if(token.is(LString)) {token.raw()} else {\"\\\"\" + token.raw() + \"\\\"\"})\r\n        if(self.current().rawIs(\"(\")) {\r\n            let arguments = self.parseFunctionArguments(record.at, False)\r\n            arguments.first.find {!_.name.isEmpty()}.each {argument =>\r\n                throw(CompileError(argument.at, \"Unexpected named argument\"))\r\n            }\r\n            let effect = self.freshUnificationVariable(record.at)\r\n            let target = DynamicCall(recordField(token.at(), \"call\" + arguments.first.size()), False)\r\n            ECall(record.at, target, effect, [], [\r\n                Argument(member.at, None, member)\r\n                ...arguments.first\r\n            ], [])\r\n        } elseIf {self.current().is5(LAssign, LAssignPlus, LAssignMinus, LAssignMultiplication, LAssignDivision)} {\r\n            let method = \r\n                if(self.current().is(LAssign)) {\r\n                    self.skip(LAssign)\r\n                    \"set\"\r\n                } elseIf {self.current().is(LAssignPlus)} {\r\n                    self.skip(LAssignPlus)\r\n                    \"increment\"\r\n                } elseIf {self.current().is(LAssignMinus)} {\r\n                    self.skip(LAssignMinus)\r\n                    \"decrement\"\r\n                } elseIf {self.current().is(LAssignMultiplication)} {\r\n                    self.skip(LAssignMultiplication)\r\n                    \"multiply\"\r\n                } else {\r\n                    self.skip(LAssignDivision)\r\n                    \"divide\"\r\n                }\r\n            let value = self.parseTerm()\r\n            let effect = self.freshUnificationVariable(record.at)\r\n            let target = DynamicCall(recordField(token.at(), method), False)\r\n            ECall(record.at, target, effect, [], [\r\n                Argument(member.at, None, member)\r\n                Argument(value.at, None, value)\r\n            ], [])\r\n        } else {\r\n            let effect = self.freshUnificationVariable(record.at)\r\n            let target = DynamicCall(recordField(token.at(), \"get\"), False)\r\n            ECall(record.at, target, effect, [], [\r\n                Argument(member.at, None, member)\r\n            ], [])\r\n        }\r\n    }\r\n\r\n    parseAtom(): Term {\r\n        if(self.current().is(LString)) {\r\n            let token = self.skip(LString)\r\n            EString(token.at(), token.raw())\r\n        } elseIf {self.current().is(LChar)} {\r\n            let token = self.skip(LChar)\r\n            EChar(token.at(), token.raw())\r\n        } elseIf {self.current().is(LInt)} {\r\n            let token = self.skip(LInt)\r\n            EInt(token.at(), token.raw())\r\n        } elseIf {self.current().is(LFloat)} {\r\n            let token = self.skip(LFloat)\r\n            EFloat(token.at(), token.raw())\r\n        } elseIf {self.current().is(LLower)} {\r\n            let token = self.skip(LLower)\r\n            EVariable(token.at(), token.raw())\r\n        } elseIf {self.current().is(LNamespace)} {\r\n            let namespaceToken = self.skip(LNamespace)\r\n            let extraNamespace = if(!self.current().is(LNamespace)) {None} else {Some(self.skip(LNamespace).raw())}\r\n            let prefix = namespaceToken.raw() + extraNamespace.else {\"\"}\r\n            if(self.current().is(LLower)) {\r\n                let token = self.skip(LLower)\r\n                EVariable(token.at(), prefix + token.raw())\r\n            } else {\r\n                self.parseVariant(prefix)\r\n            }\r\n        } elseIf {self.current().is(LUpper) && self.ahead().is(LArrowThin)} {\r\n            self.parseDynamicMember(self.parseVariant(\"\"), True)\r\n        } elseIf {self.current().is(LUpper)} {\r\n            self.parseVariant(\"\")\r\n        } elseIf {self.current().rawIs(\"{\")} {\r\n            let lambda = self.parseLambda()\r\n            ELambda(lambda.at, lambda)\r\n        } elseIf {self.current().rawIs(\"[\")} {\r\n            self.parseList()\r\n        } elseIf {self.current().rawIs(\"(\") && self.ahead().is(LLower) && self.aheadAhead().is(LAssign)} {\r\n            ERecord(self.current().at(), self.parseRecord(None))\r\n        } elseIf {self.current().rawIs(\"(\")} {\r\n            self.rawSkip(LBracketLeft, \"(\")\r\n            let result = self.parseTerm()\r\n            while {self.lspHook.isEnabled() && self.currentIsSeparator(LComma)} {\r\n                self.skipSeparator(LComma)\r\n                if(!self.current().is(LBracketRight)) {self.parseTerm()}\r\n            }\r\n            self.rawSkip(LBracketRight, \")\")\r\n            result\r\n        } elseIf {self.current().is(LWildcard)} {\r\n            let token = self.skip(LWildcard)\r\n            EWildcard(token.at(), 0)\r\n        } else {\r\n            throw(CompileError(self.current().at(), \"Expected atom, got \" + self.current().raw()))\r\n        }\r\n    }\r\n\r\n    parseVariant(prefix: String): Term {\r\n        let token = self.skip(LUpper)\r\n        let name = prefix + token.raw()\r\n        let typeArguments = if(!self.current().rawIs(\"[\")) {[]} else {self.parseTypeArguments()}\r\n        if(self.current().rawIs(\"?\")) {self.skip(LOperator); EVariantIs(token.at(), name, typeArguments)} else:\r\n        let arguments = Some(self.parseFunctionArguments(token.at(), True))\r\n        EVariant(token.at(), name, typeArguments, arguments.map {_.first})\r\n    }\r\n\r\n    parseCopy(record: Term): Term {\r\n        let namespace = if(!self.current().is(LNamespace)) {\"\"} else {self.skip(LNamespace).raw()}\r\n        let extraNamespace = if(!self.current().is(LNamespace)) {\"\"} else {self.skip(LNamespace).raw()}\r\n        let prefix = namespace + extraNamespace\r\n        let token = self.skip(LUpper)\r\n        let name = prefix + token.raw()\r\n        let fields = if(self.lspHook.isEnabled() && !self.current().rawIs(\"(\")) {[]} else {self.parseRecord(Some(token.at()))}\r\n        ECopy(token.at(), name, record, fields)\r\n    }\r\n\r\n    parseRecord(copyAt: Option[Location]): List[Field] {\r\n        let fields = Array.new[Field]()\r\n        let startBracketAt = self.rawSkip(LBracketLeft, \"(\").at()\r\n        let startAt = copyAt.else {startBracketAt}\r\n        while {!self.current().is(LBracketRight)} {\r\n            let fieldToken = self.skip(LLower)\r\n            let field = if(!self.lspHook.isEnabled() || self.current().is(LAssign)) {\r\n                self.skip(LAssign)\r\n                Field(fieldToken.at(), fieldToken.raw(), self.parseTerm())\r\n            } else {\r\n                Field(fieldToken.at(), fieldToken.raw(), EVariable(fieldToken.at(), fieldToken.raw()))\r\n            }\r\n            if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n                if(LspHook.strictlyBetween(startAt, self.current().at(), self.lspHook.at, 1)) {\r\n                    self.lspHook.emit(ParseArgumentHook(startAt, fields.size(), Some(field.name).filter {_ != \"\"}))\r\n                    self.lspEmittedArgumentHook = True\r\n                }\r\n            }\r\n            fields.push(field)\r\n            if(!self.current().is(LBracketRight)) {self.skipSeparator(LComma)}\r\n        }\r\n        if(self.lspHook.isEnabled() && !self.lspEmittedArgumentHook) {\r\n            if(LspHook.strictlyBetween(startAt, self.current().at(), self.lspHook.at, 1)) {\r\n                self.lspHook.emit(ParseArgumentHook(startAt, fields.size(), None))\r\n                self.lspEmittedArgumentHook = True\r\n            }\r\n        }\r\n        self.rawSkip(LBracketRight, \")\")\r\n        fields.toList()\r\n    }\r\n\r\n    parseRecordType(): List[Pair[String, Type]] {\r\n        let fields = Array.new[Pair[String, Type]]()\r\n        self.rawSkip(LBracketLeft, \"(\")\r\n        while {!self.current().is(LBracketRight)} {\r\n            let fieldToken = self.skip(LLower)\r\n            self.skipSeparator(LColon)\r\n            fields.push(Pair(fieldToken.raw(), self.parseType()))\r\n            if(!self.current().is(LBracketRight)) {self.skipSeparator(LComma)}\r\n        }\r\n        self.rawSkip(LBracketRight, \")\")\r\n        fields.toList().sortBy {_.first}\r\n    }\r\n\r\n    parseRecordPattern(): List[Pair[String, MatchPattern]] {\r\n        let fields = Array.new[Pair[String, MatchPattern]]()\r\n        self.rawSkip(LBracketLeft, \"(\")\r\n        while {!self.current().is(LBracketRight)} {\r\n            let fieldToken = self.skip(LLower)\r\n            self.skip(LAssign)\r\n            fields.push(Pair(fieldToken.raw(), self.parsePattern()))\r\n            if(!self.current().is(LBracketRight)) {self.skipSeparator(LComma)}\r\n        }\r\n        self.rawSkip(LBracketRight, \")\")\r\n        fields.toList().sortBy {_.first}\r\n    }\r\n\r\n    parseListPattern(): MatchPattern {\r\n        function convertListPattern(at: Location, items: List[Pair[MatchPattern, Bool]]): MatchPattern {\r\n            | _, [] => PVariant(at, \"List$Empty\", [])\r\n            | _, [Pair(p, False), ...ps] =>\r\n                PVariant(at, \"List$Link\", [p, convertListPattern(at, ps)])\r\n            | _, [Pair(p, True)] => p\r\n            | _, [Pair(p, True), ...] =>\r\n                throw(CompileError(p.at, \"Invalid pattern: ... is only allowed for the last element in a list\"))\r\n        }\r\n        let items = Array.new[Pair[MatchPattern, Bool]]()\r\n        let at = self.rawSkip(LBracketLeft, \"[\").at()\r\n        while {!self.current().rawIs(\"]\")} {\r\n            let spread = self.current().is(LDotDotDot)\r\n            if(spread) {self.skip(LDotDotDot)}\r\n            let pattern = if(spread && self.current().rawIs(\"]\")) {\r\n                PVariable(self.current().at(), None)\r\n            } else {\r\n                self.parsePattern()\r\n            }\r\n            items.push(Pair(pattern, spread))\r\n            if(!self.current().rawIs(\"]\")) {self.skipSeparator(LComma)}\r\n        }\r\n        self.rawSkip(LBracketRight, \"]\")\r\n        convertListPattern(at, items.toList())\r\n    }\r\n\r\n    parseList(): Term {\r\n        let items = Array.new[Pair[Term, Bool]]()\r\n        let at = self.rawSkip(LBracketLeft, \"[\").at()\r\n        while {!self.current().rawIs(\"]\")} {\r\n            let spread = self.current().is(LDotDotDot)\r\n            if(spread) {self.skip(LDotDotDot)}\r\n            items.push(Pair(self.parseTerm(), spread))\r\n            if(!self.current().rawIs(\"]\")) {self.skipSeparator(LComma)}\r\n        }\r\n        self.rawSkip(LBracketRight, \"]\")\r\n        EList(at, self.freshUnificationVariable(at), items.toList())\r\n    }\r\n\r\n}\r\n\r\nbinaryOperators = [\r\n    [\"||\"]\r\n    [\"&&\"]\r\n    [\"!=\", \"==\", \"!==\", \"===\"]\r\n    [\"<=\", \">=\", \"<\", \">\"]\r\n    [\"+\", \"-\"]\r\n    [\"*\", \"/\", \"%\"]\r\n    [\"^\"]\r\n]\r\n"
    ],
    "names": [
        "Parser",
        "moduleKey",
        "tokens",
        "end",
        "targetIsNode",
        "lspHook",
        "lspEmittedArgumentHook",
        "offset",
        "nextUnificationVariableIndex",
        "Poly",
        "generics",
        "constraints",
        "binaryOperators",
        "new",
        "grabLast",
        "fail",
        "self",
        "at",
        "message",
        "panic",
        "show",
        "behind",
        "current",
        "grab",
        "ahead",
        "aheadAhead",
        "skip",
        "kind",
        "c",
        "notEquals",
        "isEnabled",
        "equals",
        "LUpper",
        "LLower",
        "throw",
        "CompileError",
        "raw",
        "rawSkip",
        "value",
        "rawIs",
        "freshUnificationVariable",
        "result",
        "TVariable",
        "currentIsSeparator",
        "is",
        "LSeparator",
        "skipSeparator",
        "parseModuleWithoutPackageInfo",
        "moduleWithPackageInfo",
        "parseModuleWithPackageInfo",
        "packageInfo",
        "info",
        "package",
        "module",
        "LKeyword",
        "rawIs3",
        "parsePackageInfo",
        "parseModule",
        "ModuleWithPackageInfo",
        "location",
        "p",
        "parsePackageDefinition",
        "LEnd",
        "LSemicolon",
        "DPackage",
        "packagePair",
        "Version",
        "TargetNames",
        "dependencies",
        "parseDependencyDefinition",
        "targets",
        "includes",
        "parseIncludeDefinition",
        "PackageInfo",
        "toList",
        "imports",
        "types",
        "traits",
        "instances",
        "extends",
        "lets",
        "functions",
        "LAssign",
        "LColon",
        "parseLetDefinition",
        "parseFunctionDefinition",
        "parseExtendDefinition",
        "parseTraitDefinition",
        "parseInstanceDefinition",
        "rawIs4",
        "parseTypeDefinition",
        "LDot",
        "parseImportDefinition",
        "Module",
        "trackSymbols",
        "emit",
        "ParseSymbolBegin",
        "nameToken",
        "variableType",
        "parseType",
        "parseTerm",
        "retult",
        "DLet",
        "ParseSymbolEnd",
        "SLet",
        "member",
        "signature",
        "parseSignature",
        "body",
        "parseLambda",
        "parameters",
        "DFunction",
        "name",
        "SFunction",
        "Location",
        "file",
        "line",
        "column",
        "poly",
        "parseTypeParameters",
        "parseFunctionParameters",
        "returnType",
        "TConstructor",
        "temporaryEffect",
        "Signature",
        "extendToken",
        "type",
        "LBracketLeft",
        "methods",
        "LBracketRight",
        "replace",
        "generic",
        "constraint",
        "SExtend",
        "DExtend",
        "traitToken",
        "typeParameterToken",
        "parseConstraint",
        "Constraint",
        "generatorParameters",
        "methodGenerators",
        "methodDefaults",
        "methodSignatures",
        "signatures",
        "signatureNameToken",
        "STraitFunction",
        "generator",
        "Pair",
        "STrait",
        "DTrait",
        "instanceToken",
        "token",
        "typeArguments",
        "map",
        "w1",
        "LComma",
        "generatorArguments",
        "parseFunctionArguments",
        "first",
        "definitions",
        "SInstance",
        "DInstance",
        "newtype",
        "effectParameter",
        "allowMutable",
        "rawIs2",
        "kindToken",
        "commonFields",
        "variants",
        "Variant",
        "variantsBuilder",
        "variantNameToken",
        "variantFields",
        "any",
        "mutable",
        "find",
        "SVariant",
        "DType",
        "SType",
        "currentPackagePair",
        "importToken",
        "path",
        "parseDashedName",
        "fileToken",
        "alias",
        "userName",
        "packageName",
        "PackagePair",
        "DImport",
        "ModuleKey",
        "user",
        "version",
        "parseVersion",
        "parseTargetNames",
        "defaultTargetNames",
        "safety",
        "Trusted",
        "Unsafe",
        "Safe",
        "DDependency",
        "LString",
        "DInclude",
        "dropLast",
        "dropFirst",
        "defaultTargets",
        "is2",
        "node",
        "browser",
        "t",
        "LFloat",
        "majorMinor",
        "parts",
        "split",
        "patch",
        "grabInt",
        "LInt",
        "major",
        "readPart",
        "prefix",
        "part",
        "LOperator",
        "isAsciiUpper",
        "parameterNameToken",
        "parseTypeArguments",
        "parenthesis",
        "lspTrackSymbols",
        "lspFirst",
        "Parameter",
        "None",
        "parameterType",
        "default",
        "Some",
        "SParameter",
        "callAt",
        "trailing",
        "arguments",
        "argumentToken",
        "strictlyBetween",
        "ParseArgumentHook",
        "Argument",
        "lastWasCurly",
        "is3",
        "LChar",
        "term",
        "cases",
        "MatchCase",
        "ELambda",
        "Lambda",
        "lambda",
        "defaultParameterCount",
        "ignoreGenerateKeyword",
        "allowColon",
        "colon",
        "LPipe",
        "parseCase",
        "LWildcard",
        "LArrowThick",
        "isVariable",
        "parameterToken",
        "PVariable",
        "parseStatements",
        "wildcards",
        "e",
        "fixWildcards",
        "seenWildcards",
        "range",
        "i",
        "patterns",
        "parsePattern",
        "guards",
        "parseCaseGuard",
        "guardToken",
        "PVariant",
        "MatchGuard",
        "pattern",
        "pair",
        "unzip",
        "parseRecordPattern",
        "join",
        "second",
        "parseListPattern",
        "PString",
        "PInt",
        "PChar",
        "asToken",
        "PVariantAs",
        "wildcardToken",
        "atToken",
        "PAlias",
        "leftTypes",
        "parseRecordType",
        "namespace",
        "LNamespace",
        "grabFirst",
        "arrowToken",
        "rightType",
        "EVariant",
        "parseStatement",
        "ESequential",
        "parseLet",
        "parseFunctions",
        "is5",
        "LAssignPlus",
        "LAssignMinus",
        "LAssignMultiplication",
        "LAssignDivision",
        "do",
        "operator",
        "EVariable",
        "EAssign",
        "EField",
        "EAssignField",
        "record",
        "field",
        "mutableToken",
        "keywordToken",
        "valueType",
        "unit",
        "ELet",
        "functionAt",
        "EFunctions",
        "parseBinary",
        "level",
        "parseUnary",
        "operators",
        "right",
        "effect",
        "target",
        "DynamicCall",
        "o",
        "ECall",
        "LUnary",
        "parseFieldsAndCalls",
        "tailCall",
        "parseAtom",
        "LArrowThin",
        "EPipe",
        "parseCopy",
        "parseDynamicMember",
        "method",
        "isModule",
        "recordField",
        "indexWhere",
        "isEmpty",
        "objectTarget",
        "argument",
        "EString",
        "EChar",
        "EInt",
        "EFloat",
        "namespaceToken",
        "extraNamespace",
        "else",
        "parseVariant",
        "parseList",
        "ERecord",
        "parseRecord",
        "EWildcard",
        "EVariantIs",
        "fields",
        "ECopy",
        "copyAt",
        "startBracketAt",
        "startAt",
        "fieldToken",
        "Field",
        "filter",
        "sortBy",
        "convertListPattern",
        "items",
        "ps",
        "spread",
        "LDotDotDot",
        "EList",
        "anyTag",
        "internalAnyTag",
        "z",
        "x",
        "y",
        "compare",
        "OrderingSame",
        "genericsOrdering",
        "constraintsOrdering",
        "serializeUsing",
        "serialization",
        "v",
        "checksum",
        "bitOr",
        "autoResize",
        "setUint8",
        "buffer",
        "deserializeUsing",
        "variantIndex",
        "grabUint8",
        "DeserializationChecksumException"
    ],
    "mappings": ""
}