{
    "version": 3,
    "sources": [
        "../../../../../compiler/Dependencies.ff"
    ],
    "sourcesContent": [
        "import Parser\r\nimport Syntax\r\nimport Tokenizer\r\nimport Workspace\r\nimport LspHook\r\nimport DependencyLock\r\n\r\ncapability Dependencies(\r\n    workspace: Workspace\r\n    mutable packages: Map[PackagePair, PackageInfo]\r\n    mutable packagePaths: Map[PackagePair, Path]\r\n    mutable singleFilePackages: Set[PackagePair]\r\n)\r\n\r\ncapability ResolvedDependencies(\r\n    mainPackagePair: PackagePair\r\n    packages: Map[PackagePair, PackageInfo]\r\n    packagePaths: Map[PackagePair, Path]\r\n    singleFilePackages: Set[PackagePair]\r\n)\r\n\r\nextend self: Dependencies {\r\n\r\n    loadPackageInfo(\r\n        packagePair: PackagePair\r\n        path: Path\r\n    ): Option[PackageInfo] {\r\n        //let packageDirectory = if(path.extension() == \".ff\") {path.parent().grab()} else {path}\r\n        let packageDirectory = findScriptPackageLocation(path)\r\n        let sharedPackageFile = packageDirectory.slash(\".firefly\").slash(\"package.ff\")\r\n        let packageFile = if(sharedPackageFile.exists()) {\r\n            sharedPackageFile\r\n        } else {\r\n            self.singleFilePackages = self.singleFilePackages.add(packagePair)\r\n            path\r\n        }\r\n        try {packageFile.readText()}.toOption().map: code =>\r\n        self.parsePackageFile(packagePair, packageFile.absolute(), code)\r\n    }\r\n    \r\n    parsePackageFile(\r\n        packagePair: PackagePair\r\n        fileName: String\r\n        code: String\r\n    ): PackageInfo {\r\n        let tokens = Tokenizer.tokenize(fileName, code, None, True)\r\n        let moduleKey = ModuleKey(packagePair, [], \"<package>\")\r\n        let parser = Parser.new(moduleKey, tokens, False, LspHook.disabled())\r\n        let info = parser.parsePackageInfo()\r\n        self.addCoreDependencyIfMissing(info)\r\n    }\r\n\r\n    addCoreDependencyIfMissing(info: PackageInfo): PackageInfo {\r\n        if(info.dependencies.any {d =>\r\n            d.packagePair.group == \"ff\" && d.packagePair.name == \"core\"\r\n        }) {\r\n            info\r\n        } else {\r\n            let coreDependency = DDependency(\r\n                at = info.package.at\r\n                packagePair = PackagePair(\"ff\", \"core\")\r\n                version = Version(info.package.at, 0, 0, 0)\r\n                safety = Trusted\r\n                targets = info.package.targets\r\n            )\r\n            info.PackageInfo(dependencies = [coreDependency, ...info.dependencies])\r\n        }\r\n    }\r\n\r\n    processPackageInfo(\r\n        packageInfo: PackageInfo\r\n    ): List[DDependency] {\r\n        self.packages = self.packages.add(packageInfo.package.packagePair, packageInfo)\r\n        packageInfo.dependencies.filter {!self.packages.contains(_.packagePair)}\r\n    }\r\n\r\n    fetchDependency(\r\n        path: Path\r\n        httpClient: HttpClient\r\n        dependencyLock: DependencyLock\r\n        dependency: DDependency\r\n    ): Path {\r\n        let location = self.workspace.findPackageLocation(dependency.packagePair, dependency.version)\r\n        if(location.contains(\":\") && !location.dropFirst(1).startsWith(\":\")) {\r\n            if(location.startsWith(\"http://\") || location.startsWith(\"https://\")) {\r\n                let packagePair = dependency.packagePair\r\n                let directory = if(path.isDirectory()) {path} else {path.parent().grab()}\r\n                let dependenciesPath = directory.slash(\".firefly\").slash(\"dependencies\")\r\n                let dependencyPath = dependenciesPath.slash(packagePair.group).slash(packagePair.name)\r\n                let tarGzPath = dependenciesPath.slash(Workspace.tarGzName(packagePair, dependency.version))\r\n                let donePath = dependenciesPath.slash(Workspace.tarGzName(packagePair, dependency.version) + \".done\")\r\n                if(!donePath.exists()) {\r\n                    dependencyLock.do(donePath.absolute()) {\r\n                        if(!donePath.exists()) {\r\n                            Log.trace(\"Fetching \" + location)\r\n                            let buffer = httpClient.get(location, []) {response =>\r\n                                if(!response.ok()) {\r\n                                    throw(CompileError(dependency.at, \"Could not download dependency: \" + location))\r\n                                }\r\n                                response.readBuffer()\r\n                            }\r\n                            if(dependencyPath.exists()) {\r\n                                dependencyPath.delete()\r\n                            }\r\n                            dependencyPath.createDirectory(createParentDirectories = True)\r\n                            tarGzPath.writeStream([buffer].toStream())\r\n                            internalExtractTarGz(tarGzPath, dependencyPath)\r\n                            tarGzPath.renameTo(donePath)\r\n                        }\r\n                    }\r\n                }\r\n                dependencyPath\r\n            } else {\r\n                throw(CompileError(dependency.at, \"Loading packages by this protocol is not supported: \" + location))\r\n            }\r\n        } else {\r\n            path.path(location)\r\n        }\r\n    }\r\n\r\n    processDependencies(\r\n        path: Path\r\n        httpClient: HttpClient\r\n        dependencyLock: DependencyLock\r\n        dependencies: List[DDependency]\r\n    ): Unit {\r\n        // Remember to check for cycles\r\n        let packageInfos = dependencies.map {dependency =>\r\n            let dependencyPath = self.fetchDependency(path, httpClient, dependencyLock, dependency)\r\n            self.packagePaths = self.packagePaths.add(dependency.packagePair, dependencyPath)\r\n            let packageInfo = self.loadPackageInfo(dependency.packagePair, dependencyPath).else {\r\n                throw(CompileError(dependency.at, \"Dependency not found: \" + dependencyPath.absolute()))\r\n            }\r\n            checkPackagePairs(dependency.packagePair, packageInfo.package.packagePair)\r\n            packageInfo\r\n        }\r\n        let newDependencies = packageInfos.flatMap {self.processPackageInfo(_)}\r\n        if(newDependencies != []) {\r\n            self.processDependencies(path, httpClient, dependencyLock, newDependencies)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nprocess(fetch: HttpClient, dependencyLock: DependencyLock, path: Path): ResolvedDependencies {\r\n    let workspace = Workspace.loadWorkspace(path)\r\n    let self = Dependencies(workspace, [].toMap(), [].toMap(), [].toSet())\r\n    let packageInfo = self.loadPackageInfo(Syntax.scriptPackagePair, path).else {\r\n        if(!path.exists()) {\r\n            throw(CompileError(Location(path.absolute(), 1, 1), \"File not found\"))\r\n        } else {\r\n            throw(CompileError(Location(path.absolute(), 1, 1), \"Could not load package info\"))\r\n        }\r\n    }\r\n    let newDependencies = self.processPackageInfo(packageInfo)\r\n    self.processDependencies(path, fetch, dependencyLock, newDependencies)\r\n    let packagePaths = self.packagePaths.add(packageInfo.package.packagePair, findScriptPackageLocation(path))\r\n    ResolvedDependencies(\r\n        mainPackagePair = packageInfo.package.packagePair\r\n        packages = self.packages\r\n        packagePaths = packagePaths\r\n        singleFilePackages = self.singleFilePackages\r\n    )\r\n}\r\n\r\nfindScriptPackageLocation(path: Path): Path {\r\n    let packageDirectory = if(path.extension() == \".ff\") {path.parent().grab()} else {path}\r\n    function go(directory: Path): Path {\r\n        let packageFile = directory.slash(\".firefly\").slash(\"package.ff\")\r\n        if(packageFile.exists()) {\r\n            directory\r\n        } elseIf {!directory.parent().isEmpty()} {\r\n            go(directory.parent().grab())\r\n        } else {\r\n            packageDirectory\r\n        }\r\n    }\r\n    go(packageDirectory)\r\n}\r\n\r\ncheckPackagePairs(dependencyPair: PackagePair, packagePair: PackagePair): Unit {\r\n    if(\r\n        packagePair.group != dependencyPair.group ||\r\n        packagePair.name != dependencyPair.name\r\n    ) {\r\n        panic(\r\n            \"Dependency declaration and package declaration disagree on package name: \" +\r\n            dependencyPair.groupName() + \" vs. \" + packagePair.groupName()\r\n        )\r\n    }\r\n}\r\n\r\ninternalExtractTarGz(tarGzPath: Path, path: Path): Unit {\r\n    let tar = Js.import(\"tar\")\r\n    Js.await(tar->extract(Js->(file = tarGzPath.absolutePath, cwd = path.absolutePath, strict = True)))\r\n}\r\n"
    ],
    "names": [
        "Dependencies",
        "workspace",
        "packages",
        "packagePaths",
        "singleFilePackages",
        "ResolvedDependencies",
        "mainPackagePair",
        "process",
        "fetch",
        "dependencyLock",
        "path",
        "loadWorkspace",
        "self",
        "toMap",
        "toSet",
        "packageInfo",
        "else",
        "loadPackageInfo",
        "scriptPackagePair",
        "exists",
        "throw",
        "CompileError",
        "Location",
        "absolute",
        "newDependencies",
        "processPackageInfo",
        "processDependencies",
        "add",
        "package",
        "packagePair",
        "findScriptPackageLocation",
        "packageDirectory",
        "extension",
        "grab",
        "parent",
        "go",
        "directory",
        "packageFile",
        "slash",
        "isEmpty",
        "checkPackagePairs",
        "dependencyPair",
        "group",
        "name",
        "panic",
        "groupName",
        "internalExtractTarGz",
        "tarGzPath",
        "tar",
        "extract",
        "file",
        "absolutePath",
        "cwd",
        "strict",
        "sharedPackageFile",
        "map",
        "toOption",
        "try",
        "readText",
        "code",
        "parsePackageFile",
        "fileName",
        "tokens",
        "tokenize",
        "None",
        "moduleKey",
        "ModuleKey",
        "parser",
        "new",
        "disabled",
        "info",
        "parsePackageInfo",
        "addCoreDependencyIfMissing",
        "any",
        "dependencies",
        "d",
        "coreDependency",
        "DDependency",
        "at",
        "PackagePair",
        "Version",
        "Trusted",
        "targets",
        "c",
        "PackageInfo",
        "includes",
        "filter",
        "w1",
        "contains",
        "fetchDependency",
        "httpClient",
        "dependency",
        "location",
        "findPackageLocation",
        "version",
        "startsWith",
        "dropFirst",
        "isDirectory",
        "dependenciesPath",
        "dependencyPath",
        "tarGzName",
        "donePath",
        "do",
        "trace",
        "buffer",
        "get",
        "response",
        "ok",
        "readBuffer",
        "delete",
        "createDirectory",
        "writeStream",
        "toStream",
        "renameTo",
        "packageInfos",
        "flatMap",
        "notEquals"
    ],
    "mappings": "A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A777A77AAOW7AAAAsgBAAAAsYAAAsCACPCsUsEACQCsSsEACACsasEACACsmBAJD7AAAAsQACPHsUsEACQCsSsEACACsasEACACsmBAJD7AAAA77AAOA7AAAAsgBAAACsoBAAAsCACPCsgBsEACAJsSsEACACsasEACACsmBAJO7AAAAsQACPEsgBsEACAJsSsEACACsasEACACsmBAJO7AAAA77AsOAkIXsSAAAGsQAAAsCAAQCsMsEAAmBCsesEAAgCCsKAA3DsCAAA7AACQsMAAATsUAAAsGAAsBUsoCAAAsCAAcDsKAAdsCAAtB7AACAsMAAAEsKAAAsGAAOZsqCAAAsCAAaCsUsEAAcYsuBAAAsCAAHsCAAAsCsEAAGswEAAAsCsEAAYAsuBAAAsCAAHsCAAAsCsEAAGswEAAAsCsEAAYCsuBAAAsCAAHsCAAAsCsEAAGswEAAAsCAAnDsCAAP7AACAsMAAACsYAAAsGAAmECs0BAAAsCAAhDCsqDAAAsCAALLsKsEAA4BMsqCsEAAmBRsKAA1CsCsEAAqDsCAAAsCAAA7AACrEsGAAAsCAAAsCAAMSswBAAAsCAALTsKsEA/IqBsKsEAA6BsKsEAA+BsKA+I5EsCAANsCAAA7AACCsOAAAUsmBAAAsCAAMCs+BAAAsCAAaCs2BAAAsCAAcCs0BAAAsCAALbsKAAKsCsEAAYsCsEAAGsCAA7BsCsEAAiCsgBAA9CsCsEAANswEsEAAAsoEAAA7AADDsOAED7AACEsOAAAUsmBAAAsCAAMCs+BAAAsCAAaCs2BAAAsCAAcCs0BAAAsCAALbsKAAKsCsEAAYsCsEAAGsCAA7BsCsEAAiCs6BAA9CsCsEAANswEsEAAAsoEAAA7AADF7AAHsEsEAALsCAAnE7AAOAsMAAAcsgBAAAsGAAuBCswDAAAsCAALbsKsEAAwBGsYAAnBsCAAvB7AACCWsyDAAAsCAALdsKsEAAyBFsKsEAAMFsMsEAAOCsesEAAgBesgBAAjDsCACT7AAAQsMAA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"
}