{
    "version": 3,
    "sources": [
        "../../../../compiler/Dependencies.ff"
    ],
    "sourcesContent": [
        "import Parser\nimport Syntax\nimport Tokenizer\nimport Workspace\nimport LspHook\nimport DependencyLock\n\ncapability Dependencies(\n    workspace: Workspace\n    mutable packages: Map[PackagePair, PackageInfo]\n    mutable packagePaths: Map[PackagePair, Path]\n    mutable singleFilePackages: Set[PackagePair]\n)\n\ncapability ResolvedDependencies(\n    mainPackagePair: PackagePair\n    packages: Map[PackagePair, PackageInfo]\n    packagePaths: Map[PackagePair, Path]\n    singleFilePackages: Set[PackagePair]\n)\n\nextend self: Dependencies {\n\n    loadPackageInfo(\n        packagePair: PackagePair\n        path: Path\n    ): Option[PackageInfo] {\n        //let packageDirectory = if(path.extension() == \".ff\") {path.parent().grab()} else {path}\n        let packageDirectory = findScriptPackageLocation(path)\n        let sharedPackageFile = packageDirectory.slash(\".firefly\").slash(\"package.ff\")\n        let packageFile = if(sharedPackageFile.exists()) {\n            sharedPackageFile\n        } else {\n            self.singleFilePackages = self.singleFilePackages.add(packagePair)\n            path\n        }\n        try {packageFile.readText()}.toOption().map: code =>\n        self.parsePackageFile(packagePair, packageFile.absolute(), code)\n    }\n    \n    parsePackageFile(\n        packagePair: PackagePair\n        fileName: String\n        code: String\n    ): PackageInfo {\n        let tokens = Tokenizer.tokenize(fileName, code, None, True)\n        let moduleKey = ModuleKey(packagePair, [], \"<package>\")\n        let parser = Parser.new(moduleKey, tokens, False, LspHook.disabled())\n        let info = parser.parsePackageInfo()\n        self.addCoreDependencyIfMissing(info)\n    }\n\n    addCoreDependencyIfMissing(info: PackageInfo): PackageInfo {\n        if(info.dependencies.any {d =>\n            d.packagePair.group == \"ff\" && d.packagePair.name == \"core\"\n        }) {\n            info\n        } else {\n            let coreDependency = DDependency(\n                at = info.package.at\n                packagePair = PackagePair(\"ff\", \"core\")\n                version = Version(info.package.at, 0, 0, 0)\n                safety = Trusted\n                targets = info.package.targets\n            )\n            info.PackageInfo(dependencies = [coreDependency, ...info.dependencies])\n        }\n    }\n\n    processPackageInfo(\n        packageInfo: PackageInfo\n    ): List[DDependency] {\n        self.packages = self.packages.add(packageInfo.package.packagePair, packageInfo)\n        packageInfo.dependencies.filter {!self.packages.contains(_.packagePair)}\n    }\n\n    fetchDependency(\n        path: Path\n        httpClient: HttpClient\n        dependencyLock: DependencyLock\n        dependency: DDependency\n    ): Path {\n        let location = self.workspace.findPackageLocation(dependency.packagePair, dependency.version)\n        if(location.contains(\":\") && !location.dropFirst(1).startsWith(\":\")) {\n            if(location.startsWith(\"http://\") || location.startsWith(\"https://\")) {\n                let packagePair = dependency.packagePair\n                let directory = if(path.isDirectory()) {path} else {path.parent().grab()}\n                let dependenciesPath = directory.slash(\".firefly\").slash(\"dependencies\")\n                let dependencyPath = dependenciesPath.slash(packagePair.group).slash(packagePair.name)\n                let tarGzPath = dependenciesPath.slash(Workspace.tarGzName(packagePair, dependency.version))\n                let donePath = dependenciesPath.slash(Workspace.tarGzName(packagePair, dependency.version) + \".done\")\n                if(!donePath.exists()) {\n                    dependencyLock.do(donePath.absolute()) {\n                        if(!donePath.exists()) {\n                            Log.trace(\"Fetching \" + location)\n                            let buffer = httpClient.get(location, []) {response =>\n                                if(!response.ok()) {\n                                    throw(CompileError(dependency.at, \"Could not download dependency: \" + location))\n                                }\n                                response.readBuffer()\n                            }\n                            if(dependencyPath.exists()) {\n                                dependencyPath.delete()\n                            }\n                            dependencyPath.createDirectory(createParentDirectories = True)\n                            tarGzPath.writeStream([buffer].toStream())\n                            internalExtractTarGz(tarGzPath, dependencyPath)\n                            tarGzPath.renameTo(donePath)\n                        }\n                    }\n                }\n                dependencyPath\n            } else {\n                throw(CompileError(dependency.at, \"Loading packages by this protocol is not supported: \" + location))\n            }\n        } else {\n            path.path(location)\n        }\n    }\n\n    processDependencies(\n        path: Path\n        httpClient: HttpClient\n        dependencyLock: DependencyLock\n        dependencies: List[DDependency]\n    ): Unit {\n        // Remember to check for cycles\n        let packageInfos = dependencies.map {dependency =>\n            let dependencyPath = self.fetchDependency(path, httpClient, dependencyLock, dependency)\n            self.packagePaths = self.packagePaths.add(dependency.packagePair, dependencyPath)\n            let packageInfo = self.loadPackageInfo(dependency.packagePair, dependencyPath).else {\n                throw(CompileError(dependency.at, \"Dependency not found: \" + dependencyPath.absolute()))\n            }\n            checkPackagePairs(dependency.packagePair, packageInfo.package.packagePair)\n            packageInfo\n        }\n        let newDependencies = packageInfos.flatMap {self.processPackageInfo(_)}\n        if(newDependencies != []) {\n            self.processDependencies(path, httpClient, dependencyLock, newDependencies)\n        }\n    }\n\n}\n\nprocess(fetch: HttpClient, dependencyLock: DependencyLock, path: Path): ResolvedDependencies {\n    let workspace = Workspace.loadWorkspace(path)\n    let self = Dependencies(workspace, [].toMap(), [].toMap(), [].toSet())\n    let packageInfo = self.loadPackageInfo(Syntax.scriptPackagePair, path).else {\n        if(!path.exists()) {\n            throw(CompileError(Location(path.absolute(), 1, 1), \"File not found\"))\n        } else {\n            throw(CompileError(Location(path.absolute(), 1, 1), \"Could not load package info\"))\n        }\n    }\n    let newDependencies = self.processPackageInfo(packageInfo)\n    self.processDependencies(path, fetch, dependencyLock, newDependencies)\n    let packagePaths = self.packagePaths.add(packageInfo.package.packagePair, findScriptPackageLocation(path))\n    ResolvedDependencies(\n        mainPackagePair = packageInfo.package.packagePair\n        packages = self.packages\n        packagePaths = packagePaths\n        singleFilePackages = self.singleFilePackages\n    )\n}\n\nfindScriptPackageLocation(path: Path): Path {\n    let packageDirectory = if(path.extension() == \".ff\") {path.parent().grab()} else {path}\n    function go(directory: Path): Path {\n        let packageFile = directory.slash(\".firefly\").slash(\"package.ff\")\n        if(packageFile.exists()) {\n            directory\n        } elseIf {!directory.parent().isEmpty()} {\n            go(directory.parent().grab())\n        } else {\n            packageDirectory\n        }\n    }\n    go(packageDirectory)\n}\n\ncheckPackagePairs(dependencyPair: PackagePair, packagePair: PackagePair): Unit {\n    if(\n        packagePair.group != dependencyPair.group ||\n        packagePair.name != dependencyPair.name\n    ) {\n        panic(\n            \"Dependency declaration and package declaration disagree on package name: \" +\n            dependencyPair.groupName() + \" vs. \" + packagePair.groupName()\n        )\n    }\n}\n\ninternalExtractTarGz(tarGzPath: Path, path: Path): Unit {\n    let tar = Js.import(\"tar\")\n    Js.await(tar->extract(Js->(file = tarGzPath.absolutePath, cwd = path.absolutePath, strict = True)))\n}\n"
    ],
    "names": [
        "Dependencies",
        "workspace",
        "packages",
        "packagePaths",
        "singleFilePackages",
        "ResolvedDependencies",
        "mainPackagePair",
        "process",
        "fetch",
        "dependencyLock",
        "path",
        "loadWorkspace",
        "self",
        "toMap",
        "toSet",
        "packageInfo",
        "else",
        "loadPackageInfo",
        "scriptPackagePair",
        "exists",
        "CompileError",
        "Location",
        "absolute",
        "newDependencies",
        "processPackageInfo",
        "processDependencies",
        "add",
        "package",
        "packagePair",
        "findScriptPackageLocation",
        "packageDirectory",
        "extension",
        "grab",
        "parent",
        "go",
        "directory",
        "packageFile",
        "slash",
        "isEmpty",
        "checkPackagePairs",
        "dependencyPair",
        "group",
        "name",
        "panic",
        "groupName",
        "internalExtractTarGz",
        "tarGzPath",
        "tar",
        "extract",
        "file",
        "absolutePath",
        "cwd",
        "strict",
        "sharedPackageFile",
        "map",
        "toOption",
        "try",
        "readText",
        "code",
        "parsePackageFile",
        "fileName",
        "tokens",
        "tokenize",
        "None",
        "moduleKey",
        "ModuleKey",
        "parser",
        "new",
        "disabled",
        "info",
        "parsePackageInfo",
        "addCoreDependencyIfMissing",
        "any",
        "dependencies",
        "d",
        "coreDependency",
        "DDependency",
        "at",
        "PackagePair",
        "Version",
        "Trusted",
        "targets",
        "c",
        "PackageInfo",
        "includes",
        "filter",
        "w1",
        "contains",
        "fetchDependency",
        "httpClient",
        "dependency",
        "location",
        "findPackageLocation",
        "version",
        "startsWith",
        "dropFirst",
        "isDirectory",
        "dependenciesPath",
        "dependencyPath",
        "tarGzName",
        "donePath",
        "do",
        "trace",
        "buffer",
        "get",
        "response",
        "ok",
        "readBuffer",
        "delete",
        "createDirectory",
        "writeStream",
        "toStream",
        "renameTo",
        "packageInfos",
        "flatMap",
        "notEquals"
    ],
    "mappings": "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"
}