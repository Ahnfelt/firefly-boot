{
    "version": 3,
    "sources": [
        "../../../../../compiler/JsEmitter.ff"
    ],
    "sourcesContent": [
        "import Syntax\nimport Patterns\nimport JsImporter\nimport SourceMap from ff:compiler\n\nclass JsEmitter(\n    otherModules: Map[String, Module]\n    jsImporter: JsImporter\n    emitTarget: EmitTarget\n    isMainModule: Bool\n    compilerModuleFileUrl: Option[String]\n    moduleKey: ModuleKey\n    mutable emittingAsync: Bool\n    mutable tailCallUsed: Bool\n    mutable writtenColumn: Int\n    writtenStrings: Array[Array[String]]\n    writtenSegments: Array[Array[List[Int]]]\n    writtenAnchors: IntMap[List[String]]\n    writtenNames: StringMap[Int]\n)\n\ndata EmitTarget {\n    EmitNode\n    EmitBrowser\n    EmitBuild\n    EmitExecutable\n}\n\nnew(\n    otherModules: List[Module]\n    emitTarget: EmitTarget\n    isMainModule: Bool\n    compilerModuleFileUrl: Option[String]\n    moduleKey: ModuleKey\n): JsEmitter {\n    JsEmitter(\n        otherModules = otherModules.map {m =>\n            Pair(m.moduleKey.qualifiedName(), m)\n        }.toMap()\n        jsImporter = JsImporter.new()\n        emitTarget = emitTarget\n        isMainModule = isMainModule\n        compilerModuleFileUrl = compilerModuleFileUrl\n        moduleKey = moduleKey\n        emittingAsync = False\n        tailCallUsed = False\n        writtenColumn = 0\n        writtenStrings = [[].toArray()].toArray()\n        writtenSegments = [[].toArray()].toArray()\n        writtenAnchors = IntMap.new()\n        writtenNames = StringMap.new()\n    )\n}\n\nfail[T](at: Location, message: String): T {\n    throw(CompileError(at, message))\n}\n\nextend self: JsEmitter {\n    \n    writeUnmapped(text: String) {\n        self.writtenStrings.grabLast().push(text)\n        self.writtenSegments.grabLast().push(\n            [self.writtenColumn]\n        )\n        self.writtenColumn += text.size()\n    }\n\n    writeMapped(at: Location, text: String) {\n        self.writtenStrings.grabLast().push(text)\n        self.writtenSegments.grabLast().push(\n            [self.writtenColumn, 0, at.line - 1, at.column - 1]\n        )\n        self.writtenColumn += text.size()\n    }\n\n    writeNamed(name: String, at: Location, text: String) {\n        let unqualified = name.reverse().takeWhile {c => c != '.' && c != '_'}.reverse()\n        let nameIndex = self.writtenNames.getOrSet(unqualified) {self.writtenNames.size()}\n        self.writtenStrings.grabLast().push(text)\n        self.writtenSegments.grabLast().push(\n            [self.writtenColumn, 0, at.line - 1, at.column - 1, nameIndex]\n        )\n        self.writtenColumn += text.size()\n    }\n    \n    writeLine() {\n        self.writtenStrings.push(Array.new())\n        self.writtenSegments.push(Array.new())\n        self.writtenColumn = 0\n    }\n    \n    writeAnchor(): Int {\n        self.writtenStrings.size() - 1\n    }\n    \n    writeAnchorLines(anchor: Int, lines: List[String]) {\n        if(self.writtenAnchors.has(anchor)) {\n            self.writtenAnchors.set(anchor, [...self.writtenAnchors.grab(anchor), ...lines])\n        } else {\n            self.writtenAnchors.set(anchor, lines)\n        }\n    }\n    \n    makeOutput(): String {\n        SourceMap.makeOutput(\n            self.writtenStrings, self.writtenAnchors\n        )\n    }\n    \n    makeOutputAndSourceMap(task: Task, fireflyFile: String, fireflySource: Option[String]): Pair[String, Json] {\n        SourceMap.makeOutputAndSourceMap(\n            task\n            fireflyFile\n            fireflySource\n            self.writtenStrings\n            self.writtenSegments\n            self.writtenAnchors\n            self.writtenNames\n        )\n    }\n    \n    emitModule(module: Module) {\n        let selfImport = self.emitImport(self.moduleKey)\n        let imports = [\n            self.compilerModuleFileUrl.map {\"import * as $firefly_compiler from '\" + _ + \"'\"}.toList()\n            module.imports.sortBy {_.moduleKey}.map {self.emitImport(_.moduleKey)}\n        ].flatten()\n        let liner = Liner(self, True)\n        imports.each {import =>\n            liner.writeLines()\n            self.writeUnmapped(import)\n        }\n        if(!imports.any {_ == selfImport}) {\n            liner.writeLines()\n            self.writeUnmapped(selfImport)\n        }\n        let anchor = self.writeAnchor()\n        module.types.each {\n            liner.writeLines()\n            self.emitTypeDefinition(_)\n        }\n        module.lets.each {\n            liner.writeLines()\n            self.writeUnmapped(\"export \")\n            self.emitLetDefinition(_, False, False)\n        }\n        module.functions.each {\n            liner.writeLines()\n            self.writeUnmapped(\"export \")\n            self.emitFunctionDefinition(_, False)\n        }\n        self.withEmittingAsync {\n            module.functions.each {\n                liner.writeLines()\n                self.writeUnmapped(\"export \")\n                self.emitFunctionDefinition(_, True)\n            }\n        }\n        module.extends.each {\n            liner.writeLines()\n            self.emitExtendsDefinition(_)\n        }\n        module.instances.each {\n            liner.writeLines()\n            self.emitInstanceDefinition(_)\n        }\n        let ignoreJsImports = if(self.emitTarget == EmitExecutable && self.moduleKey.packagePair.isCore()) {\n            [\"esbuild\"]\n        } else {\n            []\n        }\n        let jsImports = self.jsImporter.generateImports(ignoreJsImports.toSet())\n        if(!jsImports.isEmpty()) {\n            self.writeAnchorLines(anchor, jsImports)\n        }\n    }\n\n    emitImport(moduleKey: ModuleKey): String {\n        let dots = \"../\".repeat(self.moduleKey.folders.size() + 2)\n        let jsImportName = moduleKey.packagePair.groupName(\"_\") + \"_\" + \n            moduleKey.folders.map {_ + \"_\"}.join() + moduleKey.name\n        let jsImportFrom = dots + moduleKey.packagePair.groupName(\"/\") + \"/\" + \n            moduleKey.folders.map {_ + \"/\"}.join() + moduleKey.name + \".mjs\"\n        \"import * as \" + jsImportName + \" from \\\"\" + jsImportFrom + \"\\\"\"\n    }\n    \n    withEmittingAsync[T](body: () => T): T {\n        try {\n            self.emittingAsync = True\n            body()\n        } finally {\n            self.emittingAsync = False\n        }\n    }\n\n    makeRun(moduleName: String, functions: List[DFunction], mainPackagePair: PackagePair, bootstrapping: Bool): List[String] {\n        let buildMainFunction = functions.find {_.signature.name == \"buildMain\"}.filter {_ =>\n            self.emitTarget != EmitBrowser && self.emitTarget != EmitExecutable\n        }\n        let willRunOnNode = self.emitTarget != EmitBrowser\n        let targetMain = if(willRunOnNode) {\"nodeMain\"} else {\"browserMain\"}\n        let mainFunction =\n            functions.find {_.signature.name == targetMain}.orElse {functions.find {_.signature.name == \"main\"}}\n        mainFunction.map {_.signature.name}.map {mainName => [[\n            ...buildMainFunction.map {buildMain =>\n                \"import {\" + escapeKeyword(buildMain.signature.name) + \"$} from './\" + moduleName + \".mjs'\"\n            }.toList()\n            \"import {\" + escapeKeyword(mainName) + \"$} from './\" + moduleName + \".mjs'\"\n            \"export async function $run$(fireflyPath_, arguments_) {\"\n            \"Error.stackTraceLimit = 50\"\n            \"const $task = {controller_: new AbortController(), subtasks_: new Set(), promise_: new Promise(() => {}), started_: performance.now() * 0.001}\"\n            ...if(self.emitTarget != EmitBrowser) {[\n                \"let interval = setInterval(() => {}, 24 * 60 * 60 * 1000)\" // To prevent deadlocks from exiting node\n            ]} else {[]}\n            \"let system = {\"\n            \"task_: $task,\"\n            \"array_: arguments_,\"\n            \"fireflyPath_: fireflyPath_,\"\n            \"mainPackagePair_: {group_: \\\"\" + mainPackagePair.group + \"\\\", name_: \\\"\" + mainPackagePair.name + \"\\\"},\"\n            \"executableMode_: \" + if(self.emitTarget == EmitExecutable) {\"true\"} else {\"false\"} + \",\"\n            \"buildMode_: \" + if(self.emitTarget == EmitBuild) {\"true\"} else {\"false\"}\n            \"}\"\n            \"try {\"\n            ...if(!buildMainFunction.isEmpty()) {[\n                \"await buildMain_$(system, $task)\"]\n            } else {[]}\n            ...if(self.emitTarget != EmitBuild) {[\n                \"await \" + mainName + \"_$(system, $task)\"\n            ]} else {[]}\n            ...if(self.emitTarget == EmitBuild) {[\n                \"await $firefly_compiler.internalCreateExecutable_$(system, '.firefly/output/executable/Main.bundle.js', '.firefly/output', ['host'], system.assets_, $task)\"\n            ]} else {[]}\n            \"} finally {\"\n            ...if(self.emitTarget != EmitBrowser) {[\n                \"$task.controller_.abort()\"\n                \"clearInterval(interval)\"\n            ]} else {[]}\n            \"}\"\n            \"}\"\n            ...self.emitTarget.{\n                | EmitBrowser => [\n                    \"queueMicrotask(async () => {\"\n                    \"await $run$(null, [])\"\n                    \"})\"\n                ]\n                | EmitNode {bootstrapping} => [\n                    \"import * as path from 'node:path'\"\n                    \"queueMicrotask(async () => {\"\n                    \"let fireflyPath_ = path.dirname(path.dirname(path.dirname(path.dirname(path.dirname(process.argv[1])))))\"\n                    \"await $run$(fireflyPath_, process.argv.slice(2))\"\n                    \"})\"\n                ]\n                | EmitExecutable => [\n                    \"queueMicrotask(async () => {\"\n                    \"await $run$(null, process.argv.slice(2))\"\n                    \"})\"\n                ]\n                | _ => []\n            }\n        ].join(\"\\n\")]}.else {[]}\n    }\n\n    emitLetDefinition(definition: DLet, mutable: Bool, async: Bool) {\n        self.writeMapped(definition.at, if(mutable) {\"let \"} else {\"const \"})\n        self.writeNamed(definition.name, definition.at, escapeKeyword(definition.name))\n        self.writeMapped(definition.at, \" = \") // TODO: No = value when the right hand side would be (void 0)\n        self.emitTerm(definition.value, async)\n        self.writeMapped(definition.at, \";\")\n    }\n\n    emitExtendsDefinition(definition: DExtend) {\n        let typeName = extractTypeName(definition.type).reverse().takeWhile {_ != '.'}.reverse()\n        let methods = definition.methods.map {method =>\n            method.DFunction(\n                signature = method.signature.Signature(\n                    name = typeName + \"_\" + method.signature.name\n                )\n            )\n        }\n        let liner = Liner(self, True)\n        methods.each {\n            liner.writeLines()\n            self.writeMapped(definition.at, \"export \")\n            self.emitFunctionDefinition(_, False)\n        }\n        self.withEmittingAsync {methods.each {\n            liner.writeLines()\n            self.writeMapped(definition.at, \"export \")\n            self.emitFunctionDefinition(_, True)\n        }}\n    }\n\n    emitInstanceDefinition(definition: DInstance) {\n        let name = makeDictionaryName(definition.traitName, firstTypeName(definition.typeArguments))\n        definition.constraints.{\n            | [] =>\n                self.writeMapped(definition.at, \"export const \")\n                self.writeNamed(name, definition.at, name)\n                self.writeMapped(definition.at, \" = \")\n            | constraints =>\n                let dictionaries = constraints.map {c =>\n                    makeDictionaryName(c.name, firstTypeName(c.generics))\n                }\n                self.writeMapped(definition.at, \"export function \")\n                self.writeNamed(name, definition.at, name)\n                self.writeMapped(definition.at, \"(\" + dictionaries.join(\", \") + \") { return \")\n        }\n        self.writeMapped(definition.at, \"{\")\n        self.writeLine()\n        definition.methods.each {\n            self.emitFunctionDefinition(_, False, asMethod = True)\n            self.writeMapped(definition.at, \",\")\n            self.writeLine()\n        }\n        self.withEmittingAsync {\n            definition.methods.map {\n                self.emitFunctionDefinition(_, True, asMethod = True)\n                self.writeMapped(definition.at, \",\")\n                self.writeLine()\n            }\n        }\n        self.writeMapped(definition.at, \"}\")\n        definition.constraints.{\n            | [] => self.writeMapped(definition.at, \";\")\n            | _ => self.writeMapped(definition.at, \"}\")\n        }\n    }\n\n    emitFunctionDefinition(definition: DFunction, async: Bool, suffix: String = \"\", asMethod: Bool = False): Unit {\n        self.emitSignature(definition.signature, async, suffix, asMethod)\n        self.writeMapped(definition.at, \" {\")\n        self.writeLine()\n        definition.body.{\n            | Lambda(_, effect, [matchCase]) {\n                matchCase.patterns.all {\n                    | PVariable(_, None) => True\n                    | _ => False\n                }\n            } =>\n                self.emitTailCall {self.emitStatements(matchCase.body, True, False, async)}\n            | Lambda(_, effect, cases) =>\n                Patterns.convertAndCheck(self.otherModules, cases) // TODO no type errors in emitter\n                self.emitTailCall {\n                    let liner = Liner(self, False)\n                    definition.signature.parameters.each {p =>\n                        liner.writeLines()\n                        self.writeMapped(p.at, \"const \")\n                        self.writeNamed(p.name, p.at, p.name + \"_a\")\n                        self.writeMapped(p.at, \" = \")\n                        self.writeNamed(p.name, p.at, escapeKeyword(p.name))\n                        self.writeMapped(p.at, \";\")\n                    }\n                    let argumentTerms = definition.signature.parameters.map {p => \n                        {self.writeNamed(p.name, p.at, p.name + \"_a\")}\n                    }\n                    cases.pairs().each {| Pair(i, c) =>\n                        liner.writeLines()\n                        let lastCase = i == cases.size() - 1\n                        self.emitCase(argumentTerms, c, [], [], True, True, False, lastCase, async)\n                    }\n                }\n        }\n        self.writeLine()\n        self.writeMapped(definition.at, \"}\")\n    }\n\n    emitTailCall(body: () => Unit) {\n        let outerTailCallUsed = self.tailCallUsed\n        self.tailCallUsed = False\n        let anchor = self.writeAnchor()\n        body()\n        let tailCallUsed = self.tailCallUsed\n        self.tailCallUsed = outerTailCallUsed\n        if(tailCallUsed) {\n            self.writeAnchorLines(anchor, [\"_tailcall: for(;;) {\"])\n            self.writeLine()\n            self.writeUnmapped(\"return\")\n            self.writeLine()\n            self.writeUnmapped(\"}\")\n        }\n    }\n\n    emitSignature(signature: Signature, async: Bool, suffix: String = \"\", asMethod: Bool = False): Unit {\n        let prefix = if(async) {\"async \"} else {\"\"}\n        let asyncSuffix = if(async) {\"$\"} else {\"\"}\n        let fullPrefix = prefix + if(asMethod) {\"\"} else {\"function \"}\n        self.writeMapped(signature.at, fullPrefix)\n        self.writeNamed(signature.name, signature.at, escapeKeyword(signature.name) + suffix + asyncSuffix)\n\n        self.writeMapped(signature.at, \"(\")\n        let comma = Comma(self)\n        \n        signature.parameters.each {\n            comma.writeComma()\n            self.emitParameter(_, async)\n        }\n        signature.constraints.each {c =>\n            comma.writeComma()\n            self.writeMapped(c.at, makeDictionaryName(c.name, firstTypeName(c.generics)))\n        }\n        if(async) {\n            comma.writeComma()\n            self.writeMapped(signature.at, \"$task\")\n        }\n\n        self.writeMapped(signature.at, \")\")\n    }\n\n    emitParameter(parameter: Parameter, async: Bool) {\n        self.writeNamed(parameter.name, parameter.at, escapeKeyword(parameter.name))\n        parameter.default.each {e => \n            self.writeMapped(e.at, \" = \")\n            self.emitTerm(e, async) \n        }\n    }\n\n    emitTypeDefinition(definition: DType) {\n        if(definition.newtype) {\n            self.writeMapped(definition.at, \"// newtype \" + definition.name)\n        } else {\n            self.writeMapped(definition.at, \"// type \" + definition.name)\n            self.writeLine()\n            let liner = Liner(self, double = False)\n            definition.variants.each {\n                liner.writeLines()\n                self.emitVariantDefinition(definition, _)\n            }\n        }\n    }\n\n    emitVariantDefinition(typeDefinition: DType, definition: Variant) {\n        let allFields = [...typeDefinition.commonFields, ...definition.fields]\n        function emitFields() {\n            let comma = Comma(self)\n            allFields.each {f => \n                comma.writeComma()\n                self.writeNamed(f.name, f.at, escapeKeyword(f.name))\n            }\n        }\n        function emitConstructor() {\n            self.writeMapped(definition.at, \"export function \")\n            self.writeNamed(definition.name, definition.at, definition.name)\n            self.writeMapped(definition.at, \"(\")\n            emitFields()\n            self.writeMapped(definition.at, \") {\")\n            self.writeLine()\n        }\n        if(allFields.isEmpty()) {\n            self.writeMapped(definition.at, \"const \")\n            self.writeNamed(definition.name, definition.at, definition.name + \"$\")\n            self.writeMapped(definition.at, \" = {\")\n            self.writeNamed(definition.name, definition.at, definition.name)\n            self.writeMapped(definition.at, \": true};\")\n            self.writeLine()\n            emitConstructor()\n            self.writeMapped(definition.at, \"return \")\n            self.writeNamed(definition.name, definition.at, definition.name + \"$\")\n            self.writeMapped(definition.at, \";\")\n            self.writeLine()\n            self.writeMapped(definition.at, \"}\")\n        } elseIf {typeDefinition.variants.size() == 1} {\n            emitConstructor()\n            self.writeMapped(definition.at, \"return {\")\n            emitFields()\n            self.writeMapped(definition.at, \"};\")\n            self.writeLine()\n            self.writeMapped(definition.at, \"}\")\n        } else {\n            emitConstructor()\n            self.writeMapped(definition.at, \"return {\")\n            self.writeNamed(definition.name, definition.at, definition.name)\n            self.writeMapped(definition.at, \": true, \")\n            emitFields()\n            self.writeMapped(definition.at, \"};\")\n            self.writeLine()\n            self.writeMapped(definition.at, \"}\")\n        }\n    }\n\n    emitTerm(term: Term, async: Bool, ignored: Bool = False) {term.{\n        | EString(at, value) {value.startsWith(\"\\\"\\\"\\\"\")} =>\n            self.writeMapped(at, \"`\" + value.dropFirst(3).dropLast(3).replace(\"`\", \"\\\\`\") + \"`\") // TODO: Fix escaping\n        | EString(at, value) => \n            self.writeMapped(at, value)\n        | EChar(at, value) => \n            self.writeMapped(at, charLiteralToNumber(value))\n        | EInt(at, value) => \n            self.writeMapped(at, value)\n        | EFloat(at, value) =>\n            self.writeMapped(at, value)\n        | EVariable(at, name) => \n            self.writeNamed(name, at, escapeResolved(name))\n        | EList(at, _, items) =>\n            self.emitList(at, items, async)\n        | EVariant(at, \"ff:core/Bool.False\", _, _) =>\n            self.writeMapped(at, \"false\")\n        | EVariant(at, \"ff:core/Bool.True\", _, _) =>\n            self.writeMapped(at, \"true\")\n        | EVariant(at, \"ff:core/Unit.Unit\", _, _) =>\n            self.writeMapped(at, \"(void 0)\")\n        | EVariant(at, name, _, arguments) =>\n            let newtype = self.processVariant(name)\n            if(newtype) {\n                self.emitArgument(at, arguments.grab().grabFirst(), async)\n            } else {\n                self.writeNamed(name, at, escapeResolved(name))\n                self.writeMapped(term.at, \"(\")\n                let comma = Comma(self)\n                arguments.toList().flatten().each {\n                    comma.writeComma()\n                    self.emitArgument(at, _, async)\n                }\n                self.writeMapped(term.at, \")\")\n            }\n        | EVariantIs(at, \"ff:core/Bool.False\", _) =>\n            self.writeMapped(at, \"function(_v) { return !_v ? ff_core_Option.Some(_v) : ff_core_Option.None(); }\")\n        | EVariantIs(at, \"ff:core/Bool.True\", _) =>\n            self.writeMapped(at, \"function(_v) { return _v ? ff_core_Option.Some(_v) : ff_core_Option.None(); }\")\n        | EVariantIs(at, \"ff:core/Unit.Unit\", _) =>\n            self.writeMapped(at, \"function(_v) { return ff_core_Option.Some(_v); }\")\n        | EVariantIs(at, name, _) =>\n            let n = name.reverse().takeWhile {_ != '.'}.reverse()\n            self.writeMapped(at, \"(function(_v) { return _v.\")\n            self.writeNamed(n, at, escapeResolved(n))\n            self.writeMapped(at, \" ? ff_core_Option.Some(_v) : ff_core_Option.None();})\")\n        | ECopy(at, name, record, fields) =>\n            self.writeMapped(at, \"{...\")\n            let comma = Comma(self)\n            comma.writeComma()\n            self.emitTerm(record, async)\n            fields.each {f => \n                comma.writeComma()\n                self.writeNamed(f.name, at, escapeKeyword(f.name))\n                self.writeMapped(at, \" = \")\n                self.emitTerm(f.value, async)\n            }\n            self.writeMapped(at, \"}\")\n        | EField(at, newtype, record, field) =>\n            if(newtype) {self.emitTerm(record, async)} else:\n            self.emitTerm(record, async)\n            self.writeMapped(at, \".\")\n            self.writeNamed(field, at, escapeKeyword(field))\n        | ELambda(at, Lambda(_, effect, [MatchCase(_, patterns, [], body)])) {\n            patterns.all {| PVariable _ => True | _ => False }\n        } =>\n            let newAsync = self.emittingAsync && effectTypeIsAsync(effect)\n            self.writeMapped(term.at, \"(\")\n            if(newAsync) {self.writeMapped(term.at, \"async \")}\n            self.writeMapped(term.at, \"(\")\n            let comma = Comma(self)\n            patterns.each {\n                | PVariable(patternAt, Some(name)) => \n                    comma.writeComma()\n                    self.writeNamed(name, patternAt, escapeKeyword(name))\n                | PVariable(patternAt, None) => \n                    comma.writeComma()\n                    self.writeMapped(patternAt, \"_\")\n                | _ => \n                    throw(CompileError(at, \"Internal compiler error\"))\n            }\n            if(newAsync) {\n                comma.writeComma()\n                self.writeMapped(term.at, \"$task\")\n            }\n            self.writeMapped(term.at, \") => {\")\n            self.writeLine()\n            self.emitStatements(body, True, False, newAsync)\n            self.writeLine()\n            self.writeMapped(term.at, \"})\")\n        | ELambda(at, Lambda(_, effect, cases)) =>\n            Patterns.convertAndCheck(self.otherModules, cases)\n            let arguments = cases.grab(0).patterns.pairs().map {| Pair(i, p) => Pair(p.at, \"_\" + (i + 1))}\n            let newAsync = self.emittingAsync && effectTypeIsAsync(effect)\n\n            self.writeMapped(term.at, \"(\")\n            if(newAsync) {self.writeMapped(term.at, \"async \")}\n            self.writeMapped(term.at, \"(\")\n            let comma = Comma(self)\n            arguments.each {a => \n                comma.writeComma()\n                self.writeMapped(a.first, a.second)\n            }\n            let argumentTerms = arguments.map {| Pair(at, n) => {self.writeMapped(at, n)}}\n            if(newAsync) {\n                comma.writeComma()\n                self.writeMapped(term.at, \"$task\")\n            }\n            self.writeMapped(term.at, \") => {\")\n            self.writeLine()\n            let liner = Liner(self, double = False)\n            cases.pairs().each {| Pair(i, c) =>\n                liner.writeLines()\n                let lastCase = i == cases.size() - 1\n                self.emitCase(argumentTerms, c, [], [], True, True, False, lastCase, newAsync)\n            }\n            self.writeLine()\n            self.writeMapped(term.at, \"})\")\n        | EPipe(at, value, effect, function) =>\n            let await = async && effectTypeIsAsync(effect)\n            if(await) {self.writeMapped(term.at, \"(await \")}\n            self.writeMapped(term.at, \"(\")\n            self.emitTerm(function, async)\n            self.writeMapped(term.at, \")\")\n            self.writeMapped(term.at, \"(\")\n            self.emitTerm(value, async)\n            if(await) {self.writeMapped(term.at, \", $task\")}\n            self.writeMapped(term.at, \")\")\n            if(await) {self.writeMapped(term.at, \")\")}\n        | _ {self.emitAssignment(term, async, ignored)} =>\n        | ECall(at, StaticCall(name, _, _), _, _, arguments, dictionaries) {\n            self.emitSpecialCall(term, async, name, arguments.map {_.value}, dictionaries)\n        } =>\n        | ECall(at, StaticCall(name, _, True), effect, typeArguments, arguments, dictionaries) =>\n            let await = async && effectTypeIsAsync(effect)\n            let dictionaryStrings = dictionaries.map {self.makeDictionary(_)}\n            let ds = dictionaryStrings.dropFirst()\n            let d = dictionaryStrings.grabFirst()\n            let asyncSuffix = if(await) {\"$\"} else {\"\"}\n            if(await) {self.writeMapped(term.at, \"(await \")}\n            self.writeMapped(term.at, d)\n            self.writeMapped(term.at, \".\")\n            self.writeNamed(name, at, escapeKeyword(name.reverse().takeWhile {_ != '.'}.reverse()) + asyncSuffix)\n            self.writeMapped(term.at, \"(\")\n            let comma = Comma(self)\n            arguments.each {\n                comma.writeComma()\n                self.emitArgument(at, _, async)\n            }\n            ds.each {\n                comma.writeComma()\n                self.writeMapped(term.at, _)\n            }\n            if(await) {\n                comma.writeComma()\n                self.writeMapped(term.at, \"$task\")\n            }\n            self.writeMapped(term.at, \")\")\n            if(await) {self.writeMapped(term.at, \")\")}\n        | ECall(at, StaticCall(name, _, _), effect, typeArguments, arguments, dictionaries) =>\n            detectIfElse(term).{\n                | [] =>\n                    let await = async && effectTypeIsAsync(effect)\n                    let dictionaryStrings = dictionaries.map {self.makeDictionary(_)}\n                    let asyncSuffix = if(await) {\"$\"} else {\"\"}\n                    if(await) {self.writeMapped(term.at, \"(await \")}\n                    self.writeNamed(name, at, escapeResolved(name) + asyncSuffix)\n                    self.writeMapped(term.at, \"(\")\n                    let comma = Comma(self)\n                    arguments.each {\n                        comma.writeComma()\n                        self.emitArgument(at, _, async)\n                    }\n                    dictionaryStrings.each {\n                        comma.writeComma()\n                        self.writeMapped(term.at, _)\n                    }\n                    if(await) {\n                        comma.writeComma()\n                        self.writeMapped(term.at, \"$task\")\n                    }\n                    self.writeMapped(term.at, \")\")\n                    if(await) {self.writeMapped(term.at, \")\")}\n                | [Pair(EVariant(_, \"ff:core/Bool.True\", _, _), elseBody), ...list] =>\n                    self.writeMapped(term.at, \"(\")\n                    list.reverse().each {| Pair(condition, body) =>\n                        self.emitTerm(condition, async)\n                        self.writeLine()\n                        self.writeMapped(condition.at, \"? \")\n                        self.emitTerm(body, async)\n                        self.writeLine()\n                        self.writeMapped(condition.at, \": \")\n                    }\n                    self.emitTerm(elseBody, async)\n                    self.writeMapped(term.at, \")\")\n                | list =>\n                    self.writeMapped(term.at, \"(\")\n                    list.reverse().each {| Pair(condition, body) =>\n                        self.emitTerm(condition, async)\n                        self.writeLine()\n                        self.writeMapped(term.at, \"? ff_core_Option.Some(\")\n                        self.emitTerm(body, async)\n                        self.writeMapped(term.at, \")\")\n                        self.writeLine()\n                        self.writeMapped(term.at, \": \")\n                    }\n                    self.writeMapped(term.at, \"ff_core_Option.None())\")\n            }\n        | ECall(at, DynamicCall(function, _), effect, typeArguments, arguments, dictionaries) =>\n            let await = async && effectTypeIsAsync(effect)\n            if(!dictionaries.isEmpty()) {fail(at, \"Internal error: Dictionaries in lambda call\")}\n            if(await) {self.writeMapped(term.at, \"(await \")}\n            self.emitTerm(function, async)\n            self.writeMapped(term.at, \"(\")\n            let comma = Comma(self)\n            arguments.each {\n                comma.writeComma()\n                self.emitArgument(at, _, async)\n            }\n            if(await) {\n                comma.writeComma()\n                self.writeMapped(term.at, \"$task\")\n            }\n            self.writeMapped(term.at, \")\")\n            if(await) {self.writeMapped(term.at, \")\")}\n        | ERecord(at, fields) =>\n            if(fields.isEmpty()) {\n                self.writeMapped(term.at, \"{}\")\n            } else {\n                self.writeMapped(term.at, \"{\")\n                self.writeLine()\n                let comma = Comma(self)\n                let liner = Liner(self, double = False)\n                fields.each {f => \n                    comma.writeComma()\n                    liner.writeLines()\n                    self.writeNamed(f.name, f.at, escapeKeyword(f.name))\n                    self.writeMapped(f.at, \": \")\n                    self.emitTerm(f.value, async)\n                }\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n            }\n        | EWildcard(at, index) =>\n            if(index == 0) {fail(at, \"Unbound wildcard\")}\n            self.writeMapped(at, \"_w\" + index)\n        | ESequential(_, ESequential(_, ESequential(_, before1, before2), before3), after) {\n            safeCommable(before1) && safeCommable(before2) && safeCommable(before3) && safeCommable(after)\n        } =>\n            self.writeMapped(term.at, \"(\")\n            self.emitTerm(before1, async, ignored = True)\n            self.writeMapped(term.at, \", \")\n            self.emitTerm(before2, async, ignored = True)\n            self.writeMapped(term.at, \", \")\n            self.emitTerm(before3, async, ignored = True)\n            self.writeMapped(term.at, \", \")\n            self.emitTerm(after, async, ignored)\n            self.writeMapped(term.at, \")\")\n        | ESequential(_, ESequential(_, before1, before2), after) {\n            safeCommable(before1) && safeCommable(before2) && safeCommable(after)\n        } =>\n            self.writeMapped(term.at, \"(\")\n            self.emitTerm(before1, async, ignored = True)\n            self.writeMapped(term.at, \", \")\n            self.emitTerm(before2, async, ignored = True)\n            self.writeMapped(term.at, \", \")\n            self.emitTerm(after, async, ignored)\n            self.writeMapped(term.at, \")\")\n        | ESequential(_, before, after) {\n            safeCommable(before) && safeCommable(after)\n        } =>\n            self.writeMapped(term.at, \"(\")\n            self.emitTerm(before, async, ignored = True)\n            self.writeMapped(term.at, \", \")\n            self.emitTerm(after, async, ignored)\n            self.writeMapped(term.at, \")\")\n        | _ {async} =>\n            self.writeMapped(term.at, \"(await (async function() {\")\n            self.writeLine()\n            self.emitStatements(term, True, False, async)\n            self.writeLine()\n            self.writeMapped(term.at, \"})())\")\n        | _ =>\n            self.writeMapped(term.at, \"(function() {\")\n            self.writeLine()\n            self.emitStatements(term, True, False, async)\n            self.writeLine()\n            self.writeMapped(term.at, \"})()\")\n    }}\n    \n    emitField(term: Term, async: Bool, dot: String = \".\") {\n        term.{\n            | EString(at, q) {safeBare(q) | Some(s)} => \n                self.writeMapped(term.at, dot)\n                self.writeNamed(s, at, s)\n            | _ => \n                self.writeMapped(term.at, \"[\")\n                self.emitTerm(term, async)\n                self.writeMapped(term.at, \"]\")\n        }\n    }\n\n    makeDictionary(d: Dictionary): String {\n        let m = if(d.moduleKey.name != \"\") {\n            d.moduleKey.packagePair.groupName(\"_\") + \"_\" + \n            d.moduleKey.folders.map {_ + \"_\"}.join() + \n            d.moduleKey.name + \".\"\n        } else {\"\"}\n        let c = m + makeDictionaryName(d.traitName, d.typeName)\n        if(d.dictionaries.isEmpty()) {\n            c\n        } else {\n            c + \"(\" + d.dictionaries.map {self.makeDictionary(_)}.join(\", \") + \")\"\n        }\n    }\n\n    emitStatements(term: Term, last: Bool, break: Bool, async: Bool) {\n        term.{\n            | EFunctions(at, functions, body) =>\n                let liner = Liner(self, double = False)\n                functions.each {f =>\n                    liner.writeLines()\n                    let newAsync = self.emittingAsync && effectTypeIsAsync(f.signature.effect)\n                    self.emitFunctionDefinition(f, newAsync)\n                }\n                liner.writeLines()\n                self.emitStatements(body, last, break, async)\n            | ELet(at, mutable, name, valueType, value, body) =>\n                self.emitLetDefinition(DLet(at, name, valueType, value), mutable, async)\n                self.writeLine()\n                self.emitStatements(body, last, break, async)\n            | EVariant(at, \"ff:core/Unit.Unit\", _, _) =>\n            | ESequential(_, EVariant(_, \"ff:core/Unit.Unit\", _, _), after) =>\n                self.emitStatements(after, last, break, async)\n            | ESequential(_, before, EVariant(_, \"ff:core/Unit.Unit\", _, _)) =>\n                self.emitStatements(before, False, break, async)\n            | ESequential(at, before, after) =>\n                self.emitStatements(before, False, False, async)\n                self.writeMapped(term.at, \";\")\n                self.writeLine()\n                self.emitStatements(after, last, break, async)\n            | ECall(at, StaticCall(name, True, instanceCall), effect, _, arguments, _) =>\n                if(instanceCall) {throw(CompileError(at, \"Not yet implemented: Tail calls on trait methods.\"))}\n                self.tailCallUsed = True\n                self.writeMapped(term.at, \"{\")\n                arguments.each {a =>\n                    self.writeLine()\n                    self.writeMapped(a.at, \"const \")\n                    self.writeNamed(a.name.grab(), a.at, escapeKeyword(a.name.grab() + \"_r\"))\n                    self.writeMapped(a.at, \" = \")\n                    self.emitTerm(a.value, async)\n                    self.writeMapped(a.at, \";\")\n                }\n                arguments.each {a =>\n                    self.writeLine()\n                    self.writeNamed(a.name.grab(), a.at, escapeKeyword(a.name.grab()))\n                    self.writeMapped(term.at, \" = \")\n                    self.writeNamed(a.name.grab(), a.at, escapeKeyword(a.name.grab() + \"_r\"))\n                }\n                self.writeLine()\n                self.writeMapped(term.at, \"continue _tailcall\")\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n            | ECall(at, StaticCall(name, _, _), _, _, arguments, dictionaries) {\n                self.emitSpecialStatement(term, last, async, name, arguments.map {_.value}, dictionaries)\n            } =>\n            | EPipe(at, value, _, ELambda(_, Lambda(_, _, cases))) =>\n                Patterns.convertAndCheck(self.otherModules, cases)\n                if(!last && !break) {self.writeMapped(term.at, \"do \")}\n                self.writeMapped(term.at, \"{\")\n                self.writeLine()\n                self.writeMapped(term.at, \"const _1 = \")\n                self.emitTerm(value, async)\n                self.writeMapped(term.at, \";\")\n                cases.pairs().each {| Pair(i, c) => \n                    self.writeLine()\n                    let lastCase = i == cases.size() - 1\n                    self.emitCase([{self.writeMapped(c.at, \"_1\")}], c, [], [], True, last, break, lastCase, async)\n                }\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                if(!last && !break) {self.writeMapped(term.at, \" while(false)\")}\n            | _ {self.emitAssignment(term, async, True)} =>\n            | _ =>\n                detectIfElse(term).{\n                    | [] =>\n                        if(break) {\n                            self.writeMapped(term.at, \"if(!\")\n                            self.emitTerm(term, async)\n                            self.writeMapped(term.at, \") break\")\n                        } elseIf {last} {\n                            self.writeMapped(term.at, \"return \")\n                            self.emitTerm(term, async)\n                        } else {\n                            self.emitTerm(term, async, ignored = True)\n                        }\n                    | [Pair(EVariant(_, \"ff:core/Bool.True\", _, _), elseBody), ...list] =>\n                        list.reverse().each {| Pair(condition, body) =>\n                            self.writeMapped(condition.at, \"if(\")\n                            self.emitTerm(condition, async)\n                            self.writeMapped(condition.at, \") {\")\n                            self.writeLine()\n                            self.emitStatements(body, last, break, async)\n                            self.writeLine()\n                            self.writeMapped(condition.at, \"} else \")\n                        }\n                        self.writeMapped(term.at, \"{\")\n                        self.writeLine()\n                        self.emitStatements(elseBody, last, break, async)\n                        self.writeLine()\n                        self.writeMapped(term.at, \"}\")\n                    | list {!last} =>\n                        list.reverse().each {| Pair(condition, body) =>\n                            self.writeMapped(condition.at, \"if(\")\n                            self.emitTerm(condition, async)\n                            self.writeMapped(condition.at, \") {\")\n                            self.writeLine()\n                            self.emitStatements(body, last, break, async)\n                            self.writeLine()\n                            self.writeMapped(condition.at, \"} else \")\n                        }\n                        self.writeMapped(term.at, \"{}\")\n                    | list =>\n                        list.reverse().each {| Pair(condition, body) =>\n                            self.writeMapped(condition.at, \"if(\")\n                            self.emitTerm(condition, async)\n                            self.writeMapped(condition.at, \") {\")\n                            self.writeLine()\n                            self.writeMapped(condition.at, \"return ff_core_Option.Some(\")\n                            self.emitTerm(body, async)\n                            self.writeMapped(condition.at, \")\")\n                            self.writeLine()\n                            self.writeMapped(condition.at, \"} else \")\n                        }\n                        self.writeMapped(term.at, \"ff_core_Option.None()\")\n                        \n                }\n        }\n    }\n    \n    emitAssignment(\n        term: Term\n        async: Bool\n        ignored: Bool\n    ): Bool {\n        let anchor = self.writeAnchor()\n        let emitted = term.{\n            | ECall(at, StaticCall(name, _, _), _, _, arguments, dictionaries) =>\n                name.{\n                    | \"ff:core/JsValue.JsValue_set\" {arguments.map {_.value} | [e1, e2, e3]} =>\n                        self.emitTerm(e1, async)\n                        self.emitField(e2, async)\n                        self.writeMapped(term.at, \" = \")\n                        self.emitTerm(e3, async)\n                        True\n                    | \"ff:core/JsValue.JsValue_increment\" {arguments.map {_.value} | [e1, e2, e3]} =>\n                        self.emitTerm(e1, async)\n                        self.emitField(e2, async)\n                        self.writeMapped(term.at, \" += \")\n                        self.emitTerm(e3, async)\n                        True\n                    | \"ff:core/JsValue.JsValue_decrement\" {arguments.map {_.value} | [e1, e2, e3]} =>\n                        self.emitTerm(e1, async)\n                        self.emitField(e2, async)\n                        self.writeMapped(term.at, \" -= \")\n                        self.emitTerm(e3, async)\n                        True\n                    | \"ff:core/JsSystem.JsSystem_set\" {arguments.map {_.value} | [e1, EString(at, q), e3]} {\n                        noSideEffects(e1)} {safeBare(q) | Some(s)\n                    } =>\n                        self.writeNamed(s, at, s)\n                        self.writeMapped(term.at, \" = \")\n                        self.emitTerm(e3, async)\n                        True\n                    | \"ff:core/JsSystem.JsSystem_increment\" {arguments.map {_.value} | [e1, EString(at, q), e3]} {\n                        noSideEffects(e1)} {safeBare(q) | Some(s)\n                    } =>\n                        self.writeNamed(s, at, s)\n                        self.writeMapped(term.at, \" += \")\n                        self.emitTerm(e3, async)\n                        True\n                    | \"ff:core/JsSystem.JsSystem_decrement\" {arguments.map {_.value} | [e1, EString(at, q), e3]} {\n                        noSideEffects(e1)} {safeBare(q) | Some(s)\n                    } =>\n                        self.writeNamed(s, at, s)\n                        self.writeMapped(term.at, \" -= \")\n                        self.emitTerm(e3, async)\n                        True\n                    | \"ff:core/Js.set\" {arguments.map {_.value} | [EString(at, q), e2]} {safeBare(q) | Some(s)} =>\n                        self.writeNamed(s, at, s)\n                        self.writeMapped(term.at, \" = \")\n                        self.emitTerm(e2, async)\n                        True\n                    | \"ff:core/Js.increment\" {arguments.map {_.value} | [EString(at, q), e2]} {safeBare(q) | Some(s)} =>\n                        self.writeNamed(s, at, s)\n                        self.writeMapped(term.at, \" += \")\n                        self.emitTerm(e2, async)\n                        True\n                    | \"ff:core/Js.decrement\" {arguments.map {_.value} | [EString(at, q), e2]} {safeBare(q) | Some(s)} =>\n                        self.writeNamed(s, at, s)\n                        self.writeMapped(term.at, \" -= \")\n                        self.emitTerm(e2, async)\n                        True\n                    | _ => \n                        False\n                }\n            | EAssign(at, operator, name, value) =>\n                self.writeNamed(name, at, escapeKeyword(name))\n                self.writeMapped(term.at, \" \" + operator + \"= \")\n                self.emitTerm(value, async)\n                True\n            | EAssignField(at, operator, record, field, value) =>\n                self.emitTerm(record, async)\n                self.writeMapped(term.at, \".\")\n                self.writeNamed(field, at, escapeKeyword(field))\n                self.writeMapped(term.at, \" \" + operator + \"= \")\n                self.emitTerm(value, async)\n                True\n            | _ =>\n                False\n        }\n        if(!ignored && emitted) {\n            self.writeAnchorLines(anchor, [\"(\"])\n            self.writeMapped(term.at, \", void 0)\")\n        }\n        emitted\n    }\n    \n    emitSpecialCall(\n        term: Term\n        async: Bool\n        name: String\n        arguments: List[Term]\n        dictionaries: List[Dictionary]\n    ): Bool {\n        name.{\n            | operator {!operator.grabFirst().isAsciiLetter()} {arguments | [value]} =>\n                self.writeMapped(term.at, \"(\")\n                self.writeMapped(term.at, operator)\n                self.emitTerm(value, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | operator {!operator.grabFirst().isAsciiLetter()} {arguments | [left, right]}  =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(left, async) \n                self.writeMapped(term.at, \" \")\n                self.writeMapped(term.at, operator)\n                self.writeMapped(term.at, \" \")\n                self.emitTerm(right, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/List.List_grab\" {arguments | [e1, e2]} {noSideEffects(e1) && noSideEffects(e2)} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \"[\")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \"] ?? ff_core_List.List_grab(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \", \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \"))\")\n                True\n            | \"ff:core/Array.Array_grab\" {arguments | [e1, e2]} {noSideEffects(e1) && noSideEffects(e2)} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \".array[\")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \"] ?? ff_core_Array.Array_grab(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \", \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \"))\")\n                True\n            | \"ff:core/List.List_size\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                self.writeMapped(term.at, \".length\")\n                True\n            | \"ff:core/Array.Array_size\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                self.writeMapped(term.at, \".array.length\")\n                True\n            | \"ff:core/String.String_size\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                self.writeMapped(term.at, \".length\")\n                True\n            | \"ff:core/Equal.equals\" {arguments | [left, right]} {dictionaries | [Dictionary(_, _, typeName, [])]} {\n                primitiveTypes.contains(typeName) || typeName == \"ff:core/Ordering.Ordering\"\n            } =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(left, async)\n                self.writeMapped(term.at, \" === \")\n                self.emitTerm(right, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Equal.notEquals\" {arguments | [left, right]} {dictionaries | [Dictionary(_, _, typeName, [])]} {\n                primitiveTypes.contains(typeName) || typeName == \"ff:core/Ordering.Ordering\"\n            } =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(left, async)\n                self.writeMapped(term.at, \" !== \")\n                self.emitTerm(right, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Ordering.before\" {arguments | [left, right]} {dictionaries | [Dictionary(_, _, typeName, [])]} {\n                primitiveTypes.contains(typeName)\n            } =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(left, async)\n                self.writeMapped(term.at, \" < \")\n                self.emitTerm(right, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Ordering.notBefore\" {arguments | [left, right]} {dictionaries | [Dictionary(_, _, typeName, [])]} {\n                primitiveTypes.contains(typeName)\n            } =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(left, async)\n                self.writeMapped(term.at, \" >= \")\n                self.emitTerm(right, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Ordering.after\" {arguments | [left, right]} {dictionaries | [Dictionary(_, _, typeName, [])]} {\n                primitiveTypes.contains(typeName)\n            } =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(left, async)\n                self.writeMapped(term.at, \" > \")\n                self.emitTerm(right, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Ordering.notAfter\" {arguments | [left, right]} {dictionaries | [Dictionary(_, _, typeName, [])]} {\n                primitiveTypes.contains(typeName)\n            } =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(left, async)\n                self.writeMapped(term.at, \" <= \")\n                self.emitTerm(right, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/List.fillBy\" {term | ECall call} {arguments | [size, ELambda(at,\n                Lambda(_, _, [MatchCase(_, [PVariable(variableAt, name)], [], body)@c])@l\n            )]} {\n                !effectTypeIsAsync(call.effect)\n            } =>\n                let n = name.map {escapeResolved(_)}.else {\"i\"}\n                let newAsync = self.emittingAsync && effectTypeIsAsync(call.effect)\n                if(newAsync) {self.writeMapped(term.at, \"await \")}\n                self.writeMapped(term.at, \"((() => {\")\n                self.writeLine()\n                self.writeMapped(term.at, \"const size = \")\n                self.emitTerm(size, async) // Not correct if async and body isn't\n                self.writeMapped(term.at, \";\")\n                self.writeLine()\n                self.writeMapped(term.at, \"const result = [];\")\n                self.writeMapped(term.at, \"for(let \")\n                self.writeNamed(name.else {\"_\"}, variableAt, n)\n                self.writeMapped(term.at, \" = 0; \")\n                self.writeNamed(name.else {\"_\"}, variableAt, n)\n                self.writeMapped(term.at, \" < size; \")\n                self.writeNamed(name.else {\"_\"}, variableAt, n)\n                self.writeMapped(term.at, \"++) {\")\n                self.writeLine()\n                self.writeMapped(term.at, \"result.push(\")\n                self.emitTerm(body, newAsync)\n                self.writeMapped(term.at, \");\")\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                self.writeLine()\n                self.writeMapped(term.at, \"return result;\")\n                self.writeLine()\n                self.writeMapped(term.at, \"})())\")\n                True\n            | \"ff:core/Js.import\" {arguments | [EString(at, url)]} =>\n                self.emitTarget.{\n                    | EmitBrowser => \n                        self.writeMapped(at, \"(() => {throw new Error('Node.js imports are not supported in the browser')})()\")\n                    | _ => \n                        self.writeMapped(at, self.jsImporter.add(url.replace(\"\\\"\", \"\")))\n                }\n                True\n            | \"ff:core/Js.browserImport\" {arguments | [EString(at, url)]} =>\n                self.emitTarget.{\n                    | EmitBrowser => \n                        self.writeMapped(at, self.jsImporter.add(url.replace(\"\\\"\", \"\")))\n                    | _ => \n                        self.writeMapped(at, \"(() => {throw new Error('Browser imports are not supported in Node.js')})()\")\n                }\n                True\n            | \"ff:core/Js.dynamicImport\" {arguments | [url]} =>\n                self.writeMapped(term.at, \"import(\")\n                self.emitTerm(url, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Js.await\" {arguments | [body]} =>\n                if(async) {\n                    self.writeMapped(term.at, \"(await \")\n                    self.emitTerm(body, async)\n                    self.writeMapped(term.at, \")\")\n                } else {\n                    self.emitTerm(body, async)\n                }\n                True\n            | name {name.removeFirst(\"ff:core/Js.async\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [ELambda(at, Lambda(_, effect, [MatchCase(_, patterns, [], body)]))]\n            } {\n                patterns.all {| PVariable _ => True | _ => False }\n            } =>\n                let patternParameters = patterns.map {\n                    | PVariable p => p.name.map(escapeKeyword).else {\"_\"}\n                    | _ => panic(\"!\")\n                }\n                self.writeMapped(term.at, \"async (\" + patternParameters.join(\", \") + \") => {\")\n                self.writeLine()\n                self.emitStatements(body, True, False, False)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | name {name.startsWith(\"ff:core/Js.async\")} =>\n                throw(CompileError(term.at, \"JS async functions must take a simple parameter list\"))\n            | \"ff:core/Js.cancelled\" =>\n                self.writeMapped(term.at, if(async) {\"$task.controller_.signal.aborted\"} else {\"false\"})\n                True\n            | \"ff:core/Js.throwIfCancelled\" =>\n                if(async) {self.writeMapped(term.at, \"((() => ff_core_Task.Task_throwIfAborted($task))())\")}\n                True\n            | \"ff:core/Js.currentTask\" =>\n                self.writeMapped(term.at, \"$task\")\n                True\n            | \"ff:core/Js.controller\" =>\n                self.writeMapped(term.at, \"$task.controller_\")\n                True\n            | \"ff:core/Js.setController\" {arguments | [a]} =>\n                self.writeMapped(term.at, \"($task.controller_ = \")\n                self.emitTerm(a, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Js.inAsync\" =>\n                self.writeMapped(term.at, if(self.emittingAsync) {\"true\"} else {\"false\"})\n                True\n            | \"ff:core/Js.inBrowser\" =>\n                self.writeMapped(term.at, if(self.emitTarget == EmitBrowser) {\"true\"} else {\"false\"})\n                True\n            | \"ff:core/Js.inNode\" =>\n                self.writeMapped(term.at, if(self.emitTarget == EmitNode) {\"true\"} else {\"false\"})\n                True\n            | \"ff:core/Js.inBuild\" =>\n                self.writeMapped(term.at, if(self.emitTarget == EmitBuild) {\"true\"} else {\"false\"})\n                True\n            | \"ff:core/Js.value\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                True\n            | \"ff:core/Js.fromValue\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                True\n            | \"ff:core/Js.rawIdentifier\" {arguments | [EString(at, op)]} =>\n                self.writeMapped(at, op.replace(\"\\\"\", \"\"))\n                True\n            | \"ff:core/Js.unaryOperator\" {arguments | [EString(at, op), a1]} =>\n                self.writeMapped(term.at, \"(\")\n                self.writeMapped(at, op.replace(\"\\\"\", \"\"))\n                self.emitTerm(a1, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Js.binaryOperator\" {arguments | [EString(at, op), a1, a2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(a1, async)\n                self.writeMapped(term.at, \" \")\n                self.writeMapped(at, op.replace(\"\\\"\", \"\"))\n                self.writeMapped(term.at, \" \")\n                self.emitTerm(a2, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/Js.shortCircuitingOperator\" {arguments | [EString(at, op), a1, a2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(a1, async)\n                self.writeMapped(term.at, \" \")\n                self.writeMapped(at, op.replace(\"\\\"\", \"\"))\n                self.writeMapped(term.at, \" \")\n                self.emitTerm(invokeImmediately(a2), async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/JsValue.JsValue_spreadToArray\" {arguments | [e1]} =>\n                self.writeMapped(term.at, \"[...\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \"]\")\n                True\n            | \"ff:core/JsValue.JsValue_typeof\" {arguments | [e]} =>\n                self.writeMapped(term.at, \"(typeof \")\n                self.emitTerm(e, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/JsValue.JsValue_instanceof\" {arguments | [e1, e2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \" instanceof \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \")\")\n                True\n            | \"ff:core/JsValue.JsValue_get\" {arguments | [e1, e2]} =>\n                self.emitTerm(e1, async)\n                self.emitField(e2, async)\n                True\n            | \"ff:core/JsValue.JsValue_equals\" {arguments | [e1, e2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \" === \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \")\")\n                True                \n            | \"ff:core/JsValue.JsValue_notEquals\" {arguments | [e1, e2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \" !== \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \")\")\n                True                \n            | \"ff:core/Int.Int_bitAnd\" {arguments | [e1, e2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \" & \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \")\")\n                True                \n            | \"ff:core/Int.Int_bitRightUnsigned\" {arguments | [e1, e2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \" >>> \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \")\")\n                True                \n            | \"ff:core/Int.Int_bitRight\" {arguments | [e1, e2]} =>\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \" >> \")\n                self.emitTerm(e2, async)\n                self.writeMapped(term.at, \")\")\n                True                \n            | name {name.removeFirst(\"ff:core/JsValue.JsValue_call\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [e1, e2, ...es]\n            } =>\n                self.emitTerm(e1, async)\n                self.emitField(e2, async)\n                self.writeMapped(term.at, \"(\")\n                let comma = Comma(self)\n                es.each {\n                    comma.writeComma()\n                    self.emitTerm(_, async)\n                }\n                self.writeMapped(term.at, \")\")\n                True\n            | name {name.removeFirst(\"ff:core/JsValue.JsValue_callValue\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [e1, ...es]\n            } =>\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \"(\")\n                let comma = Comma(self)\n                es.each {\n                    comma.writeComma()\n                    self.emitTerm(_, async)\n                }\n                self.writeMapped(term.at, \")\")\n                True\n            | name {name.removeFirst(\"ff:core/JsValue.JsValue_new\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [e1, ...es]\n            } =>\n                self.writeMapped(term.at, \"(new \")\n                self.emitTerm(e1, async)\n                self.writeMapped(term.at, \"(\")\n                let comma = Comma(self)\n                es.each {\n                    comma.writeComma()\n                    self.emitTerm(_, async)\n                }\n                self.writeMapped(term.at, \"))\")\n                True\n            | name {name == \"ff:core/JsValue.JsValue_with\" || name == \"ff:core/Json.Json_with\"} =>\n                function go(e: Term, fields: List[Pair[Term, Term]]) {\n                    e.{\n                        | ECall(_, StaticCall(n, _, _), _, _, [a1, a2, a3], _) {n == name} =>\n                            go(a1.value, [Pair(a2.value, a3.value), ...fields])\n                        | ECall(_, StaticCall(n, _, _), _, _, as, _) {\n                            n == \"ff:core/JsSystem.JsSystem_object\" || \n                            n == \"ff:core/JsSystem.JsSystem_new0\" ||\n                            n == \"ff:core/Js.object\" || \n                            n == \"ff:core/Js.new0\" ||\n                            n == \"ff:core/Json.Json_object\" ||\n                            n == \"ff:core/Json.Json_new0\"\n                        } {\n                            as.all {noSideEffects(_.value)}\n                        } =>\n                            self.writeMapped(e.at, \"{\")\n                            let comma = Comma(self)\n                            fields.each {p =>\n                                comma.writeComma()\n                                self.emitField(p.first, async, dot = \"\")\n                                self.writeMapped(e.at, \": \")\n                                self.emitTerm(p.second, async)\n                            }\n                            self.writeMapped(e.at, \"}\")\n                        | _ =>\n                            self.writeMapped(e.at, \"{...\")\n                            self.emitTerm(e, async)\n                            fields.each {p =>\n                                self.writeMapped(e.at, \", \")\n                                self.emitField(p.first, async, dot = \"\")\n                                self.writeMapped(e.at, \": \")\n                                self.emitTerm(p.second, async)\n                            }\n                            self.writeMapped(e.at, \"}\")\n                    }\n                }\n                go(term, [])\n                True\n            | name {name.removeFirst(\"ff:core/JsSystem.JsSystem_call\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [e1, EString(at, q)@e2, ...es]\n            } {noSideEffects(e1)} =>\n                safeBare(q).{\n                    | Some(bare) => self.writeNamed(q, at, bare)\n                    | None => \n                        self.writeMapped(term.at, \"globalThis[\")\n                        self.emitTerm(e2, async)\n                        self.writeMapped(term.at, \"]\")\n                }\n                self.writeMapped(term.at, \"(\")\n                let comma = Comma(self)\n                es.each {\n                    comma.writeComma()\n                    self.emitTerm(_, async)\n                }\n                self.writeMapped(term.at, \")\")\n                True\n            | name {name.removeFirst(\"ff:core/JsSystem.JsSystem_function\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [e1, e2]\n            } {noSideEffects(e1)} {term | ECall call} {!effectTypeIsAsync(call.effect)} =>\n                self.emitTerm(e2, async)\n                True\n            | \"ff:core/JsSystem.JsSystem_get\" {arguments | [e1, EString(at, q)@e2]} {noSideEffects(e1)} =>\n                safeBare(q).{\n                    | Some(bare) => self.writeNamed(q, at, bare)\n                    | None => \n                        self.writeMapped(term.at, \"globalThis[\")\n                        self.emitTerm(e2, async)\n                        self.writeMapped(term.at, \"]\")\n                }\n                True\n            | \"ff:core/JsSystem.JsSystem_object\" {arguments | [e]} {noSideEffects(e)} =>\n                self.writeMapped(term.at, \"{}\")\n                True\n            | \"ff:core/JsSystem.JsSystem_new0\" {arguments | [e]} {noSideEffects(e)} =>\n                self.writeMapped(term.at, \"{}\")\n                True\n            | \"ff:core/JsSystem.JsSystem_null\" {arguments | [e]} {noSideEffects(e)} =>\n                self.writeMapped(term.at, \"null\")\n                True\n            | \"ff:core/JsSystem.JsSystem_undefined\" {arguments | [e]} {noSideEffects(e)} =>\n                self.writeMapped(term.at, \"(void 0)\")\n                True\n            | name {name.removeFirst(\"ff:core/Js.call\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [EString(at, q)@e1, ...es]\n            } =>\n                safeBare(q).{\n                    | Some(bare) => self.writeNamed(q, at, bare)\n                    | None => \n                        self.writeMapped(term.at, \"globalThis[\")\n                        self.emitTerm(e1, async)\n                        self.writeMapped(term.at, \"]\")\n                }\n                self.writeMapped(term.at, \"(\")\n                let comma = Comma(self)\n                es.each {\n                    comma.writeComma()\n                    self.emitTerm(_, async)\n                }\n                self.writeMapped(term.at, \")\")\n                True\n            | name {name.removeFirst(\"ff:core/Js.function\") | Some(n)} {n.all {_.isAsciiDigit()}} {\n                arguments | [e1]\n            } {term | ECall call} =>\n                if(self.emittingAsync && effectTypeIsAsync(call.effect)) {\n                    let argumentCode = 1.to(n.grabInt()).map {\"a_\" + _}.join(\", \")\n                    let taskCode = if(argumentCode == \"\") {\"$task\"} else {\", $task\"}\n                    self.writeMapped(term.at, \"(async (\" + argumentCode + \") => await \")\n                    self.emitTerm(e1, async)\n                    self.writeMapped(term.at, \"(\" + argumentCode + taskCode + \"))\")\n                } else {\n                    self.emitTerm(e1, async)\n                }\n                True\n            | \"ff:core/Js.get\" {arguments | [EString(at, q)@e1]} =>\n                safeBare(q).{\n                    | Some(bare) => self.writeNamed(q, at, bare)\n                    | None => \n                        self.writeMapped(term.at, \"globalThis[\")\n                        self.emitTerm(e1, async)\n                        self.writeMapped(term.at, \"]\")\n                }\n                True\n            | \"ff:core/Js.object\" =>\n                self.writeMapped(term.at, \"{}\")\n                True\n            | \"ff:core/Js.new0\" =>\n                self.writeMapped(term.at, \"{}\")\n                True\n            | \"ff:core/Js.null\" =>\n                self.writeMapped(term.at, \"null\")\n                True\n            | \"ff:core/Js.undefined\" =>\n                self.writeMapped(term.at, \"(void 0)\")\n                True\n            | \"ff:core/Js.globalThis\" =>\n                self.writeMapped(term.at, \"globalThis\")\n                True\n            | \"ff:core/BrowserSystem.BrowserSystem_js\" {arguments | [e]} {noSideEffects(e)} => \n                self.writeMapped(term.at, \"globalThis\")\n                True\n            | \"ff:core/BuildSystem.BuildSystem_js\" {arguments | [e]} {noSideEffects(e)} => \n                self.writeMapped(term.at, \"globalThis\")\n                True\n            | \"ff:core/NodeSystem.NodeSystem_js\" {arguments | [e]} {noSideEffects(e)} => \n                self.writeMapped(term.at, \"globalThis\")\n                True\n            | \"ff:core/Js.jsSystem\" =>\n                self.writeMapped(term.at, \"globalThis\")\n                True\n            | \"ff:core/Json.string\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                True\n            | \"ff:core/Json.int\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                True\n            | \"ff:core/Json.float\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                True\n            | \"ff:core/Json.bool\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                True\n            | \"ff:core/Json.array\" {arguments | [e]} =>\n                self.emitTerm(e, async)\n                True\n            | \"ff:core/Json.null\" {arguments | [e]} =>\n                self.writeMapped(term.at, \"null\")\n                True\n            | \"ff:core/Json.object\" {arguments | [e]} =>\n                self.writeMapped(term.at, \"{}\")\n                True\n            | _ =>\n                False\n        }\n    }\n    \n    emitSpecialStatement(\n        term: Term \n        last: Bool \n        async: Bool \n        name: String\n        arguments: List[Term]\n        dictionaries: List[Dictionary]\n    ): Bool {\n        name.{\n            | \"ff:core/Core.while\" {arguments | [condition, body]} =>\n                self.writeMapped(term.at, \"while\")\n                self.writeMapped(term.at, \"(\")\n                self.emitTerm(invokeImmediately(condition), async)\n                self.writeMapped(term.at, \") {\")\n                self.writeLine()\n                self.emitStatements(invokeImmediately(body), False, False, async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | \"ff:core/Core.doWhile\" {arguments | [doWhileBody]} {\n                invokeImmediately(doWhileBody) | body\n            } =>\n                self.writeMapped(term.at, \"while\")\n                self.writeMapped(term.at, \"(true) {\")\n                self.writeLine()\n                self.emitStatements(body, False, True, async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | \"ff:core/Option.Option_each\" {arguments | [list, ELambda(_, Lambda(_, _, [\n                MatchCase(_, [PVariable(nameAt, name)], [], body)\n            ]))]} =>\n                self.writeMapped(term.at, \"{\")\n                self.writeLine()\n                self.writeMapped(term.at, \"const if_o = \")\n                self.emitTerm(list, async)\n                self.writeLine()\n                self.writeMapped(term.at, \"if(if_o.Some) {\")\n                self.writeLine()\n                name.each {n => \n                    self.writeMapped(term.at, \"const \")\n                    self.writeNamed(n, nameAt, escapeKeyword(n))\n                    self.writeMapped(term.at, \" = if_o.value_;\")\n                    self.writeLine()\n                }\n                self.emitStatements(body, last, False, async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | n {n == \"ff:core/List.List_each\" || n == \"ff:core/List.List_eachWhile\"} {arguments | [\n                ECall(_, StaticCall(r, _, _), _, _, [start, end], _)\n                ELambda(_, Lambda(_, _, [MatchCase(_, [PVariable(nameAt, name)], [], body)]))\n            ]} {r == \"ff:core/Int.Int_until\" || r == \"ff:core/Int.Int_to\"} =>\n                self.writeMapped(term.at, \"for\")\n                self.writeMapped(term.at, \"(let for_i = \")\n                self.emitTerm(start.value, async)\n                self.writeMapped(term.at, \", for_e = \")\n                self.emitTerm(end.value, async)\n                let op = if(r == \"ff:core/Int.Int_until\") {\"<\"} else {\"<=\"}\n                self.writeMapped(term.at, \"; for_i \" + op + \" for_e; for_i++) {\")\n                self.writeLine()\n                name.each {n => \n                    self.writeMapped(term.at, \"const \")\n                    self.writeNamed(n, nameAt, escapeKeyword(n))\n                    self.writeMapped(term.at, \" = for_i;\")\n                    self.writeLine()\n                }\n                self.emitStatements(body, last, n.endsWith(\"eachWhile\"), async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | n {n == \"ff:core/List.List_each\" || n == \"ff:core/List.List_eachWhile\"} {arguments | [\n                ECall(_, StaticCall(\"ff:core/List.List_reverse\", _, _), _, _, [\n                    Argument(_, _, ECall(_, StaticCall(r, _, _), _, _, [start, end], _))\n                ], _)\n                ELambda(_, Lambda(_, _, [MatchCase(_, [PVariable(nameAt, name)], [], body)]))\n            ]} {r == \"ff:core/Int.Int_until\" || r == \"ff:core/Int.Int_to\"} =>\n                self.writeMapped(term.at, \"for\")\n                self.writeMapped(term.at, \"(let for_e = \")\n                self.emitTerm(start.value, async)\n                self.writeMapped(term.at, \", for_i = \")\n                self.emitTerm(end.value, async)\n                if(r == \"ff:core/Int.Int_until\") {self.writeMapped(term.at, \" - 1\")}\n                self.writeMapped(term.at, \"; for_i >= for_e; for_i--) {\")\n                self.writeLine()\n                name.each {n => \n                    self.writeMapped(term.at, \"const \")\n                    self.writeNamed(n, nameAt, escapeKeyword(n))\n                    self.writeMapped(term.at, \" = for_i;\")\n                    self.writeLine()\n                }\n                self.emitStatements(body, last, n.endsWith(\"eachWhile\"), async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | n {n == \"ff:core/List.List_each\" || n == \"ff:core/List.List_eachWhile\"} {arguments | [\n                ECall(_, StaticCall(\"ff:core/List.List_zip\", _, _), _, _, [list1, list2], _)\n                ELambda(_, Lambda(_, _, [MatchCase(_, [\n                    PVariant(_, \"ff:core/Pair.Pair\", [PVariable(at1, name1), PVariable(at2, name2)])\n                ], [], body)]))\n            ]} =>\n                self.writeMapped(term.at, \"for(let \")\n                self.emitLightFusion(\"\", list1.value, n.startsWith(\"ff:core/Array.\"), async)\n                self.writeMapped(term.at, \", \")\n                self.emitLightFusion(\"2\", list2.value, n.startsWith(\"ff:core/Array.\"), async)\n                self.writeMapped(term.at, \"; for_i < for_l && for_i2 < for_l2; for_i++, for_i2++) {\")\n                self.writeLine()\n                name1.each {\n                    self.writeMapped(at1, \"const \" + escapeKeyword(_) + \" = for_a[for_i];\")\n                    self.writeLine()\n                }\n                name2.each {\n                    self.writeMapped(at2, \"const \" + escapeKeyword(_) + \" = for_a2[for_i2];\")\n                    self.writeLine()\n                }\n                self.emitStatements(body, last, n.endsWith(\"eachWhile\"), async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | n {n == \"ff:core/List.List_each\" || n == \"ff:core/List.List_eachWhile\"} {arguments | [\n                ECall(_, StaticCall(\"ff:core/List.List_pairs\", _, _), _, _, [list1], _)\n                ELambda(_, Lambda(_, _, [MatchCase(_, [\n                    PVariant(_, \"ff:core/Pair.Pair\", [PVariable(at1, name1), PVariable(at2, name2)])\n                ], [], body)]))\n            ]} =>\n                self.writeMapped(term.at, \"for(let \")\n                self.emitLightFusion(\"\", list1.value, n.startsWith(\"ff:core/Array.\"), async)\n                self.writeMapped(term.at, \"; for_i < for_l; for_i++) {\")\n                self.writeLine()\n                name1.each {\n                    self.writeMapped(at1, \"const \" + escapeKeyword(_) + \" = for_i;\")\n                    self.writeLine()\n                }\n                name2.each {\n                    self.writeMapped(at2, \"const \" + escapeKeyword(_) + \" = for_a[for_i];\")\n                    self.writeLine()\n                }\n                self.emitStatements(body, last, n.endsWith(\"eachWhile\"), async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | n {\n                n == \"ff:core/List.List_each\" || n == \"ff:core/List.List_eachWhile\" || \n                n == \"ff:core/Array.Array_each\" || n == \"ff:core/Array.Array_eachWhile\"\n            } {\n                arguments | [list1, ELambda(_, Lambda(_, _, [MatchCase(_, [PVariable(at1, name1)], [], body)]))]\n            } =>\n                self.writeMapped(term.at, \"for(let \")\n                self.emitLightFusion(\"\", list1, n.startsWith(\"ff:core/Array.\"), async)\n                self.writeMapped(term.at, \"; for_i < for_l; for_i++) {\")\n                self.writeLine()\n                name1.each {\n                    self.writeMapped(at1, \"const \" + escapeKeyword(_) + \" = for_a[for_i];\")\n                    self.writeLine()\n                }\n                self.emitStatements(body, last, n.endsWith(\"eachWhile\"), async)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | \"ff:core/Array.Array_push\" {arguments | [array, value]} =>\n                self.emitTerm(array, async)\n                self.writeMapped(array.at, \".array.push(\")\n                self.emitTerm(value, async)\n                self.writeMapped(array.at, \")\")\n                True\n            | \"ff:core/Core.if\" {arguments | [condition, body]} =>\n                self.writeMapped(condition.at, \"if(\")\n                self.emitTerm(condition, async)\n                self.writeMapped(condition.at, \") {\")\n                self.writeLine()\n                if(last) {\n                    self.writeMapped(term.at, \"return ff_core_Option.Some(\")\n                    self.emitTerm(invokeImmediately(body), async)\n                    self.writeMapped(term.at, \")\")\n                } else {\n                    self.emitStatements(invokeImmediately(body), False, False, async)\n                }\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                if(last) {self.writeMapped(term.at, \" else return ff_core_Option.None()\")}\n                True\n            | \"ff:core/Core.throw\" {term | ECall c} {c.arguments | [argument]} {dictionaries | [dictionary]} =>\n                self.writeMapped(term.at, \"throw Object.assign(new Error(), {ffException: ff_core_Any.toAny_(\")\n                self.writeMapped(term.at, self.makeDictionary(dictionary))\n                self.writeMapped(term.at, \", \")\n                self.emitArgument(term.at, argument, async)\n                self.writeMapped(term.at, \")})\")\n                True\n            | \"ff:core/Try.Try_catch\" {self.emitTryCatchFinally(term, last, async)} =>\n                True\n            | \"ff:core/Try.Try_catchAny\" {self.emitTryCatchFinally(term, last, async)} =>\n                True\n            | \"ff:core/Try.Try_finally\" {self.emitTryCatchFinally(term, last, async)} =>\n                True\n            | \"ff:core/Js.throwIfCancelled\" =>\n                if(async) {self.writeMapped(term.at, \"ff_core_Task.Task_throwIfAborted($task)\")}\n                True\n            | \"ff:core/Js.throw\" {term | ECall c} {c.arguments | [argument]} =>\n                self.writeMapped(term.at, \"throw \")\n                self.emitTerm(argument.value, async)\n                True\n            | _ =>\n                False\n        }\n    }\n    \n    emitLightFusion(\n        suffix: String\n        list: Term\n        isArray: Bool\n        async: Bool\n    ) {\n        function wrapUnlessInt(term: Term, before: String, after: String) {\n            | EInt _, _, _ =>\n                self.emitTerm(term, async)\n            | _, _, _ =>\n                if(before != \"\") {self.writeMapped(term.at, before)}\n                self.emitTerm(term, async)\n                if(after != \"\") {self.writeMapped(term.at, after)}\n        }\n        list.{\n            | ECall(_, StaticCall(\"ff:core/List.List_dropFirst\", _, _), _, _, [a1, a2], _) =>\n                self.writeMapped(list.at, \"for_a\" + suffix + \" = \")\n                self.emitTerm(a1.value, async)\n                if(isArray) {self.writeMapped(list.at, \".array\")}\n                self.writeMapped(list.at, \", for_i\" + suffix + \" = \")\n                wrapUnlessInt(a2.value, \"Math.max(\", \", 0)\")\n                self.writeMapped(list.at, \", for_l\" + suffix + \" = \")\n                self.writeMapped(list.at, \"for_a\" + suffix + \".length\")\n            | ECall(_, StaticCall(\"ff:core/List.List_dropLast\", _, _), _, _, [a1, a2], _) =>\n                self.writeMapped(list.at, \"for_a\" + suffix + \" = \")\n                self.emitTerm(a1.value, async)\n                if(isArray) {self.writeMapped(list.at, \".array\")}\n                self.writeMapped(list.at, \", for_i\" + suffix + \" = 0\")\n                self.writeMapped(list.at, \", for_l\" + suffix + \" = \")\n                self.writeMapped(list.at, \"for_a\" + suffix + \".length - \")\n                wrapUnlessInt(a2.value, \"Math.max(\", \", 0)\")\n            | ECall(_, StaticCall(\"ff:core/List.List_takeFirst\", _, _), _, _, [a1, a2], _) =>\n                self.writeMapped(list.at, \"for_a\" + suffix + \" = \")\n                self.emitTerm(a1.value, async)\n                if(isArray) {self.writeMapped(list.at, \".array\")}\n                self.writeMapped(list.at, \", for_i\" + suffix + \" = 0\")\n                self.writeMapped(list.at, \", for_l\" + suffix + \" = \")\n                self.writeMapped(list.at, \"Math.min(\")\n                wrapUnlessInt(a2.value, \"Math.max(\", \", 0)\")\n                self.writeMapped(list.at, \", for_a\" + suffix + \".length)\")\n            | ECall(_, StaticCall(\"ff:core/List.List_takeLast\", _, _), _, _, [a1, a2], _) =>\n                self.writeMapped(list.at, \"for_a\" + suffix + \" = \")\n                self.emitTerm(a1.value, async)\n                if(isArray) {self.writeMapped(list.at, \".array\")}\n                self.writeMapped(list.at, \", for_i\" + suffix + \" = \")\n                self.writeMapped(list.at, \"Math.max(for_a\" + suffix + \".length - \")\n                wrapUnlessInt(a2.value, \"Math.max(\", \", 0)\")\n                self.writeMapped(list.at, \", 0), for_l\" + suffix + \" = \")\n                self.writeMapped(list.at, \"for_a\" + suffix + \".length\")\n            | _ => \n                self.writeMapped(list.at, \"for_a\" + suffix + \" = \")\n                self.emitTerm(list, async)\n                if(isArray) {self.writeMapped(list.at, \".array\")}\n                self.writeMapped(list.at, \", for_i\" + suffix + \" = 0\")\n                self.writeMapped(list.at, \", for_l\" + suffix + \" = \")\n                self.writeMapped(list.at, \"for_a\" + suffix + \".length\")\n        } \n    }\n\n    emitTryCatchFinally(term: Term, last: Bool, async: Bool): Bool {\n        function emitCatch(catchEffect: Type, cases: List[MatchCase]) {\n            let catchAsync = self.emittingAsync && effectTypeIsAsync(catchEffect)\n            Patterns.convertAndCheck(self.otherModules, cases)\n            let arguments = [\n                {self.writeMapped(term.at, \"_exception.value_\")}\n                {self.writeMapped(term.at, \"_error\")}\n            ]\n            cases.{\n                | [case] =>\n                    self.emitCase(arguments, case, [], [], False, last, False, True, catchAsync)\n                | cs =>\n                    if(last) {\n                        self.writeMapped(term.at, \"do {\")\n                        self.writeLine()\n                    }\n                    let liner = Liner(self, double = False)\n                    cases.pairs().each {| Pair(i, c) =>\n                        liner.writeLines()\n                        let lastCase = i == cases.size() - 1\n                        self.emitCase(arguments, c, [], [], True, last, False, lastCase, catchAsync)\n                    }\n                    if(last) {\n                        self.writeLine()\n                        self.writeMapped(term.at, \"} while(false)\")\n                    } else {}\n            }\n        }\n        term.{\n            | ECall(_, StaticCall(\"ff:core/Try.Try_finally\", _, _), _, _, [\n                Argument(_, _, ECall(_, StaticCall(\"ff:core/Core.try\", _, _), _, _, [\n                    Argument(_, _, ELambda(_, Lambda(_, tryEffect, [MatchCase(_, [], [], tryBody)])))\n                ], _))\n                Argument(_, _, ELambda(_, Lambda(_, finallyEffect, [MatchCase(_, [], [], finallyBody)])))\n            ], _) =>\n                let tryAsync = self.emittingAsync && effectTypeIsAsync(tryEffect)\n                let finallyAsync = self.emittingAsync && effectTypeIsAsync(finallyEffect)\n                self.writeMapped(term.at, \"try {\")\n                self.writeLine()\n                self.emitStatements(tryBody, last, False, tryAsync)\n                self.writeLine()\n                self.writeMapped(term.at, \"} finally {\")\n                self.writeLine()\n                self.emitStatements(finallyBody, last, False, finallyAsync)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | ECall(_, StaticCall(\"ff:core/Try.Try_catchAny\", _, _), _, _, [\n                Argument(_, _, ECall(_, StaticCall(\"ff:core/Core.try\", _, _), _, _, [\n                    Argument(_, _, ELambda(_, Lambda(_, tryEffect, [MatchCase(_, [], [], tryBody)])))\n                ], _))\n                Argument(_, _, ELambda(_, Lambda(_, catchEffect, [\n                    MatchCase(_, [PVariable(nameAt, name)], [], catchBody)\n                ])))\n            ], _) =>\n                let tryAsync = self.emittingAsync && effectTypeIsAsync(tryEffect)\n                self.writeMapped(term.at, \"try {\")\n                self.writeLine()\n                self.emitStatements(tryBody, last, False, tryAsync)\n                self.writeLine()\n                self.writeMapped(term.at, \"} catch\")\n                name.each {n =>\n                    self.writeMapped(nameAt, \"(\")\n                    self.writeNamed(n, nameAt, escapeKeyword(n))\n                    self.writeMapped(nameAt, \")\")\n                }\n                self.writeMapped(term.at, \" {\")\n                self.writeLine()\n                self.emitStatements(catchBody, last, False, tryAsync)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | ECall(_, StaticCall(\"ff:core/Try.Try_catch\", _, _), _, _, [\n                Argument(_, _, ECall(_, StaticCall(\"ff:core/Core.try\", _, _), _, _, [\n                    Argument(_, _, ELambda(_, Lambda(_, tryEffect, [MatchCase(_, [], [], tryBody)])))\n                ], _))\n                Argument(_, _, ELambda(_, Lambda(_, catchEffect, cases)))\n            ], [dictionary]) =>\n                let tryAsync = self.emittingAsync && effectTypeIsAsync(tryEffect)\n                let d = self.makeDictionary(dictionary)\n                self.writeMapped(term.at, \"try {\")\n                self.writeLine()\n                self.emitStatements(tryBody, last, False, tryAsync)\n                self.writeLine()\n                self.writeMapped(term.at, \"} catch(_error) {\")\n                self.writeLine()\n                self.writeMapped(term.at, \"if(!_error.ffException) throw _error\")\n                self.writeLine()\n                self.writeMapped(term.at, \"const _exception = ff_core_Any.fromAny_(_error.ffException, \")\n                self.writeMapped(term.at, d)\n                self.writeMapped(term.at, \")\")\n                self.writeLine()\n                self.writeMapped(term.at, \"if(!_exception.Some) throw _error\")\n                self.writeLine()\n                emitCatch(catchEffect, cases)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | ECall(_, StaticCall(\"ff:core/Try.Try_finally\", _, _), _, _, [\n                Argument(_, _, ECall(_, StaticCall(\"ff:core/Try.Try_catch\", _, _), _, _, [\n                    Argument(_, _, ECall(_, StaticCall(\"ff:core/Core.try\", _, _), _, _, [\n                        Argument(_, _, ELambda(_, Lambda(_, tryEffect, [MatchCase(_, [], [], tryBody)])))\n                    ], _))\n                    Argument(_, _, ELambda(_, Lambda(_, catchEffect, cases)))\n                ], [dictionary]))\n                Argument(_, _, ELambda(_, Lambda(_, finallyEffect, [MatchCase(_, [], [], finallyBody)])))\n            ], _) =>\n                let tryAsync = self.emittingAsync && effectTypeIsAsync(tryEffect)\n                let finallyAsync = self.emittingAsync && effectTypeIsAsync(finallyEffect)\n                let d = self.makeDictionary(dictionary)\n                self.writeMapped(term.at, \"try {\")\n                self.writeLine()\n                self.emitStatements(tryBody, last, False, tryAsync)\n                self.writeLine()\n                self.writeMapped(term.at, \"} catch(_error) {\")\n                self.writeLine()\n                self.writeMapped(term.at, \"if(!_error.ffException) throw _error\")\n                self.writeLine()\n                self.writeMapped(term.at, \"const _exception = ff_core_Any.fromAny_(_error.ffException, \")\n                self.writeMapped(term.at, d)\n                self.writeMapped(term.at, \")\")\n                self.writeLine()\n                self.writeMapped(term.at, \"if(!_exception.Some) throw _error\")\n                self.writeLine()\n                emitCatch(catchEffect, cases)\n                self.writeLine()\n                self.writeMapped(term.at, \"} finally {\")\n                self.writeLine()\n                self.emitStatements(finallyBody, last, False, finallyAsync)\n                self.writeLine()\n                self.writeMapped(term.at, \"}\")\n                True\n            | _ =>\n                False\n        }\n    }\n\n    emitCase(\n        arguments: List[() => Unit]\n        matchCase: MatchCase\n        conditions: List[() => Unit]\n        variables: List[() => Unit]\n        jump: Bool\n        last: Bool\n        break: Bool\n        lastCase: Bool\n        async: Bool\n    ) {\n        function emitWrapperStart() {\n            if(conditions.isEmpty()) {\n                self.writeMapped(matchCase.at, \"{\")\n            } else {\n                self.writeMapped(matchCase.at, \"if(\")\n                conditions.pairs().each {| Pair(i, c) => \n                    c()\n                    if(i < conditions.size() - 1) {\n                        self.writeMapped(matchCase.at, \" && \")\n                    }\n                }\n                self.writeMapped(matchCase.at, \") {\")\n            }\n            self.writeLine()\n            variables.each {_()}\n        }\n\n        function emitWrapperEnd() {\n            self.writeLine()\n            self.writeMapped(matchCase.at, \"}\")\n        }\n\n        Pair(matchCase.patterns, matchCase.guards).{\n            | Pair([p, ...ps], _) =>\n                self.emitPattern(\n                    arguments.grab(0)\n                    p\n                    arguments.dropFirst()\n                    matchCase.MatchCase(patterns = ps)\n                    conditions\n                    variables\n                    jump\n                    last\n                    break\n                    lastCase\n                    async\n                )\n            | Pair([], [MatchGuard(_, e, PVariant(_, \"ff:core/Bool.True\", _))]) {variables.isEmpty()} =>\n                let newCase = matchCase.MatchCase(patterns = [], guards = [])\n                self.emitCase([], newCase, [...conditions, {self.emitTerm(e, async)}], [], jump, last, break, lastCase, async)\n            | Pair([], [MatchGuard(_, e, PVariant(_, \"ff:core/Bool.True\", _))]) =>\n                let newCase = matchCase.MatchCase(patterns = [], guards = [])\n                emitWrapperStart()\n                self.emitCase([], newCase, [{self.emitTerm(e, async)}], [], jump, last, break, lastCase, async)\n                emitWrapperEnd()\n            | Pair([], [guard, ...guards]) =>\n                let guardName = \"_guard\" + (guards.size() + 1)\n                let newCase = matchCase.MatchCase(patterns = [guard.pattern], guards = guards)\n                emitWrapperStart()\n                self.writeMapped(guard.at, \"const \" + guardName + \" = \")\n                self.emitTerm(guard.term, async)\n                self.writeMapped(guard.at, \";\")\n                self.writeLine()\n                self.emitCase([{self.writeMapped(guard.at, guardName)}], newCase, [], [], jump, last, break, lastCase, async)\n                emitWrapperEnd()\n            | Pair([], []) =>\n                emitWrapperStart()\n                self.emitStatements(matchCase.body, last, break, async)\n                let returns = self.writtenStrings.last().any {line => \n                    line.first().any {part => \n                        part.startsWith(\"return \") || \n                        part.startsWith(\"break \") ||\n                        part.startsWith(\"continue \") ||\n                        part.startsWith(\"return;\") || \n                        part.startsWith(\"break;\") ||\n                        part.startsWith(\"continue;\") ||\n                        part.startsWith(\"throw \")\n                    }\n                }\n                if(jump && last && !returns) {\n                    self.writeLine()\n                    self.writeMapped(matchCase.at, \"return\")\n                } elseIf {jump && !returns && !lastCase} {\n                    self.writeLine()\n                    self.writeMapped(matchCase.at, if(break) {\"continue\"} else {\"break\"})\n                }\n                emitWrapperEnd()\n        }\n    }\n\n    emitPattern(\n        argument: () => Unit\n        pattern: MatchPattern\n        arguments: List[() => Unit]\n        matchCase: MatchCase\n        conditions: List[() => Unit]\n        variables: List[() => Unit]\n        jump: Bool\n        last: Bool\n        break: Bool\n        lastCase: Bool\n        async: Bool\n    ) {\n        function addUnaryCondition(at: Location, operator: String, right: () => Unit): List[() => Unit] {\n            addCondition {\n                self.writeMapped(at, operator)\n                right()\n            }\n        }\n        function addBinaryCondition(at: Location, operator: String, left: () => Unit, right: () => Unit): List[() => Unit] {\n            addCondition {\n                left()\n                self.writeMapped(at, \" \" + operator + \" \")\n                right()\n            }\n        }\n        function addCondition(condition: () => Unit): List[() => Unit] {\n            if(lastCase) {conditions} else {[...conditions, condition]}\n        }\n        pattern.{\n            | PString(_, value) =>\n                let newConditions = addBinaryCondition(pattern.at, \"===\", argument, {self.writeMapped(pattern.at, value)})\n                self.emitCase(arguments, matchCase, newConditions, variables, jump, last, break, lastCase, async)\n            | PInt(_, value) =>\n                let newConditions = addBinaryCondition(pattern.at, \"===\", argument, {self.writeMapped(pattern.at, value)})\n                self.emitCase(arguments, matchCase, newConditions, variables, jump, last, break, lastCase, async)\n            | PChar(_, value) =>\n                let newConditions = addBinaryCondition(pattern.at, \"===\", argument, {self.writeMapped(pattern.at, charLiteralToNumber(value))})\n                self.emitCase(arguments, matchCase, newConditions, variables, jump, last, break, lastCase, async)\n            | PVariable(_, None) =>\n                self.emitCase(arguments, matchCase, conditions, variables, jump, last, break, lastCase, async)\n            | PVariable(at, Some(name)) =>\n                let newVariables = [...variables, {\n                    self.writeMapped(at, \"const \")\n                    self.writeNamed(name, at, escapeKeyword(name))\n                    self.writeMapped(at, \" = \")\n                    argument()\n                    self.writeMapped(at, \";\")\n                    self.writeLine()\n                }]\n                self.emitCase(arguments, matchCase, conditions, newVariables, jump, last, break, lastCase, async)\n            | PVariant(at, \"ff:core/Bool.False\", []) =>\n                self.emitCase(arguments, matchCase, addUnaryCondition(at, \"!\", argument), variables, jump, last, break, lastCase, async)\n            | PVariant(_, \"ff:core/Bool.True\", []) =>\n                self.emitCase(arguments, matchCase, addCondition(argument), variables, jump, last, break, lastCase, async)\n            | PVariant(at, emptyOrLink, _) {emptyOrLink == \"List$Empty\" || emptyOrLink == \"List$Link\"} =>\n                mutable restPattern = None\n                function listPatterns(matchPattern: MatchPattern): List[MatchPattern] {\n                    | PVariant(_, \"List$Empty\", []) => \n                        []\n                    | PVariant(_, \"List$Link\", [head, tail]) =>\n                        [head, ...listPatterns(tail)]\n                    | p =>\n                        restPattern = Some(p)\n                        []\n                }\n                let patterns = listPatterns(pattern)\n                let itemArguments = patterns.pairs().map {| Pair(i, _) => {\n                    argument()\n                    self.writeMapped(at, \"[\" + i + \"]\")\n                }}\n                let restArgument = restPattern.map {_ => {\n                    argument()\n                    self.writeMapped(at, \".slice(\" + patterns.size() + \")\")\n                }}\n                let newArguments = [...itemArguments, ...restArgument.toList(), ...arguments]\n                let newMatchCase = matchCase.MatchCase(\n                    patterns = [...patterns, ...restPattern.toList(), ...matchCase.patterns]\n                )\n                let operator = restPattern.map {_ => \">=\"}.else {\"===\"}\n                let newConditions = addBinaryCondition(at, operator\n                    {\n                        argument()\n                        self.writeMapped(at, \".length\")\n                    }\n                    {\n                        self.writeMapped(at, \"\" + patterns.size())\n                    }\n                )\n                self.emitCase(newArguments, newMatchCase, newConditions, variables, jump, last, break, lastCase, async)\n            | PVariant(at, name, patterns) =>\n                let processed = self.processVariantCase(at, name, argument)\n                let newMatchCase = matchCase.MatchCase(patterns = [...patterns, ...matchCase.patterns])\n                let newConditions = if(processed.loneVariant || lastCase) {conditions} else {\n                    [...conditions, {\n                        argument()\n                        self.writeMapped(at, \".\")\n                        self.writeNamed(processed.variantName, at, processed.variantName)\n                    }]\n                }\n                let newArguments = [...processed.arguments, ...arguments]\n                self.emitCase(newArguments, newMatchCase, newConditions, variables, jump, last, break, lastCase, async)\n            | PVariantAs(at, name, variableAt, variable) =>\n                let processed = self.processVariantCase(at, name, argument)\n                let newConditions = if(processed.loneVariant || lastCase) {conditions} else {\n                    [...conditions, {\n                        argument()\n                        self.writeMapped(at, \".\")\n                        self.writeNamed(processed.variantName, at, processed.variantName)\n                    }]\n                }\n                let newVariables = variable.map {x =>\n                    [...variables, {\n                        self.writeMapped(at, \"const \")\n                        self.writeNamed(x, at, escapeKeyword(x))\n                        self.writeMapped(at, \" = \")\n                        argument()\n                        self.writeMapped(at, \";\")\n                        self.writeLine()\n                    }]\n                }.else {variables}\n                self.emitCase(arguments, matchCase, newConditions, newVariables, jump, last, break, lastCase, async)\n            | PAlias(at, pattern, variable) =>\n                let newVariables = [...variables, {\n                    self.writeMapped(at, \"const \")\n                    self.writeNamed(variable, at, escapeKeyword(variable))\n                    self.writeMapped(at, \" = \")\n                    argument()\n                    self.writeMapped(at, \";\")\n                    self.writeLine()                    \n                }]\n                self.emitPattern(argument, pattern, arguments, matchCase, conditions, newVariables, jump, last, break, lastCase, async)\n        }\n    }\n\n    emitList(at: Location, items: List[Pair[Term, Bool]], async: Bool) {\n        self.writeMapped(at, \"[\")\n        let comma = Comma(self)\n        items.each {\n            | Pair(item, False) => \n                comma.writeComma()\n                self.emitTerm(item, async)\n            | Pair(item, True) => \n                comma.writeComma()\n                self.writeMapped(item.at, \"...\")\n                self.emitTerm(item, async)\n        }\n        self.writeMapped(at, \"]\")\n    }\n\n    processVariantCase(at: Location, name: String, argument: () => Unit): ProcessedVariantCase {\n        let variantNameUnqualified = name.reverse().takeWhile {_ != '.'}.reverse()\n        let variantName = escapeKeyword(variantNameUnqualified)\n        let moduleName = name.dropLast(variantNameUnqualified.size() + 1)\n        let variantModule = self.otherModules.grab(moduleName)\n        mutable newtype = False\n        mutable loneVariant = False\n        let newArguments = variantModule.types.collectFirst {definition =>\n            definition.variants.find {_.name == variantName }.map {variant =>\n                newtype = definition.newtype\n                loneVariant = definition.variants.size() == 1\n                [...definition.commonFields.map {_.name}, ...variant.fields.map {_.name}]\n            }\n        }.grab().map {field => if(newtype) {argument} else {{\n            argument()\n            self.writeMapped(at, \".\" + escapeKeyword(field))\n        }}}\n        ProcessedVariantCase(variantName, newtype, loneVariant, newArguments)\n    }\n\n    processVariant(name: String): Bool {\n        if(name.startsWith(\"List$\")) {False} else:\n        let variantNameUnqualified = name.reverse().takeWhile {_ != '.'}.reverse()\n        let variantName = escapeKeyword(variantNameUnqualified)\n        let moduleName = name.dropLast(variantNameUnqualified.size() + 1)\n        let variantModule = self.otherModules.grab(moduleName)\n        mutable newtype = False\n        variantModule.types.collectFirst {definition =>\n            definition.variants.find {_.name == variantName}.map {variant =>\n                newtype = definition.newtype\n            }\n        }.grab()\n        newtype\n    }\n\n    emitArgument(callAt: Location, argument: Argument, async: Bool) {\n        argument.value.{\n            | ECall(at, StaticCall(\"ff:core/SourceLocation.callSite\", _, _), _, _, _, _) => \n                self.writeMapped(at, \"\\\"\")\n                self.moduleKey.folders.each {\n                    self.writeMapped(at, _ + \"/\")\n                }\n                self.writeMapped(at, self.moduleKey.name)\n                self.writeMapped(at, \":\" + callAt.line + \":\" + callAt.column)\n                self.writeMapped(at, \",\" + self.moduleKey.packagePair.group + \",\" + self.moduleKey.packagePair.name)\n                self.writeMapped(at, \"\\\"\")\n            | value =>\n                self.emitTerm(value, async)\n        }\n    }\n    \n}\n\ncapability ProcessedVariantCase(\n    variantName: String\n    newtype: Bool\n    loneVariant: Bool\n    arguments: List[() => Unit]\n)\n\nrawJs(at: Location, rawIdentifier: String): Term {\n    let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\n    ECall(at, StaticCall(\"ff:core/Js.rawIdentifier\", False, False), noEffect, [], [\n        Argument(at, None, EString(at, rawIdentifier))\n    ], [])\n}\n\ndetectIfElse(term: Term): List[Pair[Term, Term]] {\n    | ECall(at, StaticCall(\"ff:core/Core.if\", _, _), _, _, [condition, body], _) =>\n        [Pair(condition.value, invokeImmediately(body.value))]\n    | ECall(at, StaticCall(\"ff:core/Option.Option_elseIf\", _, _), _, _, [option, condition, body], _) =>\n        let list = detectIfElse(option.value)\n        if(list.isEmpty()) {[]} else:\n        [Pair(invokeImmediately(condition.value), invokeImmediately(body.value)), ...list]\n    | ECall(at, StaticCall(\"ff:core/Option.Option_else\", _, _), _, _, [option, body], _) =>\n        let list = detectIfElse(option.value)\n        if(list.isEmpty()) {[]} else:\n        [Pair(EVariant(at, \"ff:core/Bool.True\", [], None), invokeImmediately(body.value)), ...list]\n    | _ =>\n        []\n}\n\ninvokeImmediately(function: Term): Term {\n    | ELambda(_, Lambda(_, effect, [MatchCase(_, [], [], body)])) =>\n        body\n    | _ =>\n        let effect = TConstructor(function.at, \"Q$\", []) // Awaits more often than required in async context\n        ECall(function.at, DynamicCall(function, False), effect, [], [], [])\n}\n\nsafeCommable(term: Term): Bool {\n    term.{\n        | EField _ => True\n        | EVariable _ => True\n        | EAssign _ => True\n        | EAssignField _ => True\n        | ECall _ => True\n        | ECopy _ => True\n        | EVariant _ => True\n        | EString(_, _) => True\n        | EInt(_, _) => True\n        | EChar(_, _) => True\n        | EFloat(_, _) => True\n        | EList _ => True\n        | EPipe _ => True\n        | ERecord _ => True\n        | EWildcard _ => True \n        | _ => False\n    }\n}\n\nextractTypeName(type: Type): String {\n    | TVariable(at, index) =>\n        fail(at, \"Unexpected type variable: $\" + index)\n    | TConstructor t =>\n        t.name\n}\n\nfirstTypeName(types: List[Type]): String {\n    types.grabFirst().{\n        | TConstructor t => t.name\n        | TVariable t => fail(t.at, \" is still a unification variable\")\n    }\n}\n\nmakeDictionaryName(traitName: String, typeName: String): String {\n    traitName.replace(\".\", \"_\").replace(\":\", \"_\").replace(\"/\", \"_\") + \"$\" +\n    typeName.replace(\".\", \"_\").replace(\":\", \"_\").replace(\"/\", \"_\")\n}\n\ncharLiteralToNumber(charLiteral: String): String {\n    | \"'\\\\t'\" => \"9\"\n    | \"'\\\\n'\" => \"10\"\n    | \"'\\\\r'\" => \"13\"\n    | \"'\\\\\\\"'\" => \"34\"\n    | \"'\\\\''\" => \"39\"\n    | value => \"\" + value.grab(1).codeUnit\n}\n\nescapeResolved(word: String): String {\n    let parts = word.replace(\":\", \".\").replace(\"/\", \".\").split('.')\n    let initialParts = parts.dropLast()\n    if(initialParts.isEmpty()) {\n        escapeKeyword(parts.grabLast())\n    } else {\n        initialParts.join(\"_\") + \".\" + escapeKeyword(parts.grabLast())\n    }\n}\n\nescapeKeyword(word: String): String {\n    if(word.grabFirst().isAsciiLower()) {word + \"_\"} else {word}\n}\n\neffectTypeIsAsync(effect: Type): Bool {\n    | TConstructor(_, \"Q$\", _) => True\n    | _ => False\n}\n\nsafeBare(quotedString: String): Option[String] {\n    // TODO: And not a reserved word in JS\n    quotedString.removeFirst(\"\\\"\").flatMap {_.removeLast(\"\\\"\")}.filter {s => \n        s.first().any {_.isAsciiLetter()} && s.all {_.isAsciiLetterOrDigit()}\n    }\n}\n\nnoSideEffects(term: Term): Bool {\n    term.{\n        | EField(_, _, e, _) => noSideEffects(e)\n        | EVariable(_, _) => True\n        | ECall(_, StaticCall(\"ff:core/BrowserSystem.BrowserSystem_js\", _, _), _, _, [a], _) => noSideEffects(a.value)\n        | ECall(_, StaticCall(\"ff:core/BuildSystem.BuildSystem_js\", _, _), _, _, [a], _) => noSideEffects(a.value)\n        | ECall(_, StaticCall(\"ff:core/NodeSystem.NodeSystem_js\", _, _), _, _, [a], _) => noSideEffects(a.value)\n        | ECall(_, StaticCall(\"ff:core/Js.jsSystem\", _, _), _, _, _, _) => True\n        | EString(_, _) => True\n        | EInt(_, _) => True\n        | EChar(_, _) => True\n        | EFloat(_, _) => True\n        | _ => False\n    }\n}\n\nprimitiveTypes = [\n    \"ff:core/Bool.Bool\"\n    \"ff:core/Char.Char\"\n    \"ff:core/Int.Int\"\n    \"ff:core/Float.Float\"\n    \"ff:core/String.String\"\n].toSet()\n\nclass Liner(emitter: JsEmitter, double: Bool, mutable first: Bool = True)\n\nextend self: Liner {\n    writeLines() {\n        if(self.first) {\n            self.first = False\n        } else {\n            self.emitter.writeLine()\n            if(self.double) {self.emitter.writeLine()}\n        }\n    }\n}\n\nclass Comma(emitter: JsEmitter, mutable first: Bool = True, delimiter: String = \", \")\n\nextend self: Comma {\n    writeComma() {\n        if(self.first) {\n            self.first = False\n        } else {\n            self.emitter.writeUnmapped(self.delimiter)\n        }\n    }\n}\n"
    ],
    "names": [
        "JsEmitter",
        "otherModules",
        "jsImporter",
        "emitTarget",
        "isMainModule",
        "compilerModuleFileUrl",
        "moduleKey",
        "emittingAsync",
        "tailCallUsed",
        "writtenColumn",
        "writtenStrings",
        "writtenSegments",
        "writtenAnchors",
        "writtenNames",
        "EmitNode",
        "EmitBrowser",
        "EmitBuild",
        "EmitExecutable",
        "ProcessedVariantCase",
        "variantName",
        "newtype",
        "loneVariant",
        "arguments",
        "Liner",
        "emitter",
        "double",
        "first",
        "Comma",
        "delimiter",
        "primitiveTypes",
        "toSet",
        "new",
        "toMap",
        "map",
        "m",
        "Pair",
        "qualifiedName",
        "toArray",
        "fail",
        "at",
        "message",
        "throw",
        "CompileError",
        "rawJs",
        "rawIdentifier",
        "noEffect",
        "TConstructor",
        "ECall",
        "StaticCall",
        "Argument",
        "None",
        "EString",
        "detectIfElse",
        "term",
        "condition",
        "body",
        "value",
        "invokeImmediately",
        "option",
        "list",
        "isEmpty",
        "EVariant",
        "function",
        "ELambda",
        "effect",
        "DynamicCall",
        "safeCommable",
        "EField",
        "EVariable",
        "EAssign",
        "EAssignField",
        "ECopy",
        "EInt",
        "EChar",
        "EFloat",
        "EList",
        "EPipe",
        "ERecord",
        "EWildcard",
        "extractTypeName",
        "type",
        "TVariable",
        "index",
        "t",
        "name",
        "firstTypeName",
        "types",
        "grabFirst",
        "makeDictionaryName",
        "traitName",
        "typeName",
        "replace",
        "charLiteralToNumber",
        "charLiteral",
        "grab",
        "escapeResolved",
        "word",
        "parts",
        "split",
        "initialParts",
        "dropLast",
        "escapeKeyword",
        "grabLast",
        "join",
        "isAsciiLower",
        "effectTypeIsAsync",
        "safeBare",
        "quotedString",
        "filter",
        "flatMap",
        "removeFirst",
        "w1",
        "removeLast",
        "s",
        "any",
        "isAsciiLetter",
        "all",
        "isAsciiLetterOrDigit",
        "noSideEffects",
        "e",
        "a",
        "writeUnmapped",
        "self",
        "text",
        "writeMapped",
        "line",
        "column",
        "writeNamed",
        "unqualified",
        "reverse",
        "takeWhile",
        "c",
        "nameIndex",
        "getOrSet",
        "size",
        "writeLine",
        "writeAnchor",
        "writeAnchorLines",
        "anchor",
        "lines",
        "has",
        "set",
        "makeOutput",
        "makeOutputAndSourceMap",
        "task",
        "fireflyFile",
        "fireflySource",
        "emitModule",
        "module",
        "selfImport",
        "emitImport",
        "imports",
        "flatten",
        "toList",
        "sortBy",
        "liner",
        "writeLines",
        "import",
        "emitTypeDefinition",
        "lets",
        "emitLetDefinition",
        "functions",
        "emitFunctionDefinition",
        "withEmittingAsync",
        "extends",
        "emitExtendsDefinition",
        "instances",
        "emitInstanceDefinition",
        "ignoreJsImports",
        "equals",
        "isCore",
        "packagePair",
        "jsImports",
        "generateImports",
        "dots",
        "repeat",
        "folders",
        "jsImportName",
        "groupName",
        "jsImportFrom",
        "makeRun",
        "moduleName",
        "mainPackagePair",
        "bootstrapping",
        "buildMainFunction",
        "find",
        "signature",
        "notEquals",
        "willRunOnNode",
        "targetMain",
        "mainFunction",
        "orElse",
        "else",
        "mainName",
        "buildMain",
        "group",
        "definition",
        "mutable",
        "async",
        "emitTerm",
        "methods",
        "method",
        "DFunction",
        "Signature",
        "member",
        "generics",
        "constraints",
        "parameters",
        "returnType",
        "typeArguments",
        "dictionaries",
        "suffix",
        "asMethod",
        "emitSignature",
        "matchCase",
        "patterns",
        "PVariable",
        "emitTailCall",
        "emitStatements",
        "cases",
        "convertAndCheck",
        "p",
        "argumentTerms",
        "lastCase",
        "i",
        "emitCase",
        "outerTailCallUsed",
        "prefix",
        "asyncSuffix",
        "fullPrefix",
        "comma",
        "writeComma",
        "emitParameter",
        "parameter",
        "default",
        "variants",
        "emitVariantDefinition",
        "typeDefinition",
        "allFields",
        "commonFields",
        "fields",
        "emitFields",
        "f",
        "emitConstructor",
        "ignored",
        "startsWith",
        "dropFirst",
        "items",
        "emitList",
        "processVariant",
        "emitArgument",
        "EVariantIs",
        "n",
        "record",
        "field",
        "newAsync",
        "each",
        "Some",
        "patternAt",
        "pairs",
        "second",
        "await",
        "emitAssignment",
        "emitSpecialCall",
        "dictionaryStrings",
        "makeDictionary",
        "ds",
        "d",
        "elseBody",
        "ESequential",
        "before1",
        "before2",
        "before3",
        "after",
        "before",
        "emitField",
        "dot",
        "q",
        "last",
        "break",
        "EFunctions",
        "ELet",
        "valueType",
        "DLet",
        "instanceCall",
        "emitSpecialStatement",
        "emitted",
        "e1",
        "e2",
        "e3",
        "operator",
        "left",
        "right",
        "contains",
        "call",
        "l",
        "variableAt",
        "url",
        "add",
        "isAsciiDigit",
        "patternParameters",
        "panic",
        "op",
        "a1",
        "a2",
        "es",
        "go",
        "a3",
        "as",
        "bare",
        "argumentCode",
        "to",
        "grabInt",
        "taskCode",
        "doWhileBody",
        "nameAt",
        "r",
        "start",
        "end",
        "endsWith",
        "PVariant",
        "list1",
        "list2",
        "at1",
        "name1",
        "at2",
        "name2",
        "emitLightFusion",
        "array",
        "argument",
        "dictionary",
        "emitTryCatchFinally",
        "isArray",
        "wrapUnlessInt",
        "emitCatch",
        "catchEffect",
        "catchAsync",
        "case",
        "cs",
        "tryEffect",
        "tryBody",
        "finallyEffect",
        "finallyBody",
        "tryAsync",
        "finallyAsync",
        "catchBody",
        "conditions",
        "variables",
        "jump",
        "emitWrapperStart",
        "emitWrapperEnd",
        "guards",
        "ps",
        "emitPattern",
        "MatchCase",
        "newCase",
        "guard",
        "guardName",
        "pattern",
        "returns",
        "part",
        "addUnaryCondition",
        "addCondition",
        "addBinaryCondition",
        "PString",
        "newConditions",
        "PInt",
        "PChar",
        "newVariables",
        "emptyOrLink",
        "restPattern",
        "listPatterns",
        "matchPattern",
        "head",
        "tail",
        "itemArguments",
        "restArgument",
        "newArguments",
        "newMatchCase",
        "processed",
        "processVariantCase",
        "PVariantAs",
        "variable",
        "x",
        "item",
        "variantNameUnqualified",
        "variantModule",
        "collectFirst",
        "variant",
        "callAt",
        "EmitTarget",
        "anyTag",
        "internalAnyTag",
        "show",
        "z",
        "y",
        "compare",
        "OrderingSame",
        "number",
        "serializeUsing",
        "serialization",
        "v",
        "checksum",
        "bitOr",
        "autoResize",
        "setUint8",
        "buffer",
        "offset",
        "deserializeUsing",
        "variantIndex",
        "grabUint8",
        "DeserializationChecksumException"
    ],
    "mappings": ""
}