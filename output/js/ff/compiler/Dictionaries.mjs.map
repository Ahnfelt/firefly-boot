{
    "version": 3,
    "sources": [
        "../../../../../compiler/Dictionaries.ff"
    ],
    "sourcesContent": [
        "import Syntax\r\nimport Unification\r\nimport Environment\r\n\r\ndata Dictionaries(\r\n    instances: Map[InstanceKey, InstanceValue]\r\n)\r\n\r\nnew(modules: List[Module]): Dictionaries {\r\n    Dictionaries(Unification.new(modules, False).instances)\r\n}\r\n\r\nfail[T](at: Location, message: String): T {\r\n    panic(message + \" \" + at.show())\r\n}\r\n\r\nextend self: Dictionaries {\r\n\r\n    processModule(module: Module, otherModules: List[Module]): Module {\r\n        let environment = Environment.new(module, otherModules, alreadyFlat = True)\r\n        let functionSignatures = environment.symbols.pairs().collect {\r\n            | Pair(name, s) {!s.isVariable} => Some(Pair(name, s.signature))\r\n            | _ => None\r\n        }.toMap()\r\n\r\n        let lets = module.lets.map {self.processLetDefinition(functionSignatures, _)}\r\n        let functions = module.functions.map {self.processFunctionDefinition(functionSignatures, _)}\r\n        let extends = module.extends.map {self.processExtendDefinition(functionSignatures, _)}\r\n        //let traits = module.traits.map {self.processTraitDefinition(functionSignatures, _)}\r\n        let instances = module.instances.map {self.processInstanceDefinition(functionSignatures, _)}\r\n        module.Module(\r\n            //traits = traits,\r\n            instances = instances\r\n            extends = extends\r\n            lets = lets\r\n            functions = functions\r\n        )\r\n    }\r\n\r\n    processLetDefinition(functions: Map[String, Signature], definition: DLet): DLet {\r\n        definition.DLet(\r\n            value = self.processTerm(functions, definition.value)\r\n        )\r\n    }\r\n\r\n    processExtendDefinition(functions: Map[String, Signature], definition: DExtend): DExtend {\r\n        definition.DExtend(\r\n            methods = definition.methods.map { self.processFunctionDefinition(functions, _) }\r\n        )\r\n    }\r\n\r\n    processFunctionDefinition(functions: Map[String, Signature], definition: DFunction): DFunction {\r\n        let instances = constraintsToInstances(definition.signature.constraints)\r\n        let self2 = self.Dictionaries(instances = self.instances.addAll(instances))\r\n        definition.DFunction(\r\n            body = self2.processLambda(functions, definition.body)\r\n        )\r\n    }\r\n\r\n    processInstanceDefinition(functions: Map[String, Signature], definition: DInstance): DInstance {\r\n        let instances = constraintsToInstances(definition.constraints)\r\n        let self2 = self.Dictionaries(instances = self.instances.addAll(instances))\r\n        definition.DInstance(\r\n            methods = definition.methods.map { self2.processFunctionDefinition(functions, _) }\r\n        )\r\n    }\r\n\r\n    processLambda(functions: Map[String, Signature], definition: Lambda): Lambda {\r\n        definition.Lambda(\r\n            cases = definition.cases.map { case =>\r\n                // TODO: Remove the case variables from the functions\r\n                case.MatchCase(\r\n                    guards = case.guards.map { g => g.MatchGuard(term = self.processTerm(functions, g.term)) }\r\n                    body = self.processTerm(functions, case.body)\r\n                )\r\n            }\r\n        )\r\n    }\r\n\r\n    processTerm(functions: Map[String, Signature], term: Term): Term {\r\n        term.{\r\n            | EString _ => term\r\n            | EChar _ => term\r\n            | EInt _ => term\r\n            | EFloat _ => term\r\n            | EVariable _ => term\r\n            | EField e => e.EField(record = self.processTerm(functions, e.record))\r\n            | EWildcard e => term\r\n            | EList e => e.EList(\r\n                items = e.items.map {| Pair(item, b) => Pair(self.processTerm(functions, item), b) }\r\n            )\r\n            | ESequential e => e.ESequential(\r\n                before = self.processTerm(functions, e.before)\r\n                after = self.processTerm(functions, e.after)\r\n            )\r\n            | ELet e =>\r\n                let newFunctions = functions.remove(e.name)\r\n                e.ELet(\r\n                    value = self.processTerm(functions, e.value)\r\n                    body = self.processTerm(newFunctions, e.body)\r\n                )\r\n            | ELambda e => e.ELambda(lambda = self.processLambda(functions, e.lambda))\r\n            | EVariant e => e.EVariant(\r\n                arguments = e.arguments.map { _.map { self.processArgument(functions, _) } }\r\n            )\r\n            | EVariantIs e => term\r\n            | ECopy e => e.ECopy(\r\n                record = self.processTerm(functions, e.record)\r\n                arguments = e.arguments.map { self.processField(functions, _) }\r\n            )\r\n            | EPipe e => e.EPipe(\r\n                value = self.processTerm(functions, e.value)\r\n                function = self.processTerm(functions, e.function)\r\n            )\r\n            | ECall(at, StaticCall target, effect, typeArguments, arguments, _) {\r\n                functions.get(target.name) | Some(signature)\r\n            } =>\r\n                let dictionaries = signature.constraints.map {\r\n                    self.makeDictionary(at, signature.generics, typeArguments, _)\r\n                }\r\n                ECall(\r\n                    at = at\r\n                    target = target.StaticCall()\r\n                    effect = effect\r\n                    typeArguments = typeArguments\r\n                    arguments = arguments.map { self.processArgument(functions, _) }\r\n                    dictionaries = dictionaries\r\n                )\r\n            | ECall e =>\r\n                let target = e.target.{\r\n                    | DynamicCall call => call.DynamicCall(function = self.processTerm(functions, call.function))\r\n                    | StaticCall _ => e.target\r\n                }\r\n                e.ECall(\r\n                    target = target\r\n                    arguments = e.arguments.map { self.processArgument(functions, _) }\r\n                )\r\n            | ERecord e => e.ERecord(fields = e.fields.map { self.processField(functions, _) })\r\n            | EFunctions e =>\r\n                let newFunctions = functions.addAll(e.functions.map { f =>\r\n                    Pair(f.signature.name, f.signature)\r\n                }.toMap())\r\n                e.EFunctions(\r\n                    functions = e.functions.map { self.processFunctionDefinition(newFunctions, _) }\r\n                    body = self.processTerm(newFunctions, e.body)\r\n                )\r\n            | EAssign e => e.EAssign(value = self.processTerm(functions, e.value))\r\n            | EAssignField e => e.EAssignField(\r\n                record = self.processTerm(functions, e.record)\r\n                value = self.processTerm(functions, e.value)\r\n            )\r\n        }\r\n    }\r\n\r\n    processArgument(functions: Map[String, Signature], argument: Argument): Argument {\r\n        argument.Argument(value = self.processTerm(functions, argument.value))\r\n    }\r\n\r\n    processField(functions: Map[String, Signature], field: Field): Field {\r\n        field.Field(value = self.processTerm(functions, field.value))\r\n    }\r\n\r\n    makeDictionary(\r\n        at: Location,\r\n        typeParameters: List[String],\r\n        typeArguments: List[Type],\r\n        constraint: Constraint\r\n    ): Dictionary {\r\n        let instantiationMap = typeParameters.zip(typeArguments).toMap()\r\n        let unification = Unification.new([], False)\r\n        let newGenerics = constraint.generics.map {unification.instantiate(instantiationMap, _)}\r\n        newGenerics.grabFirst().{\r\n            | TConstructor firstType =>\r\n                let instance = self.instances.get(InstanceKey(constraint.name, firstType.name)).else {\r\n                    throw(CompileError(at, \"Missing instance \" + firstType.name + \": \" + constraint.name))\r\n                }\r\n                let dictionaries = instance.constraints.map {c =>\r\n                    self.makeDictionary(at, instance.generics, firstType.generics, c)\r\n                }\r\n                Dictionary(instance.moduleKey, constraint.name, firstType.name, dictionaries)\r\n            | TVariable t => fail(t.at, \" is still a unification variable\")\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconstraintsToInstances(constraints: List[Constraint]): Map[InstanceKey, InstanceValue] {\r\n    constraints.map { c =>\r\n        let typeName = c.generics.grabFirst().{\r\n            | TConstructor(_, name, _) => name\r\n            | TVariable(_, i) => fail(c.at, \"Unexpected unification variable: $\" + i)\r\n        }\r\n        Pair(\r\n            InstanceKey(c.name, typeName)\r\n            InstanceValue(\r\n                generics = []\r\n                constraints = []\r\n                moduleKey = ModuleKey(PackagePair(\"\", \"\"), [], \"\")\r\n                traitName = c.name\r\n                typeArguments = c.generics\r\n            )\r\n        )\r\n    }.toMap()\r\n}\r\n"
    ],
    "names": [
        "Dictionaries",
        "instances",
        "new",
        "modules",
        "fail",
        "at",
        "message",
        "panic",
        "show",
        "constraintsToInstances",
        "constraints",
        "toMap",
        "map",
        "c",
        "typeName",
        "TConstructor",
        "name",
        "i",
        "grabFirst",
        "generics",
        "Pair",
        "InstanceKey",
        "InstanceValue",
        "ModuleKey",
        "PackagePair",
        "processModule",
        "self",
        "module",
        "otherModules",
        "environment",
        "functionSignatures",
        "collect",
        "pairs",
        "symbols",
        "s",
        "isVariable",
        "Some",
        "signature",
        "None",
        "lets",
        "w1",
        "processLetDefinition",
        "functions",
        "processFunctionDefinition",
        "extends",
        "processExtendDefinition",
        "processInstanceDefinition",
        "Module",
        "moduleKey",
        "imports",
        "types",
        "traits",
        "definition",
        "DLet",
        "variableType",
        "processTerm",
        "value",
        "DExtend",
        "type",
        "methods",
        "self2",
        "addAll",
        "DFunction",
        "processLambda",
        "body",
        "DInstance",
        "traitName",
        "typeArguments",
        "generatorArguments",
        "derived",
        "Lambda",
        "effect",
        "cases",
        "case",
        "MatchCase",
        "patterns",
        "guards",
        "g",
        "MatchGuard",
        "term",
        "pattern",
        "EString",
        "EChar",
        "EInt",
        "EFloat",
        "EVariable",
        "EField",
        "e",
        "newtype",
        "record",
        "field",
        "EWildcard",
        "EList",
        "elementType",
        "items",
        "item",
        "b",
        "ESequential",
        "before",
        "after",
        "ELet",
        "newFunctions",
        "remove",
        "mutable",
        "valueType",
        "ELambda",
        "lambda",
        "EVariant",
        "arguments",
        "processArgument",
        "EVariantIs",
        "ECopy",
        "processField",
        "EPipe",
        "function",
        "ECall",
        "StaticCall",
        "target",
        "get",
        "dictionaries",
        "makeDictionary",
        "tailCall",
        "instanceCall",
        "DynamicCall",
        "call",
        "ERecord",
        "fields",
        "EFunctions",
        "f",
        "EAssign",
        "operator",
        "variable",
        "EAssignField",
        "argument",
        "Argument",
        "Field",
        "typeParameters",
        "constraint",
        "instantiationMap",
        "zip",
        "unification",
        "newGenerics",
        "instantiate",
        "firstType",
        "instance",
        "else",
        "throw",
        "CompileError",
        "Dictionary",
        "t",
        "anyTag",
        "internalAnyTag",
        "z",
        "equals",
        "x",
        "y",
        "compare",
        "OrderingSame",
        "instancesOrdering",
        "serializeUsing",
        "serialization",
        "v",
        "checksum",
        "bitOr",
        "autoResize",
        "setUint8",
        "buffer",
        "offset",
        "deserializeUsing",
        "variantIndex",
        "grabUint8",
        "DeserializationChecksumException"
    ],
    "mappings": ""
}