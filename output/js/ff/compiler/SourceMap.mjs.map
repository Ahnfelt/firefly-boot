{
    "version": 3,
    "sources": [
        "../../../../../compiler/SourceMap.ff"
    ],
    "sourcesContent": [
        "makeOutputAndSourceMap(\r\n    task: Task\r\n    fireflyFile: String\r\n    fireflySource: Option[String]\r\n    writtenStrings: Array[Array[String]]\r\n    writtenSegments: Array[Array[List[Int]]]\r\n    writtenAnchors: IntMap[List[String]]\r\n    writtenNames: StringMap[Int]\r\n): Pair[String, Json] {\r\n    let start = task.elapsed()\r\n    let lines = Array.new()\r\n    let output = Array.new()\r\n    mutable index = 0\r\n    mutable lastSource = 0\r\n    mutable lastLine = 0\r\n    mutable lastColumn = 0\r\n    mutable lastName = 0\r\n    writtenStrings.drain().zip(writtenSegments.drain()).each {| Pair(strings, segments) =>\r\n        writtenAnchors.get(index).each {anchorLines =>\r\n            anchorLines.each {l =>\r\n                lines.push([])\r\n                output.push(l)\r\n                output.push(\"\\n\")\r\n            }\r\n        }\r\n        mutable lastOutputColumn = 0\r\n        let line = Array.new()\r\n        segments.each {segment =>\r\n            let relative = Array.new()\r\n            let newOutputColumn = segment.grab(0)\r\n            relative.push(newOutputColumn - lastOutputColumn)\r\n            lastOutputColumn = newOutputColumn\r\n            if(segment.size() > 1) {\r\n                let newSource = segment.grab(1)\r\n                relative.push(newSource - lastSource)\r\n                lastSource = newSource\r\n                let newLine = segment.grab(2)\r\n                relative.push(newLine - lastLine)\r\n                lastLine = newLine\r\n                let newColumn = segment.grab(3)\r\n                relative.push(newColumn - lastColumn)\r\n                lastColumn = newColumn\r\n                if(segment.size() == 5) {\r\n                    let newName = segment.grab(4)\r\n                    relative.push(newName - lastName)\r\n                    lastName = newName\r\n                }\r\n            }\r\n            line.push(relative.drain())\r\n        }\r\n        lines.push(line.drain())\r\n        strings.each {output.push(_)}\r\n        output.push(\"\\n\")\r\n        index += 1\r\n    }\r\n    let mapLines = lines.drain()\r\n    //Log.debug(\"Souce map values: \" + mapLines.flatten().flatten().size())\r\n    let sourceMapStart = task.elapsed()\r\n    let sourceMap = sourceMap([fireflyFile], [fireflySource], writtenNames.keys(), mapLines)\r\n    let sourceMapStop = task.elapsed()\r\n    let sourceMapDuration = sourceMapStop.seconds - sourceMapStart.seconds\r\n    //Log.debug(\"\" + sourceMapDuration + \"s \" + \"sourceMap \" + fireflyFile)\r\n    let result = Pair(output.join(), sourceMap)\r\n    let stop = task.elapsed()\r\n    let duration = stop.seconds - start.seconds\r\n    Log.debug(\"\" + duration + \"s \" + \"makeOutputAndSourceMap \" + fireflyFile)\r\n    \r\n    result\r\n}\r\n\r\nmakeOutput(\r\n    writtenStrings: Array[Array[String]]\r\n    writtenAnchors: IntMap[List[String]]\r\n): String {\r\n    let output = Array.new()\r\n    writtenStrings.drain().pairs().each {| Pair(index, strings) =>\r\n        writtenAnchors.get(index).each {anchorLines =>\r\n            anchorLines.each {l =>\r\n                output.push(l)\r\n            }\r\n        }\r\n        output.push(strings.join())\r\n    }\r\n    output.join(\"\\n\")\r\n}\r\n\r\nsourceMap(\r\n    sources: List[String]\r\n    contents: List[Option[String]]\r\n    names: List[String]\r\n    lines: List[List[List[Int]]]\r\n): Json {\r\n    Json->(\r\n        version = 3\r\n        sources = sources\r\n        sourcesContent = contents.map {_.map {Json.string(_)}.else {Json.null()}}\r\n        names = names\r\n        mappings = toMappings(lines)\r\n    )\r\n}\r\n\r\ntoMappings(lines: List[List[List[Int]]]): String {\r\n    let vlq = Array.new()\r\n    mutable firstLine = True\r\n    lines.each {line =>\r\n        if(firstLine) {\r\n            firstLine = False\r\n        } else {\r\n            vlq.push(';'.codeUnit)\r\n        }\r\n        mutable firstSegment = True\r\n        line.each {segment =>\r\n            if(firstSegment) {\r\n                firstSegment = False\r\n            } else {\r\n                vlq.push(','.codeUnit)\r\n            }\r\n            segment.each {field =>\r\n                internalToVlq(vlq, field)\r\n            }\r\n        }\r\n    }\r\n    toBase64Vlq(vlq.drain())\r\n}\r\n\r\ntoBase64Vlq(vlq: List[Int]): String {\r\n    let result = Buffer.new(vlq.size())\r\n\r\n    0.until(vlq.size()).each {i =>\r\n        result.setUint8(i, base64Characters.grab(vlq.grab(i)).codeUnit)\r\n    }\r\n\r\n    result.toString()\r\n}\r\n\r\ninternalToVlq(vlq: Array[Int], value: Int) {\r\n    mutable digit = 0\r\n    mutable v = value\r\n\r\n    if(v < 0) {\r\n        v = v.abs().bitLeft(1).bitOr(1)\r\n    } else {\r\n        v = v.bitLeft(1)\r\n    }\r\n\r\n    doWhile {\r\n        digit = v.bitAnd(vlqBaseMask)\r\n        v = v.bitRightUnsigned(vlqBaseShift)\r\n        if(v > 0) {\r\n            digit = digit.bitOr(vlqContinuationBit)\r\n        }\r\n        vlq.push(digit)\r\n        v > 0\r\n    }\r\n}\r\n\r\nvlqBaseShift = 5\r\nvlqBaseMask = 1.bitLeft(vlqBaseShift) - 1\r\nvlqContinuationBit = 1.bitLeft(vlqBaseShift)\r\nbase64Characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\r\n"
    ],
    "names": [
        "vlqBaseShift",
        "vlqBaseMask",
        "bitLeft",
        "vlqContinuationBit",
        "base64Characters",
        "makeOutputAndSourceMap",
        "task",
        "fireflyFile",
        "fireflySource",
        "writtenStrings",
        "writtenSegments",
        "writtenAnchors",
        "writtenNames",
        "start",
        "elapsed",
        "lines",
        "new",
        "output",
        "index",
        "lastSource",
        "lastLine",
        "lastColumn",
        "lastName",
        "drain",
        "get",
        "anchorLines",
        "l",
        "lastOutputColumn",
        "line",
        "segments",
        "relative",
        "newOutputColumn",
        "segment",
        "newSource",
        "newLine",
        "newColumn",
        "newName",
        "strings",
        "mapLines",
        "sourceMapStart",
        "sourceMap",
        "keys",
        "sourceMapStop",
        "sourceMapDuration",
        "result",
        "Pair",
        "join",
        "stop",
        "duration",
        "debug",
        "makeOutput",
        "sources",
        "contents",
        "names",
        "object",
        "version",
        "sourcesContent",
        "map",
        "w1",
        "else",
        "null",
        "mappings",
        "toMappings",
        "vlq",
        "firstLine",
        "firstSegment",
        "internalToVlq",
        "field",
        "toBase64Vlq",
        "i",
        "setUint8",
        "grab",
        "toString",
        "value",
        "digit",
        "v",
        "bitOr",
        "abs"
    ],
    "mappings": ""
}