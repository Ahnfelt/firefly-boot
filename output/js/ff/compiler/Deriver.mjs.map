{
    "version": 3,
    "sources": [
        "../../../../../compiler/Deriver.ff"
    ],
    "sourcesContent": [
        "import Syntax\r\n\r\ndata Deriver()\r\n\r\nnew(): Deriver {\r\n    Deriver()\r\n}\r\n\r\nfail[T](at: Location, message: String): T {\r\n    panic(message + \" \" + at.show())\r\n}\r\n\r\nextend self: Deriver {\r\n\r\n    deriveModule(module: Module): Module {\r\n\r\n        let modulePrefix = module.moduleKey.qualifiedName()\r\n\r\n        module.Module(\r\n            instances = [\r\n                ...module.instances\r\n                ...self.makeHasAnyTagInstances(modulePrefix, module)\r\n                ...self.makeShowInstances(modulePrefix, module)\r\n                ...self.makeEqualInstances(modulePrefix, module)\r\n                ...self.makeOrderingInstances(modulePrefix, module)\r\n                ...self.makeSerializableInstances(modulePrefix, module)\r\n            ]\r\n        )\r\n    }\r\n\r\n    // HasAnyTag\r\n    makeHasAnyTagInstances(modulePrefix: String, module: Module): List[DInstance] {\r\n        let coreWhitelist = [\r\n            \"ff:core/Serializable.DeserializationChecksumException\"\r\n            \"ff:core/Core.GrabException\"\r\n            \"ff:core/NodeSystem.ProcessException\"\r\n            \"ff:core/Unit.Unit\"\r\n            \"ff:core/Pair.Pair\"\r\n            \"ff:core/Option.Option\"\r\n            \"ff:core/Int.Int\"\r\n            \"ff:core/Float.Float\"\r\n            \"ff:core/String.String\"\r\n            \"ff:core/Char.Char\"\r\n            \"ff:core/Bool.Bool\"\r\n            \"ff:core/List.List\"\r\n        ].toSet() // Maybe whitelist all?\r\n        let missingInstance =\r\n            self.findTypesThatNeedInstances(\"ff:core/Any.HasAnyTag\", modulePrefix, coreWhitelist, True, module)\r\n        missingInstance.map {self.makeHasAnyTagInstance(modulePrefix, _)}\r\n    }\r\n\r\n    makeHasAnyTagInstance(modulePrefix: String, declaration: DType): DInstance {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let constraints = declaration.generics.map {t =>\r\n            Constraint(at, \"ff:core/Any.HasAnyTag\", [TConstructor(at, t, [])])\r\n        }\r\n        let typeArguments = declaration.generics.map {t =>\r\n            TConstructor(at, t, [])\r\n        }\r\n        let selfTypeName = modulePrefix + \".\" + declaration.name\r\n        let selfType = TConstructor(at, selfTypeName, typeArguments)\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let signature = Signature(\r\n            at = at\r\n            name = \"anyTag\"\r\n            member = False\r\n            generics = []\r\n            constraints = []\r\n            parameters = []\r\n            returnType = TConstructor(at, \"ff:core/Any.AnyTag\", [selfType])\r\n            effect = noEffect\r\n        )\r\n        let typeArgumentStrings = typeArguments.map {\r\n            self.makeMethodCall(at, self.makeSimpleCall(at, \"ff:core/Any.anyTag\", [], [_]), \"show\", [])\r\n        }\r\n        let strings =\r\n            [EString(at, \"\\\"[\\\"\"), ...typeArgumentStrings.separate([EString(at, \"\\\",\\\"\")]), EString(at, \"\\\"]\\\"\")]\r\n        let body = Lambda(at, noEffect, [MatchCase(\r\n            at = at\r\n            patterns = []\r\n            guards = []\r\n            body = self.makeSimpleCall(at, \"ff:core/Any.internalAnyTag\", [\r\n                strings.foldLeft(EString(at, \"\\\"\" + selfTypeName + \"\\\"\")) {a, b =>\r\n                    self.makeSimpleCall(at, \"+\", [a, b])\r\n                }\r\n            ])\r\n        )])\r\n        let method = DFunction(at, signature, body)\r\n        DInstance(\r\n            at = at\r\n            generics = declaration.generics\r\n            constraints = constraints\r\n            traitName = \"ff:core/Any.HasAnyTag\"\r\n            typeArguments = [selfType]\r\n            generatorArguments = []\r\n            methods = [method]\r\n            derived = True\r\n        )\r\n    }\r\n\r\n    // Show\r\n    makeShowInstances(modulePrefix: String, module: Module): List[DInstance] {\r\n        let coreWhitelist = [\r\n            \"ff:core/Option.Option\"\r\n            \"ff:core/Serializable.DeserializationChecksumException\"\r\n            \"ff:core/Core.GrabException\"\r\n            \"ff:core/NodeSystem.ProcessException\"\r\n        ].toSet()\r\n        let missingInstance =\r\n            self.findTypesThatNeedInstances(\"ff:core/Show.Show\", modulePrefix, coreWhitelist, True, module)\r\n        missingInstance.map {self.makeShowInstance(modulePrefix, _)}\r\n    }\r\n\r\n    makeShowInstance(modulePrefix: String, declaration: DType): DInstance {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let constraints = declaration.generics.map {t =>\r\n            Constraint(at, \"ff:core/Show.Show\", [TConstructor(at, t, [])])\r\n        }\r\n        let typeArguments = declaration.generics.map {t =>\r\n            TConstructor(at, t, [])\r\n        }\r\n        let selfType = TConstructor(at, modulePrefix + \".\" + declaration.name, typeArguments)\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let signature = Signature(\r\n            at = at\r\n            name = \"show\"\r\n            member = False\r\n            generics = []\r\n            constraints = []\r\n            parameters = [Parameter(at, False, \"value\", selfType, None)]\r\n            returnType = TConstructor(at, \"ff:core/String.String\", [])\r\n            effect = noEffect\r\n        )\r\n        let body = \r\n            Lambda(at, noEffect, self.makeShowCases(modulePrefix, declaration, selfType))\r\n        let showMethod = DFunction(at, signature, body)\r\n        DInstance(\r\n            at = at\r\n            generics = declaration.generics\r\n            constraints = constraints\r\n            traitName = \"ff:core/Show.Show\"\r\n            typeArguments = [selfType]\r\n            generatorArguments = []\r\n            methods = [showMethod]\r\n            derived = True\r\n        )\r\n    }\r\n\r\n    makeShowCases(modulePrefix: String, declaration: DType, selfType: Type): List[MatchCase] {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let wildcardPattern = PVariable(at, None)\r\n        declaration.variants.{\r\n            | variants =>\r\n                variants.map {variant =>\r\n                    let variantName = modulePrefix + \".\" + variant.name\r\n                    let fields = [...declaration.commonFields, ...variant.fields]\r\n                    let strings = if(fields.size() == 0) {[]} else {[\r\n                        EString(at, \"\\\"(\\\"\")\r\n                        ...fields.map {field =>\r\n                            self.makeSimpleCall(at, \"ff:core/Show.show\", [\r\n                                EField(at, False, EVariable(at, \"z\"), field.name)\r\n                            ])\r\n                        }.separate([EString(at, \"\\\", \\\"\")])\r\n                        EString(at, \"\\\")\\\"\")\r\n                    ]}\r\n                    MatchCase(\r\n                        at = at\r\n                        patterns = [PVariantAs(at, variantName, at, Some(\"z\"))]\r\n                        guards = []\r\n                        body = strings.foldLeft(EString(at, \"\\\"\" + variant.name + \"\\\"\")) {a, b =>\r\n                            self.makeSimpleCall(at, \"+\", [a, b])\r\n                        }\r\n                    )\r\n                }\r\n        }\r\n    }\r\n\r\n    // Ordering\r\n    makeOrderingInstances(modulePrefix: String, module: Module): List[DInstance] {\r\n        let coreWhitelist = [\r\n            \"ff:core/Option.Option\"\r\n        ].toSet()\r\n        let missingInstance =\r\n            self.findTypesThatNeedInstances(\"ff:core/Ordering.Order\", modulePrefix, coreWhitelist, True, module)\r\n        missingInstance.map {self.makeOrderingInstance(modulePrefix, _)}\r\n    }\r\n\r\n    makeOrderingInstance(modulePrefix: String, declaration: DType): DInstance {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let constraints = declaration.generics.map {t =>\r\n            Constraint(at, \"ff:core/Ordering.Order\", [TConstructor(at, t, [])])\r\n        }\r\n        let typeArguments = declaration.generics.map {t =>\r\n            TConstructor(at, t, [])\r\n        }\r\n        let selfType = TConstructor(at, modulePrefix + \".\" + declaration.name, typeArguments)\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let signature = Signature(\r\n            at = at\r\n            name = \"compare\"\r\n            member = False\r\n            generics = []\r\n            constraints = []\r\n            parameters = [\r\n                Parameter(at, False, \"x\", selfType, None)\r\n                Parameter(at, False, \"y\", selfType, None)\r\n            ]\r\n            returnType = TConstructor(at, \"ff:core/Ordering.Ordering\", [])\r\n            effect = noEffect\r\n        )\r\n        let body =\r\n            Lambda(at, noEffect, self.makeOrderingCases(modulePrefix, declaration, selfType))\r\n        let compareMethod = DFunction(at, signature, body)\r\n        DInstance(\r\n            at = at\r\n            generics = declaration.generics\r\n            constraints = constraints\r\n            traitName = \"ff:core/Ordering.Order\"\r\n            typeArguments = [selfType]\r\n            generatorArguments = []\r\n            methods = [compareMethod]\r\n            derived = True\r\n        )\r\n    }\r\n\r\n    makeOrderingCases(modulePrefix: String, declaration: DType, selfType: Type): List[MatchCase] {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let wildcardPattern = PVariable(at, None)\r\n        let sameCase = MatchCase(\r\n            at = at,\r\n            patterns = [wildcardPattern, wildcardPattern]\r\n            guards = [MatchGuard(\r\n                at,\r\n                self.makeSimpleCall(at, \"===\", [EVariable(at, \"x\"), EVariable(at, \"y\")]),\r\n                PVariant(at, \"ff:core/Bool.True\", [])\r\n            )]\r\n            body = EVariant(at, \"ff:core/Ordering.OrderingSame\", [], None)\r\n        )\r\n        declaration.variants.{\r\n            | [variant] =>\r\n                let fields = [...declaration.commonFields, ...variant.fields]\r\n                [sameCase, MatchCase(\r\n                    at = at\r\n                    patterns = [wildcardPattern, wildcardPattern]\r\n                    guards = []\r\n                    body = self.makeOrderingFields(modulePrefix, declaration, fields)\r\n                )]\r\n            | variants =>\r\n                let variantsWithFields = variants.filter {variant =>\r\n                    !declaration.commonFields.isEmpty() || !variant.fields.isEmpty()\r\n                } // We can skip no-arg constructors assuming there are never more than one instance of them\r\n                let sameVariantCases = variantsWithFields.map { variant =>\r\n                    let variantName = modulePrefix + \".\" + variant.name\r\n                    let fields = [...declaration.commonFields, ...variant.fields]\r\n                    MatchCase(\r\n                        at = at,\r\n                        patterns = [PVariantAs(at, variantName, at, Some(\"x\")), PVariantAs(at, variantName, at, Some(\"y\"))]\r\n                        guards = []\r\n                        body = self.makeOrderingFields(modulePrefix, declaration, fields)\r\n                    )\r\n                }\r\n                let intType = TConstructor(at, \"ff:core/Int.Int\", [])\r\n                let numberSignature =\r\n                    Signature(at, \"number\", False, [], [], [Parameter(at, False, \"z\", selfType, None)], intType, noEffect)\r\n                let numberCases = declaration.variants.pairs().map {| Pair(index, variant) =>\r\n                    let variantName = modulePrefix + \".\" + variant.name\r\n                    MatchCase(\r\n                        at = at\r\n                        patterns = [PVariantAs(at, variantName, at, None)]\r\n                        guards = []\r\n                        body = EInt(at, \"\" + index)\r\n                    )\r\n                }\r\n                let differentVariant = MatchCase(\r\n                    at = at\r\n                    patterns = [wildcardPattern, wildcardPattern]\r\n                    guards = []\r\n                    body =\r\n                        EFunctions(at\r\n                            [DFunction(at, numberSignature, Lambda(at, noEffect, numberCases))]\r\n                            self.makeSimpleCall(at, \"ff:core/Ordering.compare\", [\r\n                                self.makeSimpleCall(at, \"number\", [EVariable(at, \"x\")])\r\n                                self.makeSimpleCall(at, \"number\", [EVariable(at, \"y\")])\r\n                            ])\r\n                        )\r\n                )\r\n                [sameCase, ...sameVariantCases, differentVariant]\r\n        }\r\n    }\r\n\r\n    makeOrderingFields(modulePrefix: String, declaration: DType, fields: List[Parameter]): Term {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let orderingType = TConstructor(at, \"ff:core/Ordering.Ordering\", [])\r\n        let orderingSame = EVariant(at, \"ff:core/Ordering.OrderingSame\", [], None)\r\n        function go(fields: List[Parameter]): Term {\r\n            | [] =>\r\n                orderingSame\r\n            | [head, ...tail] =>\r\n                let variableName = head.name + \"Ordering\"\r\n                let compareTerm = self.makeSimpleCall(at, \"ff:core/Ordering.compare\", [\r\n                    EField(at, False, EVariable(at, \"x\"), head.name)\r\n                    EField(at, False, EVariable(at, \"y\"), head.name)\r\n                ])\r\n                let notEqualTerm = self.makeSimpleCall(at, \"!==\", [\r\n                    EVariable(at, variableName)\r\n                    orderingSame\r\n                ])\r\n                let ifTerm = self.makeIf(at, notEqualTerm, EVariable(at, variableName), go(tail))\r\n                ELet(at, False, variableName, orderingType, compareTerm, ifTerm)\r\n        }\r\n        go(fields)\r\n    }\r\n\r\n    // Equal\r\n    makeEqualInstances(modulePrefix: String, module: Module): List[DInstance] {\r\n        let coreWhitelist = [\r\n            \"ff:core/Option.Option\"\r\n            \"ff:core/List.List\"\r\n            \"ff:core/Pair.Pair\"\r\n            \"ff:core/Unit.Unit\"\r\n        ].toSet()\r\n        let missingInstance =\r\n            self.findTypesThatNeedInstances(\"ff:core/Equal.Equal\", modulePrefix, coreWhitelist, True, module)\r\n        missingInstance.map {self.makeEqualInstance(modulePrefix, _)}\r\n    }\r\n\r\n    makeEqualInstance(modulePrefix: String, declaration: DType): DInstance {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let constraints = declaration.generics.map {t =>\r\n            Constraint(at, \"ff:core/Equal.Equal\", [TConstructor(at, t, [])])\r\n        }\r\n        let typeArguments = declaration.generics.map {t =>\r\n            TConstructor(at, t, [])\r\n        }\r\n        let selfType = TConstructor(at, modulePrefix + \".\" + declaration.name, typeArguments)\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let signature = Signature(\r\n            at = at\r\n            name = \"equals\"\r\n            member = False\r\n            generics = []\r\n            constraints = []\r\n            parameters = [\r\n                Parameter(at, False, \"x\", selfType, None)\r\n                Parameter(at, False, \"y\", selfType, None)\r\n            ]\r\n            returnType = TConstructor(at, \"ff:core/Bool.Bool\", [])\r\n            effect = noEffect\r\n        )\r\n        let body =\r\n            Lambda(at, noEffect, self.makeEqualsCases(modulePrefix, declaration, selfType))\r\n        let equalsMethod = DFunction(at, signature, body)\r\n        DInstance(\r\n            at = at\r\n            generics = declaration.generics\r\n            constraints = constraints\r\n            traitName = \"ff:core/Equal.Equal\"\r\n            typeArguments = [selfType]\r\n            generatorArguments = []\r\n            methods = [equalsMethod]\r\n            derived = True\r\n        )\r\n    }\r\n\r\n    makeEqualsCases(modulePrefix: String, declaration: DType, selfType: Type): List[MatchCase] {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let wildcardPattern = PVariable(at, None)\r\n        let sameCase = MatchCase(\r\n            at = at\r\n            patterns = [wildcardPattern, wildcardPattern]\r\n            guards = [MatchGuard(\r\n                at\r\n                self.makeSimpleCall(at, \"===\", [EVariable(at, \"x\"), EVariable(at, \"y\")])\r\n                PVariant(at, \"ff:core/Bool.True\", [])\r\n            )]\r\n            body = EVariant(at, \"ff:core/Bool.True\", [], None)\r\n        )\r\n        declaration.variants.{\r\n            | [variant] =>\r\n                let fields = [...declaration.commonFields, ...variant.fields]\r\n                [sameCase, MatchCase(\r\n                    at = at\r\n                    patterns = [wildcardPattern, wildcardPattern]\r\n                    guards = []\r\n                    body = self.makeEqualFields(modulePrefix, declaration, fields)\r\n                )]\r\n            | variants =>\r\n                let variantsWithFields = variants.filter {variant =>\r\n                    !declaration.commonFields.isEmpty() || !variant.fields.isEmpty()\r\n                } // We can skip no-arg constructors assuming there are never more than one instance of them\r\n                let sameVariantCases = variantsWithFields.map { variant =>\r\n                    let variantName = modulePrefix + \".\" + variant.name\r\n                    let fields = [...declaration.commonFields, ...variant.fields]\r\n                    MatchCase(\r\n                        at = at\r\n                        patterns = [PVariantAs(at, variantName, at, Some(\"x\")), PVariantAs(at, variantName, at, Some(\"y\"))]\r\n                        guards = []\r\n                        body = self.makeEqualFields(modulePrefix, declaration, fields)\r\n                    )\r\n                }\r\n                let differentVariant = MatchCase(\r\n                    at = at\r\n                    patterns = [wildcardPattern, wildcardPattern]\r\n                    guards = []\r\n                    body = EVariant(at, \"ff:core/Bool.False\", [], None)\r\n                )\r\n                [sameCase, ...sameVariantCases, differentVariant]\r\n        }\r\n    }\r\n\r\n    makeEqualFields(modulePrefix: String, declaration: DType, fields: List[Parameter]): Term {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        function go(fields: List[Parameter]): Term {\r\n            | [] =>\r\n                EVariant(at, \"ff:core/Bool.True\", [], None)\r\n            | [head] =>\r\n                self.makeSimpleCall(at, \"ff:core/Equal.equals\", [\r\n                    EField(at, False, EVariable(at, \"x\"), head.name)\r\n                    EField(at, False, EVariable(at, \"y\"), head.name)\r\n                ])\r\n            | [head, ...tail] =>\r\n                let equalsTerm = self.makeSimpleCall(at, \"ff:core/Equal.equals\", [\r\n                    EField(at, False, EVariable(at, \"x\"), head.name)\r\n                    EField(at, False, EVariable(at, \"y\"), head.name)\r\n                ])\r\n                self.makeSimpleCall(at, \"&&\", [\r\n                    equalsTerm\r\n                    go(tail)\r\n                ])\r\n        }\r\n        go(fields)\r\n    }\r\n\r\n    // Serializable\r\n    makeSerializableInstances(modulePrefix: String, module: Module): List[DInstance] {\r\n        let coreWhitelist = [\r\n            \"ff:core/Option.Option\"\r\n            \"ff:core/Pair.Pair\"\r\n        ].toSet()\r\n        let missingInstance =\r\n            self.findTypesThatNeedInstances(\"ff:core/Serializable.Serializable\", modulePrefix, coreWhitelist, True, module)\r\n        missingInstance.map {self.makeSerializableInstance(modulePrefix, _)}\r\n    }\r\n\r\n    makeSerializableInstance(modulePrefix: String, declaration: DType): DInstance {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let constraints = declaration.generics.map { t =>\r\n            Constraint(at, \"ff:core/Serializable.Serializable\", [TConstructor(at, t, [])])\r\n        }\r\n        let typeArguments = declaration.generics.map { t =>\r\n            TConstructor(at, t, [])\r\n        }\r\n        let selfType = TConstructor(at, modulePrefix + \".\" + declaration.name, typeArguments)\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let serializationType = TConstructor(at, \"ff:core/Serializable.Serialization\", [])\r\n        let serializeSignature = Signature(\r\n            at = at\r\n            name = \"serializeUsing\"\r\n            member = False\r\n            generics = []\r\n            constraints = []\r\n            parameters = [\r\n                Parameter(at, False, \"serialization\", serializationType, None)\r\n                Parameter(at, False, \"value\", selfType, None)\r\n            ]\r\n            returnType = TConstructor(at, \"ff:core/Unit.Unit\", [])\r\n            effect = noEffect\r\n        )\r\n        let deserializeSignature = Signature(\r\n            at = at\r\n            name = \"deserializeUsing\"\r\n            member = False\r\n            generics = []\r\n            constraints = []\r\n            parameters = [\r\n                Parameter(at, False, \"serialization\", serializationType, None)\r\n            ]\r\n            returnType = selfType\r\n            effect = noEffect\r\n        )\r\n        let wildcardPattern = PVariable(at, None)\r\n        let serializeBody = \r\n            Lambda(at, noEffect, self.makeSerializeBody(modulePrefix, declaration, selfType))\r\n        let deserializeBody = Lambda(at, noEffect, [MatchCase(\r\n            at = at\r\n            patterns = [wildcardPattern]\r\n            guards = []\r\n            body = self.makeDeserializeBody(modulePrefix, declaration, selfType)\r\n        )])\r\n        DInstance(\r\n            at = at\r\n            generics = declaration.generics\r\n            constraints = constraints\r\n            traitName = \"ff:core/Serializable.Serializable\"\r\n            typeArguments = [selfType]\r\n            generatorArguments = []\r\n            methods = [\r\n                DFunction(at, serializeSignature, serializeBody)\r\n                DFunction(at, deserializeSignature, deserializeBody)\r\n            ]\r\n            derived = True\r\n        )\r\n    }\r\n\r\n    makeSerializeBody(modulePrefix: String, declaration: DType, selfType: Type): List[MatchCase] {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let wildcardPattern = PVariable(at, None)\r\n        declaration.variants.pairs().map {| Pair(index, variant) =>\r\n            let variantName = modulePrefix + \".\" + variant.name\r\n            let fields = [...declaration.commonFields, ...variant.fields]\r\n            let updateChecksum = self.makeUpdateChecksum(at, variantName, declaration, variant)\r\n            let autoResize = self.makeMethodCall(\r\n                at = at\r\n                target = EVariable(at, \"serialization\")\r\n                methodName = \"autoResize\"\r\n                arguments = [EInt(at, \"1\")]\r\n            )\r\n            let setVariantIndex = self.makeMethodCall(\r\n                at = at\r\n                target = EField(at, False, EVariable(at, \"serialization\"), \"buffer\")\r\n                methodName = \"setUint8\"\r\n                arguments = [EField(at, False, EVariable(at, \"serialization\"), \"offset\"), EInt(at, \"\" + index)]\r\n            )\r\n            let fieldSerializations = fields.map {field =>\r\n                self.makeSimpleCall(at, \"ff:core/Serializable.serializeUsing\", [\r\n                    EVariable(at, \"serialization\")\r\n                    EField(at, False, EVariable(at, \"v\"), field.name)\r\n                ])\r\n            }\r\n            MatchCase(\r\n                at = at,\r\n                patterns = [wildcardPattern, PVariantAs(at, variantName, at, Some(\"v\"))]\r\n                guards = []\r\n                body = [\r\n                    autoResize\r\n                    setVariantIndex\r\n                    EAssignField(at, \"+\", EVariable(at, \"serialization\"), \"offset\", EInt(at, \"1\"))\r\n                    ...fieldSerializations\r\n                ].foldLeft(updateChecksum) {ESequential(at, _, _)}\r\n            )\r\n        }\r\n    }\r\n\r\n    makeDeserializeBody(modulePrefix: String, declaration: DType, selfType: Type): Term {\r\n        let at = declaration.at.Location(file = declaration.at.file + \"/<derived>\")\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let wildcardPattern = PVariable(at, None)\r\n        let grabVariantIndex = self.makeMethodCall(\r\n            at = at\r\n            target = EField(at, False, EVariable(at, \"serialization\"), \"buffer\")\r\n            methodName = \"grabUint8\"\r\n            arguments = [EField(at, False, EVariable(at, \"serialization\"), \"offset\")]\r\n        )\r\n        let intType = TConstructor(at, \"ff:core/Int.Int\", [])\r\n        let incrementOffset = EAssignField(at, \"+\", EVariable(at, \"serialization\"), \"offset\", EInt(at, \"1\"))\r\n        let cases = declaration.variants.pairs().map {| Pair(index, variant) =>\r\n            let variantName = modulePrefix + \".\" + variant.name\r\n            let fields = [...declaration.commonFields, ...variant.fields]\r\n            let fieldValues = fields.map {field =>\r\n                Argument(\r\n                    at\r\n                    None\r\n                    self.makeSimpleCall(at, \"ff:core/Serializable.deserializeUsing\", [EVariable(at, \"serialization\")])\r\n                )\r\n            }\r\n            let updateChecksum = self.makeUpdateChecksum(at, variantName, declaration, variant)\r\n            let makeVariant = EVariant(at, variantName, [], Some(fieldValues))\r\n            MatchCase(\r\n                at = at,\r\n                patterns = [PInt(at, \"\" + index)]\r\n                guards = []\r\n                body = ESequential(at, updateChecksum, makeVariant)\r\n            )\r\n        }\r\n        let otherwiseCase = MatchCase(\r\n            at = at,\r\n            patterns = [wildcardPattern]\r\n            guards = []\r\n            body = self.makeSimpleCall(at, \"ff:core/Core.throw\", [\r\n                EVariant(at, \"ff:core/Serializable.DeserializationChecksumException\", [], None)\r\n            ])\r\n        )\r\n        let matchLambda = ELambda(at, Lambda(at, noEffect, [...cases, otherwiseCase]))\r\n        let match = EPipe(at, EVariable(at, \"variantIndex\"), noEffect, matchLambda)\r\n        ELet(at, False, \"variantIndex\", intType, grabVariantIndex, ESequential(at, incrementOffset, match))\r\n    }\r\n\r\n    makeUpdateChecksum(at: Location, variantName: String, declaration: DType, variant: Variant): Term {\r\n        let fields = [...declaration.commonFields, ...variant.fields]\r\n        let variantChecksum = variantName.size() // TODO: Hash variantName + fields with type terms + type parameters (+ type arguments?)\r\n        EAssignField(at, \"\", EVariable(at, \"serialization\"), \"checksum\"\r\n            self.makeMethodCall(\r\n                at = at\r\n                target = self.makeSimpleCall(at, \"+\", [\r\n                    self.makeSimpleCall(at, \"*\", [\r\n                        EInt(at, \"31\")\r\n                        EField(at, False, EVariable(at, \"serialization\"), \"checksum\")\r\n                    ])\r\n                    EInt(at, \"\" + variantChecksum)\r\n                ])\r\n                methodName = \"bitOr\"\r\n                arguments = [EInt(at, \"0\")]\r\n            )\r\n        )\r\n    }\r\n\r\n    // Common\r\n\r\n    findTypesThatNeedInstances(\r\n        traitName: String\r\n        modulePrefix: String\r\n        coreWhitelist: Set[String]\r\n        allowGenerics: Bool\r\n        module: Module\r\n    ): List[DType] {\r\n        let typesWithInstance = module.instances.collect {\r\n            | instance {instance.typeArguments.first() | Some(TConstructor(_, name, _))} =>\r\n                if(instance.traitName == traitName) {name}\r\n            | _ => None\r\n        }.toSet()\r\n\r\n        module.types.filter {t =>\r\n            (!module.moduleKey.packagePair.isCore() || coreWhitelist.contains(modulePrefix + \".\" + t.name)) &&\r\n            !t.generics.first().any {_ == \"Q$\"} &&\r\n            (allowGenerics || t.generics.isEmpty()) &&\r\n            t.data && !t.newtype &&\r\n            !typesWithInstance.contains(modulePrefix + \".\" + t.name)\r\n        }\r\n    }\r\n\r\n    makeSimpleCall(at: Location, name: String, arguments: List[Term], typeArguments: List[Type] = []): Term {\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let callTarget = DynamicCall(EVariable(at, name), tailCall = False)\r\n        ECall(at, callTarget, noEffect, typeArguments, arguments.map { e =>\r\n            Argument(at, None, e)\r\n        }, [])\r\n    }\r\n\r\n    makeMethodCall(at: Location, target: Term, methodName: String, arguments: List[Term]): Term {\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let method = EField(at, False, target, methodName)\r\n        ECall(at, DynamicCall(method, False), noEffect, [], arguments.map {Argument(at, None, _)}, [])\r\n    }\r\n\r\n    makeIf(at: Location, condition: Term, then: Term, else: Term): Term {\r\n        let noEffect = TConstructor(at, \"ff:core/Nothing.Nothing\", [])\r\n        let target = DynamicCall(EVariable(at, \"ff:core/Core.if\"), tailCall = False)\r\n        let option = ECall(at, target, noEffect, [], [\r\n            Argument(at, None, condition)\r\n            Argument(at, None, ELambda(at, Lambda(at, noEffect, [MatchCase(at, [], [], then)])))\r\n        ], [])\r\n        ECall(at, DynamicCall(EField(at, False, option, \"else\"), tailCall = False), noEffect, [], [\r\n            Argument(at, None, ELambda(at, Lambda(at, noEffect, [MatchCase(at, [], [], else)])))\r\n        ], [])\r\n    }\r\n\r\n}\r\n"
    ],
    "names": [
        "Deriver",
        "new",
        "fail",
        "at",
        "message",
        "panic",
        "show",
        "deriveModule",
        "self",
        "module",
        "modulePrefix",
        "qualifiedName",
        "moduleKey",
        "c",
        "Module",
        "imports",
        "types",
        "traits",
        "instances",
        "makeHasAnyTagInstances",
        "makeShowInstances",
        "makeEqualInstances",
        "makeOrderingInstances",
        "makeSerializableInstances",
        "extends",
        "lets",
        "functions",
        "coreWhitelist",
        "toSet",
        "missingInstance",
        "findTypesThatNeedInstances",
        "map",
        "w1",
        "makeHasAnyTagInstance",
        "declaration",
        "Location",
        "file",
        "line",
        "column",
        "constraints",
        "generics",
        "t",
        "Constraint",
        "TConstructor",
        "typeArguments",
        "selfTypeName",
        "name",
        "selfType",
        "noEffect",
        "signature",
        "Signature",
        "typeArgumentStrings",
        "makeMethodCall",
        "makeSimpleCall",
        "strings",
        "EString",
        "separate",
        "body",
        "Lambda",
        "MatchCase",
        "foldLeft",
        "a",
        "b",
        "method",
        "DFunction",
        "DInstance",
        "makeShowInstance",
        "Parameter",
        "None",
        "makeShowCases",
        "showMethod",
        "wildcardPattern",
        "PVariable",
        "variants",
        "variant",
        "variantName",
        "fields",
        "commonFields",
        "field",
        "EField",
        "EVariable",
        "PVariantAs",
        "Some",
        "makeOrderingInstance",
        "makeOrderingCases",
        "compareMethod",
        "sameCase",
        "MatchGuard",
        "PVariant",
        "EVariant",
        "makeOrderingFields",
        "variantsWithFields",
        "filter",
        "isEmpty",
        "sameVariantCases",
        "intType",
        "numberSignature",
        "numberCases",
        "pairs",
        "index",
        "EInt",
        "differentVariant",
        "EFunctions",
        "orderingType",
        "orderingSame",
        "go",
        "head",
        "tail",
        "variableName",
        "compareTerm",
        "notEqualTerm",
        "ifTerm",
        "makeIf",
        "ELet",
        "makeEqualInstance",
        "makeEqualsCases",
        "equalsMethod",
        "makeEqualFields",
        "equalsTerm",
        "makeSerializableInstance",
        "serializationType",
        "serializeSignature",
        "deserializeSignature",
        "serializeBody",
        "makeSerializeBody",
        "deserializeBody",
        "makeDeserializeBody",
        "updateChecksum",
        "makeUpdateChecksum",
        "autoResize",
        "setVariantIndex",
        "fieldSerializations",
        "EAssignField",
        "w2",
        "ESequential",
        "grabVariantIndex",
        "incrementOffset",
        "cases",
        "fieldValues",
        "Argument",
        "makeVariant",
        "PInt",
        "otherwiseCase",
        "matchLambda",
        "ELambda",
        "match",
        "EPipe",
        "variantChecksum",
        "traitName",
        "allowGenerics",
        "typesWithInstance",
        "collect",
        "instance",
        "first",
        "isCore",
        "packagePair",
        "contains",
        "any",
        "data",
        "newtype",
        "arguments",
        "callTarget",
        "DynamicCall",
        "ECall",
        "e",
        "target",
        "methodName",
        "condition",
        "then",
        "else",
        "option",
        "anyTag",
        "internalAnyTag",
        "value",
        "z",
        "equals",
        "x",
        "y",
        "compare",
        "OrderingSame",
        "serializeUsing",
        "serialization",
        "v",
        "checksum",
        "bitOr",
        "setUint8",
        "buffer",
        "offset",
        "deserializeUsing",
        "variantIndex",
        "grabUint8",
        "throw",
        "DeserializationChecksumException"
    ],
    "mappings": ""
}