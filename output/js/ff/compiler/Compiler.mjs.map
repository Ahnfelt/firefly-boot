{
    "version": 3,
    "sources": [
        "../../../../../compiler/Compiler.ff"
    ],
    "sourcesContent": [
        "import Syntax\nimport Tokenizer\nimport ModuleCache\nimport Parser\nimport Resolver\nimport Deriver\nimport Inference\nimport JsEmitter\nimport Dictionaries\nimport Dependencies\nimport LspHook\n\ncapability Compiler(\n    emitTarget: EmitTarget\n    task: Task\n    compilerModulePath: Option[Path]\n    jsOutputPath: Path\n    packagePaths: Map[PackagePair, Path]\n    singleFilePackages: Set[PackagePair]\n    virtualFiles: Map[String, String]\n    cache: ModuleCache\n    lspHook: LspHook\n    mutable phaseDurationDelta: Duration\n    phaseDurations: Array[Pair[String, Duration]]\n)\n\nnew(\n    emitTarget: EmitTarget\n    task: Task\n    compilerModulePath: Option[Path]\n    jsOutputPath: Path\n    resolvedDependencies: ResolvedDependencies\n    virtualFiles: Map[String, String]\n    cache: ModuleCache\n    lspHook: LspHook\n): Compiler {\n    Compiler(\n        emitTarget = emitTarget\n        task = task\n        compilerModulePath = compilerModulePath\n        jsOutputPath = jsOutputPath\n        packagePaths = resolvedDependencies.packagePaths\n        singleFilePackages = resolvedDependencies.singleFilePackages\n        virtualFiles = virtualFiles\n        cache = cache\n        lspHook = lspHook\n        phaseDurationDelta = Duration(0.0)\n        phaseDurations = [].toArray()\n    )\n}\n\nfail[T](at: Location, message: String): T {\n    panic(message + \" \" + at.show())\n}\n\ncoreImports: List[DImport] =\n    [\n        \"Any\"\n        \"Array\"\n        \"AssetSystem\"\n        \"Atomic\"\n        \"Bool\"\n        \"BrowserSystem\"\n        \"Buffer\"\n        \"BuildSystem\"\n        \"Channel\"\n        \"Char\"\n        \"Core\"\n        \"Crypto\"\n        \"Date\"\n        \"Duration\"\n        \"Equal\"\n        \"Error\"\n        \"FileHandle\"\n        \"Float\"\n        \"HttpClient\"\n        \"Int\"\n        \"IntMap\"\n        \"Json\"\n        \"JsValue\"\n        \"JsSystem\"\n        \"List\"\n        \"Lock\"\n        \"Log\"\n        \"Map\"\n        \"NodeSystem\"\n        \"Nothing\"\n        \"Option\"\n        \"Ordering\"\n        \"Pair\"\n        \"Path\"\n        \"Queue\"\n        \"Random\"\n        \"Serializable\"\n        \"Set\"\n        \"Show\"\n        \"SourceLocation\"\n        \"Stream\"\n        \"String\"\n        \"StringMap\"\n        \"Task\"\n        \"Try\"\n        \"Unit\"\n        \"Js\"\n    ].map {moduleName =>\n        DImport(\n            at = Location(\"<prelude>\", 1, 1)\n            alias = moduleName\n            moduleKey = ModuleKey(PackagePair(\"ff\", \"core\"), [], moduleName)\n        )\n    }\n\nextend self: Compiler {\n\n    measure[T](phase: String, moduleKey: ModuleKey, body: () => T): T {\n        let start = Duration(self.task.elapsed().seconds - self.phaseDurationDelta.seconds)\n        let result = body()\n        let stop = Duration(self.task.elapsed().seconds - self.phaseDurationDelta.seconds)\n        let duration = Duration(stop.seconds - start.seconds)\n        self.phaseDurationDelta = Duration(self.phaseDurationDelta.seconds + duration.seconds)\n        let text = phase + \" \" + moduleKey.qualifiedName()\n        self.phaseDurations.push(Pair(text, duration))\n        result\n    }\n\n    printMeasurements(): Unit {\n        let worst = self.phaseDurations.toList().sortBy {\n            (_.second.seconds + 1000000.0) + \"\"\n        }.takeLast(5).reverse()\n        worst.each {| Pair(text, duration) =>\n            Log.debug(text + \":\\t\" + duration.show())\n        }\n    }\n\n    parse(moduleKey: ModuleKey, importedAt: Option[Location]): Module {\n        self.cache.cacheParsedModule(self.packagePaths, moduleKey): path => \n        self.measure(\"Parse\", moduleKey):\n        let code = self.virtualFiles.get(path.absolute()).else {\n            importedAt.each {at => if(!path.exists()) {\n                throw(CompileError(at, \"Imported module not found: \" + moduleKey.importName()))\n            }}\n            path.readText()\n        }\n        let completionAt = if(self.lspHook.isEnabled() && self.lspHook.insertIdentifier) {self.lspHook.at}\n        let tokens = Tokenizer.tokenize(path.absolute(), code, completionAt, self.lspHook.isEnabled())\n        let parser = Parser.new(moduleKey, tokens, self.emitTarget != EmitBrowser, self.lspHook)\n        let module = if(self.singleFilePackages.contains(moduleKey.packagePair)) {\n            parser.parseModuleWithPackageInfo().module\n        } else {\n            parser.parseModuleWithoutPackageInfo()\n        }\n        let result = module.Module(\n            imports = [...coreImports, ...module.imports]\n        )\n        result\n    }\n\n    imports(module: Module): List[Module] {\n        module.imports.map {import =>\n            let newPackagePair = import.moduleKey.packagePair\n            if(!self.packagePaths.contains(newPackagePair)) {\n                throw(CompileError(import.at, \"Missing dependency declaration for: \" + newPackagePair.groupName()))\n            }\n            try {\n                self.parse(import.moduleKey, Some(import.at))\n            } tryCatch {| CompileError(_, _) @ e, error =>\n                let newError = CompileError(import.at, \"Parse error in imported module: \" + import.moduleKey.importName())\n                throw(CompileErrors([e, newError]))\n            } catch {| CompileErrors(compileErrors), error =>\n                let newError = CompileError(import.at, \"Parse errors in imported module: \" + import.moduleKey.importName())\n                throw(CompileErrors([...compileErrors, newError]))\n            }\n        }\n    }\n\n    resolve(moduleKey: ModuleKey): Module {\n        self.cache.cacheResolvedModule(self.packagePaths, moduleKey): path => \n        self.measure(\"Resolve\", moduleKey):\n\n        let module = self.parse(moduleKey, None)\n        let otherModules = self.imports(module)\n        let resolver = Resolver.new(self.lspHook)\n        resolver.resolveModule(module, otherModules)\n    }\n\n    derive(moduleKey: ModuleKey): Module {\n        self.cache.cacheDerivedModule(self.packagePaths, moduleKey): path => \n        self.measure(\"Derive\", moduleKey):\n\n        let module = self.resolve(moduleKey)\n        Deriver.new().deriveModule(module)\n    }\n\n    infer(moduleKey: ModuleKey): Module {\n        self.cache.cacheInferredModule(self.packagePaths, moduleKey): path => \n        self.measure(\"Infer\", moduleKey):\n\n        let module = self.derive(moduleKey)\n        let otherModules = self.imports(module).map {i =>\n            self.derive(i.moduleKey)\n        }\n        let inference = Inference.new([module, ...otherModules], self.lspHook)\n        let inferredModule = inference.inferModule(module, otherModules)\n        Dictionaries.new([module, ...otherModules]).processModule(inferredModule, otherModules)\n    }\n\n    emit(moduleKey: ModuleKey, isMainModule: Bool): Unit {\n        self.cache.cacheEmittedModule(self.packagePaths, moduleKey, isMainModule): path => \n        self.measure(\"Emit\", moduleKey):\n\n        let module = self.infer(moduleKey)\n        let otherModules = self.imports(module).map {i =>\n            self.emit(i.moduleKey, isMainModule = False)\n            self.infer(i.moduleKey)\n        }\n\n        let allModules = [module, ...otherModules]\n        let emitter = JsEmitter.new(\n            otherModules = allModules\n            emitTarget = self.emitTarget\n            isMainModule = isMainModule\n            compilerModuleFileUrl = self.compilerModulePath.map {_.url()}\n            moduleKey = moduleKey\n        )\n        emitter.emitModule(module)\n        let packagePath = self.jsOutputPath.slash(moduleKey.packagePair.group).slash(moduleKey.packagePair.name)\n        let jsPath = moduleKey.folders.foldLeft(packagePath) {p, f => p.slash(f)}\n        let jsFile = jsPath.slash(moduleKey.name + \".mjs\")\n        let sourceMapFile = jsPath.slash(moduleKey.name + \".mjs.map\")\n        let source = Some(path.readText())\n        let jsAndSourceMap = emitter.makeOutputAndSourceMap(self.task, path.relativeListTo(jsPath).join(\"/\"), source)\n        jsPath.createDirectory(createParentDirectories = True)\n        jsFile.writeText(jsAndSourceMap.first + \"\\n\\n//# sourceMappingURL=\" + sourceMapFile.base())\n        sourceMapFile.writeText(jsAndSourceMap.second.write(Some(\"    \")))\n        if(isMainModule) {\n            let runJs = emitter.makeRun(\n                moduleKey.name\n                module.functions\n                moduleKey.packagePair\n                moduleKey.packagePair.group == \"ff\" && moduleKey.packagePair.name == \"compiler\"\n            )\n            let jsRunFile = jsPath.slash(moduleKey.name + \".run.mjs\")\n            jsRunFile.writeText(runJs.map {_ + \"\\n\"}.join())\n        }\n    }\n\n}\n"
    ],
    "names": [
        "Compiler",
        "emitTarget",
        "task",
        "compilerModulePath",
        "jsOutputPath",
        "packagePaths",
        "singleFilePackages",
        "virtualFiles",
        "cache",
        "lspHook",
        "phaseDurationDelta",
        "phaseDurations",
        "coreImports",
        "map",
        "moduleName",
        "DImport",
        "Location",
        "ModuleKey",
        "PackagePair",
        "new",
        "resolvedDependencies",
        "toArray",
        "fail",
        "at",
        "message",
        "panic",
        "show",
        "measure",
        "self",
        "phase",
        "moduleKey",
        "body",
        "start",
        "elapsed",
        "result",
        "stop",
        "duration",
        "text",
        "qualifiedName",
        "Pair",
        "printMeasurements",
        "worst",
        "reverse",
        "takeLast",
        "sortBy",
        "toList",
        "w1",
        "second",
        "each",
        "debug",
        "parse",
        "importedAt",
        "cacheParsedModule",
        "path",
        "code",
        "else",
        "get",
        "absolute",
        "exists",
        "throw",
        "CompileError",
        "importName",
        "readText",
        "completionAt",
        "isEnabled",
        "insertIdentifier",
        "tokens",
        "tokenize",
        "parser",
        "notEquals",
        "EmitBrowser",
        "module",
        "contains",
        "packagePair",
        "parseModuleWithPackageInfo",
        "parseModuleWithoutPackageInfo",
        "c",
        "Module",
        "imports",
        "types",
        "traits",
        "instances",
        "extends",
        "lets",
        "functions",
        "import",
        "newPackagePair",
        "groupName",
        "catch",
        "tryCatch",
        "try",
        "Some",
        "e",
        "error",
        "newError",
        "CompileErrors",
        "compileErrors",
        "resolve",
        "cacheResolvedModule",
        "None",
        "otherModules",
        "resolver",
        "resolveModule",
        "derive",
        "cacheDerivedModule",
        "deriveModule",
        "infer",
        "cacheInferredModule",
        "i",
        "inference",
        "inferredModule",
        "inferModule",
        "processModule",
        "emit",
        "isMainModule",
        "cacheEmittedModule",
        "allModules",
        "emitter",
        "url",
        "emitModule",
        "packagePath",
        "slash",
        "group",
        "name",
        "jsPath",
        "foldLeft",
        "folders",
        "p",
        "f",
        "jsFile",
        "sourceMapFile",
        "source",
        "jsAndSourceMap",
        "makeOutputAndSourceMap",
        "join",
        "relativeListTo",
        "createDirectory",
        "writeText",
        "first",
        "base",
        "write",
        "runJs",
        "makeRun",
        "jsRunFile"
    ],
    "mappings": ""
}