{
    "version": 3,
    "sources": [
        "../../../../../compiler/JsImporter.ff"
    ],
    "sourcesContent": [
        "import Syntax\r\n\r\nclass JsImporter(\r\n    mutable imports: Map[String, String]\r\n)\r\n\r\nnew(): JsImporter {\r\n    JsImporter(Map.new())\r\n}\r\n\r\nfail[T](at: Location, message: String): T {\r\n    panic(message + \" \" + at.show())\r\n}\r\n\r\nextend self: JsImporter {\r\n\r\n    add(url: String): String {\r\n        let importName = self.imports.get(url).{\r\n            | None =>\r\n                let n = \"import$\" + self.imports.size()\r\n                self.imports = self.imports.add(url, n)\r\n                n\r\n            | Some(n) => n\r\n        }\r\n        importName\r\n    }\r\n\r\n    process(at: Location, code: String): String {\r\n        let space = code.takeWhile {c => c == ' ' || c == '\\t' || c == '\\r' || c == '\\n' || c == ';'}\r\n        let rest = code.dropFirst(space.size())\r\n        if(!rest.startsWith(\"import * as \")) {code} else:\r\n        let rest2 = rest.dropFirst(\"import * as \".size())\r\n        let name = rest2.takeWhile {_.isAsciiLetterOrDigit()}\r\n        if(name.size() == 0) {throw(CompileError(at, \"Expected alias after \\\"import * as \\\"\"))}\r\n        let rest3 = rest2.dropFirst(name.size())\r\n        if(!rest3.startsWith(\" from '\")) {throw(CompileError(at, \"Expected \\\" from '\\\" after \\\"import * as ...\\\"\"))}\r\n        let rest4 = rest3.dropFirst(\" from '\".size())\r\n        let url = rest4.takeWhile {_ != '\\''}\r\n        if(url.size() == 0) {throw(CompileError(at, \"Expected module name after \\\" from '\\\"\"))}\r\n        if(url.any {_ == '\\n'}) {throw(CompileError(at, \"Unclosed module name string\"))}\r\n        let rest5 = rest4.dropFirst(url.size() + 1)\r\n        let importName = self.add(url)\r\n        space + \"const \" + name + \" = \" + importName + self.process(at, rest5)\r\n    }\r\n\r\n    generateImports(ignoreModules: Set[String]): List[String] {\r\n        self.imports.pairs().map {| Pair(moduleName, mangledName) =>\r\n            if(ignoreModules.contains(moduleName)) {\r\n                \"const \" + mangledName + \" = void 0; // Ignored import\"\r\n            } else {\r\n                \"import * as \" + mangledName + \" from '\" + moduleName + \"';\"\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"
    ],
    "names": [
        "JsImporter",
        "imports",
        "new",
        "fail",
        "at",
        "message",
        "panic",
        "show",
        "add",
        "self",
        "url",
        "importName",
        "None",
        "n",
        "size",
        "get",
        "process",
        "code",
        "space",
        "takeWhile",
        "c",
        "rest",
        "dropFirst",
        "startsWith",
        "rest2",
        "name",
        "w1",
        "isAsciiLetterOrDigit",
        "throw",
        "CompileError",
        "rest3",
        "rest4",
        "any",
        "rest5",
        "generateImports",
        "ignoreModules",
        "map",
        "pairs",
        "moduleName",
        "mangledName",
        "contains"
    ],
    "mappings": "A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77A77AAEM7AAAAsgBAAAAsUAAAsCACMCsQADN7AAAAsQACMAsQADN7AAAA77AsOAINsSAAACsIAAAsCAAAsCAAA7AACIsOAAAFsiCAAAsCAAeEsgBAAAsCAAAsCAAf7AADJ77AsOAIAsSAAACsKAAAsCAAQCsGsEAAcCsQAAtBsCAAA7AACIsOAAACsmBAAAsCAAoBsCAANsCAARDsQAAQsCAAAsCAAAsCAAEsGAAFsCAAMsCAAAsCAAAsCAAKEsgCAAAsCAAHHsGAAGsCAALsCAApB7AADJ77AsOAJAseAAAFsKAAAsCAAAsKAAAsCAAA7AACIsOAAAFsiCAAAsCAAeEsgBAAAsCAAAsCAAf7AADJ77AsOAIAseAAACsMAAAsCAAQCsGsEAAcCsQsEAAtBsKAAAsCAAA7AACIsOAAACsmBAAAsCAAoBsCAANsCAARDsQAAQsCAAAsCAAAsCAAEsGAAFsCAAMsCAAAsCAAAsCAAKEsgCAAAsCAAHHsGAAGsCAALsCAApB7AADJ77AAIOsOAEHsSAAAIscAAAsCAFGCsKsEAECCsIAAJsCAAA7AACQsMAAACsWAAAsGAAmCsCAAAsCAAAsCACjCsEADiC7AACnCsGAAEsEAAAsCAAACsIAAF7AACQsMAAACsEAAAsGAAcsCAAVsSAAUsCAAAsCAAAsCAAeCsoBAAAsCAAbLsKAAKsCAAARsQsEAAQs6DAAAsCAAfsCAAd7AACJQsKAAKsCAAARsQAAAsGAAuBOsmBAAAsCAAbCsKAAKsCAAARsQsEAAYSsIsEAAKGsEsEAATs6DAAAsCAC5C7AAAgBsOAAAA7AAHJ7AAIA7AAAOsMAAAAsEAAAsGAJLsEAIAsOAAK7AAAMsOAAAA7AAAb7AALmCsEAAAsCAAAsCAATEsmBAAAsCAAbNsKAAKsCAAARsQsEAAYSsIsEAAJs6DAAAsCAASsCAAnC7AAOJsOAAAC7AARJ77AAFGsOAaHsSAAAKskBAAAsCAbGPsKsEAaKLsGsEAAcasKAAtBsCAAA7AACQsMAAACsMAAAsGAAaCs+BAAAsCAALFsKsEAAesCAAAsCAACGsEAAD7AAAsDsOAAAsCAAbsCAAbsCAAbsCAAPsCAAFAsEAAEsKAAGsEAAHsCAAOsCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsCAAHsCAALsCAAasCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsEAAHsCAALsCAAasCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsEAAHsCAALsCAAasCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsEAAHsCAAL7AAAtDsEAAVsCAAb7AACAsMAAACsKAAAsGAAYCs+BAAAsCAALLsKsEAAeCsMAAMsOAAhBsCAAZ7AACDsGAAAsCAAAsCAAMKsgCAAAsCAALFsKsEAAgBscsEAsHiBsCAtH5BsCAANsCAAA7AAAmCsOAAAJ7AAAnCsOAAyC7AACxCsMAAAOsMAAAsGAAaFs+BAAAsCAALDsKsEAAescAAesOAAzBsCAAb7AACAsMAAAIsKAAAsGAAaNs+BAAAsCAANKsMsEAAgBsCAAAsCAAAEsGAAA7AAAGsOAAACssCAAAsCAAFsGAAE7AAAHsEAAVsCAAb7AACWsGAAAsCAAZFsKAAKsOAAOsKAAGsCAAHsCAAA7AAAOGsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIsuCAAjBsCsEAANswEsEAAAsoEAAA7AAAtBsCACR7AAAYsMAAA0BsMAAAsGAAcRs+BAAAsCAANEsMsEAAgBCsKAAKsOAAfsCAAd7AACDsGAAAsCAAAsCAAOFsgCAAAsCAANOsMsEAAiBsSsEAiHgBsCAjH3BsCAAPsCAAA7AAA+BFsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIsgDAAjBsCsEAANswEsEAAAsoEAAA7AAAlCsCACR7AAAYsMAAA2BsMAAAsGAAcTs+BAAAsCAANQsMsEAAgBsSAAUsOAApBsCAAd7AACAsMAAApBsIAAAsGAAYSs+BAAAsCAANYsMsEAAgBsCAAAsCAAALsGAAA7AAAGsOAAAsCAAFsGAAEsKAAGsEAAH7AAAHsEAAVsCAAZ7AACUsGAAAsCAAXhBsIAAIsOAAOsKAAGsCAAHsCAAA7AAAOkBsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIswCAAjBsCsEAANswEsEAAAsoEAAA7AAArBsCACR7AAAesGAAA4BsyBAAAsCAAJtBsIsEAAQsCAAAsCAAAgBsGAAA7AAAGsOAAAsCAAFsGAAEsKAAGsEAAH7AAAHsEAAJsCAAA7AAAkBEsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIs6BAAjBsCsEAANswEsEAAAsoEAAA7AAAzBsCACR7AAAYsMAAA6BsMAAAsGAAcXs+BAAAsCAANSsMsEAA2BsCAAXrBsIAAIsOAAOsCAAAsCAAAsCAAEsCAAFsCAArBsCAAd7AACAsMAAACsWAAAsGAAkBHsqCAAAsCAALCsKsEAASCsIAAJsCAAlB7AACyCsOAAAsCAAbsCAARsCAAPsCAAXsCAANQsMAAMsCAAAsCAAAsCAAEsQAAFsCAAWsCAAAsCAAAsCAAEOsKAAFsCAAOsCAAAsCAAAsCAAEsKAAFsCAAQsCAAAsCAAAsCAAEdsWAAFsCAAasCAAAsCAAAsCAAOKsyCAAAsCAALPsKsEAAaLsGsEAAI6BsMAAZsCAAP7AAZD7AAHhD77AAbGsOA+BHsSAAACs0BAAAsCA/BGzBsKsEA+Ba0BscAAhBsCAAA7AACyBsOAAACsqBAAAsCAARCsqBAAAsCAAb5BsKAAKsCAAARsQsEAAQs6DAAAsCsEAAYsCAAAsCAAGsEAAH7AAAC7AAAOsMAAAqCsWAAAsGAALsEAAAsOAAK7AAAYsMAAACsYAAAsGAAjBsEAAAsQAAiB7AACxBsGAAACswBAAAsCAAdLscsEAAuBGsWsEAATs6DAAAsCAAA7AACUsOAAAsCAAdsCAATsQAASsCAAAsCAAAsCAAECsYAAFsCAAcsCAAAsCAAAsCAAEs8BAAF7AADVsOAEf7AACwDsOAAAsCAAbsCAAZsCAAdsCAAfscAAesCAAAsCAAAsCAAEAsYAAFsCAAcsCAAAsCAAAsCAAEsSAAFsCAAYsCAAAsCAAAsCAAEDsWAAFsCAAasCAAAsCAAAsCAAEsIAAF7AADxD7AAHoB7AAAA7AAADsEAAJ7AADzB77AA/BGsOAEHseAAA9BseAAAsCAFGCsKsEAECCsIsEAAJsKAAAsCAAA7AACQsMAAACsWAAAsGAAmCsCAAAsCAAAsCACjCsEADiC7AACnCsGAAEsEAAAsCAAACsIAAF7AACQsMAAACsEAAAsGAAcsCAAVsSAAUsCAAAsCAAAsCAAeCsoBAAAsCAAbLsKAAKsCAAARsQsEAAQs6DAAAsCAAfsCAAd7AACJQsKAAKsCAAARsQAAAsGAAuBOsmBAAAsCAAbCsKAAKsCAAARsQsEAAYSsIsEAAKGsEsEAATs6DAAAsCAC5C7AAAgBsOAAAA7AAHJ7AAIA7AAAOsMAAAAsEAAAsGAJLsEAIAsOAAK7AAAMsOAAAA7AAAb7AALmCsEAAAsCAAAsCAATEsmBAAAsCAAbNsKAAKsCAAARsQsEAAYSsIsEAAJs6DAAAsCAASsCAAnC7AAOJsOAAAC7AARJ77AAFGsOAaHseAAAKsmBAAAsCAbGPsKsEAaKLsGsEAAcasKsEAAtBsKAAAsCAAA7AACQsMAAACsMAAAsGAAaCs+BAAAsCAALFsKsEAAesCAAAsCAACGsEAAD7AAAsDsOAAAsCAAbsCAAbsCAAbsCAAPsCAAFAsEAAEsKAAGsEAAHsCAAOsCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsCAAHsCAALsCAAasCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsEAAHsCAALsCAAasCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsEAAHsCAALsCAAasCAAAsEAAAsCAAKsCAAFAsEAAEsKAAGsEAAHsCAAL7AAAtDsEAAVsCAAb7AACAsMAAACsKAAAsGAAYCs+BAAAsCAALLsKsEAAeCsMAAMsOAAhBsCAAZ7AACDsGAAAsCAAAsCAAMKsgCAAAsCAALFsKsEAAgBscsEAsHiBsCAtH5BsCAANsCAAA7AAAmCsOAAAJ7AAAnCsOAAyC7AACxCsMAAAOsMAAAsGAAaFs+BAAAsCAALDsKsEAAescAAesOAAzBsCAAb7AACAsMAAAIsKAAAsGAAaNs+BAAAsCAANKsMsEAAgBsCAAAsCAAAEsGAAA7AAAGsOAAACssCAAAsCAAFsGAAE7AAAHsEAAVsCAAb7AACWsGAAAsCAAZFsKAAKsOAAOsKAAGsCAAHsCAAA7AAAOGsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIsuCAAjBsCsEAANswEsEAAAsoEAAA7AAAtBsCACR7AAAYsMAAA0BsMAAAsGAAcRs+BAAAsCAANEsMsEAAgBCsKAAKsOAAfsCAAd7AACDsGAAAsCAAAsCAAOFsgCAAAsCAANOsMsEAAiBsSsEAiHgBsCAjH3BsCAAPsCAAA7AAA+BFsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIsgDAAjBsCsEAANswEsEAAAsoEAAA7AAAlCsCACR7AAAYsMAAA2BsMAAAsGAAcTs+BAAAsCAANQsMsEAAgBsSAAUsOAApBsCAAd7AACAsMAAApBsIAAAsGAAYSs+BAAAsCAANYsMsEAAgBsCAAAsCAAALsGAAA7AAAGsOAAAsCAAFsGAAEsKAAGsEAAH7AAAHsEAAVsCAAZ7AACUsGAAAsCAAXhBsIAAIsOAAOsKAAGsCAAHsCAAA7AAAOkBsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIswCAAjBsCsEAANswEsEAAAsoEAAA7AAArBsCACR7AAAesGAAA4BsyBAAAsCAAJtBsIsEAAQsCAAAsCAAAgBsGAAA7AAAGsOAAAsCAAFsGAAEsKAAGsEAAH7AAAHsEAAJsCAAA7AAAkBEsmBAAAsCAAMCs+BAAAsCAAazBsGsEAAIs6BAAjBsCsEAANswEsEAAAsoEAAA7AAAzBsCACR7AAAYsMAAA6BsMAAAsGAAcXs+BAAAsCAANSsMsEAA2BsCAAXrBsIAAIsOAAOsCAAAsCAAAsCAAEsCAAFsCAArBsCAAd7AACAsMAAACsWAAAsGAAkBHsqCAAAsCAALCsKsEAASCsIAAJsCAAlB7AACyCsOAAAsCAAbsCAARsCAAPsCAAXsCAANQsMAAMsCAAAsCAAAsCAAEsQAAFsCAAWsCAAAsCAAAsCAAEOsKAAFsCAAOsCAAAsCAAAsCAAEsKAAFsCAAQsCAAAsCAAAsCAAEdsWAAFsCAAasCAAAsCAAAsCAAOKsyCAAAsCAALPsKsEAAaLsGsEAAI6BsMAAZsCAAP7AAZD7AAHhD77AAbGsOA+BHseAAACs2BAAAsCA/BGzBsKsEA+Ba0BscsEAAhBsKAAAsCAAA7AACyBsOAAACsqBAAAsCAARCsqBAAAsCAAb5BsKAAKsCAAARsQsEAAQs6DAAAsCsEAAYsCAAAsCAAGsEAAH7AAAC7AAAOsMAAAqCsWAAAsGAALsEAAAsOAAK7AAAYsMAAACsYAAAsGAAjBsEAAAsQAAiB7AACxBsGAAACswBAAAsCAAdLscsEAAuBGsWsEAATs6DAAAsCAAA7AACUsOAAAsCAAdsCAATsQAASsCAAAsCAAAsCAAECsYAAFsCAAcsCAAAsCAAAsCAAEs8BAAF7AADVsOAEf7AACwDsOAAAsCAAbsCAAZsCAAdsCAAfscAAesCAAAsCAAAsCAAEAsYAAFsCAAcsCAAAsCAAAsCAAEsSAAFsCAAYsCAAAsCAAAsCAAEDsWAAFsCAAasCAAAsCAAAsCAAEsIAAF7AADxD7AAHoB7AAAA7AAADsEAAJ7AADzB"
}