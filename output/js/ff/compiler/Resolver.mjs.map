{
    "version": 3,
    "sources": [
        "../../../../../compiler/Resolver.ff"
    ],
    "sourcesContent": [
        "import Syntax\r\nimport LspHook\r\n\r\nclass Resolver(\r\n    variables: Map[String, String]\r\n    variableLocations: Map[String, Location]\r\n    variants: Map[String, String]\r\n    types: Map[String, String]\r\n    typeGenerics: Map[String, List[String]]\r\n    typeLocations: Map[String, Location]\r\n    asyncTypes: Set[String]\r\n    typeParameters: Set[String]\r\n    traits: Map[String, String]\r\n    traitLocations: Map[String, Location]\r\n    state: ResolverState\r\n    lspHook: LspHook\r\n)\r\n\r\nclass ResolverState(\r\n    mutable nextUnificationVariableIndex: Int\r\n)\r\n\r\ndata CaseVariable(\r\n    at: Location\r\n    name: String\r\n    asBound: Option[String]\r\n)\r\n\r\nnew(lspHook: LspHook): Resolver {\r\n    Resolver(\r\n        variables = [].toMap()\r\n        variableLocations = [].toMap()\r\n        variants = [].toMap()\r\n        types = [].toMap()\r\n        typeGenerics = [].toMap()\r\n        typeLocations = [].toMap()\r\n        asyncTypes = [].toSet()\r\n        typeParameters = [].toSet()\r\n        traits = [].toMap()\r\n        traitLocations = [].toMap()\r\n        state = ResolverState(\r\n            nextUnificationVariableIndex = 2\r\n        ) // To avoid collision with the parser and unification\r\n        lspHook = lspHook\r\n    )\r\n}\r\n\r\nextend self: Resolver {\r\n\r\n    freshUnificationVariable(at: Location): Type {\r\n        let result = TVariable(at, self.state.nextUnificationVariableIndex)\r\n        self.state.nextUnificationVariableIndex += 3\r\n        result\r\n    }\r\n\r\n    resolveModule(module: Module, otherModules: List[Module]): Module {\r\n        let self2 = self.processImports(module.imports, otherModules)\r\n        let self3 = self2.processDefinitions(module, None)\r\n        \r\n        let errors = Array.new()\r\n        let module2 = module.Module(\r\n            types = Syntax.catchManyInto(errors, module.types) {self3.resolveTypeDefinition(_)}\r\n            traits = Syntax.catchManyInto(errors, module.traits) {self3.resolveTraitDefinition(_)}\r\n            instances = Syntax.catchManyInto(errors, module.instances) {self3.resolveInstanceDefinition(_)}\r\n            extends = Syntax.catchManyInto(errors, module.extends) {self3.resolveExtendDefinition(_)}\r\n            lets = Syntax.catchManyInto(errors, module.lets) {self3.resolveLetDefinition(_, True)}\r\n            functions = Syntax.catchManyInto(errors, module.functions) {\r\n                self3.resolveFunctionDefinition(_, True, False)\r\n            }\r\n        )\r\n        errors.drain().{\r\n            | [] =>\r\n            | [Pair(_, error)] => error.rethrow()\r\n            | allErrors => throw(CompileErrors(allErrors.map {_.first}))\r\n        }   \r\n        checkDuplicates(module2.types) {_.name} {_.at}\r\n        checkDuplicates(module2.traits) {_.name} {_.at}\r\n        checkDuplicates(module2.lets) {_.name} {_.at}\r\n        checkDuplicates(module2.functions) {_.signature.name} {_.at}\r\n        let groupedExtendMethods = module2.extends.map {x => \r\n            Pair(x.type.show([]).takeWhile {_.isAsciiLetterOrDigit()}, x.methods)\r\n        }.group()\r\n        groupedExtendMethods.values().map {_.flatten()}.map {methods =>\r\n            checkDuplicates(methods) {_.signature.name} {_.at}\r\n        }\r\n        module2.instances.each {_.typeArguments.each {self3.checkInstanceType(_)}}\r\n        module2\r\n    }\r\n    \r\n    checkInstanceType(type: Type) {\r\n        type.{\r\n            | TConstructor(_, name, typeArguments) =>\r\n                if(self.asyncTypes.contains(name)) {\r\n                    throw(CompileError(type.at, \"Traits must not be instantiated for capability types\"))\r\n                }\r\n                typeArguments.each {self.checkInstanceType(_)}\r\n            | _ =>\r\n        }\r\n    }\r\n\r\n    processImports(imports: List[DImport], modules: List[Module]): Resolver {\r\n        mutable resolver = self\r\n        imports.each {import =>\r\n            modules.find {_.moduleKey == import.moduleKey}.{\r\n                | Some(module) =>\r\n                    resolver = resolver.processDefinitions(module, Some(import.alias))\r\n                | None =>\r\n                    throw(CompileError(import.at, \"No such module: \" + import.moduleKey.importName()))\r\n            }\r\n        }\r\n        resolver\r\n    }\r\n\r\n    processDefinitions(module: Module, importAlias: Option[String]): Resolver {\r\n        function entry(name: String, unqualified: Bool): List[Pair[String, String]] {\r\n            let full = module.moduleKey.qualifiedSymbol(name)\r\n            importAlias.{\r\n                | None => [Pair(name, full), Pair(full, full)]\r\n                | Some(alias) {unqualified} => [Pair(alias + \".\" + name, full), Pair(name, full), Pair(full, full)]\r\n                | Some(alias) => [Pair(alias + \".\" + name, full), Pair(full, full)]\r\n            }\r\n        }\r\n        let isCore = // TODO: Extend imports to list unqualified symbols instead of this\r\n            module.moduleKey.packagePair.group == \"ff\" &&\r\n            module.moduleKey.packagePair.name == \"core\" &&\r\n            module.moduleKey.folders == [] &&\r\n            module.moduleKey.name == \"Core\"\r\n        let lets = module.lets.flatMap {entry(_.name, isCore)}.toMap()\r\n        let letLocations = module.lets.flatMap {d => entry(d.name, True).map {_.mapSecond {_ => d.at}}}.toMap()\r\n        let functions = module.functions.flatMap {entry(_.signature.name, isCore)}.toMap()\r\n        let functionLocations = module.functions.flatMap {d => entry(d.signature.name, True).map {_.mapSecond {_ => d.at}} }.toMap()\r\n        let traitMethods = module.traits.flatMap {_.methods }.flatMap {entry(_.name, False)}.toMap()\r\n        let traitMethodLocations = module.traits.flatMap {_.methods}.flatMap {d => entry(d.name, True).map {_.mapSecond {_ => d.at}}}.toMap()\r\n        let traits = module.traits.flatMap {entry(_.name, True) }.toMap()\r\n        let traitLocations = module.traits.flatMap {d => entry(d.name, True).map {_.mapSecond {_ => d.at}}}.toMap()\r\n        let types = module.types.flatMap {entry(_.name, True) }.toMap()\r\n        let typeGenerics = module.types.flatMap {d => entry(d.name, True).map {p => Pair(p.first, d.generics)}}.toMap()\r\n        let typeLocations = module.types.flatMap {d => entry(d.name, True).map {_.mapSecond {_ => d.at}}}.toMap()\r\n        let asyncTypes = module.types.filter {_.generics.first().any {_ == \"Q$\"}}\r\n            .flatMap {entry(_.name, True).map {_.first}}.toSet()\r\n        let variants = module.types.flatMap {_.variants }.flatMap {entry(_.name, True)}.toMap()\r\n        self.Resolver(\r\n            variables = self.variables.addAll(lets).addAll(functions).addAll(traitMethods)\r\n            variableLocations = self.variableLocations.addAll(letLocations).addAll(functionLocations).addAll(traitMethodLocations)\r\n            variants = self.variants.addAll(variants)\r\n            types = self.types.addAll(types)\r\n            typeGenerics = self.typeGenerics.addAll(typeGenerics)\r\n            typeLocations = self.typeLocations.addAll(typeLocations)\r\n            asyncTypes = self.asyncTypes.addAll(asyncTypes)\r\n            typeParameters = [].toSet()\r\n            traits = self.traits.addAll(traits)\r\n            traitLocations = self.traitLocations.addAll(traitLocations)\r\n            state = self.state\r\n        )\r\n    }\r\n\r\n    resolveTypeDefinition(definition: DType): DType {\r\n        if(self.lspHook.isAt(definition.at)) {\r\n            self.lspHook.emit(\r\n                ResolveSymbolHook(SymbolHook(definition.name, definition.at, definition.at), None, topLevel = True)\r\n            )\r\n        }\r\n        let generics = definition.generics.map {g => Pair(g, g)}.toMap()\r\n        let self2 = self.Resolver(\r\n            types = self.types.addAll(generics)\r\n            asyncTypes = self.asyncTypes.removeAll(definition.generics.toSet())\r\n            typeParameters = self.typeParameters.addAll(definition.generics.toSet())\r\n        )\r\n        if(!definition.generics.first().any {_ == \"Q$\"}) {\r\n            [...definition.commonFields, ...definition.variants.flatMap {_.fields}].each {f =>\r\n                if(self2.containsAsyncType(f.valueType)) {\r\n                    throw(CompileError(f.at, \"Only capabilities can contain fields of concrete capability types\"))\r\n                }\r\n            }\r\n        }\r\n        definition.DType(\r\n            constraints = definition.constraints.map {self2.resolveConstraint(_, True)}\r\n            commonFields = checkDuplicates(definition.commonFields.map {f =>\r\n                let valueType = self2.resolveType(f.valueType, True)\r\n                if(self.lspHook.isAt(f.at) || self.lspHook.isDefinedAt(f.at)) {\r\n                    self.lspHook.emit(\r\n                        ResolveVariantFieldHook(SymbolHook(f.name, f.at, f.at), valueType, commonField = True)\r\n                    )\r\n                }\r\n                f.Parameter(\r\n                    valueType = valueType\r\n                    default = f.default.map {self2.resolveTerm(_, True)}\r\n                )\r\n            }) {_.name} {_.at}\r\n            variants = checkDuplicates(definition.variants.map {v =>\r\n                if(self.lspHook.isAt(v.at)) {\r\n                    self.lspHook.emit(\r\n                        ResolveSymbolHook(SymbolHook(v.name, v.at, v.at), None, topLevel = True)\r\n                    )\r\n                }\r\n                checkDuplicates([...definition.commonFields, ...v.fields]) {_.name} {_.at}\r\n                v.Variant(fields = v.fields.map {f =>\r\n                    let valueType = self2.resolveType(f.valueType, True)\r\n                    if(self.lspHook.isAt(f.at) || self.lspHook.isDefinedAt(f.at)) {\r\n                        self.lspHook.emit(\r\n                            ResolveVariantFieldHook(SymbolHook(f.name, f.at, f.at), valueType, commonField = False)\r\n                        )\r\n                    }\r\n                    f.Parameter(\r\n                        valueType = valueType\r\n                        default = f.default.map {self2.resolveTerm(_, True) }\r\n                    )\r\n                })\r\n            }) {_.name} {_.at}\r\n        )\r\n    }\r\n\r\n    resolveTraitDefinition(definition: DTrait): DTrait {\r\n        if(self.lspHook.isAt(definition.at) || self.lspHook.isDefinedAt(definition.at)) {\r\n            self.lspHook.emit(\r\n                ResolveSymbolHook(\r\n                    SymbolHook(definition.name, definition.at, definition.at), None, topLevel = True\r\n                )\r\n            )\r\n        }        \r\n        let generics = definition.generics.map {g => Pair(g, g)}.toMap()\r\n        let self2 = self.Resolver(\r\n            types = self.types.addAll(generics)\r\n            asyncTypes = self.asyncTypes.removeAll(definition.generics.toSet())\r\n            typeParameters = self.typeParameters.addAll(definition.generics.toSet())\r\n        )\r\n        definition.DTrait(\r\n            constraints = definition.constraints.map {self2.resolveConstraint(_, True)}\r\n            methods = checkDuplicates(\r\n                definition.methods.map {self2.resolveSignature(_, True, False)}\r\n            ) {_.name} {_.at}\r\n            methodDefaults = definition.methodDefaults.map {| Pair(name, lambda) =>\r\n                let signature = definition.methods.find {_.name == name}.grab()\r\n                let function1 = DFunction(signature.at, signature, lambda)\r\n                let function2 = self2.resolveFunctionDefinition(function1, True, False)\r\n                Pair(name, function2.body)\r\n            }\r\n        )\r\n    }\r\n\r\n    resolveInstanceDefinition(definition: DInstance): DInstance {\r\n        let traitDefinedAt = self.traitLocations.get(definition.traitName).else {definition.at}\r\n        if(self.lspHook.isAt(definition.at) || self.lspHook.isDefinedAt(traitDefinedAt)) {\r\n            self.lspHook.emit(\r\n                ResolveSymbolHook(\r\n                    SymbolHook(definition.traitName, definition.at, traitDefinedAt), None, topLevel = True\r\n                )\r\n            )\r\n        }\r\n        let generics = definition.generics.map {g => Pair(g, g) }.toMap()\r\n        let self2 = self.Resolver(\r\n            types = self.types.addAll(generics)\r\n            asyncTypes = self.asyncTypes.removeAll(definition.generics.toSet())\r\n            typeParameters = self.typeParameters.addAll(definition.generics.toSet())\r\n        )\r\n        let traitName = self2.traits.get(definition.traitName).else {\r\n            throw(CompileError(definition.at, \"No such trait: \" + definition.traitName))\r\n        }\r\n        definition.DInstance(\r\n            constraints = definition.constraints.map { self2.resolveConstraint(_, True) }\r\n            traitName = traitName\r\n            typeArguments = definition.typeArguments.map { self2.resolveType(_, True) }\r\n            methods = definition.methods.map { self2.resolveFunctionDefinition(_, True, True) }\r\n        )\r\n    }\r\n\r\n    resolveExtendDefinition(definition: DExtend): DExtend {\r\n        let generics = definition.generics.map {g => Pair(g, g)}.toMap()\r\n        let selfWithNoQ = self.Resolver(\r\n            types = self.types.addAll(generics)\r\n            asyncTypes = self.asyncTypes.removeAll(definition.generics.toSet())\r\n            typeParameters = self.typeParameters.addAll(definition.generics.toSet())\r\n            variables = self.variables.add(definition.name, definition.name)\r\n            variableLocations = self.variableLocations.add(definition.name, definition.at)\r\n        )\r\n        let selfWithQ = selfWithNoQ.Resolver(\r\n            types = selfWithNoQ.types.add(\"Q$\", \"Q$\")\r\n            typeParameters = selfWithNoQ.typeParameters.add(\"Q$\")\r\n        )\r\n        definition.DExtend(\r\n            constraints = definition.constraints.map {selfWithQ.resolveConstraint(_, True)}\r\n            type = selfWithQ.resolveType(definition.type, True)\r\n            methods = definition.methods.map {selfWithNoQ.resolveFunctionDefinition(_, True, False)}\r\n        )\r\n    }\r\n\r\n    resolveLetDefinition(definition: DLet, topLevel: Bool): DLet {\r\n        if(self.lspHook.isAt(definition.at) || self.lspHook.isDefinedAt(definition.at)) {\r\n            self.lspHook.emit(\r\n                ResolveSymbolHook(\r\n                    SymbolHook(definition.name, definition.at, definition.at), None, topLevel = topLevel\r\n                )\r\n            )\r\n        }\r\n        definition.DLet(\r\n            variableType = self.resolveType(definition.variableType, topLevel)\r\n            value = self.resolveTerm(definition.value, True)\r\n        )\r\n    }\r\n\r\n    resolveTerm(term: Term, topLevel: Bool, inField: Bool = False): Term {\r\n        term.{\r\n            | EString _ => term\r\n            | EChar _ => term\r\n            | EInt _ => term\r\n            | EFloat _ => term\r\n            | EVariable e =>\r\n                if(self.lspHook.isEnabled()) {\r\n                    let at = self.variableLocations.get(e.name).else {e.at}\r\n                    if(self.lspHook.isAt(e.at) || self.lspHook.isDefinedAt(at)) {\r\n                        self.lspHook.emit(\r\n                            ResolveSymbolHook(\r\n                                SymbolHook(e.name, e.at, at), None, topLevel = True\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n                self.variables.get(e.name).map {e.EVariable(name = _)}.else {term}\r\n            | EList(at, t, items) =>\r\n                EList(at, self.resolveType(t, topLevel), items.map {| Pair(item, spread) =>\r\n                    Pair(self.resolveTerm(item, topLevel), spread)\r\n                })\r\n            | EVariant(at, name, typeArguments, arguments) =>\r\n                EVariant(\r\n                    at = at\r\n                    name = self.variants.get(name).else {name}\r\n                    typeArguments = typeArguments.map {self.resolveType(_, topLevel)}\r\n                    arguments = arguments.map {_.map {a => a.Argument(value = self.resolveTerm(a.value, topLevel))}}\r\n                )\r\n            | EVariantIs(at, name, typeArguments) =>\r\n                EVariantIs(\r\n                    at = at\r\n                    name = self.variants.get(name).else {throw(CompileError(at, \"No such variant: \" + name))}\r\n                    typeArguments = typeArguments.map {self.resolveType(_, topLevel)}\r\n                )\r\n            | ECopy(at, name, record, arguments) =>\r\n                ECopy(\r\n                    at = at\r\n                    name = self.variants.get(name).else {name}\r\n                    record = self.resolveTerm(record, topLevel, inField = True)\r\n                    arguments = arguments.map {f => f.Field(value = self.resolveTerm(f.value, topLevel))}\r\n                )\r\n            | EField e =>\r\n                e.EField(record = self.resolveTerm(e.record, topLevel, inField = True))\r\n            | ELambda(at, Lambda(lambdaAt, _, cases)) =>\r\n                let effect = self.makeEffectArgument(lambdaAt, topLevel)\r\n                ELambda(at, Lambda(lambdaAt, effect, cases.map {self.resolveCase(_, topLevel)}))\r\n            | EPipe(at, value, effect, function) =>\r\n                EPipe(\r\n                    at = at\r\n                    value = self.resolveTerm(value, topLevel)\r\n                    effect = self.resolveType(effect, topLevel)\r\n                    function = self.resolveTerm(function, topLevel)\r\n                )\r\n            | ECall(at, DynamicCall target, effect, typeArguments, arguments, dictionaries) =>\r\n                ECall(\r\n                    at = at\r\n                    target = target.DynamicCall(function = self.resolveTerm(target.function, topLevel))\r\n                    effect = self.resolveType(effect, topLevel)\r\n                    typeArguments = typeArguments.map {self.resolveType(_, topLevel)}\r\n                    arguments = arguments.map {a => a.Argument(value = self.resolveTerm(a.value, topLevel))}\r\n                    dictionaries = dictionaries\r\n                )\r\n            | ECall(at, StaticCall _, _, _, _, _) =>\r\n                throw(CompileError(at, \"Internal error: Static calls not expected in the Resolver phase\"))\r\n            | ERecord(at, fields) =>\r\n                ERecord(\r\n                    at = at\r\n                    fields = fields.map {f => f.Field(value = self.resolveTerm(f.value, topLevel))}\r\n                )\r\n            | EWildcard e =>\r\n                if(e.index == 0) {throw(CompileError(e.at, \"Unbound wildcard\"))}\r\n                e.EWildcard()\r\n            | EFunctions(at, functions, body) =>\r\n                let functionMap = functions.map {_.signature.name}.map {name => Pair(name, name)}.toMap()\r\n                let locationMap = functions.map {_.signature}.map {s => Pair(s.name, s.at)}.toMap()\r\n                let self2 = self.Resolver(\r\n                    variables = self.variables.addAll(functionMap)\r\n                    variableLocations = self.variableLocations.addAll(locationMap)\r\n                )\r\n                EFunctions(\r\n                    at = at\r\n                    functions = functions.map {self2.resolveFunctionDefinition(_, topLevel, False)}\r\n                    body = self2.resolveTerm(body, topLevel)\r\n                )\r\n            | ELet e =>\r\n                let self2 = self.Resolver(\r\n                    variables = self.variables.add(e.name, e.name)\r\n                    variableLocations = self.variableLocations.add(e.name, e.at)\r\n                )\r\n                if(self.lspHook.isEnabled()) {\r\n                    if(self.lspHook.isAt(e.at) || self.lspHook.isDefinedAt(e.at)) {\r\n                        self.lspHook.emit(\r\n                            ResolveSymbolHook(\r\n                                SymbolHook(e.name, e.at, e.at), None, topLevel = False\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n                e.ELet(\r\n                    valueType = self.resolveType(e.valueType, topLevel)\r\n                    value = self.resolveTerm(e.value, topLevel)\r\n                    body = self2.resolveTerm(e.body, topLevel)\r\n                )\r\n            | ESequential(at, before, after) =>\r\n                ESequential(\r\n                    at = at\r\n                    before = self.resolveTerm(before, topLevel)\r\n                    after = self.resolveTerm(after, topLevel)\r\n                )\r\n            | EAssign(at, operator, variable, value) =>\r\n                EAssign(\r\n                    at = at\r\n                    operator = operator\r\n                    variable = self.variables.get(variable).else {\r\n                        throw(CompileError(at, \"No such variable: \" + variable))\r\n                    }\r\n                    value = self.resolveTerm(value, topLevel)\r\n                )\r\n            | EAssignField(at, operator, record, field, value) =>\r\n                EAssignField(\r\n                    at = at\r\n                    operator = operator\r\n                    record = self.resolveTerm(record, topLevel)\r\n                    field = field\r\n                    value = self.resolveTerm(value, topLevel)\r\n                )\r\n        }\r\n    }\r\n\r\n    resolveType(type: Type, topLevel: Bool): Type {\r\n        | TVariable _, _ =>\r\n            type\r\n        | TConstructor constructor, _ =>\r\n            if(self.lspHook.isEnabled()) {\r\n                let at = self.typeLocations.get(constructor.name).else {type.at}\r\n                if(self.lspHook.isAt(type.at) || self.lspHook.isDefinedAt(at)) {\r\n                    self.lspHook.emit(\r\n                        ResolveTypeHook(\r\n                            self.types, self.typeGenerics\r\n                            SymbolHook(constructor.name, type.at, at), type\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n            let name = if(constructor.name.contains(\"$\")) {\r\n                constructor.name\r\n            } else {\r\n                self.types.get(constructor.name).else {\r\n                    if(!self.lspHook.isEnabled()) {\r\n                        throw(CompileError(constructor.at, \"No such type: \" + constructor.name))\r\n                    } else {\r\n                        constructor.name\r\n                    }\r\n                }\r\n            }\r\n            let isFunctionType = name.startsWith(\"Function$\")\r\n            let effect = if(isFunctionType || self.asyncTypes.contains(constructor.name)) {\r\n                [self.makeEffectArgument(constructor.at, topLevel)]\r\n            } else {[]}\r\n            let generics = constructor.generics.map {self.resolveType(_, topLevel)}\r\n            if(isFunctionType) {\r\n                let arguments = generics.dropLast()\r\n                let returnType = generics.grabLast()\r\n                constructor.TConstructor(\r\n                    name = name\r\n                    generics = [...effect, ...arguments, returnType]\r\n                )\r\n            } else {\r\n                constructor.TConstructor(\r\n                    name = name\r\n                    generics = [...effect, ...generics]\r\n                )\r\n            }\r\n    }\r\n\r\n    makeEffectArgument(at: Location, topLevel: Bool): Type {\r\n        if(topLevel) {\r\n            if(!self.typeParameters.contains(\"Q$\")) {\r\n                TConstructor(at, \"ff:core/Nothing.Nothing\", []) // Temporary workaround for top-level let\r\n            } else {\r\n                TConstructor(at, \"Q$\", [])\r\n            }\r\n        } else {\r\n            self.freshUnificationVariable(at)\r\n        }\r\n    }\r\n\r\n    resolveConstraint(constraint: Constraint, topLevel: Bool): Constraint {\r\n        let traitDefinedAt = self.traitLocations.get(constraint.name).else {constraint.at}\r\n        if(self.lspHook.isAt(constraint.at) || self.lspHook.isDefinedAt(traitDefinedAt)) {\r\n            self.lspHook.emit(\r\n                ResolveConstraintHook(SymbolHook(constraint.name, constraint.at, traitDefinedAt), constraint)\r\n            )\r\n        }\r\n        let name =\r\n            self.traits.get(constraint.name).else {\r\n                throw(CompileError(constraint.at, \"No such trait: \" + constraint.name))\r\n            }\r\n        constraint.Constraint(\r\n            name = name\r\n            generics = constraint.generics.map {self.resolveType(_, topLevel)}\r\n        )\r\n    }\r\n\r\n    resolveFunctionDefinition(definition: DFunction, topLevel: Bool, isInstanceMethod: Bool): DFunction {\r\n        let signature = self.resolveSignature(definition.signature, topLevel, isInstanceMethod)\r\n        let self2 = self.withSignature(signature)\r\n        let body = definition.body.Lambda(\r\n            effect = signature.effect\r\n            cases = definition.body.cases.map {self2.resolveCase(_, False)}\r\n        )\r\n        DFunction(definition.at, signature, body)\r\n    }\r\n\r\n    resolveSignature(signature: Signature, topLevel: Bool, isInstanceMethod: Bool): Signature {\r\n        if(self.lspHook.isAt(signature.at) || self.lspHook.isDefinedAt(signature.at)) {\r\n            self.lspHook.emit(\r\n                ResolveSignatureHook(signature, isInstanceMethod, topLevel = topLevel)\r\n            )\r\n        }\r\n        let newSignature = if(topLevel) {\r\n            signature.Signature(\r\n                generics = [\"Q$\", ...signature.generics]\r\n                effect = TConstructor(signature.at, \"Q$\", [])\r\n            )\r\n        } else {\r\n            signature.Signature(\r\n                effect = self.freshUnificationVariable(signature.at)\r\n            )\r\n        }\r\n        newSignature.generics.find {name => self.typeParameters.contains(name)}.each {name =>\r\n            throw(CompileError(signature.at, \"Type parameter \" + name + \" is already in scope\"))\r\n        }\r\n        let self2 = self.withSignature(newSignature)\r\n        newSignature.Signature(\r\n            constraints = newSignature.constraints.map {self2.resolveConstraint(_, topLevel)}\r\n            parameters = newSignature.parameters.map {p =>\r\n                p.Parameter(\r\n                    valueType = self2.resolveType(p.valueType, topLevel)\r\n                    default = p.default.map {self2.resolveTerm(_, topLevel)}\r\n                )\r\n            }\r\n            returnType = self2.resolveType(newSignature.returnType, topLevel)\r\n        )\r\n    }\r\n\r\n    withSignature(signature: Signature): Resolver {\r\n        let variableMap = signature.parameters.map {_.name}.map {name => Pair(name, name)}.toMap()\r\n        let variableLocationMap = signature.parameters.map {p => Pair(p.name, p.at)}.toMap()\r\n        let typeMap = signature.generics.map {name => Pair(name, name)}.toMap()\r\n        self.Resolver(\r\n            variables = self.variables.addAll(variableMap)\r\n            variableLocations = self.variableLocations.addAll(variableLocationMap)\r\n            typeParameters = self.typeParameters.addAll(signature.generics.toSet())\r\n            types = self.types.addAll(typeMap)\r\n            asyncTypes = self.asyncTypes.removeAll(signature.generics.toSet())\r\n        )\r\n    }\r\n\r\n    resolveCase(case: MatchCase, topLevel: Bool): MatchCase {\r\n        function findVariables(pattern: MatchPattern): Map[String, CaseVariable] {\r\n            | PString _ =>\r\n                Map.new()\r\n            | PInt _ =>\r\n                Map.new()\r\n            | PChar _ =>\r\n                Map.new()\r\n            | PVariable(at, Some(name)) =>\r\n                [Pair(name, CaseVariable(at, name, None))].toMap()\r\n            | PVariable(_, None) =>\r\n                Map.new()\r\n            | PVariant(_, _, patterns) =>\r\n                patterns.map(findVariables).foldLeft(Map.new()) {_.addAll(_)}\r\n            | PVariantAs(at, variant, variableAt, variable) =>\r\n                variable.toList().map {x => Pair(x, CaseVariable(variableAt, x, Some(variant)))}.toMap()\r\n            | PAlias(at, pattern, variable) =>\r\n                [Pair(variable, CaseVariable(at, variable, None))].toMap().addAll(findVariables(pattern))\r\n        }\r\n        let variableMap = case.patterns.map(findVariables).foldLeft(Map.new()) {_.addAll(_)}\r\n        mutable guards = []\r\n        let variableMap2 = case.guards.foldLeft(variableMap) {variableMap1, g =>\r\n            let self2 = self.Resolver(\r\n                variables = self.variables.addAll(variableMap1.mapValues {_, p => p.name})\r\n                variableLocations = self.variableLocations.addAll(variableMap1.mapValues {_, p => p.at})\r\n            )\r\n            let guard = g.MatchGuard(\r\n                term = self2.resolveTerm(g.term, topLevel)\r\n                pattern = self2.resolvePattern(g.pattern)\r\n            )\r\n            guards = [guard, ...guards]\r\n            variableMap1.addAll(findVariables(guard.pattern))\r\n        }\r\n        let self3 = self.Resolver(\r\n            variables = self.variables.addAll(variableMap2.mapValues {_, p => p.name})\r\n            variableLocations = self.variableLocations.addAll(variableMap2.mapValues {_, p => p.at})\r\n        )\r\n        MatchCase(\r\n            at = case.at\r\n            patterns = case.patterns.map {self.resolvePattern(_)}\r\n            guards = guards.reverse()\r\n            body = self3.resolveTerm(case.body, topLevel)\r\n        )\r\n    }\r\n\r\n    resolvePattern(pattern: MatchPattern): MatchPattern {\r\n        | PString _ =>\r\n            pattern\r\n        | PInt _ =>\r\n            pattern\r\n        | PChar _ =>\r\n            pattern\r\n        | PVariable _ =>\r\n            pattern\r\n        | PVariant(at, name, patterns) =>\r\n            let newName = self.variants.get(name).else {name}\r\n            let newPatterns = patterns.map {self.resolvePattern(_)}\r\n            PVariant(at, newName, newPatterns)\r\n        | PVariantAs(at, name, variableAt, variable) =>\r\n            let newName = self.variants.get(name).else {name}\r\n            PVariantAs(at, newName, variableAt, variable)\r\n        | PAlias(at, pattern, variable) =>\r\n            let newPattern = self.resolvePattern(pattern)\r\n            PAlias(at, newPattern, variable)\r\n    }\r\n\r\n    containsAsyncType(type: Type): Bool {\r\n        | TVariable _ =>\r\n            False\r\n        | TConstructor constructor =>\r\n            let name = if(constructor.name.contains(\"$\")) {\r\n                constructor.name\r\n            } else {\r\n                self.types.get(constructor.name).else {\r\n                    if(self.lspHook.isEnabled()) {constructor.name} else:\r\n                    throw(CompileError(constructor.at, \"No such type: \" + constructor.name))\r\n                }\r\n            }\r\n            let isFunctionType = name.startsWith(\"Function$\")\r\n            isFunctionType || self.asyncTypes.contains(constructor.name) ||\r\n            constructor.generics.any {self.containsAsyncType(_)}\r\n    }\r\n\r\n}\r\n\r\ncheckDuplicates[T](items: List[T], name: T => String, at: T => Location): List[T] {\r\n    mutable seen = Map.new()\r\n    items.map {item =>\r\n        let n = name(item)\r\n        if(seen.contains(n)) {\r\n            throw(CompileError(at(item), \"Duplicate definition: \" + n))\r\n        }\r\n        seen = seen.add(n, item)\r\n    }\r\n    items\r\n}\r\n"
    ],
    "names": [
        "Resolver",
        "variables",
        "variableLocations",
        "variants",
        "types",
        "typeGenerics",
        "typeLocations",
        "asyncTypes",
        "typeParameters",
        "traits",
        "traitLocations",
        "state",
        "lspHook",
        "ResolverState",
        "nextUnificationVariableIndex",
        "CaseVariable",
        "at",
        "name",
        "asBound",
        "new",
        "toMap",
        "toSet",
        "checkDuplicates",
        "items",
        "seen",
        "map",
        "item",
        "n",
        "contains",
        "throw",
        "CompileError",
        "add",
        "freshUnificationVariable",
        "self",
        "result",
        "TVariable",
        "resolveModule",
        "module",
        "otherModules",
        "self2",
        "processImports",
        "imports",
        "self3",
        "processDefinitions",
        "None",
        "errors",
        "module2",
        "c",
        "Module",
        "moduleKey",
        "catchManyInto",
        "w1",
        "resolveTypeDefinition",
        "resolveTraitDefinition",
        "instances",
        "resolveInstanceDefinition",
        "extends",
        "resolveExtendDefinition",
        "lets",
        "resolveLetDefinition",
        "functions",
        "resolveFunctionDefinition",
        "drain",
        "error",
        "rethrow",
        "allErrors",
        "CompileErrors",
        "first",
        "signature",
        "groupedExtendMethods",
        "group",
        "x",
        "Pair",
        "takeWhile",
        "show",
        "type",
        "isAsciiLetterOrDigit",
        "methods",
        "values",
        "flatten",
        "typeArguments",
        "checkInstanceType",
        "TConstructor",
        "modules",
        "resolver",
        "find",
        "equals",
        "import",
        "Some",
        "alias",
        "importName",
        "importAlias",
        "entry",
        "unqualified",
        "full",
        "qualifiedSymbol",
        "isCore",
        "packagePair",
        "folders",
        "flatMap",
        "letLocations",
        "d",
        "mapSecond",
        "functionLocations",
        "traitMethods",
        "traitMethodLocations",
        "p",
        "generics",
        "filter",
        "any",
        "addAll",
        "definition",
        "isAt",
        "emit",
        "ResolveSymbolHook",
        "SymbolHook",
        "g",
        "removeAll",
        "commonFields",
        "fields",
        "containsAsyncType",
        "f",
        "valueType",
        "DType",
        "newtype",
        "data",
        "constraints",
        "resolveConstraint",
        "resolveType",
        "isDefinedAt",
        "ResolveVariantFieldHook",
        "Parameter",
        "mutable",
        "default",
        "resolveTerm",
        "v",
        "Variant",
        "DTrait",
        "generatorParameters",
        "resolveSignature",
        "methodDefaults",
        "lambda",
        "grab",
        "function1",
        "DFunction",
        "function2",
        "body",
        "methodGenerators",
        "traitDefinedAt",
        "else",
        "get",
        "traitName",
        "DInstance",
        "generatorArguments",
        "derived",
        "selfWithNoQ",
        "selfWithQ",
        "DExtend",
        "topLevel",
        "DLet",
        "variableType",
        "value",
        "term",
        "inField",
        "EString",
        "EChar",
        "EInt",
        "EFloat",
        "EVariable",
        "e",
        "isEnabled",
        "EList",
        "t",
        "spread",
        "EVariant",
        "arguments",
        "a",
        "Argument",
        "EVariantIs",
        "ECopy",
        "record",
        "Field",
        "EField",
        "field",
        "ELambda",
        "lambdaAt",
        "cases",
        "effect",
        "makeEffectArgument",
        "Lambda",
        "resolveCase",
        "EPipe",
        "function",
        "ECall",
        "DynamicCall",
        "target",
        "dictionaries",
        "tailCall",
        "StaticCall",
        "ERecord",
        "EWildcard",
        "index",
        "EFunctions",
        "functionMap",
        "locationMap",
        "s",
        "ELet",
        "ESequential",
        "before",
        "after",
        "EAssign",
        "operator",
        "variable",
        "EAssignField",
        "constructor",
        "ResolveTypeHook",
        "isFunctionType",
        "startsWith",
        "dropLast",
        "returnType",
        "grabLast",
        "constraint",
        "ResolveConstraintHook",
        "Constraint",
        "isInstanceMethod",
        "withSignature",
        "ResolveSignatureHook",
        "newSignature",
        "Signature",
        "member",
        "parameters",
        "variableMap",
        "variableLocationMap",
        "typeMap",
        "case",
        "findVariables",
        "pattern",
        "PString",
        "PInt",
        "PChar",
        "PVariable",
        "PVariant",
        "patterns",
        "foldLeft",
        "w2",
        "PVariantAs",
        "variant",
        "variableAt",
        "toList",
        "guards",
        "variableMap2",
        "variableMap1",
        "mapValues",
        "guard",
        "MatchGuard",
        "resolvePattern",
        "MatchCase",
        "reverse",
        "newName",
        "newPatterns",
        "newPattern",
        "PAlias",
        "anyTag",
        "internalAnyTag",
        "z",
        "y",
        "compare",
        "OrderingSame",
        "atOrdering",
        "nameOrdering",
        "asBoundOrdering",
        "serializeUsing",
        "serialization",
        "checksum",
        "bitOr",
        "autoResize",
        "setUint8",
        "buffer",
        "offset",
        "deserializeUsing",
        "variantIndex",
        "grabUint8",
        "DeserializationChecksumException"
    ],
    "mappings": ""
}