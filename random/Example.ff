trait Show[T] {
    show(value: T): String
}

instance Show[List[T: Show]] {
    show(value: List[T]) {
        value.map { show(_) }.join(", ")
    }
}

map[A, B](list: List[A], body: A => B): List[B] {
    | Empty, _ => Empty
    | Link(head, tail), _ => Link(body(head), map(tail, body))
}

type Stack {
    EmptyStack
    PushStack(value: Int, stack: Stack)
}

extend stack: Stack {
    map(body: Int => Int): Stack {
        switch(stack) {
            | EmptyStack => EmptyStack
            | PushStack s => PushStack(body(s.value), s.stack.map(body))
        }
    }
}

user: (name: String, email: String) = (name = "Joe", email = "jj@example.com")

load(files: FileSystem, file1: String, file2: String): String {
    try {
        files.readText(file1) ++
        files.readText(file2)
    } catch(FileNotFound?) { e =>
        ""
    } expect
}

type FileException(file: String) {
    FileNotFound
    AccessDenied
}

instance Exceptional[FileException]
