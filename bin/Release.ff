dependency ff:s3:0.0.0
import S3 from ff:s3

nodeMain(system: NodeSystem) {
    system.arguments().{
        | [] => 
        | [awsUser, awsKey] =>
            run(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
            run(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
            run(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
            bumpMinorVersion(system, system.path("../package.json"))
            bumpMinorVersion(system, system.path("../vscode/package.json"))
            //run(system, "npm", ["publish"], system.path(".."))
            //run(system, "vsce", ["publish"], system.path("../vscode"))
            let coreTemporary = system.path("../core/.firefly/temporary")
            if(!coreTemporary.exists()) {coreTemporary.createDirectory()}
            let coreTarGz = coreTemporary.slash("ff_core_0_0_0.tar.gz")
            if(coreTarGz.exists()) {
                coreTarGz.delete()
                system.writeLine("Deleted " + coreTarGz.absolute())    
            }
            internalMakeTarGz(coreTarGz, system.path("../core"))
            system.writeLine("Created " + coreTarGz.absolute())
            //S3.put(system, awsUser, awsKey, )
    }
}

run(system: NodeSystem, command: String, arguments: List[String], workingDirectory: Path) {
    system.writeLine("")
    system.writeLine(command + " " + arguments.join(" "))
    let out = system.execute(command, arguments, workingDirectory = Some(workingDirectory))
    system.writeBuffer(out.standardOut)
    system.writeErrorBuffer(out.standardError)
    if(out.exitCode != 0) {
        system.writeErrorLine("Exit code: " + out.exitCode)
        system.exit(1)
    }
}

bumpMinorVersion(system: NodeSystem, packageJsonPath: Path) {
    let prefix = "    \"version\": \""
    mutable bumps = 0
    system.writeLine("")
    system.writeLine("Bumping version in " + packageJsonPath.absolute())
    let newContent = packageJsonPath.readText().lines().map {
        | line {
            line.removeFirst(prefix).flatMap {_.removeLast("\",")} | Some(v)
        } {
            v.split('.') | [major, minor, patch]
        } {
            patch.getInt() | Some(p)
        } => 
            bumps += 1
            let newVersion = major + "." + minor + "." + (p + 1)
            system.writeLine("Will bump version: " + v + " to " + newVersion)
            prefix + newVersion + "\","
        | line => 
            line
    }.join("\n")
    if(bumps != 1) {
        system.writeErrorLine("Failed to bump version.")
        system.exit(1)
    }
    packageJsonPath.writeText(newContent)
}

internalMakeTarGz(tarGzPath: Path, path: Path): Unit
    target node async """
        import * as tar from 'tar'
        await tar.create({gzip: true, file: tarGzPath_}, [path_]);
    """