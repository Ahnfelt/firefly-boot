dependency ff:s3:0.0.0
import S3 from ff:s3

nodeMain(system: NodeSystem) {
    system.arguments().{
        | [accessKeyId, secretAccessKey] => 
            release(system, accessKeyId, secretAccessKey)
        | _ => 
            system.writeErrorLine("Usage: aws-access-key-id aws-secret-access-key")
            system.exit(1)            
    }
}

release(
    system: NodeSystem
    accessKeyId: String
    secretAccessKey: String
): Unit {
    if(!system.path("Release.ff").isFile()) {
        system.writeErrorLine("You need to be in the directory of Release.ff")
        system.exit(1)        
    }
    requireNpmLoggedIn(system, system.path(".."))
    requireVsceLoggedIn(system, system.path("../vscode"))
    runSuccessful(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
    runSuccessful(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
    runSuccessful(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
    let version = bumpMinorVersion(system, system.path("../package.json"))
    bumpMinorVersion(system, system.path("../vscode/package.json"))
    runSuccessful(system, "npm", ["publish"], system.path(".."))
    runSuccessful(system, "vsce", ["publish"], system.path("../vscode"))
    releaseFireflyPackage(system, accessKeyId, secretAccessKey, "compiler")
    releaseFireflyPackage(system, accessKeyId, secretAccessKey, "core")
    releaseFireflyPackage(system, accessKeyId, secretAccessKey, "lux")
    releaseFireflyPackage(system, accessKeyId, secretAccessKey, "postgresql")
    releaseFireflyPackage(system, accessKeyId, secretAccessKey, "rpc")
    releaseFireflyPackage(system, accessKeyId, secretAccessKey, "s3")
    releaseFireflyPackage(system, accessKeyId, secretAccessKey, "webserver")
    runSuccessful(system, "git", ["commit", "-a", "-m", "Autorelease_v" + version], system.path(".."))
    runSuccessful(system, "git", ["push"], system.path(".."))
    runSuccessful(system, "npm", ["install", "-g", "firefly-compiler"], system.path(".."))
}

releaseFireflyPackage(
    system: NodeSystem
    accessKeyId: String
    secretAccessKey: String
    packageName: String
): Unit {
    system.writeLine("")
    system.writeLine("Will release package: " + packageName)
    let temporary = system.path("../" + packageName + "/.firefly/temporary")
    if(!temporary.exists()) {temporary.createDirectory()}
    let tarGz = temporary.slash("ff_" + packageName + "_0_0_0.tar.gz")
    if(tarGz.exists()) {
        tarGz.delete()
    }
    internalMakeTarGz(tarGz, system.path("../" + packageName))
    S3.put(
        system
        accessKeyId
        secretAccessKey
        "eu-central-1" 
        "firefly-site"
        "site/packages/ff/" + packageName + "/" + tarGz.base()
        tarGz.readBuffer()
        headers = [
            Pair("Content-Type", "application/x-gzip")
        ]
    )
}

requireNpmLoggedIn(system: NodeSystem, directory: Path) {
    let out = run(system, "npm", ["whoami"], directory)
    if(out.exitCode != 0) {
        system.writeErrorLine("")
        system.writeErrorLine("You are not logged into npm")
        system.writeErrorLine("Run 'npm adduser'")
        system.exit(1)
    }
}

requireVsceLoggedIn(system: NodeSystem, directory: Path) {
    let out = runSuccessful(system, "vsce", ["ls-publishers"], directory)
    if(!out.toString().lines().any {_ == "firefly-team"}) {
        system.writeErrorLine("")
        system.writeErrorLine("You are not logged into vsce")
        system.writeErrorLine("Manage firefly-team users here https://marketplace.visualstudio.com/manage/publishers/firefly-team")
        system.writeErrorLine("Run 'vsce login firefly-team'")
        system.writeErrorLine("Get a new token here https://dev.azure.com/firefly-lang/_usersSettings/tokens")
        system.exit(1)
    }
}

run(system: NodeSystem, command: String, arguments: List[String], directory: Path): ProcessResult {
    system.writeLine("")
    system.writeLine(command + " " + arguments.join(" "))
    system.execute(command, arguments, directory = Some(directory), shell = True)
}

runSuccessful(system: NodeSystem, command: String, arguments: List[String], directory: Path): Buffer {
    let out = run(system, command, arguments, directory)
    if(out.exitCode != 0) {
        system.writeBuffer(out.standardOut)
        system.writeErrorBuffer(out.standardError)
        system.writeErrorLine("Exit code: " + out.exitCode)
        system.exit(1)
    }
    out.standardOut
}

bumpMinorVersion(system: NodeSystem, packageJsonPath: Path): String {
    let prefix = "    \"version\": \""
    mutable newVersions = []
    system.writeLine("")
    system.writeLine("Bumping version in " + packageJsonPath.absolute())
    let newContent = packageJsonPath.readText().lines().map {
        | line {
            line.removeFirst(prefix).flatMap {_.removeLast("\",")} | Some(v)
        } {
            v.split('.') | [major, minor, patch]
        } {
            patch.getInt() | Some(p)
        } => 
            let newVersion = major + "." + minor + "." + (p + 1)
            newVersions = [...newVersions, newVersion]
            system.writeLine("Will bump version: " + v + " to " + newVersion)
            prefix + newVersion + "\","
        | line => 
            line
    }.join("\n")
    newVersions.{
        | [newVersion] => 
            packageJsonPath.writeText(newContent)
            newVersion
        | _ =>
            system.writeErrorLine("Failed to bump version.")
            system.exit(1)
    }
}

internalMakeTarGz(tarGzPath: Path, path: Path): Unit {
    let tar = Js.import("tar")
    let options = Js->(
        file = tarGzPath.absolutePath
        gzip = Js->(level = 9)
        cwd = path.absolutePath
        filter = Js->{p, stat => 
            !p->includes(".firefly/output")? &&
            !p->includes(".firefly/temporary")? &&
            !p->includes(".firefly/include/node_modules")?
        }
    )
    Js.await(
        tar->create(options, ["."])
    )
}
