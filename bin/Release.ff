dependency ff:s3:0.0.0
import S3 from ff:s3

nodeMain(system: NodeSystem) {
    system.arguments().{
        | [accessKeyId, secretAccessKey] => 
            release(system, accessKeyId, secretAccessKey)
        | _ => 
            system.writeErrorLine("Usage: aws-access-key-id aws-secret-access-key")
            system.exit(1)            
    }
}

release(
    system: NodeSystem
    accessKeyId: String
    secretAccessKey: String
): Unit {
    if(!system.path("Release.ff").isFile()) {
        system.writeErrorLine("You need to be in the directory of Release.ff")
        system.exit(1)        
    }
    requireNpmLoggedIn(system, system.path(".."))
    requireVsceLoggedIn(system, system.path("../vscode"))
    runSuccessful(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
    runSuccessful(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
    runSuccessful(system, "node", ["output/js/ff/compiler/Main.mjs", "bootstrap"], system.path(".."))
    bumpMinorVersion(system, system.path("../package.json"))
    bumpMinorVersion(system, system.path("../vscode/package.json"))
    runSuccessful(system, "npm", ["publish"], system.path(".."))
    runSuccessful(system, "vsce", ["publish"], system.path("../vscode"))
    let coreTemporary = system.path("../core/.firefly/temporary")
    if(!coreTemporary.exists()) {coreTemporary.createDirectory()}
    let coreTarGz = coreTemporary.slash("ff_core_0_0_0.tar.gz")
    if(coreTarGz.exists()) {
        coreTarGz.delete()
        system.writeLine("Deleted " + coreTarGz.absolute())    
    }
    internalMakeTarGz(coreTarGz, system.path("../core"))
    system.writeLine("Created " + coreTarGz.absolute())
    S3.put(
        system
        accessKeyId
        secretAccessKey
        "eu-central-1" 
        "firefly-site"
        "site/packages/ff/core/" + coreTarGz.base()
        coreTarGz.readBuffer()
        headers = [
            Pair("Content-Type", "application/x-gzip")
        ]
    )
    
    // git commit
    // git push
}

requireNpmLoggedIn(system: NodeSystem, workingDirectory: Path) {
    let out = run(system, "npm", ["whoami"], workingDirectory)
    if(out.exitCode != 0) {
        system.writeErrorLine("")
        system.writeErrorLine("You are not logged into npm")
        system.writeErrorLine("Run 'npm adduser'")
        system.exit(1)
    }
}

requireVsceLoggedIn(system: NodeSystem, workingDirectory: Path) {
    let out = runSuccessful(system, "vsce", ["ls-publishers"], workingDirectory)
    if(!out.toString().lines().any {_ == "firefly-team"}) {
        system.writeErrorLine("")
        system.writeErrorLine("You are not logged into vsce")
        system.writeErrorLine("Manage firefly-team users here https://marketplace.visualstudio.com/manage/publishers/firefly-team")
        system.writeErrorLine("Run 'vsce login firefly-team'")
        system.writeErrorLine("Get a new token here https://dev.azure.com/firefly-lang/_usersSettings/tokens")
        system.exit(1)
    }
}

run(system: NodeSystem, command: String, arguments: List[String], workingDirectory: Path): ProcessResult {
    system.writeLine("")
    system.writeLine(command + " " + arguments.join(" "))
    let out = system.execute(command, arguments, workingDirectory = Some(workingDirectory))
    system.writeBuffer(out.standardOut)
    system.writeErrorBuffer(out.standardError)
    out
}

runSuccessful(system: NodeSystem, command: String, arguments: List[String], workingDirectory: Path): Buffer {
    let out = run(system, command, arguments, workingDirectory)
    if(out.exitCode != 0) {
        system.writeErrorLine("Exit code: " + out.exitCode)
        system.exit(1)
    }
    out.standardOut
}

bumpMinorVersion(system: NodeSystem, packageJsonPath: Path) {
    let prefix = "    \"version\": \""
    mutable bumps = 0
    system.writeLine("")
    system.writeLine("Bumping version in " + packageJsonPath.absolute())
    let newContent = packageJsonPath.readText().lines().map {
        | line {
            line.removeFirst(prefix).flatMap {_.removeLast("\",")} | Some(v)
        } {
            v.split('.') | [major, minor, patch]
        } {
            patch.getInt() | Some(p)
        } => 
            bumps += 1
            let newVersion = major + "." + minor + "." + (p + 1)
            system.writeLine("Will bump version: " + v + " to " + newVersion)
            prefix + newVersion + "\","
        | line => 
            line
    }.join("\n")
    if(bumps != 1) {
        system.writeErrorLine("Failed to bump version.")
        system.exit(1)
    }
    packageJsonPath.writeText(newContent)
}

internalMakeTarGz(tarGzPath: Path, path: Path): Unit
    target node async """
        import * as tar from 'tar'
        await tar.create({
            file: tarGzPath_,
            gzip: {level: 9},
            cwd: path_,
            filter: (path, stat) => 
                !path.includes(".firefly/output") &&
                !path.includes(".firefly/temporary")
        }, ["."]);
    """
