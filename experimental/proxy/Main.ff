nodeMain(system: NodeSystem) {
    let net = Js.import("node:net")
    let targetServer = "127.0.0.1"
    let targetPort = 8080
    
    function parseHeaders(headerData: JsValue): JsValue {
        let headers = Js->()
        let lines = headerData->split("\r\n")

        lines->forEach(Js->{line =>
            let index = line->indexOf(":")
            if(index !== -1) {
                let key = line->substring(0, index)->trim()->toLowerCase()
                let value = line->substring(index + 1!)->trim()
                headers.set(key, value)
            }
        })
        headers
    }
    
    let proxyServer = net->createServer(Js->{clientSocket =>
        mutable buffer = Js->Buffer->alloc(0)
        mutable isHttpNavigateRequest = False
        clientSocket->on("data", Js->{data =>
            buffer = Js->Buffer->concat([buffer, data])
            let headerEnd = buffer->indexOf("\r\n\r\n")
            if(headerEnd !== -1) {
                let headerData = buffer->subarray(0, headerEnd)->toString()
                let headers = parseHeaders(headerData)
                
                if(headers.hasOwn("sec-fetch-user")) {
                    isHttpNavigateRequest = True
                    Js->console->log("Detected HTTP request with Sec-Fetch-User")
                }
                
                mutable targetSocket = Js.undefined()
                targetSocket = net->createConnection(targetPort, targetServer, Js->{
                    Js->console->log("Connected to target server")
                    targetSocket->write(buffer)
                    clientSocket->pipe(targetSocket)->pipe(clientSocket)
                })

                clientSocket->on("error", Js->{err =>
                    Js->console->error("Client socket error:", err)
                    targetSocket->end()
                })

                targetSocket->on("error", Js->{err =>
                    Js->console->error("Target socket error:", err)
                    clientSocket->end()
                })
            }
        })
    })
    
    proxyServer->listen(8081, Js->{
        Js->console->log("Proxy server running on port 8080")
    })
}
