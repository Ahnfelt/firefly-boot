main(system: NodeSystem) {
    let inBuffers = [Buffer.fromByteArray([5, 5, 3, 1, 2].toArray())]
    inBuffers.each {b => Log.debug(Show.show(b.toByteArray()))}
    let inStream = inBuffers.toStream()
    let outStream = runLength(inStream)
    outStream.each {b => Log.debug(Show.show(b.toByteArray()))}
}

runLength(stream: Stream[Buffer]): Stream[Buffer] {
    mutable outBuffer = Buffer.make(4 * 1024)
    mutable outOffset = 0
    let outBuffers = Stack.make()
    function writeByte(byte: Int): Unit {
        if(outOffset >= outBuffer.size()) {
            outBuffers.push(outBuffer)
            outBuffer = Buffer.make(4 * 1024)
            outOffset = 0
        }
        outBuffer.setUint8(outOffset, byte)
        outOffset += 1
    }
    let result = stream.flatMap {inBuffer =>
        mutable i = 0
        while {i < inBuffer.size()} {
            let value = inBuffer.grabUint8(i)
            mutable j = 0
            doWhile {
                j += 1
                j < 256 && i + j < inBuffer.size() && inBuffer.grabUint8(i + j) == value
            }
            i += j
            writeByte(j)
            writeByte(value)
        }
        outBuffers.drain().toStream()
    }
    result.concat([outBuffer].toStream().filter {_ => outOffset > 0}.map {_.slice(0, outOffset)})
}
