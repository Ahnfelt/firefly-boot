main(system: NodeSystem) {
    let inBuffers = [Buffer.fromByteArray([5, 5, 3, 1, 2].toArray())]
    inBuffers.each {b => Log.debug(Show.show(b.toByteArray()))}
    let inStream = inBuffers.toStream()
    let outStream = toRunLength(inStream)
    outStream.each {b => Log.debug(Show.show(b.toByteArray()))}
}

toRunLength(stream: Stream[Buffer], bufferSize: Int = 65536): Stream[Buffer] {
    mutable outBuffer = Buffer.make(bufferSize)
    mutable outOffset = 0
    let outBuffers = Stack.make()
    function writeByte(byte: Int): Unit {
        if(outOffset >= outBuffer.size()) {
            outBuffers.push(outBuffer)
            outBuffer = Buffer.make(bufferSize)
            outOffset = 0
        }
        outBuffer.setUint8(outOffset, byte)
        outOffset += 1
    }
    mutable extraCount = 0
    mutable value = 0
    let result = stream.flatMap {inBuffer =>
        mutable i = 0
        while {i < inBuffer.size()} {
            value = if(extraCount > 0) {value} else {inBuffer.grabUint8(i)}
            mutable j = 0
            doWhile {
                j += 1
                j + extraCount < 256 && i + j < inBuffer.size() && inBuffer.grabUint8(i + j) == value
            }
            i += j
            if(i < inBuffer.size() || j + extraCount == 256) {
                writeByte(j + extraCount)
                writeByte(value)
                extraCount = 0
            } else {
                extraCount += j
            }
        }
        outBuffers.drain().toStream()
    }
    result.concat([outBuffer].toStream().filter {_ => outOffset > 0}.map {_.slice(0, outOffset)})
}
