main(system: NodeSystem) {
    let inBuffers = 1.to(100).map {_ => Buffer.fromByteArray([5, 5, 3, 1, 2].toArray())}
    let inStream = inBuffers.toStream()
    let outStream = toRunLength(inStream, 3)
    printRunLength(outStream)
}

printRunLength(outStream: Stream[Buffer]) {
    let array = Buffer.fromBufferArray(outStream.toArray()).toByteArray()
    Log.debug(Show.show(array))
    let stack = Stack.make()
    mutable i = 0
    while {i < array.size()} {
        1.to(array.grab(i)).each {_ => stack.push(array.grab(i + 1))}
        i += 2
    }
    Log.debug(Show.show(stack.drain()))
}

toRunLength(stream: Stream[Buffer], bufferSize: Int = 65536): Stream[Buffer] {
    mutable outBuffer = Buffer.make(bufferSize)
    mutable outOffset = 0
    let outBuffers = Stack.make()
    function writeByte(byte: Int): Unit {
        if(outOffset >= outBuffer.size()) {
            outBuffers.push(outBuffer)
            outBuffer = Buffer.make(bufferSize)
            outOffset = 0
        }
        outBuffer.setUint8(outOffset, byte)
        outOffset += 1
    }
    mutable extraCount = 0
    mutable value = 0
    let result = stream.flatMap {inBuffer =>
        mutable i = 0
        while {i < inBuffer.size()} {
            value = if(extraCount > 0) {value} else {inBuffer.grabUint8(i)}
            mutable j = if(extraCount > 0) {-1} else {0}
            doWhile {
                j += 1
                j + extraCount < 256 && i + j < inBuffer.size() && inBuffer.grabUint8(i + j) == value
            }
            i += j
            if(i < inBuffer.size() || j + extraCount == 256) {
                writeByte(j + extraCount)
                writeByte(value)
                extraCount = 0
            } else {
                extraCount += j
            }
        }
        outBuffers.drain().toStream()
    }
    result.concat(
        Stream.make {
            if(extraCount > 0) {
                writeByte(extraCount)
                writeByte(value)
            }
            if(outOffset > 0) {
                outBuffers.push(outBuffer.slice(0, outOffset))
            }
            Some(outBuffers.drain().toStream())
        }.takeFirst(1).flatten()
    )
}
