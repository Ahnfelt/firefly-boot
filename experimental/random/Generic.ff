// Haskell-like Generic programming / Scrap Your Boilerplate. Thanks to nathanf for instructions.

type GFields[A, B](
    first: A
    second: B
)

type GNoFields()

type GField[S, V](value: V)


type GConstructors[A, B] {
    GLeft(value: A)
    GRight(value: B)
}

type GNoConstructors {}

type GConstructor[S, V](value: V)


instance GFields[A: Show, B: Show]: Show {
    show(v) { show(v.first) + ", " + show(v.second) }
}

instance GNoFields: Show {
    show(v) { "" }
}

instance GField[S: Symbol, V: Show]: Show {
    show(v) { symbol[S]() + " = " + show(v.value) }
}


instance GConstructors[A: Show, B: Show]: Show {
    show(v) {
        | GLeft(v) => show(v)
        | GRight(v) => show(v)
    }
}

instance GConstructor[S: Symbol, V: Show]: Show {
    show(v) { symbol[S]() + "(" + show(v.value) + ")" }
}
