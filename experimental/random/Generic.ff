// Haskell-like Generic programming. Thanks to nathanf for instructions.

// Two fields, zero fields and a particular field

type GFields[A, B](
    first: A
    second: B
)

type GNoFields()

type GField[S, V](value: V)


// Two constructors, zero constructors and a particular constructor

type GConstructors[L, R] {
    GLeft(value: L)
    GRight(value: R)
}

type GNoConstructors {}

type GConstructor[S, V](value: V)


// Type declarations

type GType[S, C](constructors: C)


// Names and such

trait S: GFieldSymbol {
    fieldName(): String
}

trait S: GConstructorSymbol {
    constructorName(): String
}

trait S: GTypeSymbol {
    typeName(): String
    packageName(): String
    moduleName(): String
}


// The type class that converts from/to the generic representation

trait T: Generic[R] {
    toGeneric(value: T): R
    fromGeneric(generic: R): T
}


// Example of implementing a generic instance of Show

instance GFields[A: Show, B: Show]: Show {
    show(v) { show(v.first) + ", " + show(v.second) }
}

instance GNoFields: Show {
    show(v) { "" }
}

instance GField[S: GFieldSymbol, V: Show]: Show {
    show(v) { fieldName[S]() + " = " + show(v.value) }
}

instance GConstructors[A: Show, B: Show]: Show {
    show(v) {
        | GLeft(v) => show(v)
        | GRight(v) => show(v)
    }
}

instance GConstructor[S: GConstructorSymbol, V: Show]: Show {
    show(v) { constructorName[S]() + "(" + show(v.value) + ")" }
}

instance GType[S, C: Show]: Show {
    show(v) {
        show(v.constructors)
    }
}


// Example of using the generic instance of Show above

trait T: Show {
    show(value: T): String {
        show(toGeneric(value)) // Type checked at each instance, not in the trait (to allow T: Generic[R])
    }
}

type User(id: Int, email: String)

instance User: Show


// Perhaps instance Foo: Generic is automatic, and the instance is only in scope where the constructors are accessible.
