nodeMain(system: NodeSystem) {
    Log.show(splitCamelCased(""))
    Log.show(splitCamelCased("ABC"))
    Log.show(splitCamelCased("abc"))
    Log.show(splitCamelCased("AbC"))
    Log.show(splitCamelCased("AbCd"))
    Log.show(splitCamelCased("aaBccDee"))
    Log.show(splitCamelCased("AaBccDee"))
    
    Log.show(prefixes(""))
    Log.show(prefixes("abcde"))
    
    test(["add", "addAll", "addToList"], "al")
    test(["aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"], "abcdefghijklmnopqrstuvwxyz")
    test(["aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"], "abcdefghijklmnopqrstuvwxyzA")
    test(["aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"], "aabcdefghijklmnopqrstuvwxyz")
    Log.show(matchSymbol(splitCamelCased("aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"), "abcdefghijklmnopqrstuvwxyzA"))
}

test(symbols: List[String], query: String) {
    Log.debug("")
    Log.debug("#" + query)
    symbols.each {s => 
        let symbolWords = splitCamelCased(s)
        let match = matchSymbol(symbolWords, query)
        Log.debug(s + " (" + Show.show(symbolWords) + " ): " + Show.show(match))
    }
}

matchSymbol(symbolWords: List[String], query: String): Bool {
    if(query == "") {True} else:
    symbolWords.{
        | [] => False
        | [w, ...ws] =>
            prefixes(query).any {prefix => 
                w.startsWith(prefix) && matchSymbol(ws, query.dropFirst(prefix.size()))
            }
    }
}

prefixes(string: String): List[String] {
    if(string == "") {
        [""]
    } else {
        [string, ...prefixes(string.dropLast())]
    }
}

splitCamelCased(name: String): List[String] {
    name.first().{
        | None => []
        | Some(c) => 
            let word = c.toString() + name.dropFirst().takeWhile {_.isAsciiLower()}
            let rest = name.dropFirst(word.size())
            [word.lower(), ...splitCamelCased(rest)]
    }
}