nodeMain(system: NodeSystem) {
    /*
    Log.show(splitCamelCased(""))
    Log.show(splitCamelCased("ABC"))
    Log.show(splitCamelCased("abc"))
    Log.show(splitCamelCased("AbC"))
    Log.show(splitCamelCased("AbCd"))
    Log.show(splitCamelCased("aaBccDee"))
    Log.show(splitCamelCased("AaBccDee"))
    
    Log.show(prefixes(""))
    Log.show(prefixes("abcde"))
    
    test(["add", "addAll", "addToList"], "al")
    test(["aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"], "abcdefghijklmnopqrstuvwxyz")
    test(["aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"], "abcdefghijklmnopqrstuvwxyzA")
    test(["aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"], "aabcdefghijklmnopqrstuvwxyz")
    */
    printTime(system.time(), "matchSymbol") {
        Log.show(matchSymbol(splitCamelCased("aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ", True), "abcdefghijklmnopqrstuvwxyzA", True))
    }
    
}

test(symbols: List[String], query: String) {
    Log.debug("")
    Log.debug("#" + query)
    symbols.each {s => 
        let symbolWords = splitCamelCased(s, True)
        let match = matchSymbol(symbolWords, query, !query.any {_.isAsciiUpper()})
        Log.debug(s + " (" + Show.show(symbolWords) + " ): " + Show.show(match))
    }
}

matchSymbol(symbolWords: List[String], query: String, lower: Bool): Bool {
    let memo: IntMap[IntMap[Bool]] = IntMap.make()
    function go(wordIndex: Int, queryOffset: Int): Bool {
        memo.getOrSet(wordIndex) {IntMap.make()}.getOrSet(queryOffset):
        if(queryOffset >= query.size()) {True} else:
        if(wordIndex >= symbolWords.size()) {False} else:
        prefixes(query.dropFirst(queryOffset)).any {prefix => 
            symbolWords.grab(wordIndex).startsWith(prefix) && 
            go(wordIndex + 1, queryOffset + prefix.size())
        }
    }
    go(0, 0)
}

prefixes(string: String): List[String] {
    if(string == "") {
        [""]
    } else {
        [string, ...prefixes(string.dropLast())]
    }
}

splitCamelCased(name: String, lower: Bool): List[String] {
    name.first().{
        | None => []
        | Some(c) => 
            let word = c.toString() + name.dropFirst().takeWhile {_.isAsciiLower()}
            let rest = name.dropFirst(word.size())
            [if(lower) {word.lower()} else {word}, ...splitCamelCased(rest, lower)]
    }
}

printTime[R](ts: TimeSystem, label: String, body: () => R): R {
    let start = ts.elapsed()
    let result = body()
    let stop = ts.elapsed()
    let duration = ("" + (stop.seconds - start.seconds)).slice(0, 5)
    Log.trace(label + ": " + duration + "s")
    result
}