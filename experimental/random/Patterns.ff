type Body(term: Int)

type Constructor(
    name: String
    arity: Int
    span: Int
)

type Pattern {
    PVariable(name: String)
    PConstructor(
        constructor: Constructor
        patterns: List[Pattern]
    )
}

type Match(
    rules: List[Pair[Pattern, Body]]
)

type TermDescription {
    Positive(
        constructor: Constructor
        descriptions: List[TermDescription]
    )
    Negative(constructors: Set[String])
}

type Context(
    list: List[Pair[Constructor, List[TermDescription]]]
)

type MatchResult {
    Yes
    No
    Maybe
}

type Access{
    Object
    Select(
        index: Int
        access: Access
    )
}

type Decision {
    Failure
    Success(body: Body)
    IfEqual(
        access: Access
        constructor: Constructor
        left: Decision
        right: Decision
    )
}

type Work(
    patterns: List[Pattern]
    objects: List[Access]
    descriptions: List[TermDescription]
)

staticMatch(
    constructor: Constructor
    description: TermDescription
) : MatchResult {
    | c1, Positive(c2, _) { c1 == c2 } => Yes
    | c1, Positive(_, _) => No
    | c1, Negative(noneSet) { noneSet.contains(c1.name) } => No
    | c1, Negative(noneSet) { c1.span == 1 + noneSet.size() } => Yes
    | _, Negative(_) => Maybe
}

augment(context: Context, description: TermDescription): Context {
    | Context([]), _ => Context([])
    | Context([Pair(c, ds), ...rest]), d => Context([Pair(c, [d, ...ds]), ...rest])
}

norm(context: Context): Context {
    | Context([Pair(c, ds), ...rest]) => augment(Context(rest), Positive(c, ds.reverse()))
    | _ => panic("Norm is unexhaustive(!)")
}

buildDescription(
    context: Context
    description: TermDescription
    works: List[Work]
): TermDescription {
    | Context([]), d, [] => d
    | Context([Pair(c, ds1), ...rest]), d, [Work(_, _, ds2), ...works] =>
        buildDescription(Context(rest), Positive(c, ds1.reverse() ++ [d, ...ds2]), works)
    | _, _, _ =>  panic("buildDescription is unexhaustive: buildDescription(\n" +
         "    context = " + magicShow(context) + "\n" +
         "    description = " + magicShow(description) + "\n" +
         "    works = " + magicShow(works) + "\n)"
     )
}

addNegative(description : TermDescription, constructor : Constructor) : TermDescription {
    | Negative(noneSet), c {
        !noneSet.contains(c.name) && noneSet.add(c.name).size() < c.span
    } => Negative(noneSet.add(constructor.name))
    | _, _ => panic("Negative TermDescription expected, got " + magicShow(description))
}

fail(
    description: TermDescription
    rules: List[Pair[Pattern, Body]]
): Decision {
    | _, [] => Failure
    | d, [Pair(p, body), ...rules] =>
        match(
            pattern = p
            object = Object
            description = d
            context = Context([])
            works = []
            body = body
            rules = rules
        )
   | _, rs => panic("fail is unexhaustive:: rs=" + magicShow(rs))

}

succeed(
    context: Context
    works: List[Work]
    body: Body
    rules: List[Pair[Pattern, Body]]
): Decision {
    works.{
        | [] => Success(body)
        | [Work([], [], []), ...ws] => succeed(norm(context), ws, body, rules)
        | [Work([p, ...ps], [o, ...os], [d, ...ds]), ...ws] =>
            match(
               pattern = p
               object = o
               description = d
               context = context
               works = [Work(ps, os, ds), ...ws]
               body = body
               rules = rules
           )
       | ws => panic("succeed is unexhaustive: ws=" + magicShow(ws))
    }
}

match(
    pattern: Pattern
    object: Access
    description: TermDescription
    context: Context
    works : List[Work]
    body: Body
    rules: List[Pair[Pattern, Body]]
): Decision {
    pattern.{
        | PVariable(_) =>
            succeed(augment(context, description), works, body, rules)
        | PConstructor(c, ps) =>
            function args[R](f: Int => R): List[R] {
                List.range(c.arity).map(f)
            }

            function getDescriptionArguments(description: TermDescription) : List[TermDescription] {
                | Negative(_) => args {|_ => Negative(Set.empty())}
                | Positive(c, ps) => ps
            }

            function getoargs(): List[Access] {
                args {i => Select(i + 1, object)}
            }

            function doSucceed() : Decision {
                let work = Work(ps, getoargs(), getDescriptionArguments(description))
                succeed(
                    Context([Pair(c, []), ...context.list]),
                    [work, ...works],
                    body,
                    rules
                )
            }

            function doFail(newDescription : TermDescription): Decision {
                Log.debug("doFail: " + magicShow(newDescription))
                fail(buildDescription(context, newDescription, works), rules)
            }

            staticMatch(c, description).{
                | Yes => doSucceed()
                | No => doFail(description)
                | Maybe => IfEqual(
                    access = object,
                    constructor = c,
                    left = doSucceed(),
                    right = doFail(addNegative(description, c))
                )
            }
    }
}

compile(input: Match): Decision {
    fail(Negative(Set.empty()), input.rules)
}

main(system: System): Unit {
    //type Color {Red, Green, Blue}
    let red = PConstructor(Constructor("Red", 0, 3), [])
    let green = PConstructor(Constructor("Green", 0, 3), [])
    let blue = PConstructor(Constructor("Blue", 0, 3), [])
    function pair(first : Pattern, second : Pattern) : Pattern {
        PConstructor(Constructor("()", 2, 1), [first, second])
    }
    let match = Match(rules = [
        //Pair(red, Body(1))
        //Pair(pair(red, blue), Body(1)),
        //Pair(pair(green, blue), Body(2))
        Pair(pair(blue, green), Body(3)),
        Pair(pair(PVariable("x"), PVariable("y")), Body(4))
        //Pair(red, Body(1)),
        //Pair(PVariable("x"), Body(2))
    ])

    Log.debug(magicShow(compile(match)))
}
