// Two fields, zero fields and a particular field

type GFields[A, B](
    first: A
    second: B
)

type GNoFields()

type GField[S, V](value: V)


// Two constructors, zero constructors and a particular constructor

type GConstructors[L, R] {
    GLeft(value: L)
    GRight(value: R)
}

type GNoConstructors {}

type GConstructor[S, V](value: V)

trait T: Generic[R] {
    toGeneric(value: T): R
    fromGeneric(generic: R): T
}

type Person(name : String, age : Int)

// Mål: Show på Person
// Vej: Person -> R -> String

// instance Person: Generic[GType[_, GConstructor[_, GFields[GField[_, String], GField[_, Int]]]]]

trait T: Show {
    show(value: T): String
}

instance GFields[A: Show, B: Show]: Show {
    show(v) { show(v.first) + ", " + show(v.second) }
}

person_show_GFields[A: Show, B: Show](a : A, b : B) = show(a) + ", " + show(b)