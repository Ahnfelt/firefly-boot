type JsValue {}

extend self: JsValue {

    expectString(): String { panic("magic") }
        target js sync "return self_"

    expectChar(): Char { panic("magic") }
        target js sync "return self_"

    expectInt(): Int { panic("magic") }
        target js sync "return self_"

    expectFloat(): Float { panic("magic") }
        target js sync "return self_"

    expectBool(): Bool { panic("magic") }
        target js sync "return self_"

    isString(): Bool { panic("magic") }
        target js sync "return self_"

    isChar(): Bool { panic("magic") }
    isInt(): Bool { panic("magic") }
    isFloat(): Bool { panic("magic") }
    isBool(): Bool { panic("magic") }
    isNull(): Bool { panic("magic") }
    isUndefined(): Bool { panic("magic") }
    isArray(): Bool { panic("magic") }
    isObject(): Bool { panic("magic") }
    isFunction(): Bool { panic("magic") }

    index(at: Int): JsValue { panic("magic") }
        target js sync "return self_[at_]"

    setIndex(at: Int, value: JsValue): JsValue { panic("magic") }

    hasOwnField(name: String): Bool { panic("magic") }

    field(name: String): JsValue { panic("magic") }
        target js sync "return self_[name_]"

    setField(name: String, value: JsValue): JsValue { panic("magic") }

    property(name: JsValue): JsValue { panic("magic") }
    setProperty(name: JsValue, value: JsValue): JsValue { panic("magic") }

    call(arguments: List[JsValue]): JsValue { panic("magic") }
    callField(name: String, arguments: List[JsValue]): JsValue { panic("magic") }

    toMap(): Map[String, JsValue] { panic("magic") }
    toArray(): Array[JsValue] { panic("magic") }
    toList(): List[JsValue] { panic("magic") }

    toJson(space: Option[String] = None): String { panic("magic") }

    // TODO: JS operators

    assign(value : JsValue): Unit { panic("magic") }
        target js sync "self_ = value_"

}

null(): JsValue { panic("magic") }
    target js sync "return null"
undefined(): JsValue { panic("magic") }
    target js sync "return void 0"
string(value: String): JsValue { panic("magic") }
    target js sync "return value_"
char(value: Char): JsValue { panic("magic") }
    target js sync "return value_"
int(value: Int): JsValue { panic("magic") }
    target js sync "return value_"
float(value: Float): JsValue { panic("magic") }
    target js sync "return value_"
bool(value: Bool): JsValue { panic("magic") }
    target js sync "return value_"

object(fields: List[Pair[String, JsValue]]): JsValue { panic("magic") }

array(values: List[JsValue]): JsValue { panic("magic") }

function0(value: () => JsValue): JsValue { panic("magic") }
function1(value: JsValue => JsValue): JsValue { panic("magic") }
function2(value: (JsValue, JsValue) => JsValue): JsValue { panic("magic") }
function3(value: (JsValue, JsValue, JsValue) => JsValue): JsValue { panic("magic") }
function4(value: (JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue { panic("magic") }
function5(value: (JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue { panic("magic") }
function6(value: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue { panic("magic") }
function7(value: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue { panic("magic") }
function8(value: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue { panic("magic") }
function9(value: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue { panic("magic") }

fromMap(value: Map[String, JsValue]): JsValue { panic("magic") }
fromArray(value: Array[JsValue]): JsValue { panic("magic") }

parseJson(json: String): JsValue { panic("magic") }
