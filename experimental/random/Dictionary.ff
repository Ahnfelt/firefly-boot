data JsValue {}

data Dictionary[K, V] {}

trait K: DictionaryKey {
    add[V](js: JsValue, key: K, value: V): Unit
    has(js: JsValue, key: K): Bool
    grab[V](js: JsValue, key: K): V
}

instance Int: DictionaryKey {
    add[V](js: JsValue, key: Int, value: V): Unit
        target js sync "js_.set(key_, value_)"
    has(js: JsValue, key: Int): Bool
        target js sync "return js_.has(key_)"
    get[V](js: JsValue, key: Int): Option[V]
        target js sync "return js_.has(key_) ? ff_core_Option.Some(js_.get(key_)) : ff_core_Option.None()"
}

instance String: DictionaryKey {
    add[V](js: JsValue, key: String, value: V): Unit
        target js sync "js_.set(key_, value_)"
    has(js: JsValue, key: String): Bool
        target js sync "return js_.has(key_)"
    get[V](js: JsValue, key: String): Option[V]
        target js sync "return js_.has(key_) ? ff_core_Option.Some(js_.get(key_)) : ff_core_Option.None()"
}

instance Pair[A: DictionaryKey, B: DictionaryKey]: DictionaryKey {
    add[V](basic: JsDictionary, key: Pair[A, B], value: V): Unit
        javascript """
            let inner = basic_.get(key_.first_)
            if(inner === undefined) {
                inner = new Map()
            }
            basic_.set(key_.first_, )
        """
    has(basic: JsDictionary, key: Pair[A, B]): Bool
        javascript """
            return basic_.has(key_)
        """
    get[V](basic: JsDictionary, key: Pair[A, B]): Option[V]
        javascript """
            return basic_.has(key_) ? ff_core_Option.Some(basic_.get(key_)) : ff_core_Option.None()
        """
}

extend self[K: DictionaryKey, V]: Dictionary[K, V] {
    add(key: K, value: V): Unit {

    }
}
