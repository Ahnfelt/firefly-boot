type Person(id: Int, male: Bool)

instance Person: Serializable {
    typeChecksum(): Int {7}
    serializeUsing(serialization: Serialization, value: Person): Unit {
        serializeUsing(serialization, value.id)
        serializeUsing(serialization, value.male)
    }
    deserializeUsing(serialization: Serialization): Person {
        Person(
            deserializeUsing(serialization),
            deserializeUsing(serialization)
        )
    }
}

main(system: NodeSystem) {
    let p = Person(5, True)
    Log.debug(Show.show(p))
    Log.debug(Show.show(serialize[Person](p)))
    Log.debug(Show.show(deserialize[Person](serialize[Person](p))))
}

serialize[T: Serializable](value: T, initialBufferSize: Int = 1024): Buffer {
    let serialization = Serialization(Buffer.make(initialBufferSize), 4)
    serialization.buffer.setInt32(0, typeChecksum[T]())
    serializeUsing(serialization, value)
    serialization.buffer.view(0, serialization.offset)
}

deserialize[T: Serializable](buffer: Buffer): T {
    let serialization = Serialization(buffer, 4)
    let hash = serialization.buffer.grabInt32(0)
    if(hash != typeChecksum[T]()) {
        panic("Serialization type checksum mismatch. Expected: " + typeChecksum[T]() + ", got: " + hash + ".")
    }
    deserializeUsing(serialization)
}

trait T: Serializable {
    typeChecksum(): Int
    serializeUsing(serialization: Serialization, value: T): Unit
    deserializeUsing(serialization: Serialization): T
}

type Serialization(
    mutable buffer: Buffer
    mutable offset: Int
)

extend self: Serialization {
    autoResize(minSpareCapacity: Int) {
        if(self.offset + minSpareCapacity > self.buffer.size()) {
            let minSize = self.buffer.size() + minSpareCapacity
            let newBuffer = Buffer.make((self.buffer.size() * 2).max(minSize))
            newBuffer.setAll(0, self.buffer)
            self.buffer = newBuffer
        }
    }
}

instance Int: Serializable {
    typeChecksum(): Int {1019}
    serializeUsing(serialization: Serialization, value: Int): Unit {
        serialization.autoResize(8)
        serialization.buffer.setInt64(serialization.offset, value)
        serialization.offset += 8
    }
    deserializeUsing(serialization: Serialization): Int {
        let result = serialization.buffer.grabInt64(serialization.offset)
        serialization.offset += 8
        result
    }
}

instance Bool: Serializable {
    typeChecksum(): Int {2017}
    serializeUsing(serialization: Serialization, value: Bool): Unit {
        serialization.autoResize(1)
        serialization.buffer.setUint8(serialization.offset, if(value) {1} else {0})
        serialization.offset += 1
    }
    deserializeUsing(serialization: Serialization): Bool {
        let result = serialization.buffer.grabUint8(serialization.offset)
        serialization.offset += 1
        result == 1
    }
}
