// Brainstorming representation for Tensors where the scalar types and operators are left open ended.
// The purpose of this type is to build up a syntax tree of tensor operations that can then be
// optimized and executed on CPU/GPU/TPU, enabling machine learning and other numerical applications.

data Tensor(scalar: String, shape: List[Int]) {
    TensorVariable(name: String)
    TensorInts(data: Array[Int])
    TensorFloats(data: Array[Float])
    TensorBuffer(data: Buffer)
    TensorOperator(operator: String, operands: List[Tensor])
}

data TensorException(message: String)

capability TensorProcessor(
    toFloats: Tensor => Array[Float]
    toInts: Tensor => Array[Int]
    toBuffer: Tensor => Buffer
)

defaultProcessor(): TensorProcessor {
    throw(TensorException("Default tensor processor not yet implemented"))
}

f32(shape: List[Int], data: Array[Float]): Tensor {
    TensorFloats("ff_f32", shape, data)
}

f64(shape: List[Int], data: Array[Float]): Tensor {
    TensorFloats("ff_f64", shape, data)
}

extend this: Tensor {

    multiply(that: Tensor): Tensor {
        if(this.scalar != that.scalar) {
            throw(TensorException("Scalar type mismatch: " + this.scalar + " vs. " + that.scalar))
        }
        let scalar = this.scalar
        let shape = [] // TODO: Check and compute
        TensorOperator(scalar, shape, "ff_multiply", [this, that])
    }

    toFloats(processor: TensorProcessor = defaultProcessor()): Array[Float] {
        processor.toFloats(this)
    }

}
