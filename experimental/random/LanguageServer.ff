class LanguageServer(
    mutable openFiles: Map[String, String]
)

capability Request(
    headers: Map[String, String]
    object: JsValue
)

/*extend self: LanguageServer {

    handleRequest(request: LanguageServerRequest): LanguageServerResponse {

    }

}*/

main(system: NodeSystem) {
    let headersPair = parseHeaders(system.readStream())
    let headers = headersPair.first
    let rest = headersPair.second
    let length = headers.grab("content-length").grabInt()
    let body = Buffer.fromBufferArray(rest.readBytes(length).first).toString()
    let json = system.js().parseJson(body)
    Log.show(json.get("x").grabInt())
}

/*parseRequest(input: Stream[Buffer]): Pair[Request, Stream[Buffer]] {

    Log.debug(headers)

}*/

parseHeaders(input: Stream[Buffer]): Pair[Map[String, String], Stream[Buffer]] {
    let buffers = Stack.make()
    mutable buffer = input.next().grab()
    mutable offset = 0
    mutable lastWasNewline = False
    mutable done = False
    while {!done} {
        let byte = buffer.grabUint8(offset)
        if(byte == '\n'.codeUnit) {
            if(lastWasNewline) {
                done = True
            } else {
                lastWasNewline = True
            }
        } elseIf {byte != '\r'.codeUnit && lastWasNewline} {
            lastWasNewline = False
        }
        offset += 1
        if(offset == buffer.size()) {
            offset = 0
            buffers.push(buffer)
            buffer = input.next().grab()
        }
    }
    buffers.push(buffer.view(0, offset))
    let headers = Buffer.fromBufferArray(buffers.drain()).toString()
    let map = headers.lines().filter {_.size() != 0}.map {line =>
        line.splitFirst(':').grab().mapFirst {_.lower()} //.mapSecond {_.trim()}
    }.toMap()
    Pair(map, [buffer.view(offset, buffer.size())].toStream().addAll(input))
}

/*parseBody(contentLength: Int, input: Stream[Buffer]): Pair[JsValue, Stream[Buffer]] {

}*/
