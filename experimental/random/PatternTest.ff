test1(foo: Option[Int], bar: Option[Int]): Option[Int] {
    | a, b => b
}

test2(foo: Option[Int], bar: Option[Int]): Option[Int] {
    function f(baz: Option[Int], quux: Option[Int]): Option[Int] {
        | Some(_), b => b
        | None, _ => None
    }
    f(foo, bar)
}

type Moo(x: Int)

extend self: Moo {
    test3(moo: Moo): Moo {
        | m => m
    }
}

nodeMain(main: NodeSystem) {
    Log.debug(Moo(7).test3(Moo(8)))
}
