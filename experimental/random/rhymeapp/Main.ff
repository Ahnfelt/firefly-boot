dependency ff:httpserver:0.0.0
import HttpServer from ff:httpserver

browserMain(system: BrowserSystem): Unit {

    let document = system.js().global().get("document")
    let input = document.call1("getElementById", "input")
    let output = document.call1("getElementById", "output")
    let button = document.call1("getElementById", "button")

    let handler = system.js().shield { system.js().function1 { event =>
        let text = input.get("value").grabString()
        let serialized = Serializable.serialize(text)
        let result = system.fetch().fetch("http://localhost:8080/rhyme",
            method = "POST",
            body = Some(FetchSystem.bodyBuffer(serialized))
        )
        output.set("innerText", result.readText())
    }}

    button.call2("addEventListener", "click", handler)

}

nodeMain(system: NodeSystem): Unit {
    HttpServer.listen(system, "localhost", 8080) { request, response =>

        if(request.path() == "/") {

            response.setHeader("Content-Type", ["text/html; charset=UTF-8"])
            response.writeText(system.assets().readText("/index.html"))

        } elseIf {request.path().startsWith("/js/") && !request.path().contains("..")} {

            let path = request.path().dropFirst("/js/".size())
            response.setHeader("Content-Type", ["text/javascript"])
            response.writeText(system.assets().readText("/browser/" + path))

        } elseIf {request.path() == "/rhyme"} {
            let buffer = request.readBuffer()
            let deserialized = Serializable.deserialize(buffer)
            let result = system.fetch().fetch("https://api.datamuse.com/words?rel_rhy=" + deserialized)
            let json = system.js().parseJson(result.readText())
            let rhyme = json.get(0).get("word").grabString()
            response.setHeader("Access-Control-Allow-Origin", ["*"])
            response.writeText("")

        } else {

            response.writeStatus(404, Some("Not found"))

        }

    }
}

buildMain(system: BuildSystem) {
    let browser: BrowserCode = system.compileForBrowser("Main.ff")
    let browserAssets = if(system.buildMode()) {
        browser.bundle().assets()
    } else {
        browser.assets()
    }
    let indexAssets = if(system.buildMode()) {
        let html = system.packageAssets().readText("/index.html")
        let newHtml = html.replace(
            """<script type="module" src="/js/script/script/Main.mjs"></script>"""
            """<script defer src="/js/Main.bundle.js"></script>"""
        )
        let stream = {[newHtml.toBuffer()].toStream()}
        AssetSystem([Pair("/index.html", stream)].toMap())
    } else {
        system.packageAssets().asset("/index.html")
    }
    let assets = AssetSystem.create()
        .addAssets("/", indexAssets)
        .addAssets("/browser", browserAssets)
    system.setAssets(assets)
}
