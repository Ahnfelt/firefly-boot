nodeMain(system: NodeSystem) {
    let rules = [Monday, Saturday].map {NewsletterRule(_, 7, 0)}
    let next = nextDelivery(rules, system.date())
    Log.debug("Next delivery: " + next.map {_.toRfc9557()}.else {"None"})
}


data DeliveryFrequency {
    Workday
    Day
    Monday
    Tuesday
    Wednesday
    Thursday 
    Friday 
    Saturday 
    Sunday
    Never
}

data NewsletterRule(
    frequency: DeliveryFrequency
    hour: Int
    minute: Int
)


nextDelivery(rules: List[NewsletterRule], date: Date): Option[Date] {
    mutable next: Option[Date] = None
    rules.each {rule =>
        if(isValidDay(rule.frequency, date)) {
            let ruleDate = date.startOfDay().with(hour = Some(rule.hour), minute = Some(rule.minute))
            next = bestDate(next, Some(ruleDate), Some(date))
        }
        let validDay = nextValidDay(rule.frequency, date)
        let ruleDate = validDay.startOfDay().with(hour = Some(rule.hour), minute = Some(rule.minute))
        next = bestDate(next, Some(ruleDate), Some(date))
    }
    next
}

isValidDay(frequency: DeliveryFrequency, date: Date): Bool {
    | Monday, _ => date.dayOfWeek() == Date.monday
    | Tuesday, _ => date.dayOfWeek() == Date.tuesday
    | Wednesday, _ => date.dayOfWeek() == Date.wednesday
    | Thursday, _ => date.dayOfWeek() == Date.thursday
    | Friday, _ => date.dayOfWeek() == Date.friday
    | Saturday, _ => date.dayOfWeek() == Date.saturday
    | Sunday, _ => date.dayOfWeek() == Date.sunday
    | Workday, _ => date.dayOfWeek() <= Date.friday
    | Day, _ => True
    | Never, _ => panic("Unexhaustive")
}

bestDate(a: Option[Date], b: Option[Date], after: Option[Date]): Option[Date] {
    | Some(x), Some(y), _ {after.all {x > _} && after.all {y > _}} => Some(if(x < y) {x} else {y})
    | Some(x), _, _ {after.all {x > _}} => Some(x)
    | _, Some(y), _ {after.all {y > _}} => Some(y)
    | _, _, _ => None
}

nextValidDay(frequency: DeliveryFrequency, date: Date): Date {
    | Monday, _ => nextDayOfWeek(date, Date.monday)
    | Tuesday, _ => nextDayOfWeek(date, Date.tuesday)
    | Wednesday, _ => nextDayOfWeek(date, Date.wednesday)
    | Thursday, _ => nextDayOfWeek(date, Date.thursday)
    | Friday, _ => nextDayOfWeek(date, Date.friday)
    | Saturday, _ => nextDayOfWeek(date, Date.saturday)
    | Sunday, _ => nextDayOfWeek(date, Date.sunday)
    | Workday, _ => 
        if(date.dayOfWeek() >= Date.friday) {
            nextDayOfWeek(date, Date.monday) 
        } else {
            date.add(days = 1)
        }
    | Day, _ => date.add(days = 1)
    | Never, _ => panic("Unexhaustive")
}

nextDayOfWeek(date: Date, dayOfWeek: Int): Date {
    date
        .schedule {_.add(days = 1)}.dropFirst()
        .find {_.dayOfWeek() == dayOfWeek}.grab()
}
