nodeMain(system: NodeSystem) {
    system.writeLine(sha256("".toBuffer()).toHex())
    system.writeLine(hmacSha256("key".toBuffer(), "The quick brown fox jumps over the lazy dog").toHex())
    
    // Trying to reproduce the result from an example here 
    // https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html
    let expectedHeader = "AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20130524/us-east-1/s3/aws4_request,SignedHeaders=date;host;x-amz-content-sha256;x-amz-date;x-amz-storage-class,Signature=98ad721746da40c64f1a55b78f14c238d841ea1380cd77a1b5971af0ece108bd"
    let amzDate = "20130524T000000Z" // TODO
    let headerDate = "Fri, 24 May 2013 00:00:00 GMT" // TODO
    let bucket = "examplebucket"
    let body = "Welcome to Amazon S3.".toBuffer()
    let actualHeader = makeS3AuthorizationHeader(
        system = system
        accessKeyId = "AKIAIOSFODNN7EXAMPLE"
        secretAccessKey = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
        region = "us-east-1"
        bucket = bucket
        objectKey = "test%24file.text" // TODO URI encoded "test$file.text"
        body = body
        canonicalHeaders = [
            Pair("date", headerDate) 
            Pair("host", bucket + ".s3.amazonaws.com")
            Pair("x-amz-date", amzDate)
            Pair("x-amz-content-sha256", sha256(body).toHex())
            Pair("x-amz-storage-class", "REDUCED_REDUNDANCY")
        ]        
        amzDate = amzDate
    )
    system.writeLine("")
    system.writeLine("actual  : " + actualHeader)
    system.writeLine("")
    system.writeLine("expected: " + expectedHeader)
    
    

    put(system, 
        accessKeyId = ""
        secretAccessKey = ""
        region = "eu-central-1"
        bucket = "firefly-site"
        objectKey = "tmp/test2"
        "Hello S3".toBuffer()
    )
}

put(
    system: NodeSystem
    accessKeyId: String
    secretAccessKey: String
    region: String
    bucket: String
    objectKey: String
    body: Buffer
): Unit {
    let amzDate = "20240523T122636Z" // TODO
    let headerDate = "Thu May 23 2024 12:20:09 GMT" // TODO
    let contentHash = sha256(body).toHex()
    let host = bucket + ".s3.amazonaws.com"
    let canonicalHeaders = [
        Pair("date", headerDate) 
        Pair("host", host)
        Pair("x-amz-date", amzDate)
        Pair("x-amz-content-sha256", contentHash)
        Pair("x-amz-storage-class", "REDUCED_REDUNDANCY")
        Pair("Content-Type", "text/plain")
    ]
    let authenticationHeader = makeS3AuthorizationHeader(system, accessKeyId, secretAccessKey, region, bucket, objectKey, body, canonicalHeaders, amzDate)
    let headers = [...canonicalHeaders, Pair("Authorization", authenticationHeader)]
    
    let url = "https://" + host + "/" + objectKey
    let response = system.httpClient().fetch(url, method = "PUT", headers = headers, body = Some(HttpClient.bodyBuffer(body)), throw = False)
    system.writeLine("" + response.status())
    system.writeLine(response.statusText())
    system.writeLine(response.readText())
}

makeS3AuthorizationHeader(
    system: NodeSystem
    accessKeyId: String
    secretAccessKey: String
    region: String
    bucket: String
    objectKey: String
    body: Buffer
    canonicalHeaders: List[Pair[String, String]]
    amzDate: String
): String {
    let scopeDate = amzDate.slice(0, 8) // YYYYMMDD

    // CanonicalRequest
    let canonicalQuerystring = "";
    let contentHash = sha256(body).toHex()
    let headers = canonicalHeaders.map {_.mapFirst {_.lower()}.mapSecond {_.trim()}}.sort()
    let signedHeaders = headers.map {_.first}.join(";")
    let canonicalRequest = [
        "PUT"
        "/" + objectKey
        canonicalQuerystring
        ...headers.map {p => p.first + ":" + p.second}
        ""
        signedHeaders
        contentHash
    ].join("\n")
    
    // StringToSign
    let credentialScope = [scopeDate, region, "s3", "aws4_request"].join("/")
    let algorithm = "AWS4-HMAC-SHA256"
    let stringToSign = [
        algorithm
        amzDate
        credentialScope
        sha256(canonicalRequest.toBuffer()).toHex()
    ].join("\n")

    // Signature
    let signingKey = hmacSha256(hmacSha256(hmacSha256(hmacSha256(("AWS4" + secretAccessKey).toBuffer(), scopeDate), region), "s3"), "aws4_request")
    let signature = hmacSha256(signingKey, stringToSign).toHex()

    algorithm + " Credential=" + accessKeyId + "/" + credentialScope + ",SignedHeaders=" + signedHeaders + ",Signature=" + signature
}

sha256(message: Buffer): Buffer
    target node sync """
        import * as crypto from 'crypto'
        const buffer = crypto.createHash('sha256').update(message_).digest();
        return new DataView(buffer.buffer, buffer.byteOffset, buffer.length);
    """

hmacSha256(secretKey: Buffer, message: String): Buffer
    target node sync """
        import * as crypto from 'crypto'
        const buffer = crypto.createHmac('sha256', secretKey_).update(message_).digest();
        return new DataView(buffer.buffer, buffer.byteOffset, buffer.length);
    """