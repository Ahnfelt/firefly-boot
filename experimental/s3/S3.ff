put(
    system: NodeSystem
    accessKeyId: String
    secretAccessKey: String
    region: String
    bucket: String
    objectKey: String
    body: Buffer
    headers: List[Pair[String, String]]
): Unit {
    let now = system.mainTask().now()
    let amzDate = toIsoString(now)
    let contentHash = Digest.sha256(body).toHex()
    let host = bucket + ".s3.amazonaws.com"
    let encodedKey = encode(objectKey)
    let canonicalHeaders = [
        Pair("host", host)
        Pair("x-amz-date", amzDate)
        Pair("x-amz-content-sha256", contentHash)
        ...headers
    ]
    let authenticationHeader = makeS3AuthorizationHeader(system, accessKeyId, secretAccessKey, region, bucket, encodedKey, body, canonicalHeaders, amzDate)
    let allHeaders = [...canonicalHeaders, Pair("Authorization", authenticationHeader)]
    
    let url = "https://" + host + "/" + encodedKey
    let response = system.httpClient().fetch(url, method = "PUT", headers = allHeaders, body = Some(HttpClient.bodyBuffer(body)), throw = False)
    system.writeLine("" + response.status())
    system.writeLine(response.statusText())
    system.writeLine(response.readText())
}

makeS3AuthorizationHeader(
    system: NodeSystem
    accessKeyId: String
    secretAccessKey: String
    region: String
    bucket: String
    encodedKey: String
    body: Buffer
    canonicalHeaders: List[Pair[String, String]]
    amzDate: String
): String {
    // CanonicalRequest
    let canonicalQuerystring = "";
    let contentHash = Digest.sha256(body).toHex()
    let headers = canonicalHeaders.map {_.mapFirst {_.lower()}.mapSecond {_.trim()}}.sort()
    let signedHeaders = headers.map {_.first}.join(";")
    let canonicalRequest = [
        "PUT"
        "/" + encodedKey
        canonicalQuerystring
        ...headers.map {p => p.first + ":" + p.second}
        ""
        signedHeaders
        contentHash
    ].join("\n")
    
    // StringToSign
    let scopeDate = amzDate.slice(0, 8) // YYYYMMDD
    let credentialScope = [scopeDate, region, "s3", "aws4_request"].join("/")
    let algorithm = "AWS4-HMAC-SHA256"
    let stringToSign = [
        algorithm
        amzDate
        credentialScope
        Digest.sha256(canonicalRequest.toBuffer()).toHex()
    ].join("\n")

    // Signature
    let signingKey = hmacSha256(hmacSha256(hmacSha256(hmacSha256(("AWS4" + secretAccessKey).toBuffer(), scopeDate), region), "s3"), "aws4_request")
    let signature = hmacSha256(signingKey, stringToSign).toHex()

    algorithm + " Credential=" + accessKeyId + "/" + credentialScope + ",SignedHeaders=" + signedHeaders + ",Signature=" + signature
}

hmacSha256(key: Buffer, message: String): Buffer {
    Digest.hmacSha256(key, message.toBuffer()).toBuffer()
}

toIsoString(instant: Instant): String
    target js sync """
        const d = new Date(instant_ * 1000);
        return d.toISOString().replaceAll(/[-:]|[.].../g, "");
    """

encodeURIComponent(text: String): String 
    target js sync """
        return encodeURIComponent(text_);
    """
    
encode(text: String): String {
    text.split('/').map {encodeURIComponent(_)}.join("/")
}