import WebServer from ff:webserver
import RouteTools
import ChatRoute

routes: List[PageRoute] = [
    ChatRoute.pageRoute
]

routeHandlers(): Map[String, (NodeSystem, WebRequest[WebResponse], Context) => Unit] {
    [
        Pair(ChatRoute.pageRoute.pattern, {ChatRoute.handle(_, _, _)})
    ].toMap()
}

nodeMain(system: NodeSystem): Unit {
    let host = system.arguments().grab(0)
    let port = system.arguments().grab(1).grabInt()
    let handlers = routeHandlers()
    system.writeLine("Listening on " + host + ":" + port)
    WebServer.new(system, host, port).listen {request =>
        let path = request.readPath()
        let segments = path.split('/').filter {s => s != "" && s != "." && s != ".."}
        segments.{
            | ["js", ...] => 
                let asset = segments.map {"/" + _}.join()
                request.writeHeader("Content-Type", "text/javascript; charset=UTF-8")
                request.writeStream(system.assets().readStream(asset))
            | _ => 
                // Very sketchy routing
                let routeOption = routes.find {route =>
                    let routeSegments = path.split('/').filter {s => s != "" && s != "." && s != ".."}
                    if(segments.size() != routeSegments.size()) {False} else:
                    segments.zip(routeSegments).all {| Pair(s, r) => s == r || r.startsWith("{")}
                }
                routeOption.or {request.writeStatus("404 Not Found")}: route =>
                let context = Context()
                let handle = handlers.grab(route.pattern)
                handle(system, request, context)
        }
    }    
}

buildMain(system: BuildSystem) {
    mutable assets = AssetSystem.create()
    routes.each {route =>
        let browser = system.compileForBrowser(route.page + ".ff") // .bundle()
        assets = assets.addAssets("/js/", browser.assets())
    }
    system.setAssets(assets)
}
