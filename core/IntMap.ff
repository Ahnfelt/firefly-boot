class IntMap[V] {}

new[V](): IntMap[V] {
    Js->Map->()?
}
    
extend self[V]: IntMap[V] {

    get(key: Int): Option[V] {
        let result = self!->get(key)
        if(!result.isUndefined() || self!->has(key)?) {result?}
    }

    grab(key: Int): V {
        let result = self!->get(key)
        if(result.isUndefined() && !self.has(key)) {throw(GrabException())}
        result?
    }
        
    set(key: Int, value: V): Unit {
        self!->set(key, value!)
    }

    has(key: Int): Bool {
        self!->has(key)?
    }

    remove(key: Int): Bool {
        self!->delete(key)?
    }

    clear(): Unit {
        self!->clear()
    }

    size(): Int {
        self!->size?
    }

    each(body: (Int, V) => Unit): Unit {
        if(Js.inAsync()) {
            let iterator = self!->entries()
            mutable result = iterator->next()
            while {!result->done?} {
                let value = result->value
                body(value.get(0)?, value.get(1)?)
                result = iterator->next()
            }
        } else {
            self!->forEach(Js->{v, k => body(k?, v?)})
        }
    }
    
    eachWhile(body: (Int, V) => Bool): Unit {
        self!.eachWhile {value =>
            body(value.get(0)?, value.get(1)?)
        }
    }
            
    toArray(): Array[Pair[Int, V]] {
        let array = Array.new()
        self.each {k, v => array.push(Pair(k, v))}
        array
    }

    toList(): List[Pair[Int, V]] {
        self.toArray().drain()
    }

    toStream(): Stream[Pair[Int, V]] {
        self.toList().toStream()
    }

    toMap(): Map[Int, V] {
        self.toList().toMap()
    }

    keys(): List[Int] {
        let array = Array.new()
        self.each {k, v => array.push(k)}
        array.toList()
    }

    values(): List[V] {
        let array = Array.new()
        self.each {k, v => array.push(v)}
        array.toList()
    }

    copy(): IntMap[V] {
        Js->Map->(self!)?
    }

    getOrSet(key: Int, body: () => V): V {
        if(!self.has(key)) {self.set(key, body())}
        self.grab(key)
    }
            
}

extend self[V]: IntMap[Array[V]] {

    push(key: Int, value: V) {
        self.get(key).{
            | None => self.set(key, [value].toArray())
            | Some(array) => array.push(value)
        }
    }

}
