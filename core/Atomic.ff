class Atomic[T] {}

new[T](value: T): Atomic[T] {
    Js->(value = value!)?
}

extend self[T]: Atomic[T] {

    modify(body: T => T): T {
        if(Js.inAsync()) {
            mutable currentValue = self!->value
            mutable newValue = body(self!->value?)
            while {currentValue !== self!->value} {
                currentValue = self!->value
                newValue = body(self!->value?)
            }
            self!->value = newValue!
            newValue
        } else {
            let newValue = body(self!->value?)
            self!->value = newValue!
            newValue
        }
    }

    getAndModify(body: T => T): T {
        mutable currentValue = self!->value
        if(Js.inAsync()) {
            mutable newValue = body(self!->value?)
            while {currentValue !== self!->value} {
                currentValue = self!->value
                newValue = body(self!->value?)
            }
            self!->value = newValue!
            currentValue?
        } else {
            let newValue = body(self!->value?)
            self!->value = newValue!
            currentValue?
        }
    }

    get(): T {
        self!->value?
    }

    set(value: T): Unit {
        self!->value = value!
    }

    getAndSet(newValue: T): T {
        let currentValue = self!->value
        self!->value = newValue!
        currentValue?
    }

    compareAndSet(currentValue: T, newValue: T): Bool {
        if(self!->value !== currentValue!) {False} else:
        self!->value = newValue!
        True
    }

}
