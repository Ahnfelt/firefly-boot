type String {} scala "java.lang.String"

extend self: String {
    getSize(): Int { panic("magic") }
    expect(index: Int): Char { panic("magic") }
    replace(needle: String, replacement: String): String { panic("magic") }
    replaceFirst(needle: String, replacement: String): String { panic("magic") }
    replace(needle: String, replacement: String): String { panic("magic") }
    getReverse(): String { panic("magic") }
    dropWhile(p: Char => Bool): String { panic("magic") }
    takeWhile(p: Char => Bool): String { panic("magic") }
    slice(from: Int, until: Int): String { panic("magic") }
    sliceEquals(offset: Int, that: String, thatOffset: Int, length: Int, ignoreCase: Bool = False): Bool { panic("magic") }
    split(char: Char): Array[String] { panic("magic") }
    dropFirst(count: Int = 1): String { panic("magic") }
    dropLast(count: Int = 1): String { panic("magic") }
    expectInt(): Int { panic("magic") }
    first(): Option[Char] { panic("magic") }
    last(): Option[Char] { panic("magic") }
    expectFirst(): Char { panic("magic") }
    expectLast(): Char { panic("magic") }
    getIsLetter(): Bool { panic("magic") }
    contains(substring : String) : Bool { panic("magic") }
    startsWith(prefix : String) : Bool { panic("magic") }
    any(p: Char => Bool): Bool { panic("magic") }
}
