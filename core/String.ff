data String {}

extend self: String {

    size(): Int
        target js sync "return self_.length"

    grab(index: Int): Char
        target js sync """
            if(index_ < 0 || index_ >= self_.length) {
                ff_core_Try.internalThrowGrabException_()
            }
            return self_.charCodeAt(index_)
        """

    replace(needle: String, replacement: String): String
        target js sync "return self_.replaceAll(needle_, replacement_)"

    replaceFirst(needle: String, replacement: String): String
        target js sync "return self_.replace(needle_, replacement_)"

    reverse(): String
        target js sync "return [...self_].reverse().join('')"

    repeat(count: Int): String
        target js sync "return self_.repeat(count_)"

    trim(): String
        target js sync "return self_.trim()"

    trimStart(): String
        target js sync "return self_.trimStart()"

    trimEnd(): String
        target js sync "return self_.trimEnd()"

    lower(): String
        target js sync "return self_.toLowerCase()"

    upper(): String
        target js sync "return self_.toUpperCase()"

    dropWhile(p: Char => Bool): String
        target js sync """
            let i = 0
            for(; i < self_.length && p_(self_.codePointAt(i)); i++);
            return self_.slice(i)
        """
        target js async """
            let i = 0
            for(; i < self_.length && await p_(self_.codePointAt(i), $task); i++);
            return self_.slice(i)
        """

    takeWhile(p: Char => Bool): String
        target js sync """
            let i = 0
            for(; i < self_.length && p_(self_.codePointAt(i)); i++);
            return self_.slice(0, i)
        """
        target js async """
            let i = 0
            for(; i < self_.length && await p_(self_.codePointAt(i), $task); i++);
            return self_.slice(0, i)
        """

    slice(from: Int, until: Int): String
        target js sync "return self_.slice(from_, until_)"

    split(char: Char): List[String]
        target js sync "return self_.split(String.fromCharCode(char_))"

    splitFirst(char: Char): Option[Pair[String, String]]
        target js sync """
            const array = self_.split(String.fromCharCode(char_), 2)
            return array.length === 2
                ? ff_core_Option.Some(ff_core_Pair.Pair(array[0], array[1]))
                : ff_core_Option.None()
        """

    lines(): List[String]
        target js sync """
            return self_.split(
                new RegExp("[" + String.fromCharCode(13) + "]?[" + String.fromCharCode(10) + "]", "g")
            )
        """

    dropFirst(count: Int = 1): String
        target js sync "return self_.slice(count_)"

    dropLast(count: Int = 1): String
        target js sync "return self_.slice(0, self_.length - count_)"

    getInt(): Option[Int]
        target js sync """
            if(self_.length == 0) {
                return ff_core_Option.None()
            }
            for(let i = 0; i < self_.length; i++) {
                const c = self_.codePointAt(i)
                if(c < 48 || c > 57) return ff_core_Option.None()
            }
            return ff_core_Option.Some(parseInt(self_, 10));
        """
        
    getFloat(): Float
        target js sync """
            const result = parseFloat(self_, 10);
            if(!isFinite(result)) {
                return ff_core_Option.None()
            }
            return ff_core_Option.Some(result);
        """        

    grabInt(): Int
        target js sync """
            if(self_.length == 0) {
                ff_core_Try.internalThrowGrabException_()
            }
            for(let i = 0; i < self_.length; i++) {
                const c = self_.codePointAt(i)
                if(c < 48 || c > 57) ff_core_Try.internalThrowGrabException_()
            }
            return parseInt(self_, 10);
        """
        
    grabFloat(): Float
        target js sync """
            const result = parseFloat(self_, 10);
            if(!isFinite(result)) {
                ff_core_Try.internalThrowGrabException_()
            }
            return result;
        """    

    first(): Option[Char]
        target js sync """
            return self_.length > 0
                ? ff_core_Option.Some(self_.charCodeAt(0))
                : ff_core_Option.None()
        """

    last(): Option[Char]
        target js sync """
            return self_.length > 0
                ? ff_core_Option.Some(self_.charCodeAt(self_.length - 1))
                : ff_core_Option.None()
        """

    grabFirst(): Char {self.first().else {Try.internalThrowGrabException()}}

    grabLast(): Char {self.last().else {Try.internalThrowGrabException()}}

    contains(substring: String): Bool
        target js sync "return self_.includes(substring_)"

    startsWith(prefix: String, offset: Int = 0): Bool
        target js sync "return self_.startsWith(prefix_, offset_)"

    endsWith(prefix: String): Bool
        target js sync "return self_.endsWith(prefix_)"

    removeFirst(prefix: String): Option[String] {
        if(self.startsWith(prefix)) {Some(self.dropFirst(prefix.size()))} else {None}
    }

    removeLast(suffix: String): Option[String] {
        if(self.endsWith(suffix)) {Some(self.dropLast(suffix.size()))} else {None}
    }
    
    padStart(length: Int, padding: String = " "): String
        target js sync """
            return self_.padStart(length_, padding_);
        """

    padEnd(length: Int, padding: String = " "): String
        target js sync """
            return self_.padEnd(length_, padding_);
        """

    any(body: Char => Bool): Bool
        target js sync """
            for(let i = 0; i < self_.length; i++) {
                if(body_(self_.charCodeAt(i))) return true;
            }
            return false;
        """
        target js async """
            for(let i = 0; i < self_.length; i++) {
                if(await body_(self_.charCodeAt(i), $task)) return true;
            }
            return false;
        """

    all(body: Char => Bool): Bool
        target js sync """
            for(let i = 0; i < self_.length; i++) {
                if(!body_(self_.charCodeAt(i))) return false;
            }
            return true;
        """
        target js async """
            for(let i = 0; i < self_.length; i++) {
                if(!await body_(self_.charCodeAt(i), $task)) return false;
            }
            return true;
        """

    filter(body: Char => Bool): String
        target js sync """
            const result = [];
            for(let i = 0; i < self_.length; i++) {
                if(body_(self_.charCodeAt(i))) result.push(self_.charAt(i));
            }
            return result.join();
        """
        target js async """
            const result = [];
            for(let i = 0; i < self_.length; i++) {
                if(await body_(self_.charCodeAt(i))) result.push(self_.charAt(i));
            }
            return result.join();
        """

    toBuffer(): Buffer
        target js sync """
            const encoded = new TextEncoder().encode(self_)
            return new DataView(encoded.buffer, encoded.byteOffset, encoded.byteLength)
        """

}
