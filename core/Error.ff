data Error {}

extend self: Error {

    rethrow[T](): T {
        Js.throw(self!)
    }

    name(): String {
        self!->name.coalesce("")?
    }

    message(): String {
        self!->message.coalesce("")?
    }

    stack(): String {
        let stacktrace = self!->stack.coalesce("")?
        if(!Js.inNode()) {stacktrace} else:
        stacktrace.lines().takeWhile {l => !l.contains("$run$") && !l.contains(".run.mjs:")}.map {line =>
            line.removeFirst("    at ").map {line =>
                "    at " + line.dropWhile {_ != '('}.dropFirst().dropLast()
            }.else {line}
        }.join("\n")
    }

    exception(): Option[Any] {
        if(!self!->ffException.isNullOrUndefined()) {self!->ffException?}
    }
    
}
