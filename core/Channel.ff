capability Channel[T](
    capacity: Int
    buffer: Array[T]
    readers: JsValue
    writers: JsValue
)

extend self[T]: Channel[T] {

    read(): T {
        readOr(self, {_}).wait()
    }

    write(message: T): Unit {
        writeOr(self, message, {}).wait()
    }

}


capability ChannelAction[T](
    channel: Channel[JsValue]
    body: JsValue
    message: Option[JsValue]
    previous: Option[ChannelAction[T]]
)

extend self[T]: ChannelAction[T] {
    
    readOr[M](channel: Channel[M], body: M => T): ChannelAction[T] {
        ChannelAction(channel!?, body!, None, Some(self))
    }

    writeOr[M](channel: Channel[M], message: M, body: () => T): ChannelAction[T] {
        ChannelAction(channel!?, body!, Some(message!), Some(self))
    }

    wait(): T {
        internalRunChannelAction(self, None)
    }

    timeout(duration: Duration, body: () => T): T {
        internalRunChannelAction(self, Some(Pair(body, Some(duration))))
    }

    immediately(body: () => T): T {
        internalRunChannelAction(self, Some(Pair(body, None)))
    }

}

readOr[M, T](channel: Channel[M], body: M => T): ChannelAction[T] {
    ChannelAction(channel!?, body!, None, None)
}

writeOr[M, T](channel: Channel[M], message: M, body: () => T): ChannelAction[T] {
    ChannelAction(channel!?, body!, Some(message!), None)
}

internalRunChannelAction[T](action: ChannelAction[T], mode: Option[Pair[() => T, Option[Duration]]]): T {
    Js.throwIfCancelled()
    
    // Convert the linked actions into an array.
    let actions = [].toArray()
    function findActions(action: ChannelAction[T]) {
        actions.push(action)
        action.previous.each {findActions(_)}
    }
    findActions(action)
    
    // If any reads or writes can be done immediately, do the first one and return.
    mutable foundPromise = None
    actions.eachWhile {action =>
        action.message.{
            | Some(message) {action.channel.readers->size !== 0} => 
                let reader = action.channel.readers->values()->next()->value
                action.channel.readers->delete(reader)
                reader->resolve(message)
                foundPromise = Some(action.body.callValue1(Js.currentTask()!))
            | Some(message) {action.channel.buffer.size() < action.channel.capacity} =>
                action.channel.buffer.push(message)
                foundPromise = Some(action.body.callValue1(Js.currentTask()!))
            | Some(_) =>
            | None {action.channel.buffer.size() != 0} => 
                action.channel.buffer.reverse()
                let message = action.channel.buffer.pop()
                action.channel.buffer.reverse()
                foundPromise = Some(action.body.callValue2(message!, Js.currentTask()!))
            | None {action.channel.writers->size !== 0} => 
                let writer = action.channel.writers->values()->next()->value
                action.channel.writers->delete(writer)
                writer->resolve()
                foundPromise = Some(action.body.callValue2(writer->message!, Js.currentTask()!))
            | None => 
        }
        foundPromise.isEmpty()
    }
    foundPromise.map {Js.await(_)?}.else:
    
    // If there's an "immediately(body)" action, do that now.
    if(mode.any {_.second.isEmpty()}) {
        let makePromise = mode.grab().first
        Js.await(makePromise()!)?
    } else:
    
    // Otherwise, start waiting for one of the readers or writers (or timeout(body), or cancellation) to happen.
    let body = Js.awaitCancellablePromise {resolve, reject, onSettled =>
        mode.each {m =>
            let timeout = Js->setTimeout(Js->{resolve(m.first)}, m.second.grab().seconds * 1000.0)
            onSettled {_ => Js->clearTimeout(timeout)}
        }
        actions.each {action =>
            action.message.{
                | Some(message) => 
                    let writer = Js->(
                        resolve = Js->{resolve({action.body.callValue1(Js.currentTask()!)?})}
                        message = message
                    )
                    action.channel.writers->add(writer)
                    onSettled {_ => action.channel.writers->delete(writer)}
                | None =>
                    let reader = Js->(
                        resolve = Js->{m =>
                            resolve({action.body.callValue2(m, Js.currentTask()!)?})
                        }
                    )
                    action.channel.readers->add(reader)
                    onSettled {_ => action.channel.readers->delete(reader)}
            }
        }
    }
    body()
    
}
