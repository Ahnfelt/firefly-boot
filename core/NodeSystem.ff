capability NodeSystem {}

class ProcessResult(exitCode: Int, standardOut: Buffer, standardError: Buffer)
data ProcessException(problem: String)

extend self: NodeSystem {

    arguments(): List[String] {
        self!->"array_"?
    }

    assets(): AssetSystem {
        let assetPkgSnapshotPath = self.path("/snapshot/output/assets")
        if(assetPkgSnapshotPath.isDirectory()) {
            // Opendir gives ENOENT: no such file or directory, opendir '/snapshot/output/assets'
            function streams(path: Path): Stream[Pair[String, () => Stream[Buffer]]] {
                internalListDirectoryWithoutOpendir(self, path).toStream().flatMap {file =>
                    if(file.isDirectory()) {
                        streams(file)
                    } else {
                        [Pair("/" + file.relativeTo(assetPkgSnapshotPath), {file.readStream()})].toStream()
                    }
                }
            }
            AssetSystem(streams(assetPkgSnapshotPath).toMap())
        } else {
            self!->"assets_"?
        }
    }

    path(relativePath: String): Path {
        let nodePath = Js.import("path")
        Path(nodePath->resolve(relativePath)?)
    }

    pathFromUrl(url: String): Path {
        let nodeUrl = Js.import("url")
        Path(nodeUrl->fileURLToPath(Js->URL->(url))?)
    }

    httpClient(): HttpClient {
        Js.globalThis()?
    }

    mainTask(): Task {
        self!->"task_"?
    }

    crypto(): Crypto {
        Js.globalThis()->crypto?
    }

    js(): JsSystem {
        Js.jsSystem()
    }

    date(timeZoneId: Option[String] = None, calendarId: String = Date.isoCalendarId): Date {
        let date = Date(Js->Temporal->Now->zonedDateTimeISO(timeZoneId.map {_!}.else {Js.undefined()}))
        if(calendarId == Date.isoCalendarId) {date} else {date.withCalendar(calendarId)}
    }

    exit[T](exitCode: Int = 0): T {
        Js->process->exit(exitCode)?
    }

    readStream(): Stream[Buffer] {
        Path.internalReadStream {Js->process->stdin}
    }

    writeBuffer(buffer: Buffer): Unit {
        Js->process->stdout->write(Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength))
    }

    writeStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeBuffer(_)}
    }

    writeText(text: String): Unit {
        self.writeBuffer(text.toBuffer())
    }

    writeLine(text: String): Unit {
        self.writeText(text + "\n")
    }

    writeErrorBuffer(buffer: Buffer): Unit {
        Js->process->stderr->write(Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength))
    }

    writeErrorStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeErrorBuffer(_)}
    }

    writeErrorText(text: String): Unit {
        self.writeErrorBuffer(text.toBuffer())
    }

    writeErrorLine(text: String): Unit {
        self.writeErrorText(text + "\n")
    }
    
    environment(): Map[String, String] {
        mutable result = Map.new()
        Js->process->env.each {key =>
            result = result.add(key?, Js->process->env.get(key)?)
        }
        result
    }

    execute(
        command: String
        arguments: List[String]
        standardIn: Buffer = Buffer.new(0)
        directory: Option[Path] = None
        environment: Option[Map[String, String]] = None
        maxBuffer: Int = 16777216
        killSignal: Int = 9
        shell: Bool = False
        node: Option[(JsValue, JsValue) => Unit] = None
    ): ProcessResult {
        let childProcess = Js.import("node:child_process")
        let env = environment.map {e =>
            let o = Js.object()
            e.each {k, v => o.set(k, v)}
            o
        }.else {Js->process->env}
        Js.withSignal {signal => Js.awaitCancellablePromise {resolve, reject, onSettle =>
            let newProcess = if(!node.isEmpty()) {
                let p = childProcess->fork(command, arguments, Js->(
                    cwd = directory.map {_.absolutePath!}.else {Js.undefined()}
                    signal = signal
                    killSignal = killSignal
                    env = env
                    silent = True
                ))
                p->on("message", Js->{message => node.grab()(message, p)})
                p
            } else {
                childProcess->spawn(command, arguments, Js->(
                    cwd = directory.map {_.absolutePath!}.else {Js.undefined()}
                    windowsHide = True
                    signal = signal
                    killSignal = killSignal
                    env = env
                    shell = shell
                ))
            }
            mutable size = 0
            let out = Array.new()
            let err = Array.new()
            newProcess->stdout->on("data", Js->{data =>
                if(size <= maxBuffer) {
                    size += data->byteLength?
                    if(size > maxBuffer) {
                        newProcess->kill(killSignal)
                    } else {
                        out.push(data)
                    }
                }
                Unit
            })
            newProcess->stderr->on("data", Js->{data =>
                if(size <= maxBuffer) {
                    size += data->byteLength?
                    if(size > maxBuffer) {
                        newProcess->kill(killSignal)
                    } else {
                        err.push(data)
                    }
                }
                Unit
            })
            if(standardIn!->byteLength !== 0) {
                newProcess->stdin->write(standardIn!)
            }
            newProcess->stdin->end()
            newProcess->on("error", Js->{error =>
                if(size > maxBuffer) {
                    reject(internalProcessError("maxBuffer exceeded"))
                } else {
                    reject(internalProcessError(error->message?))
                }
            })
            newProcess->on("close", Js->{code =>
                let o = Js->Buffer->concat(out.drain()!)
                let e = Js->Buffer->concat(err.drain()!)
                resolve(ProcessResult(
                    code?
                    Js->DataView->(o->buffer, o->byteOffset, o->byteLength)?
                    Js->DataView->(e->buffer, e->byteOffset, e->byteLength)?
                ))
            })
            onSettle {fulfilled =>
                if(!fulfilled) {
                    newProcess->kill(killSignal)
                }
            }
        }}
    }

}

internalListDirectoryWithoutOpendir(system: NodeSystem, path: Path): List[Path] {
    let fsPromises = Js.import("fs/promises")
    let nodePath = Js.import("path")
    let files = Js.await(fsPromises->readdir(path.absolutePath))
    files.grabArray().map {file => Path(nodePath->join(path.absolutePath, file)?)}
}

internalProcessError(problem: String): Error {
    try {
        throw(ProcessException(problem))
    } catchAny {error =>
        error
    }
}
