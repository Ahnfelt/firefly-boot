capability NodeSystem {}

class ProcessResult(exitCode: Int, standardOut: Buffer, standardError: Buffer)
data ProcessException(problem: String)

extend self: NodeSystem {

    arguments(): List[String]
        target node async "return self_.array_"

    assets(): AssetSystem {
        let assetPkgSnapshotPath = self.path("/snapshot/output/assets")
        if(assetPkgSnapshotPath.isDirectory()) {
            // Opendir gives ENOENT: no such file or directory, opendir '/snapshot/output/assets'
            function streams(path: Path): Stream[Pair[String, () => Stream[Buffer]]] {
                internalListDirectoryWithoutOpendir(self, path).toStream().flatMap {file =>
                    if(file.isDirectory()) {
                        streams(file)
                    } else {
                        [Pair("/" + file.relativeTo(assetPkgSnapshotPath), {file.readStream()})].toStream()
                    }
                }
            }
            AssetSystem(streams(assetPkgSnapshotPath).toMap())
        } else {
            internalAssets(self)
        }
    }

    path(relativePath: String): Path
        target node async """
            import * as path from 'path'
            return path.resolve(relativePath_)
        """

    pathFromUrl(url: String): Path
        target node async """
            import * as url from 'url';
            return url.fileURLToPath(new URL(url_));
        """

    httpClient(): HttpClient
        target js async "return null"

    mainTask(): Task
        target js async "return self_.task_"

    js(): JsSystem
        target js async "return typeof globalThis !== 'undefined' ? globalThis : window"

    exit[T](exitCode: Int = 0): T
        target js async "process.exit(exitCode_)"

    readStream(): Stream[Buffer]
        target js async """
            return ff_core_Path.internalReadStream_$(() => process.stdin)
        """

    writeBuffer(buffer: Buffer): Unit
        target js async "process.stdout.write(new Uint8Array(buffer_.buffer, buffer_.byteOffset, buffer_.byteLength))"

    writeStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeBuffer(_)}
    }

    writeText(text: String): Unit {
        self.writeBuffer(text.toBuffer())
    }

    writeLine(text: String): Unit {
        self.writeText(text + "\n")
    }

    writeErrorBuffer(buffer: Buffer): Unit
        target js async "process.stderr.write(new Uint8Array(buffer_.buffer, buffer_.byteOffset, buffer_.byteLength))"

    writeErrorStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeErrorBuffer(_)}
    }

    writeErrorText(text: String): Unit {
        self.writeErrorBuffer(text.toBuffer())
    }

    writeErrorLine(text: String): Unit {
        self.writeErrorText(text + "\n")
    }
    
    environment(): Map[String, String]
        target node async """
            const result = [];
            for(const key in process.env) {
                result.push(ff_core_Pair.Pair(key, process.env[key]));
            }
            return ff_core_List.List_toMap(result, ff_core_Ordering.ff_core_Ordering_Order$ff_core_String_String);
        """
    
    execute(
        command: String
        arguments: List[String]
        standardIn: Buffer = Buffer.new(0)
        workingDirectory: Option[Path] = None
        environment: Option[Map[String, String]] = None
        maxBuffer: Int = 16777216
        killSignal: Int = 9
    ): ProcessResult
        target node async """
            import * as childProcess from 'node:child_process';
            const environment = environment_.value_ !== void 0 ? {} : process.env;
            if(environment_.value_ !== void 0) {
                ff_core_Map.Map_each(
                    environment_.value_, 
                    (k, v) => environment[k] = v, 
                    ff_core_Ordering.ff_core_Ordering_Order$ff_core_String_String
                );
            }
            const newProcess = childProcess.spawn(command_, arguments_, {
                cwd: workingDirectory_.value_,
                windowsHide: true,
                signal: $task.controller.signal,
                killSignal: killSignal_,
                env: environment,
            });
            
            let size = 0;
            const out = [];
            const err = [];
            
            newProcess.stdout.on('data', (data) => {
                if(size > maxBuffer_) return;
                size += data.byteLength;
                if(size > maxBuffer_) newProcess.kill(killSignal_);
                else out.push(data);
            });

            newProcess.stderr.on('data', (data) => {
                if(size > maxBuffer_) return;
                size += data.byteLength;
                if(size > maxBuffer_) newProcess.kill(killSignal_);
                else err.push(data);
            });

            return await new Promise((resolve, reject) => {
                if(standardIn_.byteLength !== 0) {
                    newProcess.stdin.write(standardIn_);
                }
                newProcess.stdin.end();
                newProcess.on('error', error => {
                    if(size > maxBuffer_) {
                        reject(internalProcessError_("maxBuffer exceeded"));
                    } else {
                        reject(internalProcessError_(error.message));
                    }
                });
                newProcess.on('close', code => {
                    const o = Buffer.concat(out);
                    const e = Buffer.concat(err);
                    resolve(ProcessResult(
                        code,
                        new DataView(o.buffer, o.byteOffset, o.byteLength),
                        new DataView(e.buffer, e.byteOffset, e.byteLength),
                    ));
                }); 
            });
        """

}

internalAssets(system: NodeSystem): AssetSystem
    target node async "return system_.assets_"

internalListDirectoryWithoutOpendir(system: NodeSystem, path: Path): List[Path]
    target node async """
        import * as fsPromises from 'fs/promises'
        import * as path from 'path'
        let files = await fsPromises.readdir(path_)
        return files.map(file => path.join(path_, file))
    """

internalProcessError(problem: String): Error {
    try {
        throw(ProcessException(problem))
    } catchAny {error =>
        error
    } grab()
}
