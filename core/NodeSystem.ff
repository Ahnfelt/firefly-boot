capability NodeSystem {}

extend self: NodeSystem {

    arguments(): Array[String]
        target node async "return self_.array_"

    assets(): AssetSystem {
        let assetPkgSnapshotPath = self.path("/snapshot/output/assets")
        if(assetPkgSnapshotPath.isDirectory()) {
            // Opendir gives ENOENT: no such file or directory, opendir '/snapshot/output/assets'
            function streams(path: Path): Stream[Pair[String, () => Stream[Buffer]]] {
                internalListDirectoryWithoutOpendir(self, path).toStream().flatMap {file =>
                    if(file.isDirectory()) {
                        streams(file)
                    } else {
                        [Pair("/" + file.relativeTo(assetPkgSnapshotPath), {file.readStream()})].toStream()
                    }
                }
            }
            AssetSystem(streams(assetPkgSnapshotPath).toMap())
        } else {
            internalAssets(self)
        }
    }

    path(relativePath: String): Path
        target node async """
            import * as path from 'path'
            return path.resolve(relativePath_)
        """

    pathFromUrl(url: String): Path
        target node async """
            import * as url from 'url';
            return url.fileURLToPath(new URL(url_));
        """

    httpClient(): HttpClient
        target js async "return null"

    mainTask(): Task
        target js async "return self_.task_"

    js(): JsSystem
        target js async "return typeof globalThis !== 'undefined' ? globalThis : window"

    exit[T](exitCode: Int = 0): T
        target js async "process.exit(exitCode_)"

    readStream(): Stream[Buffer]
        target js async """
            return ff_core_Path.internalReadStream_$(() => process.stdin)
        """

    writeBuffer(buffer: Buffer): Unit
        target js async "process.stdout.write(new Uint8Array(buffer_.buffer, buffer_.byteOffset, buffer_.byteLength))"

    writeStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeBuffer(_)}
    }

    writeText(text: String): Unit {
        self.writeBuffer(text.toBuffer())
    }

    writeLine(text: String): Unit {
        self.writeText(text + "\n")
    }

    writeErrorBuffer(buffer: Buffer): Unit
        target js async "process.stderr.write(new Uint8Array(buffer_.buffer, buffer_.byteOffset, buffer_.byteLength))"

    writeErrorStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeErrorBuffer(_)}
    }

    writeErrorText(text: String): Unit {
        self.writeErrorBuffer(text.toBuffer())
    }

    writeErrorLine(text: String): Unit {
        self.writeErrorText(text + "\n")
    }

}

internalAssets(system: NodeSystem): AssetSystem
    target node async "return system_.assets_"

internalListDirectoryWithoutOpendir(system: NodeSystem, path: Path): Array[Path]
    target node async """
        import * as fsPromises from 'fs/promises'
        import * as path from 'path'
        let files = await fsPromises.readdir(path_)
        return files.map(file => path.join(path_, file))
    """
