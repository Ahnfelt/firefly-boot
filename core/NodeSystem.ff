type NodeSystem! {}

extend self: NodeSystem {

    arguments(): List[String]
        target node async "return ff_core_Array.Array_toList(self_.array_)"

    assets(): AssetSystem {
        let assetPkgSnapshotPath = "/snapshot/output/assets"
        if(self.files().isDirectory(assetPkgSnapshotPath)) {
            let fs = self.files()
            let files = fs.list(assetPkgSnapshotPath)
            let streams = files.map { file =>
                Pair(file.dropFirst(assetPkgSnapshotPath.size()), fs.readStream(file))
            }
            AssetSystem(streams.toMap())
        } else {
            internalAssets(self)
        }
    }

    files(): FileSystem
        target node async "return null"

    fetch(): FetchSystem
        target js async "return null"

    tasks(): TaskSystem
        target js async "return null"

    time(): TimeSystem
        target js async "return null"

    js(): JsSystem
        target js async "return typeof globalThis !== 'undefined' ? globalThis : window"

}

internalAssets(system: NodeSystem): AssetSystem
    target node async "return system_.assets_"
