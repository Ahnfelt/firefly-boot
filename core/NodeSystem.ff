capability NodeSystem {}

extend self: NodeSystem {

    arguments(): Array[String]
        target node async "return self_.array_"

    assets(): AssetSystem {
        let assetPkgSnapshotPath = "/snapshot/output/assets"
        if(self.files().isDirectory(assetPkgSnapshotPath)) {
            let fs = self.files()
            function streams(path: String): List[Pair[String, () => Stream[Buffer]]] {
                let files = fs.list(path)
                files.flatMap { file =>
                    if(fs.isDirectory(file)) {
                        streams(file)
                    } else {
                        [Pair(file.dropFirst(assetPkgSnapshotPath.size()), {fs.readStream(file)})]
                    }
                }
            }
            AssetSystem(streams(assetPkgSnapshotPath).toMap())
        } else {
            internalAssets(self)
        }
    }

    files(): FileSystem
        target node async "return null"

    fetch(): FetchSystem
        target js async "return null"

    tasks(): TaskSystem
        target js async "return null"

    time(): TimeSystem
        target js async "return null"

    js(): JsSystem
        target js async "return typeof globalThis !== 'undefined' ? globalThis : window"

    readStream(): Stream[Buffer]
        target js async """
            return ff_core_FileSystem.internalReadStream_$(() => process.stdin)
        """

    writeBuffer(buffer: Buffer): Unit
        target js async "process.stdout.write(new Uint8Array(buffer_.buffer))"

    writeStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeBuffer(_)}
    }

    writeText(text: String): Unit {
        self.writeBuffer(text.toBuffer())
    }

    writeLine(text: String): Unit {
        self.writeText(text + "\n")
    }

    writeErrorBuffer(buffer: Buffer): Unit
        target js async "process.stderr.write(new Uint8Array(buffer_.buffer))"

    writeErrorStream(stream: Stream[Buffer]): Unit {
        stream.each {self.writeErrorBuffer(_)}
    }

    writeErrorText(text: String): Unit {
        self.writeErrorBuffer(text.toBuffer())
    }

    writeErrorLine(text: String): Unit {
        self.writeErrorText(text + "\n")
    }

}

internalAssets(system: NodeSystem): AssetSystem
    target node async "return system_.assets_"
