capability HttpClient {}
capability FetchBody {}
capability FetchResponse {}
data FetchRedirect {
    RedirectFollow
    RedirectError
    RedirectManual
}
data FetchOptions(
    redirect: FetchRedirect = RedirectFollow
    referrer: Option[String] = None
    integrity: Option[String] = None
    mode: Option[String] = None
    credentials: Option[String] = None
    cache: Option[String] = None
)

extend self: HttpClient {
    
    get[T](
        url: String
        headers: List[Pair[String, String]]
        body: FetchResponse => T
    ): T {
        self.fetch("GET", url, headers, None, FetchOptions(), body)
    }
    
    post[T](
        url: String
        headers: List[Pair[String, String]]
        payload: Buffer
        body: FetchResponse => T
    ): T {
        self.fetch("POST", url, headers, Some(payload), FetchOptions(), body)
    }
    
    put[T](
        url: String
        headers: List[Pair[String, String]]
        payload: Buffer
        body: FetchResponse => T
    ): T {
        self.fetch("PUT", url, headers, Some(payload), FetchOptions(), body)
    }
    
    delete[T](
        url: String
        headers: List[Pair[String, String]]
        body: FetchResponse => T
    ): T {
        self.fetch("DELETE", url, headers, None, FetchOptions(), body)
    }

    fetch[T](
        method: String
        url: String
        headers: List[Pair[String, String]] = []
        payload: Option[Buffer] = None
        options: FetchOptions = FetchOptions()
        body: FetchResponse => T
    ): T {
        let fetchResponse = Js->(response = Js.null(), statusChecked = False)
        Js.withSignal {signal =>
            try {
                let fetchOptions = Js->(headers = Js->(), signal = signal, method = method)
                headers.each {| Pair(k, v) =>
                    fetchOptions->headers.set(k, v)
                }
                payload.each {v => fetchOptions->body = v}
                options.redirect.{
                    | RedirectError => fetchOptions->redirect = "error"
                    | RedirectFollow => 
                    | RedirectManual => fetchOptions->redirect = "manual"
                }
                options.referrer.each {v => fetchOptions->referrer = v}
                options.integrity.each {v => fetchOptions->integrity = v}
                options.mode.each {v => fetchOptions->mode = v}
                options.credentials.each {v => fetchOptions->credentials = v}
                options.cache.each {v => fetchOptions->cache = v}
                fetchResponse->response = Js.await(self!->fetch(url, fetchOptions))
                let result = Js.await(body(fetchResponse?)!)
                internalCheck(fetchResponse?)
                result?
            } finally {
                fetchResponse->response = Js.null()
            }
        }
    }

}

extend self: FetchResponse {

    ok(): Bool {
        self!->statusChecked = True
        internalCheck(self)
        self!->response->ok?
    }

    status(): Int {
        self!->statusChecked = True
        internalCheck(self)
        self!->response->status?
    }

    statusText(): String {
        self!->statusChecked = True
        internalCheck(self)
        self!->response->statusText?
    }

    header(name: String): Option[String] {
        internalCheck(self)
        let header = self!->response->headers->get(name)
        if(!header.isNullOrUndefined()) {header?}
    }

    readText(): String {
        internalCheck(self)
        Js.await(self!->response->text())?
    }

    readJson(): Json {
        internalCheck(self)
        Js.await(self!->response->json())?
    }

    readBuffer(): Buffer {
        internalCheck(self)
        Js->DataView->(Js.await(self!->response->arrayBuffer()))?
    }

}

internalCheck(fetchResponse: FetchResponse) {
    if(fetchResponse!->response.isNull()) {
        Js.throw(Js->Error->("Response closed"))
    }
    if(!fetchResponse!->statusChecked? && !fetchResponse!->response->ok?) {
        Js.throw(Js->Error->("Unchecked HTTP status code: " + fetchResponse!->response->status?))
    }
}
