capability HttpClient {}
capability FetchBody {}
capability FetchResponse {}
data FetchRedirect {
    RedirectFollow
    RedirectError
    RedirectManual
}
data FetchOptions(
    redirect: FetchRedirect = RedirectFollow
    referrer: Option[String] = None
    integrity: Option[String] = None
    mode: Option[String] = None
    credentials: Option[String] = None
    cache: Option[String] = None
)

extend self: HttpClient {
    
    get[T](
        url: String
        headers: List[Pair[String, String]]
        body: FetchResponse => T
    ): T {
        self.fetch("GET", url, headers, None, FetchOptions(), body)
    }
    
    post[T](
        url: String
        headers: List[Pair[String, String]]
        payload: Buffer
        body: FetchResponse => T
    ): T {
        self.fetch("POST", url, headers, Some(payload), FetchOptions(), body)
    }
    
    put[T](
        url: String
        headers: List[Pair[String, String]]
        payload: Buffer
        body: FetchResponse => T
    ): T {
        self.fetch("PUT", url, headers, Some(payload), FetchOptions(), body)
    }
    
    delete[T](
        url: String
        headers: List[Pair[String, String]]
        body: FetchResponse => T
    ): T {
        self.fetch("DELETE", url, headers, None, FetchOptions(), body)
    }

    fetch[T](
        method: String
        url: String
        headers: List[Pair[String, String]] = []
        payload: Option[Buffer] = None
        options: FetchOptions = FetchOptions()
        body: FetchResponse => T
    ): T
        target js async """
            const fetchResponse = {response: null, statusChecked: false};
            try {
                const options = {headers: {}, signal: $task.controller.signal};
                options.method = method_;
                headers_.forEach(pair => {options.headers[pair.first_] = pair.second_});
                if(payload_.value_) options.body = payload_.value_;
                if(options_.redirect_.RedirectError) options.redirect = "error";
                else if(options_.redirect_.RedirectManual) options.redirect = "manual";
                if(options_.referrer_.value_) options.referrer = options_.referrer_.value_;
                if(options_.integrity_.value_) options.integrity = options_.integrity_.value_;
                if(options_.mode_.value_) options.mode = options_.mode_.value_;
                if(options_.credentials_.value_) options.credentials = options_.credentials_.value_;
                if(options_.cache_.value_) options.cache = options_.cache_.value_;
                fetchResponse.response = await self_.fetch(url_, options);
                const result = await body_(fetchResponse, $task);
                internalCheck_(fetchResponse);
                return result;
            } finally {
                fetchResponse.response = null;
                if($task.controller.signal.aborted) $task.controller = new AbortController()
            }
        """

}

extend self: FetchResponse {

    ok(): Bool
        target js async """
            self_.statusChecked = true;
            internalCheck_(self_);
            return self_.response.ok;
        """

    status(): Int
        target js async """
            self_.statusChecked = true;
            internalCheck_(self_);
            return self_.response.status;
        """

    statusText(): String
        target js async """
            self_.statusChecked = true;
            internalCheck_(self_);
            return self_.response.statusText;
        """

    header(name: String): Option[String]
        target js async """
            internalCheck_(self_);
            const header = self_.response.headers.get(name_);
            return header != null
                ? ff_core_Option.Some(header)
                : ff_core_Option.None();
        """

    readText(): String
        target js async """
            internalCheck_(self_);
            return await self_.response.text();
        """

    readJson(): Json
        target js async """
            internalCheck_(self_);
            return await self_.response.json();
        """

    readBuffer(): Buffer
        target js async """
            internalCheck_(self_);
            return new DataView(await self_.response.arrayBuffer());
        """

}

internalCheck(fetchResponse: FetchResponse)
    target js sync """
        if(fetchResponse_.response === null) {
            throw new Error("Response closed");
        }
        if(!fetchResponse_.statusChecked && !fetchResponse_.response.ok) {
            throw new Error("Unchecked HTTP status code: " + fetchResponse_.response.status);
        }
    """
