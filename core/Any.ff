data Any {}
data AnyTag[T] {}

trait T: HasAnyTag {
    anyTag(): AnyTag[T]
}

toAny[T: HasAnyTag](value: T): Any {
    let anyTag: AnyTag[T] = anyTag()
    Js->(anyTag = anyTag!, value = value!)?
}

fromAny[T: HasAnyTag](any: Any): Option[T] {
    let anyTag: AnyTag[T] = anyTag()
    if(any!->anyTag.equals(anyTag!)) {any!->value?}
}

extend self[T]: AnyTag[T] {
    show(): String {
        self!?
    }
}

internalAnyTag[T](tag: String): AnyTag[T] {
    tag!?
}