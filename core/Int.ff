data Int {}

extend self: Int {

    abs(): Int {
        Js->Math->abs(self)?
    }

    toFloat(): Float {
        self!?
    }

    bitNot(): Int {
        Js.unaryOperator("~", self)?
    }

    bitOr(that: Int): Int {
        Js.binaryOperator("|", self, that)?
    }

    bitAnd(that: Int): Int {
        Js.binaryOperator("&", self, that)?
    }

    bitXor(that: Int): Int {
        Js.binaryOperator("^", self, that)?
    }

    bitLeft(bits: Int): Int {
        Js.binaryOperator("<<", self, bits)?
    }

    bitRight(bits: Int, signed: Bool = True): Int {
        if(signed) {Js.binaryOperator(">>", self, bits)?} else {Js.binaryOperator(">>>", self, bits)?}
    }

    bitLeadingZeros(): Int {
        Js->Math->clz32(self)?
    }

    to(inclusiveEnd: Int): List[Int] {
        let result = Array.new()
        mutable n = self
        while {n <= inclusiveEnd} {
            result.push(n)
            n += 1
        }
        result.drain()
    }

    until(exclusiveEnd: Int): List[Int] {
        let result = Array.new()
        mutable n = self
        while {n < exclusiveEnd} {
            result.push(n)
            n += 1
        }
        result.drain()
    }

    min(that: Int): Int {
        Js->Math->min(self, that)?
    }

    max(that: Int): Int {
        Js->Math->max(self, that)?
    }

    clamp(from: Int, to: Int): Int {
        self.max(from).min(to)
    }
    
    pad(padding: String): String {
        ("" + self).padStart(padding.size(), padding)
    }
    
    div(divisor: Int): Int {
        (self / divisor).toInt()
    }

    rem(divisor: Int): Int {
        (self % divisor).toInt()
    }

}
