type Int {}

extend self: Int {

    abs(): Int { panic("magic") }
        javascript "return Math.abs(self_)"

    toFloat(): Float { panic("magic") }
        javascript "return self_"

    bitNot(): Int { panic("magic") }
        javascript "return ~self_;"

    bitOr(that: Int): Int { panic("magic") }
        javascript "return self_ | that_;"

    bitAnd(that: Int): Int { panic("magic") }
        javascript "return self_ & that_;"

    bitXor(that: Int): Int { panic("magic") }
        javascript "return self_ ^ that_;"

    bitLeft(bits: Int = 1): Int { panic("magic") }
        javascript "return self_ << bits_;"

    bitRight(bits: Int = 1, signed: Bool = True): Int { panic("magic") }
        javascript "return signed_ ? self_ >> bits_ : self_ >>> bits_;"

}
