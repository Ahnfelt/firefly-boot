type Int {}

extend self: Int {

    abs(): Int
        target js sync "return Math.abs(self_)"

    toFloat(): Float
        target js sync "return self_"

    bitNot(): Int
        target js sync "return ~self_;"

    bitOr(that: Int): Int
        target js sync "return self_ | that_;"

    bitAnd(that: Int): Int
        target js sync "return self_ & that_;"

    bitXor(that: Int): Int
        target js sync "return self_ ^ that_;"

    bitLeft(bits: Int = 1): Int
        target js sync "return self_ << bits_;"

    bitRight(bits: Int = 1, signed: Bool = True): Int
        target js sync "return signed_ ? self_ >> bits_ : self_ >>> bits_;"

}
