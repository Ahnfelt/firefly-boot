data Int {}

extend self: Int {

    abs(): Int
        target js sync "return Math.abs(self_)"

    toFloat(): Float
        target js sync "return self_"

    bitNot(): Int
        target js sync "return ~self_;"

    bitOr(that: Int): Int
        target js sync "return self_ | that_;"

    bitAnd(that: Int): Int
        target js sync "return self_ & that_;"

    bitXor(that: Int): Int
        target js sync "return self_ ^ that_;"

    bitLeft(bits: Int): Int
        target js sync "return self_ << bits_;"

    bitRight(bits: Int, signed: Bool = True): Int
        target js sync "return signed_ ? self_ >> bits_ : self_ >>> bits_;"

    to(inclusiveEnd: Int): List[Int] {
        let result = Array.new()
        mutable n = self
        while {n <= inclusiveEnd} {
            result.push(n)
            n += 1
        }
        result.drain()
    }

    until(exclusiveEnd: Int): List[Int] {
        let result = Array.new()
        mutable n = self
        while {n < exclusiveEnd} {
            result.push(n)
            n += 1
        }
        result.drain()
    }

    min(that: Int): Int {
        if(self < that) {self} else {that}
    }

    max(that: Int): Int {
        if(self > that) {self} else {that}
    }

    clamp(from: Int, to: Int): Int {
        if(self <= from) {from} elseIf {self >= to} {to} else {self}
    }
    
    pad(padding: String): String {
        ("" + self).padStart(padding.size(), padding)
    }
    
    div(divisor: Int): Int {
        (self / divisor).toInt()
    }

    rem(divisor: Int): Int {
        (self % divisor).toInt()
    }

}
