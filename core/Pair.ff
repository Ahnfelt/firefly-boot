type Pair[A, B](first: A, second: B) {
    Pair()
}

extend self[A, B]: Pair[A, B] {

    mapFirst[C](body: A => C): Pair[C, B] {
        self.Pair(first = body(self.first))
    }

    mapSecond[C](body: B => C): Pair[A, C] {
        self.Pair(second = body(self.second))
    }

    swap(): Pair[B, A] {
        Pair(self.second, self.first)
    }

}

extend self[A, A]: Pair[A, A] {

    toList(): List[A] {
        [self.first, self.second]
    }

    toArray(): Array[A] {
        self.toList().toArray()
    }

    toStack(): Stack[A] {
        self.toList().toStack()
    }

}

extend self[A: Order]: Pair[A, A] {

    toSet(): Set[A] {
        self.toList().toSet()
    }

}

extend self[A: Order, B]: Pair[A, B] {

    toMap(): Map[A, B] {
        [self].toMap()
    }

}
