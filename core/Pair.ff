type Pair[A, B](first: A, second: B) {
    Pair()
}

extend self[A, B]: Pair[A, B] {

    mapFirst[C](body: A => C): Pair[C, B] {
        Pair(...self, first = body(self.first))
    }

    mapSecond[C](body: B => C): Pair[A, C] {
        Pair(...self, second = body(self.second))
    }

    swap(): Pair[B, A] {
        Pair(self.second, self.first)
    }

}
