type Ordering {
    OrderingBefore
    OrderingSame
    OrderingAfter
}

fromInt(order: Int): Ordering {
    if(order < 0) {
        OrderingBefore
    } elseIf { order == 0 } {
        OrderingSame
    } else {
        OrderingAfter
    }
}

fromLessThan[T](lessThan: (T, T) => Bool): (T, T) => Ordering {
    {
        | x, y { lessThan(x, y) } => OrderingBefore
        | x, y { lessThan(y, x) } => OrderingAfter
        | _, _ => OrderingSame
    }
}

extend self: Ordering {
    toInt(): Int {
        self.{
            | OrderingBefore => -1
            | OrderingSame => 0
            | OrderingAfter => 1
        }
    }
    reverse(): Ordering {
        self.{
            | OrderingBefore => OrderingAfter
            | OrderingSame => OrderingSame
            | OrderingAfter => OrderingBefore
        }
    }
}
