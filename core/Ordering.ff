trait T: Order {
    compare(x: T, y: T): Ordering
}

instance Bool: Order {
    compare(x: Bool, y: Bool): Ordering {
        | False, True => OrderingBefore
        | True, False => OrderingAfter
        | _, _ => OrderingSame
    }
}

instance Char: Order {
    compare(x: Char, y: Char): Ordering {
        fromInt(x.codeUnit - y.codeUnit)
    }
}

instance Int: Order {
    compare(x: Int, y: Int): Ordering { fromInt(x - y) }
}

instance String: Order {
    compare(x: String, y: String): Ordering
        target js sync """
            if(x_ < y_) {
                return ff_core_Ordering.OrderingBefore()
            } else if(x_ > y_) {
                return ff_core_Ordering.OrderingAfter()
            } else {
                return ff_core_Ordering.OrderingSame()
            }
        """
}

instance Pair[A: Order, B: Order]: Order {
    compare(x: Pair[A, B], y: Pair[A, B]): Ordering {
        compare(x.first, y.first).{
            | OrderingSame => compare(x.second, y.second)
            | o => o
        }
    }
}

instance List[T: Order]: Order {
    compare(x: List[T], y: List[T]): Ordering {
        | [], [] => OrderingSame
        | [], _ => OrderingBefore
        | _, [] => OrderingAfter
        | [a, ...as], [b, ...bs] => compare(a, b).{
            | OrderingSame => compare(as, bs)
            | o => o
        }
    }
}

type Ordering {
    OrderingBefore
    OrderingSame
    OrderingAfter
}

fromInt(order: Int): Ordering {
    if(order < 0) {
        OrderingBefore
    } elseIf { order == 0 } {
        OrderingSame
    } else {
        OrderingAfter
    }
}

fromLessThan[T](lessThan: (T, T) => Bool): (T, T) => Ordering {
    {
        | x, y { lessThan(x, y) } => OrderingBefore
        | x, y { lessThan(y, x) } => OrderingAfter
        | _, _ => OrderingSame
    }
}

extend self: Ordering {
    toInt(): Int {
        self.{
            | OrderingBefore => -1
            | OrderingSame => 0
            | OrderingAfter => 1
        }
    }
    reverse(): Ordering {
        self.{
            | OrderingBefore => OrderingAfter
            | OrderingSame => OrderingSame
            | OrderingAfter => OrderingBefore
        }
    }
}
