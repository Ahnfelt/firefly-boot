type BuildSystem! {}
type BrowserCode!(packageGroup: String, packageName: String, mainFile: String, assetSystem: AssetSystem)
type BrowserBundle!(assetSystem: AssetSystem)

extend self: BuildSystem {

    compileForBrowser(mainFile: String): BrowserCode {
        // TODO: Check that the mainFile is in the current package directory
        internalCompile(self, mainFile, "browser")
        let fs = internalFileSystem(self)
        let streams = internalListDirectory(fs, ".firefly/output/browser")
        let mainPackagePair = internalMainPackagePair(self)
        BrowserCode(
            packageGroup = mainPackagePair.first
            packageName = mainPackagePair.second
            mainFile = mainFile
            assetSystem = AssetSystem(streams.toMap())
        )
    }

    buildMode(): Bool
        target node async "return !!self_.buildMode_"

    setAssets(assetSystem: AssetSystem): Unit
        target node async "self_.assets_ = assetSystem_"

    packageAssets(): AssetSystem {
        let fs = internalFileSystem(self)
        let streams = internalListDirectory(fs, ".")
        AssetSystem(streams.toMap())
    }

    dependencyAssets(user: String, package: String): AssetSystem {
        panic("dependencyAssets not yet implemented")
    }

    arguments(): Array[String]
        target node async "return self_.array_"

    tasks(): TaskSystem
        target js async "return null"

}

extend self: BrowserCode {

    assets(): AssetSystem {
        self.assetSystem
    }

    bundle(minify: Bool = True, sourceMap: Bool = False): BrowserBundle {
        let prefix = ".firefly/output/browser"
        let mainJsFile = prefix + "/" + self.packageGroup + "/" + self.packageName + "/" + self.mainFile + ".mjs"
        let file = prefix + "/Main.bundle.js"
        internalCallEsBuild(self, mainJsFile = mainJsFile, outputPath = file, minify = minify, sourceMap = sourceMap)
        let fs = internalBrowserCodeFileSystem(self)
        let assets = AssetSystem([
            Pair(file.dropFirst(prefix.size()), {fs.readStream(file)})
            ...if(sourceMap) {[
                Pair(file.dropFirst(prefix.size()) + ".map", {fs.readStream(file + ".map")})
            ]} else {[]}
        ].toMap())
        BrowserBundle(assets)
    }

}

extend self: BrowserBundle {

    assets(): AssetSystem {
        self.assetSystem
    }

}


internalCallEsBuild(
    self: BrowserCode
    mainJsFile: String
    outputPath: String
    minify: Bool
    sourceMap: Bool
): Unit
    target node async """
        import * as esbuild from 'esbuild'
        return await esbuild.build({
            entryPoints: [mainJsFile_],
            bundle: true,
            minify: minify_,
            sourcemap: sourceMap_,
            platform: 'browser',
            target: 'es6',
            external: ['../../../node_modules/*'], // TODO
            outfile: outputPath_
        })
    """

internalNodeCallEsBuild(
    self: NodeSystem
    mainJsFile: String
    outputPath: String
    minify: Bool
): Unit
    target node async """
        import * as esbuild from 'esbuild'
        return await esbuild.build({
            entryPoints: [mainJsFile_],
            bundle: true,
            minify: minify_,
            sourcemap: true,
            platform: 'node',
            target: 'es6',
            external: ['../../../node_modules/*'], // TODO
            outfile: outputPath_
        })
    """

internalListDirectory(fs: FileSystem, path: String): List[Pair[String, () => Stream[Buffer]]] {
    let prefix = if(path.endsWith("/")) {path.dropLast(1)} else {path}
    function go(currentPath: String): List[String] {
        fs.list(currentPath).flatMap { file =>
            if(fs.isDirectory(file)) {
                go(file)
            } else {
                [file]
            }
        }
    }
    go(path).map { file =>
        Pair(file.dropFirst(prefix.size()), {fs.readStream(file)})
    }
}

internalFileSystem(dummy: BuildSystem): FileSystem
    target node async """
        return null;
    """

internalBrowserCodeFileSystem(dummy: BrowserCode): FileSystem
    target node async """
        return null;
    """

internalCompile(buildSystem: BuildSystem, mainFile: String, target: String): Unit
    target node async """
        return await $firefly_compiler.buildViaBuildSystem_$(buildSystem_, buildSystem_.fireflyPath_, mainFile_, target_, $c)
    """

internalMainPackagePair(buildSystem: BuildSystem): Pair[String, String]
    target node async """
        return {first_: buildSystem_.mainPackagePair_.group_, second_: buildSystem_.mainPackagePair_.name_}
    """
