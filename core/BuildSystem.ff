type BuildSystem! {}

extend self: BuildSystem {

    compile(mainFile: String, target: String): Unit
        target js async """
            return await $firefly_compiler.buildViaBuildSystem_$(self_, self_.fireflyPath_, mainFile_, target_, $c)
        """

    bundle(
        mainJsFile: String = ".firefly/output/node/script/script/Main.mjs",
        outputPath: String = ".firefly/output/node/Main.min.js",
        minify: Bool = True
    ): Unit
        target js async """
            import * as esbuild from 'esbuild'
            // TODO: assets
            return await esbuild.build({
                entryPoints: [mainJsFile_],
                bundle: true,
                minify: minify_,
                sourcemap: true,
                platform: 'node',
                target: 'es6',
                external: ['../../../node_modules/*'], // TODO
                outfile: outputPath_
            })
        """

    executable(
        mainJsFile: String = ".firefly/output/node/Main.min.js",
        outputPath: String = ".firefly/output",
        targets: List[String] = ["host"],
        assets: List[String] = []
    ): Unit
        target js {
            let json = """{
                "name": "main",
                "bin": {
                    "firefly-main": "Main.min.js"
                },
                "devDependencies": {
                    "pkg": "^5.7.0"
                },
                "pkg": {
                    "scripts": "Main.min.js",
                    "outputPath": "bin",
                    "assets": [""" +
                        assets.map { "\"" + _.replace("\\", "\\\\").replace("\"", "\\\"") + "\"" }.join(", ") +
                    """],
                    "targets": [
                        "node18-linux-x64",
                        "node18-macos-x64",
                        "node18-win-x64"
                    ]
                }
            }"""
            let packageFile = ".firefly/output/node/package.json"
            self.files().writeText(packageFile, json)
            createExecutable(self, packageFile, outputPath, targets)
        }

    arguments(): List[String]
        target node async "return ff_core_Array.Array_toList(self_.array_)"

    tasks(): TaskSystem
        target js async "return null"

    files(): FileSystem
        target node async "return null"

}

createExecutable(
    self: BuildSystem,
    packageFile: String,
    outputPath: String,
    targets: List[String]
): Unit
    target js async """
        import * as pkg from 'pkg'
        return await pkg.exec([
            packageFile_,
            '--debug',
            '--out-path', outputPath_,
            '--target', ff_core_List.List_toArray(targets_).join(',')
        ])
    """
