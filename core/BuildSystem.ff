capability BuildSystem {}
capability BrowserCode(packageGroup: String, packageName: String, mainFile: Path, assetSystem: AssetSystem)
capability BrowserBundle(assetSystem: AssetSystem)

extend self: BuildSystem {

    compileForBrowser(mainFile: String): BrowserCode {
        // TODO: Check that the mainFile is in the current package directory
        internalCompile(self, internalPath(self, mainFile), "browser")
        let streams = internalListDirectory(internalPath(self, ".firefly/output/browser"))
        let mainPackagePair = internalMainPackagePair(self)
        BrowserCode(
            packageGroup = mainPackagePair.first
            packageName = mainPackagePair.second
            mainFile = internalPath(self, mainFile)
            assetSystem = AssetSystem(streams.toMap())
        )
    }

    buildMode(): Bool {
        !!self!->"buildMode_"?
    }
    
    setAssets(assetSystem: AssetSystem): Unit {
        self!->"assets_" = assetSystem!
    }

    packageAssets(): AssetSystem {
        let streams = internalListDirectory(internalPath(self, "."))
        AssetSystem(streams.toMap())
    }

    dependencyAssets(user: String, package: String): AssetSystem {
        panic("dependencyAssets not yet implemented")
    }

    arguments(): List[String] {
        self!->"array_"?
    }

    mainTask(): Task {
        self!->"task_"?
    }

    crypto(): Crypto {
        Js->crypto?
    }
        
}

extend self: BrowserCode {

    assets(): AssetSystem {
        self.assetSystem
    }

    bundle(minify: Bool = True, sourceMap: Bool = False): BrowserBundle {
        let prefix = ".firefly/output/browser"
        let mainJsBaseFile = self.mainFile.base().removeLast(".ff").grab() + ".mjs"
        let mainJsFile = prefix + "/" + self.packageGroup + "/" + self.packageName + "/" + mainJsBaseFile
        let mainDirectory = self.mainFile.parent().grab()
        let file = prefix + "/Main.bundle.js"
        internalCallEsBuild(self, mainJsFile = mainJsFile, outputPath = file, minify = minify, sourceMap = sourceMap)
        let assets = AssetSystem([
            Pair(file.dropFirst(prefix.size()), {mainDirectory.path(file).readStream()})
            ...if(sourceMap) {[
                Pair(file.dropFirst(prefix.size()) + ".map", {mainDirectory.path(file + ".map").readStream()})
            ]} else {[]}
        ].toMap())
        BrowserBundle(assets)
    }

}

extend self: BrowserBundle {

    assets(): AssetSystem {
        self.assetSystem
    }

}


internalCallEsBuild(
    self: BrowserCode
    mainJsFile: String
    outputPath: String
    minify: Bool
    sourceMap: Bool
): Unit {
    let esbuild = Js.import("esbuild")
    esbuild->build(Js->(
        stdin = Js->(contents = "import {$run$} from './" + mainJsFile + "';", resolveDir = ".")
        bundle = True
        minify = minify
        sourcemap = sourceMap
        platform = "browser"
        target = "es2017"
        external = ["../../../node_modules/*"] // TODO
        outfile = outputPath
    ))
}

internalNodeCallEsBuild(
    self: NodeSystem
    mainJsFile: String
    outputPath: String
    minify: Bool
): Unit {
    let esbuild = Js.import("esbuild")
    esbuild->build(Js->(
        entryPoints = [mainJsFile]
        bundle = True
        minify = minify
        sourcemap = True
        platform = "node"
        target = "es2017"
        external = ["../../../node_modules/*"] // TODO
        outfile = outputPath
    ))
}

internalListDirectory(path: Path): List[Pair[String, () => Stream[Buffer]]] {
    function go(currentPath: Path): Stream[Path] {
        currentPath.entries().flatMap {file =>
            if(file.isDirectory()) {
                go(file.path())
            } else {
                [file.path()].toStream()
            }
        }
    }
    go(path).map {file =>
        Pair("/" + file.relativeTo(path).replace("\\", "/"), {file.readStream()})
    }.toList()
}

internalPath(buildSystem: BuildSystem, absoluteOrRelative: String): Path {
    let nodePath = Js.import("path")
    Path(nodePath->resolve(absoluteOrRelative)?)
}

internalCompile(buildSystem: BuildSystem, mainFile: Path, target: String): Unit {
    // Ported from the old FFI. It's quite fragile w.r.t. changes in code generation.
    Js.await(Js.rawIdentifier("$firefly_compiler")->"buildViaBuildSystem_$"(
        buildSystem! 
        internalPath(buildSystem, buildSystem!->"fireflyPath_"?)!
        mainFile.base()
        target
        Js.currentTask()!
    ))
}

internalMainPackagePair(buildSystem: BuildSystem): Pair[String, String] {
    Pair(buildSystem!->"mainPackagePair_"->"group_"?, buildSystem!->"mainPackagePair_"->"name_"?)
}
