capability Crypto {}

extend self: Crypto {
    
    randomUuid(): String {
        self!->randomUUID()?
    }
    
    randomBuffer(size: Int): Buffer {
        let buffer = Buffer.new(size)
        self.randomizeBuffer(buffer)
        buffer
    }

    randomizeBuffer(buffer: Buffer): Unit {
        self!->getRandomValues(Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength))
    }

    hmacSha256(key: Buffer, buffer: Buffer): Buffer {
        Js.throwIfCancelled()
        let cryptoKey = Js.await(self!->subtle->importKey(
            "raw"
            key!
            Js->(name = "HMAC", hash = Js->(name = "SHA-256"))
            False
            ["sign"]
        ))
        let signature = Js.await(self!->subtle->sign(
            "HMAC"
            cryptoKey
            buffer!
        )) 
        Js->DataView->(signature)?
    }
        
    sha256(buffer: Buffer): Buffer {
        let hash = Js.await(self!->subtle->digest("SHA-256", buffer))
        Js->DataView->(hash)?
    }

    hashPassword(password: String, iterations: Int = 600000): String {
        let salt = self.randomBuffer(16)
        let hash = internalHashPassword(self, salt, password.toBuffer(), iterations)
        "$pbkdf2-sha256-hex$" + iterations + "$" + salt.toHex() + "$" + hash.toHex()
    }
    
    checkPassword(password: String, passwordHash: String): Bool {
        passwordHash.split('$').{
            | ["", "pbkdf2-sha256-hex", iterationsText, saltText, hashText] {
                iterationsText.getInt() | Some(iterations)
            } =>
                let computedHash = 
                    internalHashPassword(self, Buffer.fromHex(saltText), password.toBuffer(), iterations)
                let hash = Buffer.fromHex(hashText)
                self.constantTimeEquals(computedHash, hash)
            | _ => False
        }
    }

    constantTimeEquals(buffer1: Buffer, buffer2: Buffer): Bool {
        if(buffer1.size() != buffer2.size()) {False} else: 
        mutable v = 0
        mutable i = 0
        while {i < buffer1.size()} {
            v = v.bitOr(buffer1.grabUint8(i).bitXor(buffer2.grabUint8(i)))
            i += 1
        }
        v == 0
    }

}

internalHashPassword(system: Crypto, salt: Buffer, password: Buffer, iterations: Int): Buffer {
    let keyMaterial = Js.await(system!->subtle->importKey(
        "raw"
        password!
        Js->(name = "PBKDF2")
        False
        ["deriveBits"]
    ))
    let hashBuffer = Js.await(system!->subtle->deriveBits(
        Js->(
            name = "PBKDF2"
            salt = salt
            iterations = iterations
            hash = "SHA-256"
        )
        keyMaterial
        256
    ))
    Js->DataView->(hashBuffer)?
}
