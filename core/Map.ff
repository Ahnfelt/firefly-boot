import RbMap

newtype Map[K, V](redBlack: RB[K, V])

empty[K, V](): Map[K, V] {Map(E)}

extend self[K: Order, V]: Map[K, V] {

    add(key: K, value: V): Map[K, V] {
        Map(RbMap.insert(key, value, self.redBlack))
    }

    addAll(that: Map[K, V]): Map[K, V] {
        mutable result = self.redBlack
        that.redBlack.each {k, v =>
            result = RbMap.insert(k, v, result)
        }
        Map(result)
    }

    addList(that: List[Pair[K, V]]): Map[K, V] {
        mutable result = self.redBlack
        that.each {| Pair(k, v) =>
            result = RbMap.insert(k, v, result)
        }
        Map(result)
    }

    get(key: K): Option[V] {
        self.redBlack.get(key)
    }

    remove(key: K): Map[K, V] {
        Map(RbMap.delete(key, self.redBlack))
    }

    removeAll(that: Map[K, V]): Map[K, V] {
        mutable result = self.redBlack
        that.redBlack.each {| k, _ =>
            result = RbMap.delete(k, result)
        }
        Map(result)
    }

    pairs(): List[Pair[K, V]] { // TODO: Remove this method (use toList)
        self.toList()
    }

    toList(): List[Pair[K, V]] {
        self.redBlack.pairs()
    }

    toStream(cycle: Bool = False): Stream[Pair[K, V]] {
        self.redBlack.toStream(cycle)
    }

    keys(): Set[K] {
        self.pairs().map {_.first}.toSet()
    }

    values(): List[V] {
        self.pairs().map {_.second}
    }

    size(): Int {
        self.redBlack.size()
    }

    map[K1: Order, V1](body: (K, V) => Pair[K1, V1]): Map[K1, V1] {
        Map(self.redBlack.map(body))
    }

    mapValues[V1](body: (K, V) => V1): Map[K, V1] {
        Map(self.redBlack.mapValues(body))
    }

    contains(key: K): Bool {
        !self.get(key).isEmpty()
    }

    grab(key: K): V {
        self.get(key).grab()
    }

    updateOrInsert(key: K, update: V => V, default: () => V): Map[K, V] {
        self.get(key).{
            | None => self.add(key, default())
            | Some(v) => self.add(key, update(v))
        }
    }

    each(body: (K, V) => Unit): Unit {
        self.redBlack.each(body)
    }

    eachWhile(body: (K, V) => Bool): Bool {
        self.redBlack.eachWhile(body)
    }

    find(body: (K, V) => Bool): Option[Pair[K, V]] {
        self.redBlack.find(body)
    }

}

extend self[K: Order, V]: Map[K, List[V]] {

    addToList(key: K, value: V): Map[K, List[V]] {
        self.updateOrInsert(key, {[value, ..._]}, {[value]})
    }

}

extend self[K: Order, V]: Map[K, Array[V]] {

    push(key: K, value: V): Map[K, Array[V]] {
        self.get(key).{
            | None => self.add(key, [value].toArray())
            | Some(array) => array.push(value); self
        }
    }

}

instance Map[K: Equal: Order, V: Equal]: Equal {
    equals(x: Map[K, V], y: Map[K, V]): Bool {
        Equal.equals(x.pairs(), y.pairs())
    }
}

instance Map[K: Order, V: Order]: Order {
    compare(x: Map[K, V], y: Map[K, V]): Ordering {
        Ordering.compare(x.pairs(), y.pairs())
    }
}

instance Map[K: Show: Order, V: Show]: Show {
    show(value: Map[K, V]): String {
        Show.show(value.pairs()) + ".toMap()"
    }
}
