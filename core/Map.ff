type Map[K, V] {} scala "scala.collection.immutable.Map[K, V]"

extend self[K, V]: Map[K, V] {
    pairs(): List[Pair[K, V]] { panic("magic") }
    getSize(): Int { panic("magic") }
    get(key: K): Option[V] { panic("magic") }
    expect(key: K): V { panic("magic") }
    add(key: K, value: V): Map[K, V] { panic("magic") }
    remove(key: K): Map[K, V] { panic("magic") }
    map[K1, V1](body: Pair[K, V] => Pair[K1, V1]): Map[K1, V1] { panic("magic") }
    contains(key: K): Bool { panic("magic") }
}

extend self[K, V]: Map[K, List[V]] {
    addToList(key: K, value: V): Map[K, List[V]] { panic("magic") }
}
