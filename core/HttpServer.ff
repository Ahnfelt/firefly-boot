type HttpRequest! {}
type HttpResponse! {}
type Url {}

listen(system: NodeSystem, host: String, port: Int, handler: (HttpRequest, HttpResponse) => Unit): Unit
    target node async """
        import * as http from 'http'
        if($c.signal.aborted) throw new Error("Cancelled", {cause: $c.reasonWorkaround})
        const server = http.createServer(async (req, res) => {
            try {
                await ff_core_TaskSystem.TaskSystem_scope$(null, async (scope, $c) => {
                    await handler_(req, res, $c)
                }, false, $c)
                if(!res.headersSent) res.writeHead(200, 'OK')
            } finally {
                if(!res.headersSent) res.writeHead(500, 'Internal Server Error')
                if(!res.writableEnded) res.end()
            }
        })
        await new Promise((resolve, reject) => {
            server.listen(port_, host_, error => {if(error != null) reject(error); else resolve()})
        })
        await new Promise((resolve, reject) => {
            const abort = () => {
                $c.signal.removeEventListener('abort', abort)
                server.close(() => reject(new Error("Cancelled", {cause: $c.reasonWorkaround})))
            }
            $c.signal.addEventListener('abort', abort)
        })
    """


extend self: Url {

    hash(): String
        target node sync "return self_.hash"

    host(): String
        target node sync "return self_.hostname"

    origin(): String
        target node sync "return self_.origin"

    password(): String
        target node sync "return self_.password"

    path(): String
        target node sync "return self_.pathname"

    port(): String
        target node sync "return self_.port"

    protocol(): String
        target node sync "return self_.protocol.replace(':', '')"

    search(): String
        target node sync "return self_.search"

    username(): String
        target node sync "return self_.username"

    toString(): String
        target node sync "return self_.href"

}

extend self: HttpRequest {

    url(): Url
        target node async """
            return new URL(self_.url, `http://${self_.headers.host}`)
        """

    method(): String
        target node async """
            return self_.method
        """

    header(name: String): Option[String]
        target node async """
            let header = self_.headers[name_.toLowerCase()]
            if(header == null || header.length == 0) ff_core_Option.None()
            return ff_core_Option.Some(Array.isArray(header) ? header[0] : header)
        """

    encoding(): Option[String]
        target node async """
            return self_.readableEncoding ? ff_core_Option.Some(self_.readableEncoding) : ff_core_Option.None()
        """

    readText(encoding: Option[String] = None): String {
        self.readStream().toString(encoding.else {self.encoding().else {"utf8"}})
    }

    readStream(): Stream[Buffer]
        target node async """
            import * as http from 'http'
            return $c => {
                if($c.signal.aborted) throw new Error("Cancelled", {cause: $c.reasonWorkaround})
                if(self_.streamWorkaround != null) throw new Error("Can't open HttpRequest body stream twice")
                self_.streamWorkaround = true
                const readable = self_
                let doResolve = null
                let doReject = null
                let seenError = null
                readable.on('readable', () => {
                    if(doResolve != null) doResolve()
                })
                readable.on('error', error => {
                    seenError = error
                    if(doReject != null) doReject(error)
                })
                readable.on('close', () => {
                    if(doResolve != null) doResolve()
                })
                const abort = () => {
                    $c.signal.removeEventListener('abort', abort)
                    readable.destroy()
                }
                $c.signal.addEventListener('abort', abort)
                return ff_core_Iterator.Iterator(async function go($c) {
                    let buffer = readable.read()
                    if(buffer != null) return ff_core_Option.Some(buffer)
                    if(seenError != null) throw seenError
                    if(readable.destroyed) return ff_core_Option.None()
                    let promise = new Promise((resolve, reject) => {
                        doResolve = () => {doResolve = null; doReject = null; resolve()}
                        doReject = error => {doResolve = null; doReject = null; reject(error)}
                    }).then(() => go($c))
                    return await promise
                }, abort)
            }
        """

}

extend self: HttpResponse {

    setHeader(name: String, values: List[String]): Unit
        target node async "self_.setHeader(name_, ff_core_List.List_toArray(values_))"

    writeStatus(code: Int, message: Option[String]): Unit
        target node async "self_.writeHead(code_, message_.value_)"

    write(buffer: Buffer): Unit
        target node async """
            import * as http from 'http'
            if(!self_.write(buffer_)) {
                const abort = () => {
                    $c.signal.addEventListener('abort', abort())
                    reject(new Error("Cancelled", {cause: $c.reasonWorkaround}))
                }
                await new Promise((resolve, reject) => {
                    $c.signal.addEventListener('abort', abort)
                    self_.once('drain', () => {
                        $c.signal.removeEventListener('abort', abort)
                        resolve()
                    })
                })
            }
        """

    writeText(text: String, encoding: String = "utf8"): Unit
        target node async """
            import * as http from 'http'
            if(!self_.write(text_, encoding_)) {
                const abort = () => {
                    $c.signal.addEventListener('abort', abort())
                    reject(new Error("Cancelled", {cause: $c.reasonWorkaround}))
                }
                await new Promise((resolve, reject) => {
                    $c.signal.addEventListener('abort', abort)
                    self_.once('drain', () => {
                        $c.signal.removeEventListener('abort', abort)
                        resolve()
                    })
                })
            }
        """

}
