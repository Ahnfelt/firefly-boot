capability BrowserSystem {}

extend self: BrowserSystem {

    httpClient(): HttpClient
        target js async "return null"

    mainTask(): Task
        target js async "return self_.task_"

    js(): JsSystem
        target js async "return typeof globalThis !== 'undefined' ? globalThis : window"

    webSocket(url: String): WebSocket
        target browser async """
            if(typeof location !== 'undefined' && !url_.includes("://")) {
                if(location.href && location.href.startsWith("http")) {
                    url_ = new URL(url_, location.href).href.replace(/^http/, 'ws');
                }
            }
            const socket = new WebSocket(url_);
            socket.binaryType = "arraybuffer";
            socket.ffFront = [];
            socket.ffBack = [];
            socket.onmessage = m => socket.ffBack.push(m);
            let callReject = null;
            const abort = () => {if(callReject) callReject()};
            try {
                await new Promise((resolve, reject) => {
                    socket.onopen = resolve;
                    socket.onerror = reject;
                    callReject = reject;
                    $task.controller.signal.addEventListener('abort', abort);
                });
            } finally {
                socket.onopen = null;
                socket.onerror = null;
                callReject = null;
                $task.controller.signal.removeEventListener('abort', abort);
            }
            return socket;
        """
               
}
