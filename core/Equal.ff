trait T: Equal {
    equals(x: T, y: T): Bool
}

notEquals[T: Equal](x: T, y: T): Bool {
    !equals(x, y)
}

instance Nothing: Equal {
    equals(x: Nothing, y: Nothing): Bool {True}
}

instance Bool: Equal {
    equals(x: Bool, y: Bool): Bool {
        x!.equals(y)
    }
}

instance Char: Equal {
    equals(x: Char, y: Char): Bool {
        x!.equals(y)
    }
}

instance Int: Equal {
    equals(x: Int, y: Int): Bool {
        x!.equals(y)
    }
}

instance Float: Equal {
    equals(x: Float, y: Float): Bool {
        x!.equals(y)
    }
}

instance String: Equal {
    equals(x: String, y: String): Bool {
        x!.equals(y)
    }
}
