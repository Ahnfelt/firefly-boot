class Buffer {}

new(size: Int, shared: Bool = False): Buffer
    target js sync "return new DataView(shared_ ? new SharedArrayBuffer(size_) : new ArrayBuffer(size_))"

extend self: Buffer {

    /*grabBigInt64(byteOffset: Int, littleEndian: Bool = True): BigInt
        target js sync "return self_.getBigInt64(byteOffset_, littleEndian_)"*/

    /*grabBigUint64(byteOffset: Int, littleEndian: Bool = True): BigInt
        target js sync "return self_.getBigUint64(byteOffset_, littleEndian_)"*/

    grabUint64(byteOffset: Int, littleEndian: Bool = True): Int
        target js sync """
            const high = self_.getUint32(byteOffset_ + (littleEndian_ ? 4 : 0), littleEndian_)
            const low = self_.getUint32(byteOffset_ + (littleEndian_ ? 0 : 4), littleEndian_)
            const result = (high * 0x100000000) + low
            if(!Number.isSafeInteger(result)) throw 'grabUint64 out of range (consider grabBigUint64)'
            return result
        """

    grabInt64(byteOffset: Int, littleEndian: Bool = True): Int
        target js sync """
            const high = self_.getInt32(byteOffset_ + (littleEndian_ ? 4 : 0), littleEndian_)
            const low = self_.getUint32(byteOffset_ + (littleEndian_ ? 0 : 4), littleEndian_)
            const result = (high * 0x100000000) + low
            if(!Number.isSafeInteger(result)) throw 'grabInt64 out of range (consider grabBigInt64)'
            return result
        """

    grabFloat32(byteOffset: Int, littleEndian: Bool = True): Float
        target js sync "return self_.getFloat32(byteOffset_, littleEndian_)"

    grabFloat64(byteOffset: Int, littleEndian: Bool = True): Float
        target js sync "return self_.getFloat64(byteOffset_, littleEndian_)"

    grabInt16(byteOffset: Int, littleEndian: Bool = True): Int
        target js sync "return self_.getInt16(byteOffset_, littleEndian_)"

    grabInt32(byteOffset: Int, littleEndian: Bool = True): Int
        target js sync "return self_.getInt32(byteOffset_, littleEndian_)"

    grabInt8(byteOffset: Int): Int
        target js sync "return self_.getInt8(byteOffset_)"

    grabUint16(byteOffset: Int, littleEndian: Bool = True): Int
        target js sync "return self_.getUint16(byteOffset_, littleEndian_)"

    grabUint32(byteOffset: Int, littleEndian: Bool = True): Int
        target js sync "return self_.getUint32(byteOffset_, littleEndian_)"

    grabUint8(byteOffset: Int): Int
        target js sync "return self_.getUint8(byteOffset_)"

    /*setBigInt64(byteOffset: Int, value: BigInt, littleEndian: Bool = False): Unit
        target js sync "self_.setBigInt64(byteOffset_, value_, littleEndian_)"*/

    /*setBigUint64(byteOffset: Int, value: BigInt, littleEndian: Bool = False): Unit
        target js sync "self_.setBigUint64(byteOffset_, value_, littleEndian_)"*/

    setUint64(byteOffset: Int, value: Int, littleEndian: Bool = True): Int
        target js sync """
            self_.setUint32(byteOffset_ + (littleEndian_ ? 4 : 0), (value_ >>> 16) >>> 16, littleEndian_)
            self_.setUint32(byteOffset_ + (littleEndian_ ? 0 : 4), value_ & 0xffffffff, littleEndian_)
        """

    setInt64(byteOffset: Int, value: Int, littleEndian: Bool = True): Int
        target js sync """
            self_.setUint32(byteOffset_ + (littleEndian_ ? 4 : 0), (value_ >> 16) >> 16, littleEndian_)
            self_.setUint32(byteOffset_ + (littleEndian_ ? 0 : 4), value_ & 0xffffffff, littleEndian_)
        """

    setFloat32(byteOffset: Int, value: Float, littleEndian: Bool = True): Unit
        target js sync "self_.setFloat32(byteOffset_, value_, littleEndian_)"

    setFloat64(byteOffset: Int, value: Float, littleEndian: Bool = True): Unit
        target js sync "self_.setFloat64(byteOffset_, value_, littleEndian_)"

    setInt16(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit
        target js sync "self_.setInt16(byteOffset_, value_, littleEndian_)"

    setInt32(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit
        target js sync "self_.setInt32(byteOffset_, value_, littleEndian_)"

    setInt8(byteOffset: Int, value: Int): Unit
        target js sync "self_.setInt8(byteOffset_, value_)"

    setUint16(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit
        target js sync "self_.setUint16(byteOffset_, value_, littleEndian_)"

    setUint32(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit
        target js sync "self_.setUint32(byteOffset_, value_, littleEndian_)"

    setUint8(byteOffset: Int, value: Int): Unit
        target js sync "self_.setUint8(byteOffset_, value_)"

    setAll(byteOffset: Int, buffer: Buffer): Unit
        target js sync """
            const sourceBuffer = new Uint8Array(buffer_.buffer, buffer_.byteOffset, buffer_.byteLength)
            const targetBuffer = new Uint8Array(self_.buffer, self_.byteOffset, self_.byteLength)
            targetBuffer.set(sourceBuffer, byteOffset_)
        """

    size(): Int
        target js sync "return self_.byteLength"

    shared(): Bool
        target js sync "return typeof SharedArrayBuffer !== 'undefined' && self_.buffer instanceof SharedArrayBuffer"

    view(begin: Int, end: Int): Buffer
        target js sync "return new DataView(self_.buffer, self_.byteOffset + begin_, end_ - begin_)"

    copy(): Buffer
        target js sync "return new DataView(self_.buffer.slice(self_.byteOffset, self_.byteOffset + self_.byteLength))"

    toString(encoding: String = "utf8"): String
        target js sync """
            if(encoding_ === "utf8") {
                if(typeof TextDecoder.ffSingleton === 'undefined') TextDecoder.ffSingleton = new TextDecoder()
                return TextDecoder.ffSingleton.decode(self_)
            }
            return new TextDecoder().decode(self_)
        """

    toByteArray(): List[Int]
        target js sync "return [...new Uint8Array(self_.buffer, self_.byteOffset, self_.byteLength)]"

    toHex(): String
        target js sync """
            let hex = ''
            for (let i = 0; i < self_.byteLength; i++) {
                hex += self_.getUint8(i).toString(16).padStart(2, '0')
            }
            return hex
        """

    toBase64(): String
        target js sync """
            const view = new Uint8Array(self_.buffer, self_.byteOffset, self_.byteLength);
            return btoa(String.fromCharCode(...view));
        """

}

fromByteArray(array: List[Int]): Buffer
    target js sync "return new DataView(new Uint8Array(array_).buffer)"

fromBufferArray(array: List[Buffer]): Buffer
    target js sync """
        let length = 0
        for(let b of array_) length += b.byteLength
        const arrayBuffer = new ArrayBuffer(length);
        const result = new Uint8Array(arrayBuffer)
        let offset = 0
        for(let b of array_) {
            result.set(new Uint8Array(b.buffer, b.byteOffset, b.byteLength), offset)
            offset += b.byteLength
        }
        return new DataView(arrayBuffer)
    """

fromHex(hex: String): Buffer
    target js sync """
        const hexValues = hex_.match(/.{1,2}/g) || []
        const numbers = hexValues.map(value => parseInt(value, 16))
        return new DataView(new Uint8Array(numbers).buffer)
    """

fromBase64(base64: String): Buffer
    target js sync """
        const binaryString = atob(base64_)
        const dataView = new DataView(new ArrayBuffer(binaryString.length))
        dataView.setUint8(binaryString.split('').map(char => char.charCodeAt(0)))
        return dataView
    """

instance Buffer: Show {
    show(value: Buffer): String {
        """Buffer.fromHex("""" + value.toHex() + """")"""
    }
}

instance Buffer: Equal {
    equals(x: Buffer, y: Buffer): Bool
        target js sync """
            if(x_.buffer.byteLength !== y_.buffer.byteLength) return false
            if(x_.buffer === y_.buffer) return true
            for(let i = 0; i + 4 <= x_.buffer.byteLength; i += 4) {
                if(x_.getInt32(i) !== y_.getInt32(i)) return false
            }
            for(; i < x_.buffer.byteLength; i++) {
                if(x_.getUint8(i) !== y_.getUint8(i)) return false
            }
            return true
        """
}

instance Buffer: Order {
    compare(x: Buffer, y: Buffer): Ordering
        target js sync """
            if(x_.buffer === y_.buffer) return ff_core_Ordering.OrderingSame()
            const minLength = Math.min(x_.buffer.byteLength, y_.buffer.byteLength)
            for(let i = 0; i < minLength; i++) {
                if(x_.getUint8(i) !== y_.getUint8(i)) {
                    return ff_core_Ordering.fromInt_(x_.getUint8(i) - y_.getUint8(i))
                }
            }
            return ff_core_Ordering.fromInt_(x_.buffer.byteLength - y_.buffer.byteLength)
        """
}
