class Buffer {}

new(size: Int, shared: Bool = False): Buffer {
    Js->DataView->(if(shared) {Js->SharedArrayBuffer->(size)} else {Js->ArrayBuffer->(size)})?
}

extend self: Buffer {

    /*grabBigInt64(byteOffset: Int, littleEndian: Bool = True): BigInt
        target js sync "return self_.getBigInt64(byteOffset_, littleEndian_)"*/

    /*grabBigUint64(byteOffset: Int, littleEndian: Bool = True): BigInt
        target js sync "return self_.getBigUint64(byteOffset_, littleEndian_)"*/

    grabUint64(byteOffset: Int, littleEndian: Bool = True): Int {
        let high = self!->getUint32(byteOffset + if(littleEndian) {4} else {0}, littleEndian)
        let low = self!->getUint32(byteOffset + if(littleEndian) {0} else {4}, littleEndian)
        let result = (high? * 0x100000000) + low?
        if(!Js->Number->isSafeInteger(result)?) {
            throw(GrabException)
        }
        result
    }
    
    grabInt64(byteOffset: Int, littleEndian: Bool = True): Int {
        let high = self!->getInt32(byteOffset + if(littleEndian) {4} else {0}, littleEndian)
        let low = self!->getUint32(byteOffset + if(littleEndian) {0} else {4}, littleEndian)
        let result = (high? * 0x100000000) + low?
        if(!Js->Number->isSafeInteger(result)?) {
            throw(GrabException()) //grabInt64 out of range (consider grabBigInt64)'
        }
        result
    }

    grabFloat32(byteOffset: Int, littleEndian: Bool = True): Float {
        self!->getFloat32(byteOffset, littleEndian)?
    }
    
    grabFloat64(byteOffset: Int, littleEndian: Bool = True): Float {
        self!->getFloat64(byteOffset, littleEndian)?
    }

    grabInt16(byteOffset: Int, littleEndian: Bool = True): Int {
        self!->getInt16(byteOffset, littleEndian)?
    }

    grabInt32(byteOffset: Int, littleEndian: Bool = True): Int {
        self!->getInt32(byteOffset, littleEndian)?
    }

    grabInt8(byteOffset: Int): Int {
        self!->getInt8(byteOffset)?
    }

    grabUint16(byteOffset: Int, littleEndian: Bool = True): Int {
        self!->getUint16(byteOffset, littleEndian)?
    }

    grabUint32(byteOffset: Int, littleEndian: Bool = True): Int {
        self!->getUint32(byteOffset, littleEndian)?
    }

    grabUint8(byteOffset: Int): Int {
        self!->getUint8(byteOffset)?
    }

    /*setBigInt64(byteOffset: Int, value: BigInt, littleEndian: Bool = False): Unit
        target js sync "self_.setBigInt64(byteOffset_, value_, littleEndian_)"*/

    /*setBigUint64(byteOffset: Int, value: BigInt, littleEndian: Bool = False): Unit
        target js sync "self_.setBigUint64(byteOffset_, value_, littleEndian_)"*/

    setUint64(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {
        self!->setUint32(byteOffset + if(littleEndian) {4} else {0}, value.bitRightUnsigned(16).bitRightUnsigned(16), littleEndian)
        self!->setUint32(byteOffset + if(littleEndian) {0} else {4}, value.bitAnd(0xffffffff), littleEndian)
    }
        
    setInt64(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {
        self!->setUint32(byteOffset + if(littleEndian) {4} else {0}, value.bitRight(16).bitRight(16), littleEndian)
        self!->setUint32(byteOffset + if(littleEndian) {0} else {4}, value.bitAnd(0xffffffff), littleEndian)
    }

    setFloat32(byteOffset: Int, value: Float, littleEndian: Bool = True): Unit {
        self!->setFloat32(byteOffset, value, littleEndian)
    }

    setFloat64(byteOffset: Int, value: Float, littleEndian: Bool = True): Unit {
        self!->setFloat64(byteOffset, value, littleEndian)
    }

    setInt16(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {
        self!->setInt16(byteOffset, value, littleEndian)
    }

    setInt32(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {
        self!->setInt32(byteOffset, value, littleEndian)
    }

    setInt8(byteOffset: Int, value: Int): Unit {
        self!->setInt8(byteOffset, value)
    }

    setUint16(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {
        self!->setUint16(byteOffset, value, littleEndian)
    }

    setUint32(byteOffset: Int, value: Int, littleEndian: Bool = True): Unit {
        self!->setUint32(byteOffset, value, littleEndian)
    }

    setUint8(byteOffset: Int, value: Int): Unit {
        self!->setUint8(byteOffset, value)
    }

    setAll(byteOffset: Int, buffer: Buffer): Unit {
        let sourceBuffer = Js->Uint8Array->(buffer!->buffer, buffer!->byteOffset, buffer!->byteLength)
        let targetBuffer = Js->Uint8Array->(self!->buffer, self!->byteOffset, self!->byteLength)
        targetBuffer->set(sourceBuffer, byteOffset)
    }

    size(): Int {
        self!->byteLength?
    }

    shared(): Bool {
        Js->SharedArrayBuffer.typeof() != "undefined" && self!->buffer.instanceof(Js->SharedArrayBuffer)
    }

    view(begin: Int, end: Int): Buffer {
        Js->DataView->(self!->buffer, self!->byteOffset + begin!, end - begin)?
    }

    copy(): Buffer {
        Js->DataView->(self!->buffer->slice(self!->byteOffset, self!->byteOffset + self!->byteLength))?
    }

    toString(encoding: String = "utf8"): String {
        if(encoding == "utf8") {
            if(Js->TextDecoder->ffSingleton.typeof() == "undefined") {
                Js->TextDecoder->ffSingleton = Js->TextDecoder->()
            }
            Js->TextDecoder->ffSingleton->decode(self!)?
        }
        Js->TextDecoder->()->decode(self!)?
    }

    toByteArray(): List[Int] {
        Js->Uint8Array->(self!->buffer, self!->byteOffset, self!->byteLength).spreadToArray()!?
    }
    
    toHex(): String {
        mutable hex = ""
        0.until(self!->byteLength?).each {i =>
            hex = hex + self!->getUint8(i)->toString(16)->padStart(2, "0")?
        }
        hex
    }
    
    toBase64(): String {
        let view = Js->Uint8Array->(self!->buffer, self!->byteOffset, self!->byteLength)
        let binaryString = Js->TextDecoder->("latin1")->decode(view)
        Js->btoa(binaryString)?
    }

}

fromByteList(array: List[Int]): Buffer {
    Js->DataView->(Js->Uint8Array(array)->buffer)?
}

fromBufferList(array: List[Buffer]): Buffer {
    mutable length = 0
    array.each {length += _!->byteLength?}
    let arrayBuffer = Js->ArrayBuffer->(length)
    let result = Js->Uint8Array->(arrayBuffer)
    mutable offset = 0
    array.each {b =>
        result->set(Js->Uint8Array->(b!->buffer, b!->byteOffset, b!->byteLength), offset)
        offset += b!->byteLength?
    }
    Js->DataView->(arrayBuffer)?
}

fromHex(hex: String): Buffer {
    let byteCount = (hex.size() * 0.5).ceil().toInt()
    let arrayBuffer = Js->ArrayBuffer->(byteCount)
    let result = Js->Uint8Array->(arrayBuffer)
    0.until(byteCount).each {i =>
        result.set(i, Js->parseInt(hex!->slice(i * 2, i * 2 + 2), 16))
    }
    Js->DataView->(arrayBuffer)?
}

fromBase64(base64: String): Buffer {
    let binaryString = Js->atob(base64)
    let bytes = Js->Uint8Array->from(binaryString, Js->{char => char->CharCodeAt(0)})
    Js->DataView->(bytes->buffer)?
}

instance Buffer: Show {
    show(value: Buffer): String {
        """Buffer.fromHex("""" + value.toHex() + """")"""
    }
}

instance Buffer: Equal {
    equals(x: Buffer, y: Buffer): Bool {
        if(x.size() != y.size()) {False} else:
        if(x! === y!) {True} else:
        mutable i = 0
        mutable same = True
        while {i + 4 < x.size() && same} {
            same = x!->getInt32(i) === y!->getInt32(i)
            i += 4
        }
        if(!same) {False} else:
        i.until(x.size()).eachWhile {i =>
            same = x!->getUint8(i) === y!->getUint8(i)
            same
        }
        same
    }
}

instance Buffer: Order {
    compare(x: Buffer, y: Buffer): Ordering {
        if(x!.equals(y!)) {OrderingSame} else:
        let minLength = x.size().min(y.size())
        mutable ordering = OrderingSame
        0.until(minLength).eachWhile {i =>
            if(x!->getUint8(i) !== x!->getUint8(i)) {
                ordering = Ordering.fromInt((x!->getUint8(i) - y!->getUint8(i))?)
                False
            } else {
                True
            }
        }
        if(ordering == OrderingSame) {
            Ordering.fromInt(x.size() - y.size())
        } else {
            ordering
        }
    }
}
