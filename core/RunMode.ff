type RunMode! {
    ExecutableMode(mode: ExecutableMode)
    ScriptMode(mode: ScriptMode)
}

type ExecutableMode! {}
type ScriptMode! {}

extend self: ExecutableMode {
    assets(): AssetSystem {
        let fs = internalExecutableModeFileSystem(self)
        let files = fs.list("/snapshot/.firefly/output/assets")
        let streams = files.map { file =>
            Pair(file, fs.readStream(file))
        }
        AssetSystem(streams.toMap())
    }
}

extend self: ScriptMode {
    packageAssets(): AssetSystem {
        let fs = internalScriptModeFileSystem(self)
        let streams = internalListDirectory(fs, ".")
        AssetSystem(streams.toMap())
    }

    dependencyAssets(user: String, package: String): AssetSystem {
        panic("dependencyAssets not yet implemented")
    }

    compiledBrowserAssets(): AssetSystem {
        let fs = internalScriptModeFileSystem(self)
        let streams = internalListDirectory(fs, ".firefly/output/browser")
        AssetSystem(streams.toMap())
    }
}

internalListDirectory(fs: FileSystem, path: String): List[Pair[String, Stream[Buffer]]] {
    let prefix = if(path.endsWith("/")) {path.dropLast(1)} else {path}
    function go(currentPath: String): List[String] {
        fs.list(currentPath).flatMap { file =>
            if(fs.isDirectory(file)) {
                go(file)
            } else {
                [file]
            }
        }
    }
    go(path).map { file => Pair(file.dropFirst(prefix.size()), fs.readStream(file)) }
}

internalExecutableModeFileSystem(dummy: ExecutableMode): FileSystem
    target node async """
        return null;
    """

internalScriptModeFileSystem(dummy: ScriptMode): FileSystem
    target node async """
        return null;
    """
