newtype Json(jsValue: JsValue)

read(json: String): Option[Json] {
    try {
        Some(Json(Js->JSON->parse(json)))
    } catchAny {_ =>
        None
    }
}

string(json: String): Json {
    Json(json!)
}

int(json: Int): Json {
    Json(json!)
}

float(json: Float): Json {
    Json(json!)
}

bool(json: Bool): Json {
    Json(json!)
}

null(): Json {
    Json(Js.null())
}

array(json: List[Json]): Json {
    Json(json!)
}

object(): Json {
    Json(Js->())
}

new0(): Json {
    Json(Js->())
}

fields(body: ((String, Json) => Unit) => Unit): Json {
    let result = Js->()
    body {k, v => result.set(k, v.jsValue)}
    Json(result)
}

extend self: Json {
    
    write(indentation: Option[String] = None): String {
        Js->JSON->stringify(self.jsValue, Js.null(), Js.orUndefined(indentation))?
    }

    with[T: JsonLike](field: String, value: T): Json {
        if(!self.isObject()) {
            Js.throw(Js->Error->("Not an object: " + self.write()))
        }
        Json(self.jsValue.with(field, toJson(value).jsValue))
    }
    
    merge(that: Json): Json {
        if(!self.isObject()) {
            Js.throw(Js->Error->("Not an object: " + self.write()))
        }
        if(!that.isObject()) {
            Js.throw(Js->Error->("Not an object: " + that.write()))
        }
        Json(Js.object().assign(self.jsValue, that.jsValue))
    }
    
    grabString(): String {
        if(!self.isString()) {
            Js.throw(Js->Error->("Not a String: " + self.write()))
        }
        self.jsValue?
    }
    
    grabInt(): Int {
        if(!self.isInt()) {
            Js.throw(Js->Error->("Not an Int: " + self.write()))
        }
        self.jsValue?
    }

    grabFloat(): Float {
        if(!self.isFloat()) {
            Js.throw(Js->Error->("Not a Float: " + self.write()))
        }
        self.jsValue?
    }

    grabBool(): Bool {
        if(!self.isBool()) {
            Js.throw(Js->Error->("Not a Bool: " + self.write()))
        }
        self.jsValue?
    }
    
    grabArray(): List[Json] {
        if(!self.isArray()) {
            Js.throw(Js->Error->("Not an array: " + self.write()))
        }
        self.jsValue?
    }

    grabMap(): Map[String, Json] {
        mutable map = Map.new()
        self.each {key, value => 
            map = map.add(key, value)
        }
        map
    }

    getString(): Option[String] {
        if(self.isString()) {self.grabString()}
    }

    getInt(): Option[Int] {
        if(self.isInt()) {self.grabInt()}
    }

    getFloat(): Option[Float] {
        if(self.isFloat()) {self.grabFloat()}
    }

    getBool(): Option[Bool] {
        if(self.isBool()) {self.grabBool()}
    }

    getArray(): Option[List[Json]] {
        if(self.isArray()) {self.grabArray()}
    }

    getMap(): Option[Map[String, Json]] {
        if(self.isObject()) {self.grabMap()}
    }

    isString(): Bool {
        self.jsValue.typeof() == "string"
    }

    isInt(): Bool {
        Js->Number->isSafeInteger(self.jsValue)?
    }

    isFloat(): Bool {
        self.jsValue.typeof() == "number"
    }

    isBool(): Bool {
        self.jsValue.typeof() == "boolean"
    }

    isArray(): Bool {
        Js->Array->isArray(self.jsValue)?
    }

    isObject(): Bool {
        self.jsValue.typeof() == "object" && !self.jsValue.isNull() && !self.jsValue.isArray()
    }

    isNull(): Bool {
        self.jsValue.isNull()
    }

    get(key: String): Json {
        self.field(key)
    }

    field(key: String): Json {
        if(self.isObject() && self.jsValue.hasOwn(key)) {
            Json(self.jsValue.get(key))
        } else {
            Json(Js.null())
        }
    }

    index(key: Int): Json {
        if(self.isArray()) {
            Json(self.jsValue.get(key).coalesce(Js.null()))
        } else {
            Json(Js.null())
        }
    }
    
    hasField(key: String): Bool {
        self.isObject() && self.jsValue.hasOwn(key)
    }

    getField(key: String): Option[Json] {
        if(self.hasField(key)) {self.get(key)}
    }

    getIndex(key: Int): Option[Json] {
        if(self.isArray() && !self.jsValue.get(key).isUndefined()) {
            Json(self.jsValue.get(key))
        }
    }
        
    getFields(): Option[List[String]] {
        if(self.isObject()) {
            Js->Object->keys(self.jsValue)?
        }
    }

    grabField(key: String): Json {
        self.getField(key).else {
            throw(GrabException())
        }
    }

    grabIndex(key: Int): Json {
        self.getIndex(key).else {
            throw(GrabException())
        }
    }
    
    grabFields(): List[String] {
        self.getFields().else {
            throw(GrabException())
        }
    }

    map[T](body: (String, Json) => T): List[T] {
        let array = Array.new()
        self.each {field, value => array.push(body(field, value))}
        array.drain()
    }

    flatMap[T](body: (String, Json) => List[T]): List[T] {
        let array = Array.new()
        self.each {field, value => array.pushList(body(field, value))}
        array.drain()
    }
    
    each(body: (String, Json) => Unit) {
        if(!self.isObject()) {throw(GrabException())}
        Js->Object->entries(self.jsValue).each {p =>
            body(p.get(0)?, p.get(1)?)
        }
    }

    eachWhile(body: (String, Json) => Bool) {
        if(!self.isObject()) {throw(GrabException())}
        Js->Object->entries(self.jsValue).eachWhile {p =>
            body(p.get(0)?, p.get(1)?)
        }
    }

}

trait T: JsonLike {
    toJson(value: T): Json
    fromJson(json: Json): Option[T]
}

instance Json: JsonLike {
    toJson(value: Json): Json {value}
    fromJson(json: Json): Option[Json] {Some(json)}
}

instance String: JsonLike {
    toJson(value: String): Json {string(value)}
    fromJson(json: Json): Option[String] {_.getString()}
}

instance Int: JsonLike {
    toJson(value: Int): Json {int(value)}
    fromJson(json: Json): Option[Int] {_.getInt()}
}

instance Float: JsonLike {
    toJson(value: Float): Json {float(value)}
    fromJson(json: Json): Option[Float] {_.getFloat()}
}

instance Bool: JsonLike {
    toJson(value: Bool): Json {bool(value)}
    fromJson(json: Json): Option[Bool] {_.getBool()}
}

instance List[T: JsonLike]: JsonLike {
    toJson(value: List[T]): Json {array(value.map(toJson))}
    fromJson(json: Json): Option[List[T]] {
        json.getArray().flatMap {array => 
            mutable convertible = True
            let result = Array.new()
            array.eachWhile {item =>
                fromJson(item).{
                    | None => convertible = False
                    | Some(value) => result.push(value)
                }
                convertible
            }
            if(convertible) {result.drain()}
        }
    }
}

instance StringMap[T: JsonLike]: JsonLike {
    toJson(value: StringMap[T]): Json {
        Json.fields {setField =>
            value.each {key, value => setField(key, toJson(value))}
        }
    }
    fromJson(json: Json): Option[StringMap[T]] {
        if(json.isObject()) {
            let map = StringMap.new()
            mutable convertible = True
            json.eachWhile {key, value => 
                fromJson(value).{
                    | None => convertible = False
                    | Some(v) => map.set(key, v)
                }
                convertible
            }
            if(convertible) {map}
        }.flatten()
    }
}


instance Json: HasAnyTag {
    anyTag(): AnyTag[Json] {Any.internalAnyTag("ff:core/Json.Json[]")}
}

instance Json: Show {
    show(value: Json): String {value.write(Some("    "))}
}

instance Json: Equal {
    equals(a: Json, b: Json): Bool {
        internalEquals(a, b)
    }
}

instance Json: Order {
    compare(a: Json, b: Json): Ordering {
        Ordering.fromInt(internalCompare(a, b))
    }
}

instance Json: Serializable {
    serializeUsing(serialization: Serialization, value: Json): Unit {
        Serializable.serializeUsing(serialization, value.write())
    }
    deserializeUsing(serialization: Serialization): Json {
        Json.read(Serializable.deserializeUsing[String](serialization)).grab()
    }
}


internalEquals(a: Json, b: Json): Bool {
    if(a.jsValue === b.jsValue) {True} else:
    if(a.jsValue.isArray() || b.jsValue.isArray()) {
        if(!a.jsValue.isArray() || !b.jsValue.isArray()) {False} else:
        if(a.jsValue->length !== b.jsValue->length) {False} else:
        mutable equal = True
        0.until(a.jsValue->length?).eachWhile {i =>
            equal = internalEquals(Json(a.jsValue.get(i)), Json(b.jsValue.get(i)))
            equal
        }
        equal
    } else:
    if(a.isObject() && b.isObject()) {
        let aKeys = Js->Object->keys(a.jsValue)
        let bKeys = Js->Object->keys(b.jsValue)
        if(aKeys->length !== bKeys->length) {False} else:
        mutable equal = True
        aKeys.eachWhile {key =>
            equal = b.jsValue.hasOwn(key?) && internalEquals(Json(a.jsValue.get(key)), Json(b.jsValue.get(key)))
            equal
        }
        equal
    } else:
    False
}

internalCompare(a: Json, b: Json): Int {
    if(a.jsValue === b.jsValue) {0} else:
    if(a.jsValue === Js.null() || b.jsValue === Js.null()) {
        if(a.jsValue === Js.null()) {-1} else {1}
    } else:
    if(a.isBool() || b.isBool()) {
        if(!b.isBool() || b.jsValue?) {-1} else {1}
    } else:
    if(a.isFloat() || b.isFloat()) {
        if(!b.isFloat()) {-1} else:
        if(!a.isFloat()) {1} else:
        if(a.jsValue.isNan()) {if(b.jsValue.isNan()) {0} else {-1}} else:
        if(b.jsValue.isNan()) {1} else:
        if(a.jsValue? < b.jsValue?) {-1} else {1}
    } else:
    if(a.isString() || b.isString()) {
        if(!b.isString()) {-1} else:
        if(!a.isString()) {1} else:
        a.jsValue->localeCompare(b.jsValue, "en")?
    } else:
    if(a.isArray() || b.isArray()) {
        if(!b.isArray()) {-1} else:
        if(!a.isArray()) {1} else:
        let aLength: Int = a.jsValue->length?
        let bLength: Int = b.jsValue->length?
        mutable result = 0
        0.until(aLength.min(bLength)).eachWhile {i =>
            result = internalCompare(Json(a.jsValue.get(i)), Json(b.jsValue.get(i)))
            result == 0
        }
        if(result != 0) {result} else:
        aLength - bLength
    } else:
    let aKeys = Js->Object->keys(a.jsValue)->sort()
    let bKeys = Js->Object->keys(b.jsValue)->sort()
    let keyResult = internalCompare(Json(aKeys), Json(bKeys))
    if(keyResult != 0) {keyResult} else:
    mutable result = 0
    aKeys.eachWhile {key =>
        result = internalCompare(Json(a.jsValue.get(key)), Json(b.jsValue.get(key)))
        result == 0
    }
    result
}
