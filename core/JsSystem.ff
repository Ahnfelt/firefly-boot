type JsSystem! {}

extend self: JsSystem {

    global(): JsValue
        target js sync "return self_"

    import(module: String): JsValue // If we also need to support dynamic imports, this would have to be async
        target js sync "throw Error('Dynamic JS imports are not currently supported.')"

    parseJson(json: String): JsValue
        target js sync "return JSON.parse(json_)"

    null(): JsValue
        target js sync "return null"

    undefined(): JsValue
        target js sync "return void 0"

    value[T: IsJsValue](jsValue: T): JsValue
        target js sync "return jsValue_"

    object(): JsValue
        target js sync "return {}"

    cancelled(): Bool // This is never actually called async, but will be rewitten by the compiler
        target js async "return $c.signal.aborted"
        target js sync "return false"

    throwIfCancelled(): Unit // This is never actually called async, but will be rewitten by the compiler
        target js async """
            if($c.signal.aborted) throw new Error("Cancelled", {cause: $c.reasonWorkaround})
        """
        target js sync ""

    await[T](body: () => T): T // This is never actually called async, but will be rewitten by the compiler
        target js async """
            return await body_($c)
        """
        target js sync """
            return body_()
        """

    array(values: List[JsValue]): JsValue
        target js sync "return ff_core_List.List_toArray(values_)"

    shield(body: () => JsValue): JsValue
        target js sync "return body_"
        target js async """
            const controller = new AbortController()
            controller.closed = false
            controller.promises = new Set()
            return await body_(controller)
        """

    function0[R](body: () => R): JsValue
        target js sync "return body_"
        target js async "return () => body_($c)"

    function1[R](body: JsValue => R): JsValue
        target js sync "return body_"
        target js async "return a1 => body_(a1, $c)"

    function2[R](body: (JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2) => body_(a1, a2, $c)"

    function3[R](body: (JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3) => body_(a1, a2, a3, $c)"

    function4[R](body: (JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4) => body_(a1, a2, a3, a4, $c)"

    function5[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5) => body_(a1, a2, a3, a4, a5, $c)"

    function6[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6) => body_(a1, a2, a3, a4, a5, a6, $c)"

    function7[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6, a7) => body_(a1, a2, a3, a4, a5, a6, a7, $c)"

    function8[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6, a7, a8) => body_(a1, a2, a3, a4, a5, a6, a7, a8, $c)"

    function9[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6, a7, a8, a9) => body_(a1, a2, a3, a4, a5, a6, a7, a8, a9, $c)"

}
