class JsSystem {}

extend self: JsSystem {

    globalThis(): JsValue
        target js sync "return self_"

    get(key: String): JsValue
        target js sync "return self_[key_]"

    set[V: IsJsValue](key: String, value: V): Unit
        target js sync "self_[key_] = value_"

    increment[V: IsJsValue](key: String, value: V): Unit
        target js sync "self_[key_] += value_"
        
    decrement[V: IsJsValue](key: String, value: V): Unit
        target js sync "self_[key_] -= value_"

    call0(name: String): JsValue
        target js sync "return self_[name_].call(void 0)"

    call1[A1: IsJsValue](name: String, a1: A1): JsValue
        target js sync "return self_[name_].call(void 0, a1_)"

    call2[A1: IsJsValue, A2: IsJsValue](name: String, a1: A1, a2: A2): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_)"

    call3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](name: String, a1: A1, a2: A2, a3: A3): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_, a3_)"

    call4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_, a3_, a4_)"

    call5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_, a3_, a4_, a5_)"

    call6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_, a3_, a4_, a5_, a6_)"

    call7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_, a3_, a4_, a5_, a6_, a7_)"

    call8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_)"

    call9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue
        target js sync "return self_[name_].call(void 0, a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_)"
        
    parseJson(json: String): JsValue
        target js sync "return JSON.parse(json_)"

    null(): JsValue
        target js sync "return null"

    undefined(): JsValue
        target js sync "return void 0"

    value[T: IsJsValue](jsValue: T): JsValue
        target js sync "return jsValue_"

    object(): JsValue
        target js sync "return {}"

    array(values: List[JsValue]): JsValue
        target js sync "return values_.slice()"
        
    json(value: Json): JsValue
        target js sync "return value_"

    function0[R](body: () => R): JsValue
        target js sync "return body_"
        target js async "return () => body_($task)"

    function1[R](body: JsValue => R): JsValue
        target js sync "return body_"
        target js async "return a1 => body_(a1, $task)"

    function2[R](body: (JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2) => body_(a1, a2, $task)"

    function3[R](body: (JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3) => body_(a1, a2, a3, $task)"

    function4[R](body: (JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4) => body_(a1, a2, a3, a4, $task)"

    function5[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5) => body_(a1, a2, a3, a4, a5, $task)"

    function6[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6) => body_(a1, a2, a3, a4, a5, a6, $task)"

    function7[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6, a7) => body_(a1, a2, a3, a4, a5, a6, a7, $task)"

    function8[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6, a7, a8) => body_(a1, a2, a3, a4, a5, a6, a7, a8, $task)"

    function9[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue
        target js sync "return body_"
        target js async "return (a1, a2, a3, a4, a5, a6, a7, a8, a9) => body_(a1, a2, a3, a4, a5, a6, a7, a8, a9, $task)"

}
