class StringMap[V] {}

make[V](): StringMap[V]
    target js sync "return new Map()"

extend self[V]: StringMap[V] {

    get(key: String): Option[V]
        target js sync "return self_.has(key_) ? ff_core_Option.Some(self_.get(key_)) : ff_core_Option.None()"

    grab(key: String): V
        target js sync """
            const result = self_.get(key_)
            if(key_ === void 0 && !self_.has(key_)) {
                ff_core_Try.internalThrowGrabException_()
            }
            return result
        """

    set(key: String, value: V): Unit
        target js sync "self_.set(key_, value_)"

    has(key: String): Bool
        target js sync "return self_.has(key_)"

    remove(key: String): Bool
        target js sync "return self_.delete(key_)"

    clear(): Unit
        target js sync "self_.clear()"

    size(): Int
        target js sync "return self_.size"

    each(body: (String, V) => Unit): Bool
        target js sync "return self_.forEach((v, k) => body_(k, v))"
        target js async "for(const [k, v] of self_) await body_(k, v)"

    eachWhile(body: (String, V) => Bool): Bool
        target js sync "for(const [k, v] of self_) if(!body_(k, v)) break"
        target js async "for(const [k, v] of self_) if(!await body_(k, v)) break"

    toStack(): Stack[Pair[String, V]] {
        let stack = Stack.make()
        self.each {k, v => stack.push(Pair(k, v))}
        stack
    }

    toArray(): Array[Pair[String, V]] {
        self.toStack().drain()
    }

    toList(): List[Pair[String, V]] {
        self.toArray().toList()
    }

    toStream(): Stream[Pair[String, V]] {
        self.toArray().toStream()
    }

    toMap(): Map[String, V] {
        self.toArray().toMap()
    }

    keys(): List[String] {
        let stack = Stack.make()
        self.each {k, v => stack.push(k)}
        stack.toList()
    }

    values(): List[V] {
        let stack = Stack.make()
        self.each {k, v => stack.push(v)}
        stack.toList()
    }

    copy(): StringMap[V]
        target js sync "return new Map(self_)"

}

// These instances are only here to satisfy the automatic deriving, which currently kicks in for class types (this should be fixed)

extend self[V: Show]: StringMap[V] {
    show(): String {
        self.toList().show() + ".toStringMap()" // TODO
    }
}

instance StringMap[V: Show]: Show {
    show(self: StringMap[V]): String {
        self.show()
    }
}

instance StringMap[V: Equal]: Equal {
    equals(self: StringMap[V], that: StringMap[V]): Bool {
        self.toArray() == that.toArray()
    }
}

instance StringMap[V: Order]: Order {
    compare(self: StringMap[V], that: StringMap[V]): Ordering {
        Ordering.compare(self.toArray(), that.toArray())
    }
}

instance StringMap[V: Serializable]: Serializable {
    serializeUsing(serialization: Serialization, self: StringMap[V]): Unit {
        Serializable.serializeUsing(serialization, self.toArray())
    }
    deserializeUsing(serialization: Serialization): StringMap[V] {
        let result = make()
        Serializable.deserializeUsing[Array[Pair[String, V]]](serialization).each {| Pair(k, v) => result.set(k, v)}
        result
    }
}
