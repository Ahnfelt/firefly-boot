jsSystem(): JsSystem {
    panic("This call should have been eliminated by the compiler")
}

import(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

importDynamic(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

await(promise: JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async0[R](body: () => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async1[R](body: (JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async2[R](body: (JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async3[R](body: (JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async4[R](body: (JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async5[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async6[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async7[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async8[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async9[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

throwIfCancelled(): Unit {
    panic("This call should have been eliminated by the compiler")
}

cancelled(): Bool {
    panic("This call should have been eliminated by the compiler")
}

inAsync(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inBrowser(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inNode(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inBuild(): Bool {
    panic("This call should have been eliminated by the compiler")
}

controller(): JsValue {
    panic("This call should have been eliminated by the compiler")
}

setController(controller: JsValue) {
    panic("This call should have been eliminated by the compiler")
}

    
withSignal[T](body: JsValue => T): T {
    let js = UnsafeJs.jsSystem()
    let controller = UnsafeJs.controller()
    try {
        body(controller->signal)
    } finally {
        if(controller->signal->aborted?) {UnsafeJs.setController(js->AbortController->())}
    }
}

value[T](value: T): JsValue {
    panic("This call should have been eliminated by the compiler")
}

fromValue[T](value: JsValue): T {
    panic("This call should have been eliminated by the compiler")
}
