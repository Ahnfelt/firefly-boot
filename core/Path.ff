capability Path {}
capability PathEntry {}

extend self: Path {

    exists(checkReadable: Bool = False, checkWritable: Bool = False, checkExecutable: Bool = False): Bool
        target node async """
            import * as fs from 'fs'
            import * as fsPromises from 'fs/promises'
            const flags = 
                (fs.constants.R_OK * checkReadable_) | 
                (fs.constants.W_OK * checkWritable_) | 
                (fs.constants.X_OK * checkExecutable_)
            try {
                await fsPromises.access(self_, flags === 0 ? fs.constants.F_OK : flags)
                return true
            } catch(e) {
                return false
            }
        """
        
    isReadable(): Bool {
        self.exists(checkReadable = True)
    }
        
    isWritable(): Bool {
        self.exists(checkWritable = True)
    }

    isExecutable(): Bool {
        self.exists(checkExecutable = True)
    }

    isDirectory(): Bool
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return (await fsPromises.lstat(self_)).isDirectory();
            } catch(e) {
                return false;
            }
        """

    isFile(): Bool
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return (await fsPromises.lstat(self_)).isFile();
            } catch(e) {
                return false;
            }
        """

    isSymbolicLink(): Bool
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return (await fsPromises.lstat(self_)).isSymbolicLink();
            } catch(e) {
                return false;
            }
        """

    isInsideOf(path: Path): Bool
        target node async """
            import * as path from 'path'
            if(path_ === '/') return true
            const childPath = path.resolve(self_)
            const parentPath = path.resolve(path_)
            return childPath.startsWith(parentPath + path.sep) || childPath === parentPath
        """

    size(): Int
        target node async """
            return (await fs.promises.stat(file)).size
        """
        
    modified(): Instant
        target node async """
            return (await fs.promises.stat(file)).mtimeMs * 0.001
        """

    entries(): Stream[PathEntry]
        target node async """
            import * as fsPromises from 'fs/promises'
            let dir = null
            return ff_core_Stream.Stream(
                async () => {
                    if(dir === null) dir = await fsPromises.opendir(self_, {bufferSize: 128})
                    const entry = await dir.read()
                    if(entry === null) return ff_core_Option.None()
                    entry.ffPath = self_
                    return ff_core_Option.Some(entry)
                },
                async () => {
                    if(dir !== null) await dir.close()
                }
            )
        """

    absolute(): String
        target node async """
            import * as path from 'path'
            return path.resolve(self_)
        """

    relativeTo(path: Path): String
        target node async """
            import * as path from 'path';
            return path.relative(path_, self_);
        """
    
    endsWith(parts: List[String]): Bool {
        function go(pathOption: Option[Path], reversed: List[String]): Bool {
            | _, [] => True
            | Some(path), [p, ...ps] => path.base() == p && go(path.parent(), ps)
            | None, _ => False
        }
        go(Some(self), parts.reverse())
    }

    contains(parts: List[String]): Bool {
        self.endsWith(parts) || self.parent().any {_.endsWith(parts)}
    }

    base(): String
        target node async """
            import * as path from 'path'
            return path.basename(self_)
        """

    extension(): String
        target node async """
            import * as path from 'path'
            return path.extname(self_)
        """

    url(): String
        target node async """
            import * as url from 'url';
            return '' + url.pathToFileURL(self_);
        """

    delimiter(): String
        target node async """
            import * as path from 'path';
            return path.delimiter(self_);
        """

    separator(): String
        target node async """
            import * as path from 'path';
            return path.separator();
        """

    parent(): Option[Path]
        target node async """
            import * as path from 'path'
            const result = path.dirname(self_)
            return result !== "" && result !== self_
                ? ff_core_Option.Some(result) 
                : ff_core_Option.None()
        """

    slash(relativePath: String): Path
        target node async """
            import * as path from 'path'
            return path.join(self_, relativePath_)
        """

    path(absoluteOrRelativePath: String): Path
        target node async """
            import * as path from 'path'
            return path.resolve(self_, absoluteOrRelativePath_)
        """

    copyTo(path: Path, retries: Int = 0, retryDelay: Int = 100) {
        if(self.isDirectory()) {
            if(path.exists()) {path.delete(retries, retryDelay)}
            path.createDirectory()
            self.entries().each {file =>
                file.path().copyTo(path.slash(file.path().relativeTo(self)), retries, retryDelay)
            }
        } else {
            path.writeStream(self.readStream())
        }
    }

    createDirectory(createParentDirectories: Bool = False)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.mkdir(self_, {recursive: createParentDirectories_})
        """

    createSymlinkTo(path: Path)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.symlink(path_, self_)
        """

    delete(retries: Int = 0, retryDelay: Int = 100)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.rm(self_, {recursive: true, retries: retries_, retryDelay: retryDelay_})
        """
    
    truncate(length: Int = 0)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.truncate(self_, length_)
        """

    renameTo(path: Path)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.rename(self_, path_)
        """

    readText(): String
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return await fsPromises.readFile(self_, {encoding: 'UTF-8', signal: $task.controller.signal})
            } finally {
                if($task.controller.signal.aborted) $task.controller = new AbortController()
            }
        """

    writeText(text: String)
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                await fsPromises.writeFile(self_, text_, {encoding: 'UTF-8', signal: $task.controller.signal})
            } finally {
                if($task.controller.signal.aborted) $task.controller = new AbortController()
            }
        """

    appendText(text: String)
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                await fsPromises.appendFile(self_, text_, {encoding: 'UTF-8', signal: $task.controller.signal})
            } finally {
                if($task.controller.signal.aborted) $task.controller = new AbortController()
            }
        """

    readBuffer(): Buffer {
        self.readStream().toBuffer()
    }
    
    writeBuffer(buffer: Buffer) {
        self.writeStream([buffer].toStream())
    }
    
    appendBuffer(buffer: Buffer) {
        self.appendStream([buffer].toStream())
    }

    readStream(): Stream[Buffer]
        target node async """
            import * as fs from 'fs'
            return ff_core_Path.internalReadStream_$(() => fs.createReadStream(self_))
        """

    writeStream(stream: Stream[Buffer], createOnly: Bool = False)
        target node async """
            import * as fs from 'fs'
            let writeable = fs.createWriteStream(self_, {flags: createOnly_ ? 'wx' : 'w'})
            try {
                await ff_core_Stream.Stream_each$(stream_, async buffer => {
                    if(!writeable.write(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength))) {
                        await new Promise((resolve, reject) => {
                            $task.controller.signal.addEventListener('abort', reject)
                            writeable.once('drain', () => {
                                $task.controller.signal.removeEventListener('abort', reject)
                                resolve()
                            })
                        })
                    }
                }, $task)
            } finally {
                await new Promise((resolve, reject) => {
                    writeable.close(err => {if(err) reject(err); else resolve();});
                });
            }
        """

    appendStream(stream: Stream[Buffer])
        target node async """
            import * as fs from 'fs'
            let writeable = fs.createWriteStream(self_, {flags: 'a'})
            try {
                await ff_core_Stream.Stream_each$(stream_, async buffer => {
                    if(!writeable.write(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength))) {
                        await new Promise((resolve, reject) => {
                            $task.controller.signal.addEventListener('abort', reject)
                            writeable.once('drain', () => {
                                $task.controller.signal.removeEventListener('abort', reject)
                                resolve()
                            })
                        })
                    }
                }, $task)
            } finally {
                await new Promise((resolve, reject) => {
                    writeable.close(err => {if(err) reject(err); else resolve();});
                });
            }
        """

    readHandle(alsoWrite: Bool = False): FileHandle
        target node async """
            import * as fsPromises from 'fs/promises'
            return await fsPromises.open(self_, alsoWrite_ ? 'r+' : 'r')
        """

    writeHandle(alsoRead: Bool = False, mustCreate: Bool = False): FileHandle
        target node async """
            import * as fsPromises from 'fs/promises'
            return await fsPromises.open(self_, (mustCreate_ ? 'wx' : 'w') + (alsoRead_ ? '+' : ''))
        """

    appendHandle(alsoRead: Bool = False, mustCreate: Bool = False): FileHandle
        target node async """
            import * as fsPromises from 'fs/promises'
            return await fsPromises.open(self_, (mustCreate_ ? 'wx' : 'w') + (alsoRead_ ? '+' : ''))
        """

}

extend self: PathEntry {
    
    path(): Path
        target node async """
            import * as path from 'path'
            return path.join(self_.ffPath, self_.name)
        """

    isDirectory(): Bool
        target node async """
            return self_.isDirectory()
        """

    isFile(): Bool
        target node async """
            return self_.isFile()
        """

    isSymbolicLink(): Bool
        target node async """
            return self_.isSymbolicLink()
        """

}

internalReadStream(createReadStream: () => JsValue): Stream[Buffer]
    target node async """
        let task = null
        let readable = null
        let doResolve = null
        let doReject = null
        let seenError = null
        const abort = () => {
            if(task != null) {
                task.controller.signal.removeEventListener('abort', abort)
                readable.destroy()
            }
        }
        function open($task) {
            ff_core_Task.Task_throwIfAborted($task)
            task = $task
            readable = createReadStream_()
            readable.on('readable', () => {
                if(doResolve != null) doResolve()
            })
            readable.on('error', error => {
                task.controller.signal.removeEventListener('abort', abort)
                seenError = error
                if(doReject != null) doReject(error)
            })
            readable.on('close', () => {
                task.controller.signal.removeEventListener('abort', abort)
                if(doResolve != null) doResolve()
            })
            $task.controller.signal.addEventListener('abort', abort)
        }
        return ff_core_Stream.Stream(async function go($task) {
            if(task == null) open($task)
            let buffer = readable.read()
            if(buffer != null) return ff_core_Option.Some(new DataView(buffer.buffer, buffer.byteOffset, buffer.length))
            if(seenError != null) throw seenError
            if(readable.destroyed) return ff_core_Option.None()
            let promise = new Promise((resolve, reject) => {
                doResolve = () => {doResolve = null; doReject = null; resolve()}
                doReject = error => {doResolve = null; doReject = null; reject(error)}
            }).then(() => go($task))
            return await promise
        }, abort)
    """
