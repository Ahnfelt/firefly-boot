capability Path {}

extend self: Path {

    checkAccess(checkRead: Bool = False, checkWrite: Bool = False, checkExecute: Bool = False): Bool
        target node async """
            import * as fs from 'fs'
            import * as fsPromises from 'fs/promises'
            const flags = 
                (fs.constants.R_OK * checkRead_) | 
                (fs.constants.W_OK * checkWrite_) | 
                (fs.constants.X_OK * checkExecute_)
            try {
                await fsPromises.access(self_, flags === 0 ? fs.constants.F_OK : flags)
                return true
            } catch(e) {
                return false
            }
        """
    
    isDirectory(): Bool
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return (await fsPromises.lstat(self_)).isDirectory();
            } catch(e) {
                return false;
            }
        """

    isFile(): Bool
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return (await fsPromises.lstat(self_)).isFile();
            } catch(e) {
                return false;
            }
        """

    isSymbolicLink(): Bool
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return (await fsPromises.lstat(self_)).isSymbolicLink();
            } catch(e) {
                return false;
            }
        """

    list(): List[Path]
        target node async """
            import * as fsPromises from 'fs/promises'
            import * as path from 'path'
            return ff_core_Array.Array_toList((await fsPromises.readdir(self_)).map(f => path.join(self_, f)))
        """

    absolute(): String
        target node async """
            import * as path from 'path'
            return path.resolve(self_)
        """

    relativeTo(path: Path): String
        target node sync """
            import * as path from 'path';
            return path.relative(self_, path_);
        """

    base(): String
        target node sync """
            import * as path from 'path'
            return path.basename(self_)
        """

    extension(): String
        target node sync """
            import * as path from 'path'
            return path.extname(self_)
        """

    url(): String
        target node sync """
            import * as url from 'url';
            return '' + url.pathToFileURL(self_);
        """

    delimiter(): String
        target node sync """
            import * as path from 'path';
            return path.delimiter(self_);
        """

    separator(): String
        target node sync """
            import * as path from 'path';
            return path.separator();
        """

    parent(): Option[Path]
        target node sync """
            import * as path from 'path'
            const result = path.dirname(self_)
            return result !== "" && result !== self_
                ? ff_core_Option.Some(result) 
                : ff_core_Option.None()
        """

    slash(relativePath: String): Path
        target node sync """
            import * as path from 'path'
            return path.join(self_, relativePath_)
        """

    copyTo(path: Path, retries: Int = 0, retryDelay: Int = 100): Unit {
        if(self.isDirectory()) {
            if(path.exists()) {path.delete(retries, retryDelay)}
            path.createDirectory()
            self.list().each {file =>
                self.copyTo(path.slash(file.relativeTo(self)), retries, retryDelay)
            }
        } else {
            path.writeStream(self.readStream())
        }
    }

    createDirectory(parentDirectories: Bool = False)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.mkdir(self_, {recursive: parentDirectories_})
        """

    createSymlinkTo(path: Path)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.symlink(path_, self_)
        """

    delete(retries: Int = 0, retryDelay: Int = 100)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.rm(self_, {recursive: true, retries: retries_, retryDelay: retryDelay_})
        """
    
    truncate(length: Int = 0): Unit
        target js async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.truncate(self_, length_)
        """

    renameTo(path: Path)
        target node async """
            import * as fsPromises from 'fs/promises'
            await fsPromises.rename(self_, path_)
        """

    readText(): String
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                return await fsPromises.readFile(self_, {encoding: 'UTF-8', signal: $task.controller.signal})
            } finally {
                if($task.controller.signal.aborted) $task.controller = new AbortController()
            }
        """

    writeText(text: String): Unit
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                await fsPromises.writeFile(self_, text_, {encoding: 'UTF-8', signal: $task.controller.signal})
            } finally {
                if($task.controller.signal.aborted) $task.controller = new AbortController()
            }
        """

    appendText(text: String): Unit
        target node async """
            import * as fsPromises from 'fs/promises'
            try {
                await fsPromises.appendFile(self_, text_, {encoding: 'UTF-8', signal: $task.controller.signal})
            } finally {
                if($task.controller.signal.aborted) $task.controller = new AbortController()
            }
        """

    readBuffer(): Buffer {
        self.readStream().toBuffer()
    }
    
    writeBuffer(buffer: Buffer): Unit {
        self.writeStream([buffer].toStream())
    }
    
    appendBuffer(buffer: Buffer): Unit {
        self.appendStream([buffer].toStream())
    }

    readStream(): Stream[Buffer]
        target node async """
            import * as fs from 'fs'
            return ff_core_FileSystem.internalReadStream_$(() => fs.createReadStream(self_))
        """

    writeStream(stream: Stream[Buffer], createOnly: Bool = False): Unit
        target node async """
            import * as fs from 'fs'
            let writeable = fs.createWriteStream(self_, {flags: createOnly_ ? 'wx' : 'w'})
            try {
                await ff_core_Stream.Stream_each$(stream_, async buffer => {
                    if(!writeable.write(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength))) {
                        await new Promise((resolve, reject) => {
                            $task.controller.signal.addEventListener('abort', reject)
                            writeable.once('drain', () => {
                                $task.controller.signal.removeEventListener('abort', reject)
                                resolve()
                            })
                        })
                    }
                }, $task)
            } finally {
                writeable.close()
            }
        """

    appendStream(stream: Stream[Buffer]): Unit
        target node async """
            import * as fs from 'fs'
            let writeable = fs.createWriteStream(self_, {flags: 'a'})
            try {
                await ff_core_Stream.Stream_each$(stream_, async buffer => {
                    if(!writeable.write(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength))) {
                        await new Promise((resolve, reject) => {
                            $task.controller.signal.addEventListener('abort', reject)
                            writeable.once('drain', () => {
                                $task.controller.signal.removeEventListener('abort', reject)
                                resolve()
                            })
                        })
                    }
                }, $task)
            } finally {
                writeable.close()
            }
        """

    readHandle(alsoWrite: Bool = False): FileHandle
        target node async """
            import * as fsPromises from 'fs/promises'
            return await fsPromises.open(self_, alsoWrite_ ? 'r+' : 'r')
        """

    writeHandle(alsoRead: Bool = False, mustCreate: Bool = False): FileHandle
        target node async """
            import * as fsPromises from 'fs/promises'
            return await fsPromises.open(self_, (mustCreate_ ? 'wx' : 'w') + (alsoRead_ ? '+' : ''))
        """

    appendHandle(alsoRead: Bool = False, mustCreate: Bool = False): FileHandle
        target node async """
            import * as fsPromises from 'fs/promises'
            return await fsPromises.open(self_, (mustCreate_ ? 'wx' : 'w') + (alsoRead_ ? '+' : ''))
        """

}

// TODO: stat, chown, chmod
// Also see these suggestions: https://chat.openai.com/share/c0f63c0f-bd12-4a33-ac55-69e1cfb6a545
