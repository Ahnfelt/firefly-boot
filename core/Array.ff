type Array[T] {}

empty[T](): Array[T]
    target js sync """
        return [];
    """

fill[T](size: Int, value: T): Array[T]
    target js sync """
        return new Array(size_).fill(value_);
    """

range(size: Int): Array[Int]
    target js sync """
        return Array.from({length: size_}, (_, i) => i);
    """

extend self[T]: Array[T] {

    addAll(that: Array[T]): Array[T]
        target js sync "return self_.concat(that_)"

    isEmpty(): Bool
        target js sync "return self_.length === 0"

    size(): Int
        target js sync "return self_.length"

    get(index: Int): Option[T]
        target js sync """
            return index_ >= 0 && index_ < self_.length
                ? ff_core_Option.Some(self_[index_])
                : ff_core_Option.None()
        """

    expect(index: Int): T
        target js sync """
            if(index_ < 0 || index_ >= self_.length) {
                throw new Error('Index ' + index_ + ' is out of bounds in an array of size ' + self_.length)
            }
            return self_[index_]
        """

    first(): Option[T] { self.get(0) }

    last(): Option[T] { self.get(self.size() - 1) }

    expectFirst(): T { self.expect(0) }

    expectLast(): T { self.expect(self.size() - 1) }

    dropFirst(count: Int = 1): Array[T]
        target js sync "return self_.slice(count_)"

    dropLast(count: Int = 1): Array[T]
        target js sync "return self_.slice(0, self_.length - count_)"

    update(index: Int, body: T => T): Array[T]
        target js sync """
            let result = self_.slice();
            result[index_] = body_(result[index_]);
            return result;
        """
        target js async """
            let result = self_.slice();
            result[index_] = await body_(result[index_], $c);
            return result;
        """

    toList(): List[T]
        target js sync """
            let result = ff_core_List.Empty();
            for(let i = self_.length - 1; i >= 0; i--) {
                result = ff_core_List.Link(self_[i], result);
            }
            return result;
        """

    toStream(): Stream[T] {
        mutable index = 0
        Stream.make {
            if(index < self.size()) {
                let result = self.expect(index)
                index += 1
                result
            }
        }
    }

    toStack(): Stack[T]
        target js sync "return {array: self_.slice()}"

    each(body: T => Unit): Unit
        target js sync """
            return self_.forEach(body_);
        """
        target js async """
            for(let i = 0; i < self_.length; i++) {
                await body_(self_[i], $c)
            }
        """

    eachWhile(body: T => Bool): Unit
        target js sync "for(const value of self_) if(!body_(value)) break"
        target js async "for(const value of self_) if(!await body_(value, $c)) break"

    all(body: T => Bool): Bool {
        mutable result = True
        self.eachWhile {x =>
            result = result && body(x)
            result
        }
        result
    }

    any(body: T => Bool): Bool {
        mutable result = False
        self.eachWhile {x =>
            result = result || body(x)
            (!result)
        }
        result
    }

    map[S](body: T => S): Array[S]
        target js sync """
            return self_.map(body_)
        """
        target js async """
            let result = [];
            for(let i = self_.length - 1; i >= 0; i--) {
                result.push(await body_(self_[i], $c));
            }
            return result;
        """

}

extend self[T: Order]: Array[T] {
    toSet(): Set[T] {
        self.toList().toSet()
    }
}

extend self[K: Order, V]: Array[Pair[K, V]] {
    toMap(): Map[K, V] {
        self.toList().toMap()
    }
}

extend self: Array[String] {

    join(separator: String = ""): String
        target js sync "return self_.join(separator_)"

}

instance Array[T: Show]: Show {
    show(array: Array[T]): String {
        let stack = Stack.empty()
        stack.push("[")
        array.each {x =>
            if(stack.size() > 1) {stack.push(", ")}
            stack.push(Show.show(x))
        }
        stack.push("].toArray()")
        stack.join()
    }
}

instance Array[T: Equal]: Equal {
    equal(left: Array[T], right: Array[T]): Bool {
        if(internalSame(left, right)) {True} else:
        if(left.size() != right.size()) {False} else:
        mutable i = -1
        left.all {x =>
            i += 1
            x == right.expect(i)
        }
    }
}

instance Array[T: Order]: Order {
    compare(left: Array[T], right: Array[T]): Ordering {
        if(internalSame(left, right)) {OrderingSame} else:
        mutable ordering = OrderingSame
        mutable i = 0
        while {ordering == OrderingSame && i < left.size() && i < right.size()} {
            ordering = Ordering.compare(left.expect(i), right.expect(i))
            i += 1
        }
        if(ordering != OrderingSame) {ordering} else:
        Ordering.compare(left.size(), right.size())
    }
}

internalSame[T](left: Array[T], right: Array[T]): Bool
    target js sync "return left_ === right_"