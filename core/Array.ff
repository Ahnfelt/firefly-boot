data Array[T] {}

empty[T](): Array[T]
    target js sync """
        return [];
    """

fill[T](size: Int, value: T): Array[T]
    target js sync """
        return new Array(size_).fill(value_);
    """

fillBy[T](size: Int, body: Int => T): Array[T]
    target js sync """
        return Array.from({length: size_}, (_, i) => body_(i));
    """
    target js async """
        const array = new Array(size_);
        for(let i = 0; i < size_; i++) {
            array[i] = await(body_(_i));
        }
        return array;
    """

range(size: Int): Array[Int]
    target js sync """
        return Array.from({length: size_}, (_, i) => i);
    """

extend self[T]: Array[T] {

    addAll(that: Array[T]): Array[T]
        target js sync "return self_.concat(that_)"

    isEmpty(): Bool
        target js sync "return self_.length === 0"

    size(): Int
        target js sync "return self_.length"

    get(index: Int): Option[T]
        target js sync """
            return index_ >= 0 && index_ < self_.length
                ? ff_core_Option.Some(self_[index_])
                : ff_core_Option.None()
        """

    grab(index: Int): T
        target js sync """
            if(index_ < 0 || index_ >= self_.length) {
                ff_core_Try.internalThrowGrabException_()
            }
            return self_[index_]
        """

    first(): Option[T] {self.get(0)}

    last(): Option[T] {self.get(self.size() - 1)}

    grabFirst(): T {self.grab(0)}

    grabLast(): T {self.grab(self.size() - 1)}

    takeFirst(count: Int = 1): Array[T]
        target js sync "return self_.slice(0, count_)"

    takeLast(count: Int = 1): Array[T]
        target js sync "return self_.slice(-count_)"

    dropFirst(count: Int = 1): Array[T]
        target js sync "return self_.slice(count_)"

    dropLast(count: Int = 1): Array[T]
        target js sync "return self_.slice(0, self_.length - count_)"

    update(index: Int, body: T => T): Array[T]
        target js sync """
            if(index_ < 0 || index_ >= self_.length) {
                ff_core_Try.internalThrowGrabException_()
            }
            let result = self_.slice();
            result[index_] = body_(result[index_]);
            return result;
        """
        target js async """
            if(index_ < 0 || index_ >= self_.length) {
                ff_core_Try.internalThrowGrabException_()
            }
            let result = self_.slice();
            result[index_] = await body_(result[index_], $task);
            return result;
        """

    chunk(chunkSize: Int): Array[Array[T]] {
        let results = Stack.make()
        let result = Stack.make()
        mutable added = 0
        self.each { item =>
            if(added < chunkSize) {
                added += 1
            } else {
                results.push(result.drain())
                added = 1
            }
            result.push(item)
        }
        if(added != 0) {
            results.push(result.drain())
        }
        results.drain()
    }

    toList(): List[T]
        target js sync """
            let result = ff_core_List.Empty();
            for(let i = self_.length - 1; i >= 0; i--) {
                result = ff_core_List.Link(self_[i], result);
            }
            return result;
        """

    toStream(cycle: Bool = False): Stream[T] {
        mutable index = 0
        Stream.make {
            if(index < self.size()) {
                let result = self.grab(index)
                index += 1
                result
            } elseIf {cycle && index != 0} {
                let result = self.grab(0)
                index = 1
                result
            }
        }
    }

    toStack(): Stack[T]
        target js sync "return {array: self_.slice()}"

    each(body: T => Unit): Unit
        target js sync """
            return self_.forEach(body_);
        """
        target js async """
            for(let i = 0; i < self_.length; i++) {
                await body_(self_[i], $task)
            }
        """

    eachWhile(body: T => Bool): Unit
        target js sync "for(const value of self_) if(!body_(value)) break"
        target js async "for(const value of self_) if(!await body_(value, $task)) break"

    all(body: T => Bool): Bool {
        mutable result = True
        self.eachWhile {x =>
            result = result && body(x)
            result
        }
        result
    }

    any(body: T => Bool): Bool {
        mutable result = False
        self.eachWhile {x =>
            result = result || body(x)
            (!result)
        }
        result
    }

    map[S](body: T => S): Array[S]
        target js sync """
            return self_.map(body_)
        """
        target js async """
            let result = [];
            for(let i = self_.length - 1; i >= 0; i--) {
                result.push(await body_(self_[i], $task));
            }
            return result;
        """
        
    flatMap[S](body: T => Array[S]): Array[S] {
        let results = Stack.make()
        self.each {x =>
            results.pushArray(body(x))
        }
        results.drain()
    }

    sortBy[S: Order](body: T => S): Array[T] {
        self.sortWith {Ordering.compare(body(_), body(_))}
    }

    sortWith(ordering: (T, T) => Ordering): Array[T] {
        let stack = self.toStack()
        stack.sortWith(ordering)
        stack.drain()
    }

}

extend self[T: Order]: Array[T] {

    sort(): Array[T] {
        self.sortWith(Ordering.compare)
    }

    toSet(): Set[T] {
        self.toList().toSet()
    }

}

extend self[K: Order, V]: Array[Pair[K, V]] {
    toMap(): Map[K, V] {
        self.toList().toMap()
    }
}

extend self: Array[String] {

    join(separator: String = ""): String
        target js sync "return self_.join(separator_)"

}

instance Array[T: Show]: Show {
    show(value: Array[T]): String {
        let stack = Stack.make()
        stack.push("[")
        value.each {x =>
            if(stack.size() > 1) {stack.push(", ")}
            stack.push(Show.show(x))
        }
        stack.push("].toArray()")
        stack.join()
    }
}

instance Array[T: Equal]: Equal {
    equals(x: Array[T], y: Array[T]): Bool {
        if(internalSame(x, y)) {True} else:
        if(x.size() != y.size()) {False} else:
        mutable i = -1
        x.all {l =>
            i += 1
            l == y.grab(i)
        }
    }
}

instance Array[T: Order]: Order {
    compare(x: Array[T], y: Array[T]): Ordering {
        if(internalSame(x, y)) {OrderingSame} else:
        let size = x.size().min(y.size())
        mutable i = 0
        mutable ordering = OrderingSame
        while {ordering == OrderingSame && i < size} {
            ordering = Ordering.compare(x.grab(i), y.grab(i))
            i += 1
        }
        if(ordering != OrderingSame) {ordering} else:
        Ordering.compare(x.size(), y.size())
    }
}

internalSame[T](left: Array[T], right: Array[T]): Bool
    target js sync "return left_ === right_"
