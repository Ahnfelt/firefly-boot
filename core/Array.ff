type Array[T] {}
    scala "java.util.ArrayList[T]"

extend self[T]: Array[T] {

    addAll(that: Array[T]): Array[T] { panic("magic") }

    getEmpty(): Bool { panic("magic") }
        scala "self_.isEmpty()"
        javascript "self_.length == 0"

    getSize(): Int { panic("magic") }
        scala "self_.size()"
        javascript "self.length"

    expect(index: Int): T { panic("magic") }
        scala "self_.get(index_)"
        javascript "self_[index_]"

    expectFirst(): T { self.expect(0) }

    expectLast(): T { self.expect(self.getSize() - 1) }

    dropFirst(count: Int = 1): Array[T] { panic("magic") }
        scala """
            val r = new java.util.ArrayList[T](Math.max(0, self_.size() - count_))
            for(i <- count_.until(self_.size())) r.add(self_.get(i))
            r
        """

    dropLast(count: Int = 1): Array[T] { panic("magic") }
        scala """
            val r = new java.util.ArrayList[T](Math.max(0, self_.size() - count_))
            for(i <- 0.until(self_.size() - count_)) r.add(self_.get(i))
            r
        """

    update(index: Int, body: T => T): Array[T] { panic("magic") }
        javascript """
            let result = self_.slice();
            result[index] = body(result[index]);
            return result;
        """

    getList(): List[T] { panic("magic") }
        scala """
            import scala.collection.JavaConverters._
            self_.asScala.toList
        """

}
