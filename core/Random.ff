class Random(
    mutable s0: Float
    mutable s1: Float
    mutable s2: Float
    mutable c: Float
    mutable spareGauss: Float
)

// Using Alea PRNG by Johannes Baag√∏e <baagoe@baagoe.com>, 2010
// Typical use: Random.seedInstant(system.task().now())

newFromInt(seed: Int): Random {
    newFromFloat(seed.toFloat())
}

newFromFloat(seed: Float): Random {
    let buffer = Buffer.new(8)
    buffer.setFloat64(0, seed)
    newFromBuffer(buffer)
}

newFromBuffer(buffer: Buffer): Random {
    mutable n: Float = (0xefc8249d).toFloat()
    function mash(data: Buffer): Float {
        0.until(data.size()).each {i =>
            n += data.grabUint8(i).toFloat()
            mutable h = 0.02519603282416938 * n
            n = Js.binaryOperator(">>>", h, 0)?
            h -= n
            h *= n
            n = Js.binaryOperator(">>>", h, 0)?
            h -=n
            n += h * 0x100000000 // 2^32
        }
        Js.binaryOperator(">>>", n, 0)? * 2.3283064365386963e-10
    }
    let space: Buffer = Js->DataView->(Js->Uint8Array->([32])->buffer)?
    let r = Random(
        s0 = mash(space)
        s1 = mash(space)
        s2 = mash(space)
        c = 1.0
        spareGauss = Float.nan()
    )
    r.s0 -= mash(buffer)
    if(r.s0 < 0.0) {r.s0 += 1.0}
    r.s1 -= mash(buffer);
    if(r.s1 < 0.0) {r.s1 +=1.0}
    r.s2 -= mash(buffer);
    if(r.s2 < 0.0) {r.s2 += 1.0}
    r
}

extend self: Random {
    
    copy(): Random {
        self.Random()
    }

    nextInt(from: Int, until: Int): Int {
        Js.binaryOperator("|", self.nextFloat(from.toFloat(), until.toFloat())!, 0)?
    }

    nextFloat(from: Float, until: Float): Float {
        let t = 2091639 * self.s0 + self.c * 2.3283064365386963e-10
        self.s0 = self.s1;
        self.s1 = self.s2;
        self.c = Js.binaryOperator("|", t, 0)?
        let uniform = t - self.c
        self.s2 = uniform
        from + uniform * (until - from)
    }
        
    nextBool(): Bool {
        self.nextInt(0, 2) == 0
    }

    nextBytes(buffer: Buffer, start: Int, stop: Int): Unit {
        start.until(stop).each {i =>
            buffer.setUint8(i, self.nextInt(0, 256))
        }
    }

    nextGauss(mean: Float, standardDeviation: Float): Float {
        if(!self.spareGauss.isNan()) {
            let result = self.spareGauss * standardDeviation + mean
            self.spareGauss = Float.nan()
            result
        } else {
            mutable u = 0.5
            mutable v = 0.5
            mutable s = 0.5
            doWhile {
                u = self.nextFloat(0.0, 1.0) * 2 - 1
                v = self.nextFloat(0.0, 1.0) * 2 - 1
                s = u * u + v * v
                s >= 1.0 || s == 0.0
            }
            s = (-2.0 * s.ln() / s).sqrt()
            self.spareGauss = v * s
            mean + standardDeviation * u * s
        }
    }

    shuffleArray[T](array: Array[T]): Unit {
        0.until(array.size() - 1).each {i =>
            let j = self.nextInt(0, array.size() - i) + i
            let value = array.grab(i)
            array.set(i, array.grab(j))
            array.set(j, value)
        }
    }
    
    shuffleList[T](list: List[T]): List[T] {
        let array = list.toArray()
        self.shuffleArray(list.toArray())
        array.drain()
    }

    sampleArray[T](count: Int, array: Array[T], body: T => Unit): Unit {
        self.shuffleList(array.toList()).takeFirst(count).each {body(_)}
    }

    sampleList[T](count: Int, list: List[T]): List[T] {
        self.shuffleList(list).takeFirst(count)
    }

    grabArray[T](array: Array[T]): T {
        array.grab(self.nextInt(0, array.size()))
    }

    grabList[T](list: List[T]): T {
        list.grab(self.nextInt(0, list.size()))
    }
    
}
