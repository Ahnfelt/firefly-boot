capability WebSocket {}

extend self: WebSocket {
    
    readText(encoding: String = "utf8"): Option[String] {
        self.readAny {_} {_.toString(encoding)}
    }

    readBuffer(): Option[Buffer] {
        self.readAny {_.toBuffer()} {_}
    }
    
    readAny[T](fromText: String => T, fromBuffer: Buffer => T): Option[T]
        target browser async """
            ff_core_Task.Task_throwIfAborted($task);
            while(self_.ffFront.length === 0) {
                while(self_.ffBack.length !== 0) {
                    self_.ffFront.push(self_.ffBack.pop());
                }
                if(self_.ffFront.length !== 0) break;
                if(self_.readyState === 3) return ff_core_Option.None();
                let abort = null;
                try {
                    await new Promise((resolve, reject) => {
                        self_.ffListeners.push(resolve);
                        if($task !== self_.ffTask) {
                            abort = () => {
                                self_.ffListeners = self_.ffListeners.filter(l => l != resolve);
                                reject();
                            };
                            $task.controller.signal.addEventListener('abort', abort);
                        }
                    });
                } finally {
                    if($task !== self_.ffTask) {
                        $task.controller.signal.removeEventListener('abort', abort);
                    }
                }
            }
            const message = self_.ffFront.pop();
            if(!(message instanceof MessageEvent)) throw new Error("WebSocket error");
            const data = message.data;
            if(typeof data === 'string') return ff_core_Option.Some(await fromText_(data));
            return ff_core_Option.Some(await fromBuffer_(new DataView(data)));
        """

    writeBuffer(data: Buffer): Unit
        target browser async """
            ff_core_Task.Task_throwIfAborted($task);
            self_.send(data_);
        """

    writeText(data: String): Unit
        target browser async """
            ff_core_Task.Task_throwIfAborted($task);
            self_.send(data_);
        """
        
    close(code: Int = 1000, reason: String = ""): Unit
        target browser async """
            if(self_.readyState === 2 || self_.readyState === 3) return;
            await new Promise((resolve, reject) => {
                self_.addEventListener('close', resolve);
                self_.close(code_, reason !== "" ? reason : void 0);
            });
            return;
        """

    isOpen(): Bool
        target browser async """
            return self_.readyState === 1;
        """

    isClosing(): Bool
        target browser async """
            return self_.readyState === 2;
        """

    isClosed(): Bool
        target browser async """
            return self_.readyState === 3;
        """

}

internalOpenBrowserWebSocket(browserSystem: BrowserSystem, url: String): WebSocket
    target browser async """
        if(typeof location !== 'undefined' && !url_.includes("://")) {
            if(location.href && location.href.startsWith("http")) {
                url_ = new URL(url_, location.href).href.replace(/^http/, 'ws');
            }
        }
        const socket = new WebSocket(url_);
        socket.binaryType = "arraybuffer";
        socket.ffFront = [];
        socket.ffBack = [];
        socket.ffListeners = [];
        socket.ffTask = $task;
        $task.controller.signal.addEventListener('message', m => socket.ffBack.push(m));
        const abort = () => socket.close();
        try {
            await new Promise((resolve, reject) => {
                socket.onopen = resolve;
                socket.onerror = reject;
                $task.controller.signal.addEventListener('abort', abort);
            });
        } finally {
            socket.onopen = null;
            socket.onerror = null;
        }
        socket.addEventListener('close', () => {
            $task.controller.signal.removeEventListener('abort', abort);
            for(let i = 0; i < socket.ffListeners.length; i++) socket.ffListeners[i]();
            socket.ffListeners.length = 0;
        });
        socket.addEventListener('message', m => {
            socket.ffBack.push(m);
            for(let i = 0; i < socket.ffListeners.length; i++) socket.ffListeners[i]();
            socket.ffListeners.length = 0;
        });
        socket.addEventListener('error', e => {
            socket.ffBack.push(e);
            for(let i = 0; i < socket.ffListeners.length; i++) socket.ffListeners[i]();
            socket.ffListeners.length = 0;
        });
        return socket;
    """
