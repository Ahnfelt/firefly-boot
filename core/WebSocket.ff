capability WebSocket {}

// TODO: Listen for $task aborted, make close() blocking

open(browserSystem: BrowserSystem, url: String): WebSocket
    target browser async """
        const socket = new WebSocket(url_);
        socket.binaryType = "arraybuffer";
        await new Promise((resolve, reject) => {
            socket.onopen = resolve;
            socket.onerror = reject;
        });
        socket.onopen = null;
        socket.onerror = null;
        return socket;
    """

extend self: WebSocket {
    
    readText(): String
        target browser async """
            const message = await new Promise((resolve, reject) => {
                self_.onmessage = resolve;
                self_.onerror = reject;
            });
            self_.onmessage = null;
            self_.onerror = null;
            const data = typeof message.data === 'string' 
                ? message.data 
                : new TextDecoder().decode(message.data);
            return data;
        """

    readBuffer(): Buffer
        target browser async """
            const message = await new Promise((resolve, reject) => {
                self_.onmessage = resolve;
                self_.onerror = reject;
            });
            self_.onmessage = null;
            self_.onerror = null;
            const data = typeof message.data === 'string' 
                ? new TextEncoder().encode(message.data).buffer 
                : message.data;
            return new DataView(data);
        """

    readAny[T](fromText: String => T, fromBuffer: Buffer => T): T
        target browser async """
            const message = await new Promise((resolve, reject) => {
                self_.onmessage = resolve;
                self_.onerror = reject;
            });
            self_.onmessage = null;
            self_.onerror = null;
            if(typeof message.data === 'string') return fromText_(message.data); 
            return fromBuffer_(new DataView(data));
        """

    writeBuffer(data: Buffer): Unit
        target browser async """
            self_.send(data_);
        """

    writeText(data: String): Unit
        target browser async """
            self_.send(data_);
        """
        
    close(code: Int = 1000, reason: String = ""): Unit
        target browser async """
            self_.close(code_, reason !== "" ? reason : void 0);
        """

}
