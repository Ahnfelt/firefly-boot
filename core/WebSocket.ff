capability WebSocket {}

extend self: WebSocket {
    
    readText(encoding: String = "utf8"): Option[String] {
        self.readAny {_} {_.toString(encoding)}
    }

    readBuffer(): Option[Buffer] {
        self.readAny {_.toBuffer()} {_}
    }
    
    readAny[T](fromText: String => T, fromBuffer: Buffer => T): Option[T]
        target browser async """
            ff_core_Task.Task_throwIfAborted($task);
            while(self_.ffFront.length === 0) {
                if(self_.ffBack.length !== 0) {
                    const temp = self_.ffFront;
                    self_.ffFront = self_.ffBack;
                    self_.ffFront.reverse();
                    self_.ffBack = temp;
                    break;
                }
                if(self_.readyState === 3) return ff_core_Option.None();
                let callResolve = null;
                let callReject = null;
                const update = () => {if(callResolve) callResolve()};
                const abort = e => {if(callReject) callReject(e)};
                try {
                    await new Promise((resolve, reject) => {
                        callResolve = resolve;
                        callReject = reject;
                        self_.addEventListener('message', update);
                        self_.addEventListener('close', update);
                        self_.addEventListener('error', abort);
                        $task.controller.signal.addEventListener('abort', abort);
                    });
                } finally {
                    callResolve = null;
                    callReject = null;
                    self_.removeEventListener('message', update);
                    self_.removeEventListener('close', update);
                    self_.removeEventListener('error', abort);
                    $task.controller.signal.removeEventListener('abort', abort);
                }
            }
            const data = self_.ffFront.pop().data;
            if(typeof data === 'string') return ff_core_Option.Some(fromText_(data));
            return ff_core_Option.Some(fromBuffer_(new DataView(data)));
        """

    writeBuffer(data: Buffer): Unit
        target browser async """
            ff_core_Task.Task_throwIfAborted($task);
            self_.send(data_);
        """

    writeText(data: String): Unit
        target browser async """
            ff_core_Task.Task_throwIfAborted($task);
            self_.send(data_);
        """
        
    close(code: Int = 1000, reason: String = ""): Unit
        target browser async """
            if(self_.readyState === 2 || self_.readyState === 3) return;
            await new Promise((resolve, reject) => {
                self_.addEventListener('close', resolve);
                self_.close(code_, reason !== "" ? reason : void 0);
            });
            return;
        """

    isOpen(): Bool
        target browser async """
            return self_.readyState === 1;
        """

    isClosing(): Bool
        target browser async """
            return self_.readyState === 2;
        """

    isClosed(): Bool
        target browser async """
            return self_.readyState === 3;
        """

}
