jsSystem(): JsSystem {
    panic("This call should have been eliminated by the compiler")
}

import(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

browserImport(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

dynamicImport(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

await(promise: JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async0[R](body: () => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async1[R](body: (JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async2[R](body: (JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async3[R](body: (JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async4[R](body: (JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async5[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async6[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async7[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async8[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async9[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

throwIfCancelled(): Unit {
    panic("This call should have been eliminated by the compiler")
}

cancelled(): Bool {
    panic("This call should have been eliminated by the compiler")
}

inAsync(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inBrowser(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inNode(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inBuild(): Bool {
    panic("This call should have been eliminated by the compiler")
}

controller(): JsValue {
    panic("This call should have been eliminated by the compiler")
}

setController(controller: JsValue) {
    panic("This call should have been eliminated by the compiler")
}

    
withSignal[T](body: JsValue => T): T {
    let controller = Js.controller()
    try {
        body(controller->signal)
    } finally {
        if(controller->signal->aborted?) {Js.setController(Js->AbortController->())}
    }
}

value[T](value: T): JsValue {
    panic("This call should have been eliminated by the compiler")
}

fromValue[T](value: JsValue): T {
    panic("This call should have been eliminated by the compiler")
}

throw[T](value: JsValue): T {
    panic("This call should have been eliminated by the compiler")
}



globalThis(): JsValue {
    Js.jsSystem().globalThis()
}

get(key: String): JsValue {
    Js.jsSystem().get(key)
}

set[V: IsJsValue](key: String, value: V): Unit {
    Js.jsSystem().set(key, value)
}

increment[V: IsJsValue](key: String, value: V): Unit {
    Js.jsSystem().increment(key, value)
}

decrement[V: IsJsValue](key: String, value: V): Unit {
    Js.jsSystem().decrement(key, value)
}

call0(name: String): JsValue {
    Js.jsSystem().call0(name)
}

call1[A1: IsJsValue](name: String, a1: A1): JsValue {
    Js.jsSystem().call1(name, a1)
}

call2[A1: IsJsValue, A2: IsJsValue](name: String, a1: A1, a2: A2): JsValue {
    Js.jsSystem().call2(name, a1, a2)
}

call3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](name: String, a1: A1, a2: A2, a3: A3): JsValue {
    Js.jsSystem().call3(name, a1, a2, a3)
}

call4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4): JsValue {
    Js.jsSystem().call4(name, a1, a2, a3, a4)
}

call5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue {
    Js.jsSystem().call5(name, a1, a2, a3, a4, a5)
}

call6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue {
    Js.jsSystem().call6(name, a1, a2, a3, a4, a5, a6)
}

call7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue {
    Js.jsSystem().call7(name, a1, a2, a3, a4, a5, a6, a7)
}

call8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue {
    Js.jsSystem().call8(name, a1, a2, a3, a4, a5, a6, a7, a8)
}

call9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue {
    Js.jsSystem().call9(name, a1, a2, a3, a4, a5, a6, a7, a8, a9)
}

parseJson(json: String): JsValue {
    Js.jsSystem().parseJson(json)
}

null(): JsValue {
    Js.jsSystem().null()
}

undefined(): JsValue {
    Js.jsSystem().undefined()
}

orUndefined[T: IsJsValue](value: Option[T]): JsValue {
    value.{
        | None => Js.undefined()
        | Some(v) => v!
    }
}

object(): JsValue {
    Js.jsSystem().object()
}

new0(): JsValue {
    Js.jsSystem().new0()
}

array(values: List[JsValue]): JsValue {
    Js.jsSystem().array(values)
}

json(value: Json): JsValue {
    Js.jsSystem().json(value)
}

function0[R](body: () => R): JsValue {
    Js.jsSystem().function0(body)
}

function1[R](body: JsValue => R): JsValue {
    Js.jsSystem().function1(body)
}

function2[R](body: (JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function2(body)
}

function3[R](body: (JsValue, JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function3(body)
}

function4[R](body: (JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function4(body)
}

function5[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function5(body)
}

function6[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function6(body)
}

function7[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function7(body)
}

function8[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function8(body)
}

function9[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    Js.jsSystem().function9(body)
}
