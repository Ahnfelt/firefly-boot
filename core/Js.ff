// The compiler may decide to access symbols by name instead of going through globalThis

jsSystem(): JsSystem {
    panic("This call should have been eliminated by the compiler")
}

import(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

browserImport(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

dynamicImport(module: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

await(promise: JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async0[R](body: () => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async1[R](body: (JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async2[R](body: (JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async3[R](body: (JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async4[R](body: (JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async5[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async6[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async7[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async8[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

async9[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => JsValue): JsValue {
    panic("This call should have been eliminated by the compiler")
}

inAsync(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inBrowser(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inNode(): Bool {
    panic("This call should have been eliminated by the compiler")
}
    
inBuild(): Bool {
    panic("This call should have been eliminated by the compiler")
}

currentTask(): Task {
    panic("This call should have been eliminated by the compiler")
}

throwIfCancelled(): Unit {
    panic("This call should have been eliminated by the compiler")
}

cancelled(): Bool {
    if(inAsync()) {
        currentTask().controller->signal->aborted?
    } else {
        False
    }
}

controller(): JsValue {
    currentTask().controller
}

setController(controller: JsValue) {
    currentTask().controller = controller
}
    
withSignal[T](body: JsValue => T): T {
    let controller = Js.controller()
    try {
        body(controller->signal)
    } finally {
        if(controller->signal->aborted?) {Js.setController(Js->AbortController->())}
    }
}

awaitCancellablePromise[T](body: (T => Unit, Error => Unit, (Bool => Unit) => Unit) => Unit): T {
    Js.throwIfCancelled()
    Js.await(Js->Promise->(Js->{resolve, reject =>
        mutable settled = False
        let cleanups = Array.new[Bool => Unit]()
        let doResolve: T => Unit = {v => 
            if(!settled) {
                settled = True
                try {
                    cleanups.each {c => c(True)}
                    resolve.callValue1(v!)
                } catchAny {e =>
                    reject.callValue1(e!)
                }
            }
        }
        let doReject: Error => Unit = {v => 
            if(!settled) {
                settled = True
                try {
                    cleanups.each {c => c(False)}
                    reject.callValue1(v!)
                } catchAny {e =>
                    reject.callValue1(e!)
                }            
            }
        }
        let controller = Js.controller()
        let jsDoReject = Js->{_ => doReject(controller->signal->reason?)}
        controller->signal->addEventListener("abort", jsDoReject)
        cleanups.push({_ => controller->signal->removeEventListener("abort", jsDoReject)})
        body(doResolve, doReject, {cleanup => cleanups.push(cleanup)})
    }))?
}

value[T](value: T): JsValue {
    panic("This call should have been eliminated by the compiler")
}

fromValue[T](value: JsValue): T {
    panic("This call should have been eliminated by the compiler")
}

throw[T](value: JsValue): T {
    panic("This call should have been eliminated by the compiler")
}

initializeError[E: HasAnyTag: Show, T](exception: E, error: JsValue): JsValue {
    error->message = Show.show(exception)!
    initializeErrorKeepMessage(exception, error)
}

initializeErrorKeepMessage[E: HasAnyTag, T](exception: E, error: JsValue): JsValue {
    if(inNode()) {
        Js->Object->defineProperty(error, "ffException", Js->(
            value = Any.toAny(exception)!
            enumerable = False
        ))
    } else {
        error->ffException = Any.toAny(exception)!
    }
    error
}

unaryOperator[T1: IsJsValue](operator: String, a1: T1): JsValue {
    panic("This call should have been eliminated by the compiler")
}

binaryOperator[T1: IsJsValue, T2: IsJsValue](operator: String, a1: T1, a2: T2): JsValue {
    panic("This call should have been eliminated by the compiler")
}

shortCircuitingOperator[T1: IsJsValue, T2: IsJsValue](operator: String, a1: T1, a2: () => T2): JsValue {
    panic("This call should have been eliminated by the compiler")
}

rawIdentifier(operator: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}


globalThis(): JsValue {
    panic("This call should have been eliminated by the compiler")
}

get(key: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

set[V: IsJsValue](key: String, value: V): Unit {
    panic("This call should have been eliminated by the compiler")
}

increment[V: IsJsValue](key: String, value: V): Unit {
    panic("This call should have been eliminated by the compiler")
}

decrement[V: IsJsValue](key: String, value: V): Unit {
    panic("This call should have been eliminated by the compiler")
}

call0(name: String): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call1[A1: IsJsValue](name: String, a1: A1): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call2[A1: IsJsValue, A2: IsJsValue](name: String, a1: A1, a2: A2): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](name: String, a1: A1, a2: A2, a3: A3): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue {
    panic("This call should have been eliminated by the compiler")
}

call9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue {
    panic("This call should have been eliminated by the compiler")
}

null(): JsValue {
    panic("This call should have been eliminated by the compiler")
}

undefined(): JsValue {
    panic("This call should have been eliminated by the compiler")
}

orUndefined[T: IsJsValue](value: Option[T]): JsValue {
    value.{
        | None => Js.undefined()
        | Some(v) => v!
    }
}

object(): JsValue {
    panic("This call should have been eliminated by the compiler")
}

new0(): JsValue {
    panic("This call should have been eliminated by the compiler")
}

array(values: List[JsValue]): JsValue {
    values!
}

json(value: Json): JsValue {
    value.jsValue
}

function0[R](body: () => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function1[R](body: JsValue => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function2[R](body: (JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function3[R](body: (JsValue, JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function4[R](body: (JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function5[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function6[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function7[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function8[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}

function9[R](body: (JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue, JsValue) => R): JsValue {
    panic("This call should have been eliminated by the compiler")
}
