type Try[T] {
    Success(value: T)
    Failure(error: Error)
}

make[T](body: () => T): Try[T] {
    try(body)
}

catch[T](body: () => T, catchBody: Error => T): T {
    try {
        body()
    } catchAny { error =>
        catchBody(error)
    } grab()
}

finallyCatch[T](body: () => T, finallyBody: () => Unit, catchBody: Error => T): T {
    try {
        body()
    } finally {
        finallyBody()
    } catchAny { error =>
        catchBody(error)
    } grab()
}

finally[T](body: () => T, finallyBody: () => Unit): T {
    try {
        body()
    } finally {
        finallyBody()
    } grab()
}

extend self[T]: Try[T] {

    map[S](body: T => S): Try[S] {
        self.{
            | Success(value) => try { body(value) }
            | Failure(error) => Failure(error)
        }
    }

    flatMap[S](body: T => Try[S]): Try[S] {
        self.map(body).flatten()
    }

    else(body: () => T): T {
        self.{
            | Success(value) => value
            | Failure(_) => body()
        }
    }

    grab(): T {
        self.{
            | Success(value) => value
            | Failure(error) => error.rethrow()
        }
    }

    /*
    catch[E: Exception](body: (Error, E) => T): Try[T] {
        self.{
            | Failure(error) {error.as[E]() | Some(e)} => try { body(error, e) }
            | _ => self
        }
    }
    */

    catchAny(body: Error => T): Try[T] {
        self.{
            | Failure(error) => try { body(error) }
            | _ => self
        }
    }

    onThrow(body: () => Unit): Try[T] {
        self.{
            | Failure(error) => try { body() }; self
            | _ => self
        }
    }

    finally(body: () => Unit): Try[T] {
        self.{
            | Success(value) => try { body(); value }
            | Failure(_) =>
                try { body() }.{
                    | Success(_) => self
                    | Failure(error) => Failure(error)
                }
        }
    }

}

extend self[T]: Try[Try[T]] {

    flatten(): Try[T] {
        self.{
            | Success(Success(_)@t) => t
            | Success(Failure(_)@t) => t
            | Failure(error) => Failure(error)
        }
    }

}
