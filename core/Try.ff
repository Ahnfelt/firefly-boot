data Try[T] {
    Success(value: T)
    Failure(error: Error)
}

extend self[T]: Try[T] {

    map[S](body: T => S): Try[S] {
        self.{
            | Success(value) => try {body(value)}
            | Failure(error) => Failure(error)
        }
    }

    flatMap[S](body: T => Try[S]): Try[S] {
        self.map(body).flatten()
    }

    catch[E: HasAnyTag](body: (E, Error) => T): T {
        self.{
            | Failure(error) {error.exception().flatMap(Any.fromAny) | Some(e)} => body(e, error)
            | _ => self.grab()
        }
    }

    catchAny(body: Error => T): T {
        self.{
            | Failure(error) => body(error)
            | _ => self.grab()
        }
    }

    finally(body: () => Unit): T {
        self.{
            | Success(value) => body(); value
            | Failure(_) => body(); self.grab()
        }
    }

    tryCatch[E: HasAnyTag](body: (E, Error) => T): Try[T] {
        self.{
            | Failure(error) {error.exception().flatMap(Any.fromAny) | Some(e)} => try {body(e, error)}
            | _ => self
        }
    }

    tryCatchAny(body: Error => T): Try[T] {
        self.{
            | Failure(error) => try {body(error)}
            | _ => self
        }
    }

    tryFinally(body: () => Unit): Try[T] {
        self.{
            | Success(value) => try {body(); value}
            | Failure(_) =>
                try {body()}.{
                    | Success(_) => self
                    | Failure(error) => Failure(error)
                }
        }
    }
    
    else(body: () => T): T {
        self.{
            | Success(value) => value
            | Failure(_) => body()
        }
    }

    grab(): T {
        self.{
            | Success(value) => value
            | Failure(error) => error.rethrow()
        }
    }

    toOption(): Option[T] {
        self.{
            | Success(value) => Some(value)
            | Failure(_) => None
        }
    }

}

extend self[T]: Try[Try[T]] {

    flatten(): Try[T] {
        self.{
            | Success(Success(_)@t) => t
            | Success(Failure(_)@t) => t
            | Failure(error) => Failure(error)
        }
    }

}

internalThrowGrabException[T](): T {
    throw(GrabException())
}
