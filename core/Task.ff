capability Task(
    mutable controller: JsValue
    subtasks: JsValue
    mutable promise: JsValue
    started: Duration
)

extend self: Task {

    // Spawns a task running body. The return value as well as the argument to body is the task handle.
    // Automatically aborts and then joins subtasks when body returns or throws an unhandled exception.
    // If body throws, the parent task is also aborted with the dueToSubtask flag set to true.
    spawn(body: Task => Unit): Task {
        self.throwIfAborted()
        let task = Task(
            controller = Js->AbortController->()
            subtasks = Js->Set->()
            promise = Js.undefined()
            started = Duration(Js->performance->now()? * 0.001)
        )
        self.subtasks->add(task!)
        task.promise = Js->Promise->resolve(task!)->then(Js.async0 {
            try {
                Js.await(body!.callValue2(task!, task!))
            } tryCatchAny {e => 
                Js.await(self.controller->abort())
                e.rethrow()
            } finally {
                task.subtasks.each {subtask => 
                    Js.fromValue[Task](subtask).controller->abort()
                }
                Js.await(Js->Promise->allSettled(
                    task.subtasks.spreadToArray().map {subtask => 
                        Js.fromValue[Task](subtask).promise
                    }                    
                ))
                self.subtasks->delete(task!)
            }
        })
        task
    }

    // If the aborted flag is set for the current task, clears it and throws TaskAbortedException.
    // You don't normally need to call this, but you might want to before doing an expensive computation.
    throwIfAborted(): Unit {
        let signal = self.controller->signal
        if(signal->aborted?) {
            self.controller = Js->AbortController->()
            signal->throwIfAborted()
        }
    }

    // Sets the tasks aborted flag, which causes the ongoing/next async call to throw TaskAbortedException.
    abort(): Unit {
        self.controller->abort()
    }
    
    // Create a blocking channel with the specified capacity. The channel is not tied to the task.
    channel[T](capacity: Int = 0): Channel[T] {
        Js->(
            capacity = capacity
            buffer = []
            readers = Js->Set->()
            writers = Js->Set->()
        )?
    }

    // Create a mutex. The mutex is not tied to the task.
    lock(): Lock {
        Js->(
            owner = Js.null()
            level = 0
            stack = []
            queue = []
        )?
    }
    
    now(): Instant {
        Instant(Duration(Js->Date->now()? * 0.001))
    }
    
    elapsed(): Duration {
        let now = Js->performance->now()? * 0.001
        Duration(now - self.started.seconds)
    }

    time[R](body: () => R): Pair[R, Duration] {
        let start = self.elapsed()
        let result = body()
        let stop = self.elapsed()
        let duration = Duration(stop.seconds - start.seconds)
        Pair(result, duration)
    }

}

// Convenience methods
extend self: Task {

    sleep(duration: Duration): Unit {
        Channel.
            readOr(self.channel()) {_ => }.
            timeout(duration) {}
    }
    
    mapList[T, R](list: List[T], body: T => R): List[R] {
        self.all(list.map {x => {body(x)}})
    }
    
    raceList[T, R](list: List[T], body: T => R): R {
        self.race(list.map {x => {body(x)}})
    }

    all[T](tasks: List[() => T]): List[T] {
        let successChannel = self.channel()
        let failureChannel = self.channel()
        self.spawn {t =>
            let channel = t.channel()
            try {
                tasks.pairs().each {| Pair(i, task) =>
                    t.spawn {_ =>
                        channel.write(Pair(i, task()))
                    }
                }
                let result = tasks.map {_ =>
                    channel.read()
                }.sortBy {_.first}.map {_.second}
                successChannel.write(result)
            } catchAny {error =>
                failureChannel.write(error)
                t.abort()
            }
        }
        Channel.
            readOr(successChannel, {_}).
            readOr(failureChannel, {_.rethrow()}).
            wait()
    }

    race[T](tasks: List[() => T]): T {
        let successChannel = self.channel()
        let failureChannel = self.channel()
        mutable live = tasks.size()
        let started = tasks.map {task =>
            self.spawn {_ =>
                try {
                    successChannel.write(task())
                } catchAny {e =>
                    live -= 1 // Not thread safe (but OK in JS)
                    if(live == 0) {
                        failureChannel.write(e)
                    }
                }
            }
        }
        try {
            Channel.
                readOr(successChannel, {_}).
                readOr(failureChannel, {_.rethrow()}).
                wait()
        } finally {
            started.each {_.abort()}
        }
    }
            
}
