extend TaskSystem {
    // Spawns a task running body, which takes in functions to synchronously receive and send messages.
    // Automatically aborts and then joins subtasks when body returns or throws an unhandled exception.
    // If body throws, the parent task is also aborted with the dueToSubtask flag set to true.
    spawn[I, O](body: (() => I, O => Unit) => R): Task[I, O]
    // If the aborted flag is set for the current task, clears it and throws TaskAbortedException.
    throwIfAborted(): Unit
}

extend Task[I, O] {
    // Synchronously sends a message to the task, waiting until the tasks recieves it.
    send(message: I): Unit
    // Synchronously receives a message from the task, waiting until the tasks sends it.
    receive(): O
    // Sets the aborted flag, which causes ongoing/next async call to throw TaskAbortedException.
    // Returns once the has stopped running.
    abort(): Unit
}

data TaskAbortedException(dueToSubtask: Boolean)
