extend TaskSystem {
    // Spawn takes in an synchronous function to receive messages.
    // Automatically aborts and then joins subtasks when body returns or throws an unhandled exception.
    // If body throws, the parent task is also aborted with the dueToSubtask flag set to true.
    spawn[T](body: (() => T) => Unit): Task[T]
    // If the aborted flag is set for the current task, clears it and throws TaskAbortedException
    throwIfAborted(): Unit
}

extend Task[T] {
    // Synchronously sends a message to the task, waiting until the tasks recieves it.
    send(message: T): Unit
    // Sets the aborted flag, which causes ongoing/next async call to throw TaskAbortedException
    abort(): Unit
    // Waits until the task is no longer running (returns True), or the duration passes (returns False)
    join(duration: Option[Duration] = None): Boolean
}

data TaskAbortedException(dueToSubtask: Boolean)
