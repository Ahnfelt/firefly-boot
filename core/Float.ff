data Float {}

extend self: Float {

    toInt(): Int {
        Js->Math->trunc(self).coalesce(0)?
    }

    round(): Float {
        Js->Math->round(self)?
    }

    floor(): Float {
        Js->Math->floor(self)?
    }

    ceil(): Float {
        Js->Math->ceil(self)?
    }

    truncate(): Float {
        Js->Math->trunc(self)?
    }

    sign(): Float {
        Js->Math->sign(self)?
    }

    abs(): Float {
        Js->Math->abs(self)?
    }

    toFixed(digits: Int): String {
        self!->toFixed(digits)?
    }

    min(that: Float): Float  {
        Js->Math->min(self, that)?
    }

    max(that: Float): Float {
        Js->Math->max(self, that)?
    }

    clamp(from: Float, to: Float): Float {
        Js->Math->min(Js->Math->max(self, from), to)?
    }
    
    lerp(that: Float, factor: Float): Float {
        self + factor * (that - self)
    }
    
    smoothstep(that: Float, factor: Float): Float {
        let t = ((factor - self) / (that - self)).clamp(0.0, 1.0)
        t * t * (3.0 - 2.0 * t)
    }
    
    expDecay(that: Float, decay: Float, factor: Float): Float {
        that + (self - that) * (-decay * factor).exp()
    }
    
    acos(): Float {
        Js->Math->acos(self)?
    }
        
    acosh(): Float {
        Js->Math->acosh(self)?
    }
        
    asin(): Float {
        Js->Math->asin(self)?
    }
        
    asinh(): Float {
        Js->Math->asinh(self)?
    }
        
    atan(): Float {
        Js->Math->atan(self)?
    }
        
    atan2(that: Float): Float {
        Js->Math->atan2(self, that)?
    }
        
    atanh(): Float {
        Js->Math->atanh(self)?
    }
        
    cbrt(): Float {
        Js->Math->cbrt(self)?
    }
        
    cos(): Float {
        Js->Math->cos(self)?
    }
        
    cosh(): Float {
        Js->Math->cosh(self)?
    }
        
    exp(): Float {
        Js->Math->exp(self)?
    }
        
    expm1(): Float {
        Js->Math->expm1(self)?
    }
        
    log(that: Float): Float {
        let l: Float = Js->Math->log2(self)?
        l / Js->Math->log2(that)?
    }
        
    log10(): Float {
        Js->Math->log10(self)?
    }
        
    log2(): Float {
        Js->Math->log2(self)?
    }
        
    ln(): Float {
        Js->Math->ln(self)?
    }
        
    ln1p(): Float {
        Js->Math->log1p(self)?
    }

    sin(): Float {
        Js->Math->sin(self)?
    }
        
    sinh(): Float {
        Js->Math->sinh(self)?
    }
        
    sqrt(): Float {
        Js->Math->sqrt(self)?
    }
        
    tan(): Float {
        Js->Math->tan(self)?
    }
        
    tanh(): Float {
        Js->Math->tanh(self)?
    }
        
    isFinite(): Bool {
        Js->Number->isFinite(self)?
    }
        
    isNan(): Bool {
        Js->Number->isNaN(self)?
    }

    isSafeInteger(): Bool {
        Js->Number->isSafeInteger(self)?
    }

}

hypot(a: Float, b: Float, c: Float = 0.0, d: Float = 0.0) {
    Js->Math->hypot(a, b, c, d)?
}

e(): Float {
    Js->Math->E?
}

ln10(): Float {
    Js->Math->LN10?
}

ln2(): Float {
    Js->Math->LN2?
}

log10e(): Float {
    Js->Math->LOG10E?
}

log2e(): Float {
    Js->Math->LOG2E?
}

pi(): Float {
    Js->Math->PI?
}

sqrtHalf(): Float {
    Js->Math->"SQRT1_2"?
}

sqrt2(): Float {
    Js->Math->SQRT2?
}

nan(): Float {
    Js->NaN?
}

infinity(): Float {
    Js->Infinity?
}
