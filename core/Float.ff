type Float {}

extend self: Float {

    toInt(): Int
        target js sync "return Math.trunc(Math.abs(self_))"

    round(): Float
        target js sync "return Math.round(self_)"

    floor(): Float
        target js sync "return Math.floor(self_)"

    ceil(): Float
        target js sync "return Math.ceil(self_)"

    truncate(): Float
        target js sync "return Math.trunc(self_)"

    sign(): Float
        target js sync "return Math.sign(self_)"

    abs(): Float
        target js sync "return Math.abs(self_)"

    toFixed(digits: Int): String
        target js sync "return self_.toFixed(digits_)"

    min(that: Float): Float {
        if(self < that) {self} else {that}
    }

    max(that: Float): Float {
        if(self > that) {self} else {that}
    }

    clamp(from: Float, to: Float): Float {
        if(self <= from) {from} elseIf {self >= to} {to} else {self}
    }

}
