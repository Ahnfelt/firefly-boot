if[T](condition: Bool, body: () => T): Option[T] {
    condition.{
        | False => None
        | True => Some(body())
    }
}

while(condition: () => Bool, body: () => Unit): Unit {
    condition().{
        | False =>
        | True =>
            body()
            tailcall while(condition, body)
    }
}

try[T](body: () => T): Try[T] { panic("magic") }

do[T](body: () => T): T {
    body()
}

panic[T](message: String): T { panic("magic") }

magicInstance[T](typeName: String): T { panic("magic") }
magicShow[T](value: T): String { panic("magic") }
magicHashCode[T](value: T): Int { panic("magic") }
magicLess[T](x: T, y: T): Bool { panic("magic") }

arrayBuilderOf[T](): ArrayBuilder[T] { panic("magic") } // (items: T...)
setOf[T](): Set[T] { panic("magic") } // (items: T...)
mapOf[K, V](): Map[K, V] { panic("magic") } // (items: T...)

log: Log = panic("magic")

pipeDot(): Unit {} scala "}; def pipe_dot[A, B](value : A)(function : A => B) : B = { function(value)" // hack
