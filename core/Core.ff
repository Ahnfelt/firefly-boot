if[T](condition: Bool, body: () => T): Option[T] {
    condition.{
        | False => None
        | True => Some(body())
    }
}

while(condition: () => Bool, body: () => Unit): Unit {
    condition().{
        | False =>
        | True =>
            body()
            tailcall while(condition, body)
    }
}

doWhile(body: () => Bool): Unit {
    while {body()} {}
}

doUntil[T](body: () => Option[T]): T {
    body().{
        | Some(v) => v
        | None => tailcall doUntil(body)
    }
}

do[T](body: () => T): T {
    body()
}

try[T](body: () => T): Try[T] {
    // Special cased by the compiler
    try {
        Success(body())
    } catchAny {e =>
        Failure(e)
    }
}

throw[E: HasAnyTag, T](exception: E): T {
    throwAny(Any.toAny(exception))
}

throwAny[T](exception: Any): T
    target js sync "throw Object.assign(new Error(), {ffException: exception_})"

panic[T](message: String): T
    target js sync "throw new Error(message_)"

data GrabException()
