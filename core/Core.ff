if[T](condition: Bool, body: () => T): Option[T] {}

while(condition: () => Bool, body: () => Unit): Unit {}

do[T](body: () => T): T {}

panic[T](message: String): T {}

magicShow[T](value: T): String { panic("Built-in") }

magicHashCode[T](value: T): Int { panic("Built-in") }

try[T](body: () => T): Try[T] {}

type Try[T] {}

extend self[T]: Try[T] {
    else(body: () => T): T {}
}

log: Log = 1

type Log {}

extend self: Log {
    debug[T](value: T): Unit {}
}

type Bool {
    False
    True
}

type Option[T] {
    None
    Some(value: T)
}

type Pair[A, B](first: A, second: B)

type Array[T]() // (items: T...)

type ArrayBuilder[T]() // (items: T...)

extend self[T]: ArrayBuilder[T] {
    getArray(): Array[T] { panic("Built-in") }
}

type List[T] {}

type ListBuilder[T]() // (items: T...)

extend self[T]: ListBuilder[T] {
    append(value: T): Unit { panic("Built-in") }
    drain(): List[T] { panic("Built-in") }
}


listBuilderOf[T](): ListBuilder[T] {} // (items: T...)

type Map[K, V]() // (items: Pair[K, V]...)

type MapBuilder[K, V]() // (items: Pair[K, V]...)

type Set[T]() // (items: T...)

type SetBuilder[T]() // (items: T...)

type Int {}
type String {}
type Char {}
type Bool {}
type System {}
type FileSystem {}
type Unit()

extend self: Int {
    getTo(inclusive: Int): List[Int] { panic("Built-in") }
    getUntil(exclusive: Int): List[Int] { panic("Built-in") }
    getAbs(): Int { panic("Built-in") }
}

extend self: String {
    getSize(): Int { panic("Built-in") }
    expect(index: Int): Char { panic("Built-in") }
    replace(needle: String, replacement: String): String { panic("Built-in") }
    replaceFirst(needle: String, replacement: String): String { panic("Built-in") }
    replace(needle: String, replacement: String): String { panic("Built-in") }
    getReverse(): String { panic("Built-in") }
    takeWhile(p: Char => Bool): String { panic("Built-in") }
    slice(from: Int, until: Int): String { panic("Built-in") }
    sliceEquals(offset: Int, that: String, thatOffset: Int, length: Int, ignoreCase: Bool = False): Bool { panic("Built-in") }
    split(char: Char): Array[String] { panic("Built-in") }
    drop(count: Int = 1): String { panic("Built-in") }
    dropLast(count: Int = 1): String { panic("Built-in") }
    expectInt(): Int { panic("Built-in") }
    first(): Option[Char] { panic("Built-in") }
    last(): Option[Char] { panic("Built-in") }
    expectFirst(): Char { panic("Built-in") }
    expectLast(): Char { panic("Built-in") }
    getIsLetter(): Bool { panic("Built-in") }
    contains(substring : String) : Bool { panic("Built-in") }
    startsWith(prefix : String) : Bool { panic("Built-in") }
}

extend self: Char {
    getIsLetter(): Bool { panic("Built-in") }
}

extend self[T]: Option[T] {
    else(body: () => T): T { panic("Built-in") }
    elseIf(condition: () => Bool, body: () => T): Option[T] { panic("Built-in") }
    getElse(body: () => Option[T]): Option[T] { panic("Built-in") }
    getEmpty(): Bool { panic("Built-in") }
    getList(): List[T] { panic("Built-in") }
    filter(body: T => Bool): Option[T] { panic("Built-in") }
    map[R](body: T => R): Option[R] { panic("Built-in") }
    flatMap[R](body: T => Option[R]): Option[R] { panic("Built-in") }
    getOrElse(fallback : T) : T { panic("Built-in") }
    each(body: T => Unit): Unit { panic("Built-in") }
    all(body: T => Bool): Bool { panic("Built-in") }
    any(body: T => Bool): Bool { panic("Built-in") }
    expect(): T { panic("Built-in") }
    contains(value: T): Bool { panic("Built-in") }
}

extend self[T]: List[T] {
    getArray(): Array[T] { panic("Built-in") }
    getSet(): Set[T] { panic("Built-in") }
    expect(index: Int): T { panic("Built-in") }
    first(): Option[T] { panic("Built-in") }
    last(): Option[T] { panic("Built-in") }
    expectFirst(): T { panic("Built-in") }
    expectLast(): T { panic("Built-in") }
    exists(p: T => Bool): Bool { panic("Built-in") }
    dropFirst(count: Int = 1): List[T] { panic("Built-in") }
    dropLast(count: Int = 1): List[T] { panic("Built-in") }
    modify(index: Int, body: T => T): List[T] { panic("Built-in") }
    pairs(): List[Pair[Int, T]] { panic("Built-in") }
    slice(from: Int, until: Int): List[T] { panic("Built-in") }
    getEmpty(): Bool { panic("Built-in") }
    getSize(): Int { panic("Built-in") }
    each(body: T => Unit): Unit { panic("Built-in") }
    all(body: T => Bool): Bool { panic("Built-in") }
    any(body: T => Bool): Bool { panic("Built-in") }
    find(body: T => Bool): Option[T] { panic("Built-in") }
    filter(body: T => Bool): List[T] { panic("Built-in") }
    map[R](body: T => R): List[R] { panic("Built-in") }
    flatMap[R](body: T => List[R]): List[R] { panic("Built-in") }
    getCollect[R](body: T => Option[R]): List[R] { panic("Built-in") }
    getCollectFirst[R](body: T => Option[R]): Option[R] { panic("Built-in") }
    foldLeft[R](initial: R): ((R, T) => R) => R { panic("Built-in") }
    updated(index: Int, value: T): List[T] { panic("Built-in") }
    zip[S](list: List[S]): List[Pair[T, S]] { panic("Built-in") }
    sortBy(extract: T => String): List[T] { panic("Built-in") } // TODO generalize
}

extend self[T]: List[List[T]] {
    getFlatten(): List[T] { panic("Built-in") }
}

extend self[K, V]: List[Pair[K, V]] {
    getMap(): Map[K, V] { panic("Built-in") }
    getUnzip(): Pair[List[K], List[V]] { panic("Built-in") }
}

extend self: List[String] {
    join(separator: String = ""): String { panic("Built-in") }
}

extend self[K, V]: Map[K, V] {
    pairs(): List[Pair[K, V]] { panic("Built-in") }
    getSize(): Int { panic("Built-in") }
    get(key: K): Option[V] { panic("Built-in") }
    expect(key: K): V { panic("Built-in") }
    add(key: K, value: V) : Map[K, V] { panic("Built-in") }
    map[K1, V1](body: Pair[K, V] => Pair[K1, V1]): Map[K1, V1] { panic("Built-in") }
    contains(key: K): Bool { panic("Built-in") }
}

extend self[K]: Set[K] {
    contains(key: K): Bool { panic("Built-in") }
}

extend self[T]: Array[T] {
    getEmpty(): Bool { panic("Built-in") }
    getSize(): Int { panic("Built-in") }
    expect(index: Int): T { panic("Built-in") }
    expectFirst(): T { panic("Built-in") }
    expectLast(): T { panic("Built-in") }
    drop(count: Int = 1): Array[T] { panic("Built-in") }
    getList(): List[T] { panic("Built-in") }
}

extend self[T]: SetBuilder[T] {
    add(value: T): Unit { panic("Built-in") }
    each(body: T => Unit): Unit { panic("Built-in") }
    all(body: T => Bool): Bool { panic("Built-in") }
    any(body: T => Bool): Bool { panic("Built-in") }
    getSize(): Int { panic("Built-in") }
}

extend self: System {
    arguments(): List[String] { panic("Built-in") }
    files(): FileSystem { panic("Built-in") }
}

extend self: FileSystem {
    readText(file: String): String { panic("Built-in") }
    writeText(file: String, text: String): Unit { panic("Built-in") }
    list(path: String): List[String] { panic("Built-in") }
    exists(path: String): Bool { panic("Built-in") }
    isDirectory(path: String): Bool { panic("Built-in") }
    createDirectory(path: String): Unit { panic("Built-in") }
    createDirectories(path: String): Unit { panic("Built-in") }
    delete(path: String): Unit { panic("Built-in") }
    rename(fromPath: String, toPath: String): Unit { panic("Built-in") }
    getAbsolutePath(path: String): String { panic("Built-in") }
    directoryName(path: String): String { panic("Built-in") }
    baseName(path: String): String { panic("Built-in") }
    prefixName(path: String): String { panic("Built-in") }
    suffixName(path: String): String { panic("Built-in") }
}
