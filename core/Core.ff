if[T](condition: Bool, body: () => T): Option[T] {
    condition.{
        | False => None
        | True => Some(body())
    }
}

while(condition: () => Bool, body: () => Unit): Unit {
    condition().{
        | False =>
        | True =>
            body()
            tailcall while(condition, body)
    }
}

try[T](body: () => T): Try[T] { panic("magic") }
    javascript """
        try {
            return {Success: true, value_: body_()}
        } catch(e) {
            return {Failure: true, exception_: e.message}
        }
    """

do[T](body: () => T): T {
    body()
}

panic[T](message: String): T { panic("magic") }
    javascript "throw new Error(message_)"

magicShow[T](value: T): String { panic("magic") }
    javascript "return JSON.stringify(value_)"

magicLess[T](x: T, y: T): Bool { panic("magic") }
    javascript "return x_ < y_"
