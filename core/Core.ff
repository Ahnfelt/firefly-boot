if[T](condition: Bool, body: () => T): Option[T] {
    condition.{
        | False => None
        | True => Some(body())
    }
}

while(condition: () => Bool, body: () => Unit): Unit {
    condition().{
        | False =>
        | True =>
            body()
            tailcall while(condition, body)
    }
}

doWhile(body: () => Bool): Unit {
    while {body()} {}
}

doUntil[T](body: () => Option[T]): T {
    body().{
        | Some(v) => v
        | None => tailcall doUntil(body)
    }
}

do[T](body: () => T): T {
    body()
}

try[T](body: () => T): Try[T]
    target js sync """
        try {
            return {Success: true, value_: body_()}
        } catch(e) {
            return {Failure: true, error_: e}
        }
    """
    target js async """
        try {
            return {Success: true, value_: await body_($c)}
        } catch(e) {
            return {Failure: true, error_: e}
        }
    """

throw[E, T](error: E): T
    target js sync "throw error_"

panic[T](message: String): T
    target js sync "throw new Error(message_)"

magicShow[T](value: T): String
    //target js sync "return ('' + value_)"
    target js sync "return JSON.stringify(value_, undefined, 4)"
