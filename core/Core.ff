if[T](condition: Bool, body: () => T): Option[T] {
    condition.{
        | False => None
        | True => Some(body())
    }
}

while(condition: () => Bool, body: () => Unit): Unit {
    condition().{
        | False =>
        | True =>
            body()
            tailcall while(condition, body)
    }
}

try[T](body: () => T): Try[T] { panic("magic") }
    javascript """
        try {
            return {Success: true, value_: body_()}
        } catch(e) {
            return {Failure: true, error_: e}
        }
    """

do[T](body: () => T): T {
    body()
}

panic[T](message: String): T { panic("magic") }
    javascript "throw new Error(message_)"

magicShow[T: Show](value: T): String { panic("magic") }
    //javascript "return ('' + value_)"
    javascript "return JSON.stringify(value_, undefined, 4)"

magicLess[T](x: T, y: T): Bool { panic("magic") }
    javascript "return x_ < y_"


trait Show[T] {
    show(value: T): String
}

instance Show[Char] {
    show(value: Char): String { value.toString() }
}

instance Show[Int] {
    show(value: Int): String { value.toString() }
}

instance Show[List[T: Show]] {
    show(value: Int): String { value.toString() }
}

foobar() {
    magicShow([42])
}

