newtype Set[T](map: Map[T, Unit])

new[T](): Set[T] {
    Set(Map.new())
}

extend self[T: Order]: Set[T] {
    add(value: T): Set[T] {Set(self.map.add(value, Unit))}
    addAll(that: Set[T]): Set[T] {Set(self.map.addAll(that.map))}
    addList(that: List[T]): Set[T] {
        mutable result = self.map
        that.each {k =>
            result = result.add(k, Unit)
        }
        Set(result)        
    }
    remove(value: T): Set[T] {Set(self.map.remove(value))}
    removeAll(that: Set[T]): Set[T] {Set(self.map.removeAll(that.map))}
    contains(value: T): Bool {self.map.contains(value)}
    first(): Option[T] {self.map.first().map {_.first}}
    last(): Option[T] {self.map.last().map {_.first}}
    lastBefore(key: T): Option[T] {self.map.lastBefore(key).map {_.first}}
    firstAfter(key: T): Option[T] {self.map.firstAfter(key).map {_.first}}
    size(): Int {self.map.size()}
    toList(): List[T] {self.map.toList().map {_.first}}
    toStream(cycle: Bool = False): Stream[T] {self.map.toStream(cycle).map {_.first }}
    each(body: T => Unit): Unit {self.map.each {| k, _ => body(k)}}
    eachWhile(body: T => Bool): Bool {self.map.eachWhile {| k, _ => body(k)}}
    find(body: T => Bool): Option[T] {self.map.find {| k, _ => body(k)}.map {_.first}}
}

instance Set[A: Equal: Order]: Equal {
    equals(x: Set[A], y: Set[A]): Bool {
        Equal.equals(x.toList(), y.toList())
    }
}

instance Set[A: Order]: Order {
    compare(x: Set[A], y: Set[A]): Ordering {
        Ordering.compare(x.toList(), y.toList())
    }
}

instance Set[A: Show: Order]: Show {
    show(value: Set[A]): String {
        Show.show(value.toList()) + ".toSet()"
    }
}
