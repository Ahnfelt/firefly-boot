newtype SourceLocation(location: String) // E.g. "directory/Module:line:column,group,package>Type>function"

here(location: SourceLocation = SourceLocation.callSite()): SourceLocation {
    location
}

callSite(): SourceLocation {
    panic("SourceLocation.callSite() can only occur as the default value of an argument")
}

extend self: SourceLocation {

    group(): String {
        self.location.dropWhile {_ != ','}.dropFirst().takeWhile {_ != ','}
    }
    
    package(): String {
        self.location.dropWhile {_ != ','}.dropFirst().dropWhile {_ != ','}.dropFirst().takeWhile {_ != '>'}
    }
    
    directory(): String {
        self.location.takeWhile {_ != ':'}.reverse().dropWhile {_ != '/'}.dropFirst().reverse()
    }

    module(): String {
        self.location.takeWhile {_ != ':'}.reverse().takeWhile {_ != '/'}.reverse()
    }
    
    directoryAndModule(): String {
        self.location.takeWhile {_ != ':'}.reverse().reverse()
    }

    line(): Int {
        self.location.dropWhile {_ != ':'}.dropFirst().takeWhile {_ != ':'}.grabInt()
    }

    column(): Int {
        self.location.dropWhile {_ != ':'}.dropFirst().dropWhile {_ != ':'}.dropFirst().takeWhile {_ != ','}.grabInt()
    }
    
    breadcrumbs(): List[String] {
        self.location.dropWhile {_ != '>'}.dropFirst().split('>')
    }

}

instance SourceLocation: Show {
    show(self: SourceLocation): String {
        self.location
    }
}

instance SourceLocation: Equal {
    equals(a: SourceLocation, b: SourceLocation): Bool {
        a.location == b.location
    }
}

instance SourceLocation: Order {
    compare(a: SourceLocation, b: SourceLocation): Ordering {
        Ordering.compare(a.location, b.location)
    }
}

instance SourceLocation: Serializable {
    serializeUsing(serialization: Serialization, self: SourceLocation) {
        Serializable.serializeUsing(serialization, self.location)
    }
    deserializeUsing(serialization: Serialization): SourceLocation {
        SourceLocation(Serializable.deserializeUsing(serialization))
    }
}
