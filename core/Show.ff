trait T: Show {
    show(value: T): String
}

instance Bool: Show {
    show(value: Bool): String {
        | False => "False"
        | True => "True"
    }
}

instance Char: Show {
    show(value: Char): String { value.toString() }
}

instance Int: Show {
    show(value: Int): String { "" + value }
}

instance String: Show {
    show(value: String): String { panic("magic") }
        javascript "return JSON.stringify(value_);"
}

instance List[T: Show]: Show {
    show(value: List[T]): String {
        "[" + value.map(show).join(", ") + "]"
    }
}

baz[T: Show](value: T): String {
    show(value)
}

foobar(): String {
    baz([42])
}

type Tree[T] {
    Branch(left: Tree[T], right: Tree[T])
    Leaf(value: T)
}

instance Tree[T: Show]: Show {
    show(value: Tree[T]): String {
        | Branch(l, r) => "Branch(" + show(l) + ", " + show(r) + ")"
        | Leaf(v) => "Leaf(" + show(v) + ")"
    }
}

quux(): String {
    show(Branch(Branch(Leaf(7), Leaf(8)), Leaf(9)))
}
