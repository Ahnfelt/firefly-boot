class JsValue {}

extend self: JsValue {

    grabString(): String {
        if(!self.isString()) {throw(GrabException)}
        self?
    }

    grabChar(): Char {
        if(!self.isChar()) {throw(GrabException)}
        self?
    }

    grabInt(): Int {
        if(!self.isInt()) {throw(GrabException)}
        self?
    }

    grabFloat(): Float {
        if(!self.isFloat()) {throw(GrabException)}
        self?
    }

    grabBool(): Bool {
        if(!self.isBool()) {throw(GrabException)}
        self?
    }

    grabArray(): List[JsValue] {
        if(!self.isArray()) {throw(GrabException)}
        self?
    }

    grabBuffer(): Buffer {
        if(!self.isBuffer()) {throw(GrabException)}
        self?
    }
        
    grabJson(): Json {
        self? // Should check first
    }

    equals[V: IsJsValue](value: V): Bool {
        self === value
    }

    notEquals[V: IsJsValue](value: V): Bool {
        self !== value
    }

    isString(): Bool {
        self.typeof() == "string"
    }
    
    isChar(): Bool {
        Js->Number->isInteger(self)? && 
        Js->Math->abs(self)? <= Js->Number->"MAX_SAFE_INTEGER"? &&
        self? >= 0 && 
        self? < 1114112
    }
    
    isInt(): Bool {
        Js->Number->isInteger(self)? && 
        Js->Math->abs(self)? <= Js->Number->"MAX_SAFE_INTEGER"?
    }

    isFloat(): Bool {
        self.typeof() == "number"
    }

    isBool(): Bool {
        self.typeof() == "boolean"
    }

    isArray(): Bool {
        Js->Array->isArray(self)?
    }

    isObject(): Bool {
        !self.isNull() && self.typeof() == "object"
    }

    isFunction(): Bool {
        self.typeof() == "function"
    }
    
    isBuffer(): Bool {
        self.instanceof(Js->DataView)
    }

    isNull(): Bool {
        self === Js.null()
    }

    isUndefined(): Bool {
        self === Js.undefined()
    }

    isNullOrUndefined(): Bool {
        self.isNull() || self.isUndefined()
    }

    isNan(): Bool {
        self.typeof() == "number" && self !== self
    }

    isFinite(): Bool {
        self.typeof() == "number" && Js->isFinite(self)?
    }

    get[K: IsJsValue](key: K): JsValue {
        // Special cased by the compiler
        self.get(key)
    }

    getOwn(key: String): Option[JsValue] {
        if(self.hasOwn(key)) {Some(self.get(key))} else {None}
    }

    set[K: IsJsValue, V: IsJsValue](key: K, value: V): Unit {
        // Special cased by the compiler
        self.set(key, value)
    }

    increment[K: IsJsValue, V: IsJsValue](key: K, value: V): Unit {
        // Special cased by the compiler
        self.increment(key, value)
    }
        
    decrement[K: IsJsValue, V: IsJsValue](key: K, value: V): Unit {
        // Special cased by the compiler
        self.decrement(key, value)
    }

    delete[K: IsJsValue](key: K): Unit {
        // Special cased by the compiler
        self.delete(key)
    }

    with[K: IsJsValue, V: IsJsValue](key: K, value: V): JsValue {
        // Special cased by the compiler
        self.with(key, value)
    }

    hasOwn(name: String): Bool {
        Js->Object->prototype->hasOwnProperty->call(self, name)?
    }


    assign(source: JsValue, source2: JsValue = source): JsValue {
        Js->Object->assign(self, source, if(source2 !== source) {source2} else {Js.null()})?
    }


    each(body: JsValue => Unit): Unit {
        let iterator = self.call0(Js->Symbol->iterator)
        mutable result = iterator->next()
        while {!result->done?} {
            body(result->value)
            result = iterator->next()
        }
    }

    eachWhile(body: JsValue => Bool): Unit {
        let iterator = self.call0(Js->Symbol->iterator)
        mutable result = iterator->next()
        while {!result->done? && body(result->value)} {
            result = iterator->next()
        }
    }

    call[A0: IsJsValue](name: A0, arguments: List[JsValue]): JsValue {
        self.get(name)->apply(self, arguments)
    }

    call0[A0: IsJsValue](name: A0): JsValue {
        // Special cased by the compiler
        self.call0(name)
    }

    call1[A0: IsJsValue, A1: IsJsValue](name: A0, a1: A1): JsValue {
        // Special cased by the compiler
        self.call1(name, a1)
    }

    call2[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue](name: A0, a1: A1, a2: A2): JsValue {
        // Special cased by the compiler
        self.call2(name, a1, a2)
    }

    call3[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](name: A0, a1: A1, a2: A2, a3: A3): JsValue {
        // Special cased by the compiler
        self.call3(name, a1, a2, a3)
    }

    call4[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](name: A0, a1: A1, a2: A2, a3: A3, a4: A4): JsValue {
        // Special cased by the compiler
        self.call4(name, a1, a2, a3, a4)
    }

    call5[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](name: A0, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue {
        // Special cased by the compiler
        self.call5(name, a1, a2, a3, a4, a5)
    }

    call6[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](name: A0, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue {
        // Special cased by the compiler
        self.call6(name, a1, a2, a3, a4, a5, a6)
    }

    call7[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](name: A0, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue {
        // Special cased by the compiler
        self.call7(name, a1, a2, a3, a4, a5, a6, a7)
    }

    call8[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](name: A0, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue {
        // Special cased by the compiler
        self.call8(name, a1, a2, a3, a4, a5, a6, a7, a8)
    }

    call9[A0: IsJsValue, A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](name: A0, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue {
        // Special cased by the compiler
        self.call9(name, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }

    callValue(this: JsValue, arguments: List[JsValue]): JsValue {
        self->apply(this, arguments)
    }

    callValue0(): JsValue {
        // Special cased by the compiler
        self.callValue0()
    }

    callValue1[A1: IsJsValue](a1: A1): JsValue {
        // Special cased by the compiler
        self.callValue1(a1)
    }

    callValue2[A1: IsJsValue, A2: IsJsValue](a1: A1, a2: A2): JsValue {
        // Special cased by the compiler
        self.callValue2(a1, a2)
    }

    callValue3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](a1: A1, a2: A2, a3: A3): JsValue {
        // Special cased by the compiler
        self.callValue3(a1, a2, a3)
    }

    callValue4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4): JsValue {
        // Special cased by the compiler
        self.callValue4(a1, a2, a3, a4)
    }

    callValue5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue {
        // Special cased by the compiler
        self.callValue5(a1, a2, a3, a4, a5)
    }

    callValue6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue {
        // Special cased by the compiler
        self.callValue6(a1, a2, a3, a4, a5, a6)
    }

    callValue7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue {
        // Special cased by the compiler
        self.callValue7(a1, a2, a3, a4, a5, a6, a7)
    }

    callValue8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue {
        // Special cased by the compiler
        self.callValue8(a1, a2, a3, a4, a5, a6, a7, a8)
    }

    callValue9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue {
        // Special cased by the compiler
        self.callValue9(a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }


    new(arguments: List[JsValue]): JsValue {
        Js->Function->prototype->bind->apply->(self, arguments)
    }

    new0(): JsValue {
        // Special cased by the compiler
        self->()
    }

    new1[A1: IsJsValue](a1: A1): JsValue {
        // Special cased by the compiler
        self->(a1)
    }

    new2[A1: IsJsValue, A2: IsJsValue](a1: A1, a2: A2): JsValue {
        // Special cased by the compiler
        self->(a1, a2)
    }

    new3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](a1: A1, a2: A2, a3: A3): JsValue {
        // Special cased by the compiler
        self->(a1, a2, a3)
    }

    new4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4): JsValue {
        // Special cased by the compiler
        self->(a1, a2, a3, a4)
    }

    new5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue {
        // Special cased by the compiler
        self->(a1, a2, a3, a4, a5)
    }

    new6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue {
        // Special cased by the compiler
        self->(a1, a2, a3, a4, a5, a6)
    }

    new7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue {
        // Special cased by the compiler
        self->(a1, a2, a3, a4, a5, a6, a7)
    }

    new8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue {
        // Special cased by the compiler
        self->(a1, a2, a3, a4, a5, a6, a7, a8)
    }

    new9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue {
        // Special cased by the compiler
        self->(a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }


    grabPairs(): List[Pair[String, JsValue]] {
        if(!self.isObject()) {throw(GrabException)}
        Js->Object->getOwnPropertyNames(self)->map(Js->{name, i => Pair(name, self.get(name))})?
    }

    grabMap(): Map[String, JsValue] {
        self.grabPairs().toMap()
    }

    grabIntMap(): IntMap[JsValue] {
        if(!self.instanceof(Js->Map)) {throw(GrabException)}
        self?
    }

    grabStringMap(): StringMap[JsValue] {
        if(!self.instanceof(Js->Map)) {throw(GrabException)}
        self?
    }
        
    spreadToArray(): List[JsValue] {
        // Special cased by the compiler
        self.spreadToArray()
    }
        
    coalesce[T: IsJsValue](defaultValue: T): JsValue {
        if(self.isNullOrUndefined()) {Js.value(defaultValue)} else {self}
    }

    typeof(): String {
        // Special cased by the compiler
        self.typeof()
    }

    instanceof(type: JsValue): Bool {
        // Special cased by the compiler
        self.instanceof(type)
    }
    
    truthy(): Bool {
        Js.unaryOperator("!!", self)?
    }
    
    falsy(): Bool {
        Js.unaryOperator("!", self)?
    }
    
    nullish(): Bool {
        self.isNullOrUndefined() // TODO: Rename
    }

    //toList(): List[JsValue] // TODO
    // TODO: JS operators

}

trait T: IsJsValue {}
instance JsValue: IsJsValue {}
instance String: IsJsValue {}
instance Char: IsJsValue {}
instance Int: IsJsValue {}
instance Float: IsJsValue {}
instance Bool: IsJsValue {}
instance List[T: IsJsValue]: IsJsValue {}
instance IntMap[T: IsJsValue]: IsJsValue {}
instance StringMap[T: IsJsValue]: IsJsValue {}
instance Error: IsJsValue {}
instance Date: IsJsValue {}
instance Duration: IsJsValue {}
instance Buffer: IsJsValue {}
instance Nothing: IsJsValue {}
