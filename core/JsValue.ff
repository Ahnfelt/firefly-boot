type JsValue {}

extend self: JsValue {

    expectString(): String
        target js sync "return self_"

    expectChar(): Char
        target js sync "return self_"

    expectInt(): Int
        target js sync "return self_"

    expectFloat(): Float
        target js sync "return self_"

    expectBool(): Bool
        target js sync "return self_"

    expectArray(): Array[JsValue]
        target js sync "return self_"

    expectBuffer(): Buffer
        target js sync """
            if(!(self_ instanceof Buffer)) throw new Error('Expected buffer, got '+ typeof self_);
            return self_
        """

    isString(): Bool
        target js sync "return typeof self_ === 'string'"

    isChar(): Bool
        target js sync """
            return Number.isInteger(self_) && Math.abs(self_) <= Number.MAX_SAFE_INTEGER
                && self_ >= 0 && self_ < 1114112
        """

    isInt(): Bool
        target js sync "return Number.isInteger(self_) && Math.abs(self_) <= Number.MAX_SAFE_INTEGER"

    isFloat(): Bool
        target js sync "return typeof self_ === 'number'"

    isBool(): Bool
        target js sync "return typeof self_ === 'boolean'"

    isArray(): Bool
        target js sync "return Array.isArray(self_)"

    isObject(): Bool
        target js sync "return self != null && typeof self_ === 'object'"

    isFunction(): Bool
        target js sync "return typeof self_ === 'function'"

    isNull(): Bool
        target js sync "return self_ === null"

    isUndefined(): Bool
        target js sync "return typeof self_ === 'undefined'"

    isNullOrUndefined(): Bool
        target js sync "return self_ == null"

    isNan(): Bool
        target js sync "return typeof self_ === 'number' && self_ !== self_"

    isFinite(): Bool
        target js sync "return typeof self_ === 'number' && isFinite(self_)"


    get[K: IsJsValue](key: K): JsValue
        target js sync "return self_[key_]"

    set[K: IsJsValue, V: IsJsValue](key: K, value: V): Unit
        target js sync "self_[key_] = value_"

    with[K: IsJsValue, V: IsJsValue](key: K, value: V): JsValue
        target js sync "return {...self_, [key_]: value_}"

    hasOwn(name: String): Bool
        target js sync "return Object.prototype.hasOwnProperty.call(self_, name_)"


    assign(source: JsValue, source2: JsValue = source): JsValue
        target js sync "return Object.assign(self_, source_, source2_ !== source_ ? source2_ : null)"


    each(body: JsValue => Unit): Unit
        target js sync "for(const value of self_) body_(value)"
        target js async "for(const value of self_) await body_(value, $c)"

    eachWhile(body: JsValue => Bool): Unit
        target js sync "for(const value of self_) if(!body_(value)) break"
        target js async "for(const value of self_) if(!await body_(value, $c)) break"


    call(name: String, arguments: List[JsValue]): JsValue
        target js sync "return self_[name_].apply(this_, ff_core_List.List_toTable(arguments_))"

    call0(name: String): JsValue
        target js sync "return self_[name_].call(self_)"

    call1[A1: IsJsValue](name: String, a1: A1): JsValue
        target js sync "return self_[name_].call(self_, a1_)"

    call2[A1: IsJsValue, A2: IsJsValue](name: String, a1: A1, a2: A2): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_)"

    call3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](name: String, a1: A1, a2: A2, a3: A3): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_, a3_)"

    call4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_, a3_, a4_)"

    call5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_, a3_, a4_, a5_)"

    call6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_, a3_, a4_, a5_, a6_)"

    call7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_, a3_, a4_, a5_, a6_, a7_)"

    call8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_)"

    call9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](name: String, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue
        target js sync "return self_[name_].call(self_, a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_)"


    callValue(this: JsValue, arguments: List[JsValue]): JsValue
        target js sync "return self_.apply(this_, ff_core_List.List_toTable(arguments_))"

    callValue0(): JsValue
        target js sync "return self_.call(self_)"

    callValue1[A1: IsJsValue](a1: A1): JsValue
        target js sync "return self_.call(self_, a1_)"

    callValue2[A1: IsJsValue, A2: IsJsValue](a1: A1, a2: A2): JsValue
        target js sync "return self_.call(self_, a1_, a2_)"

    callValue3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](a1: A1, a2: A2, a3: A3): JsValue
        target js sync "return self_.call(self_, a1_, a2_, a3_)"

    callValue4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4): JsValue
        target js sync "return self_.call(self_, a1_, a2_, a3_, a4_)"

    callValue5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue
        target js sync "return self_.call(self_, a1_, a2_, a3_, a4_, a5_)"

    callValue6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue
        target js sync "return self_.call(self_, a1_, a2_, a3_, a4_, a5_, a6_)"

    callValue7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue
        target js sync "return self_.call(self_, a1_, a2_, a3_, a4_, a5_, a6_, a7_)"

    callValue8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue
        target js sync "return self_.call(self_, a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_)"

    callValue9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue
        target js sync "return self_.call(self_, a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_)"


    new(this: JsValue, arguments: List[JsValue]): JsValue
        target js sync "return new (Function.prototype.bind.apply(self_, ff_core_List.List_toTable(arguments_)))"

    new0(): JsValue
        target js sync "return new self_()"

    new1[A1: IsJsValue](a1: A1): JsValue
        target js sync "return new self_(a1_)"

    new2[A1: IsJsValue, A2: IsJsValue](a1: A1, a2: A2): JsValue
        target js sync "return new self_(a1_, a2_)"

    new3[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue](a1: A1, a2: A2, a3: A3): JsValue
        target js sync "return new self_(a1_, a2_, a3_)"

    new4[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4): JsValue
        target js sync "return new self_(a1_, a2_, a3_, a4_)"

    new5[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): JsValue
        target js sync "return new self_(a1_, a2_, a3_, a4_, a5_)"

    new6[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): JsValue
        target js sync "return new self_(a1_, a2_, a3_, a4_, a5_, a6_)"

    new7[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): JsValue
        target js sync "return new self_(a1_, a2_, a3_, a4_, a5_, a6_, a7_)"

    new8[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): JsValue
        target js sync "return new self_(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_)"

    new9[A1: IsJsValue, A2: IsJsValue, A3: IsJsValue, A4: IsJsValue, A5: IsJsValue, A6: IsJsValue, A7: IsJsValue, A8: IsJsValue, A9: IsJsValue](a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): JsValue
        target js sync "return new self_(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_, a9_)"


    toJson(space: Option[String] = None): String
        target js sync "return JSON.stringify(self_, null, space_.value_)"


    //toMap(): Map[String, JsValue] // TODO
    //toArray(): Array[JsValue] // TODO
    //toList(): List[JsValue] // TODO
    // TODO: JS operators

}

trait T: IsJsValue {}
instance JsValue: IsJsValue {}
instance String: IsJsValue {}
instance Char: IsJsValue {}
instance Int: IsJsValue {}
instance Float: IsJsValue {}
instance Bool: IsJsValue {}
instance Array[T: IsJsValue]: IsJsValue {}
instance Error: IsJsValue {}
instance Instant: IsJsValue {}
instance Duration: IsJsValue {}
instance Buffer: IsJsValue {}
instance Nothing: IsJsValue {}
