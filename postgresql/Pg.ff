type PgPool! {}
newtype PgConnection!(jsValue: JsValue)
type PgStatement!(sql: String, parameters: Map[String, JsValue], connection: Option[PgConnection])
newtype PgRow(jsValue: JsValue)
type PgLevel {
    PgReadCommitted
    PgRepeatableRead
    PgSerializable
}

makePool(
    system: NodeSystem
    user: String
    host: String
    database: String
    password: () => String
    port: Int = 5432
    connectionTimeout: Duration = Duration(10.0)
    idleTimeout: Duration = Duration(10.0)
    maxConnections: Int = 10
    allowExitOnIdle: Bool = True
): PgPool
    target node async """
        import * as pg from 'pg'
        return new pg.Pool({
            system: system_,
            user: user_,
            host: host_,
            database: database_,
            password: password_,
            port: port_,
            connectionTimeoutMillis: connectionTimeout_ * 1000,
            idleTimeoutMillis: idleTimeout_ * 1000,
            max: maxConnections_,
            allowExitOnIdle: allowExitOnIdle_
        })
    """

makePoolFromConnectionString(
    system: NodeSystem
    connectionString: String
    connectionTimeout: Duration = Duration(10.0)
    idleTimeout: Duration = Duration(10.0)
    maxConnections: Int = 10
    allowExitOnIdle: Bool = True
): PgPool
    target node async """
        import * as pg from 'pg'
        return new pg.Pool({
            connectionString: connectionString_,
            connectionTimeoutMillis: connectionTimeout_ * 1000,
            idleTimeoutMillis: idleTimeout_ * 1000,
            max: maxConnections_,
            allowExitOnIdle: allowExitOnIdle_
        })
    """

extend self: PgPool {

    connect(): PgConnection
        target node async """
            if($c.signal.aborted) throw new Error("Cancelled", {cause: $c.reasonWorkaround})
            return await pool.connect()
        """

    close(): Unit
        target node async """
            if($c.signal.aborted) throw new Error("Cancelled", {cause: $c.reasonWorkaround})
            await pool.end()
        """

    connectionCount(): Int
        target node async """
            return self_.totalCount
        """

    idleCount(): Int
        target node async """
            return self_.idleCount
        """

    waitingCount(): Int
        target node async """
            return self_.waitingCount
        """

    withTransaction[T](body: PgConnection => T, level: PgLevel = PgReadCommitted): T {
        let connection = self.connect()
        mutable done = False
        try {
            connection.statement("begin").run()
            level.{
                | PgReadCommitted => 0 // Default level in PostgreSQL
                | PgRepeatableRead => connection.statement("set transaction isolation level repeatable read").run()
                | PgSerializable => connection.statement("set transaction isolation level serializable").run()
            }
            let result = body(connection)
            done = True
            connection.statement("commit").run()
            result
        } finally {
            if(!done) {connection.statement("rollback").run()}
            connection.release()
        } expect()
    }

}

extend self: PgConnection {

    release(): Unit
        target node async """
            if($c.signal.aborted) connection.release(true)
            else connection.release()
        """

    statement(sql: String): PgStatement {
        PgStatement(sql, [].toMap(), Some(self))
    }

}

extend self: PgStatement {

    withInt(name: String, value: Int): PgStatement {
        let p = internalJsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableInt(name: String, value: Option[Int]): PgStatement {
        let p = value.map(internalJsSystem().value).else {internalJsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withString(name: String, value: String): PgStatement {
        let p = internalJsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableString(name: String, value: Option[String]): PgStatement {
        let p = value.map(internalJsSystem().value).else {internalJsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    run(): Int {
        internalRunStatement(self, None)
    }

    all(body: PgRow => Bool): Bool {
        internalRunStatement(self, Some(body)) == 1
    }

    any(body: PgRow => Bool): Bool {
        !self.all { row =>
            !body(row)
        }
    }

    each(body: PgRow => Unit): Unit {
        self.all { row =>
            body(row)
            True
        }
    }

    map[T](body: PgRow => T): List[T] {
        mutable result = []
        self.each { row =>
            result = [body(row), ...result]
        }
        result.reverse()
    }

}

extend self: PgRow {

    getInt(name: String): Option[Int]
        target node sync """
            if(!Object.hasOwn(self_, name_)) throw new Error("Column not found in result: " + name_)
            return self_[name_] != null ? ff_core_Option.Some(parseInt(self_[name_])) : ff_core_Option.None()
        """

    getString(name: String): Option[String]
        target node sync """
            if(!Object.hasOwn(self_, name_)) throw new Error("Column not found in result: " + name_)
            return self_[name_] != null ? ff_core_Option.Some("" + self_[name_]) : ff_core_Option.None()
        """

}

internalRunStatement(statement: PgStatement, body: Option[PgRow => Bool]): Int {
    let pair = internalParseParameters(statement.sql)
    let parameters = pair.second.map { name =>
        statement.parameters.get(name).else {
            panic("No value for parameter: " + name)
        }
    }.toArray()
    let unusedParameters = statement.parameters.keys().removeAll(pair.second.toSet())
    if(unusedParameters.size() > 0) {
        panic("Unused parameters: " + unusedParameters.toList().join(", "))
    }
    let js = internalJsSystem()
    js.checkAborted()
    let result = js.await { statement.connection.expect().jsValue.call2("query", pair.first, parameters) }
    body.{
        | None =>
            result.get("rowCount").expectInt()
        | Some(f) =>
            let all = result.get("rows").expectArray().toList().all { row =>
                f(PgRow(row))
            }
            if(all) {1} else {0}
    }
}

internalParseParameters(statementSql: String): Pair[String, List[String]] {
    mutable parameters = []
    mutable parameterIndexes = [].toMap()
    mutable i = 0
    mutable last = 0
    mutable sql = ""
    while {i < statementSql.size()} {
        if(statementSql.expect(i) == '$') {
            sql = sql + statementSql.slice(last, i)
            i += 1
            last = i
            if(statementSql.expect(i) == '$') {
                i += 1
            } else {
                while {i < statementSql.size() && statementSql.expect(i).isAsciiLetterOrDigit()} {
                    i += 1
                }
                let name = statementSql.slice(last, i)
                if(name != "") {
                    let index = parameterIndexes.get(name).else {
                        let newIndex = parameterIndexes.size() + 1
                        parameterIndexes = parameterIndexes.add(name, newIndex)
                        parameters = [name, ...parameters]
                        newIndex
                    }
                    sql = sql + "$" + index
                    last = i
                }
            }
        }
    }
    sql = sql + statementSql.slice(last, i)
    Pair(sql, parameters.reverse())
}

internalJsSystem(): JsSystem
    target js async "return typeof globalThis !== 'undefined' ? globalThis : window"
    target js sync "return typeof globalThis !== 'undefined' ? globalThis : window"

main(system: NodeSystem): Unit {
    Log.debug("Hello!")
}