import UnsafeJs from ff:unsafejs

newtype PgPool!(jsValue: JsValue)
newtype PgConnection!(jsValue: JsValue)
newtype PgRow(jsValue: JsValue)
type PgStatement!(sql: String, parameters: Map[String, JsValue], connection: Option[PgConnection])
type PgLevel {
    PgReadCommitted
    PgRepeatableRead
    PgSerializable
}

makePool(
    system: NodeSystem
    user: String
    host: String
    database: String
    password: () => String
    port: Int = 5432
    connectionTimeout: Duration = Duration(10.0)
    idleTimeout: Duration = Duration(10.0)
    maxConnections: Int = 10
    allowExitOnIdle: Bool = True
): PgPool {
    UnsafeJs.throwIfCancelled()
    let js = UnsafeJs.jsSystem()
    let pg = UnsafeJs.import("pg").get("default")
    PgPool(pg.get("Pool").new1(js.object()
        .with("user", user)
        .with("host", host)
        .with("database", database)
        .with("password", js.function0(password))
        .with("port", port)
        .with("connectionTimeoutMillis", connectionTimeout.seconds * 1000)
        .with("idleTimeoutMillis", idleTimeout.seconds * 1000)
        .with("max", maxConnections)
        .with("allowExitOnIdle", allowExitOnIdle)
    ))
}

makePoolFromConnectionString(
    system: NodeSystem
    connectionString: String
    connectionTimeout: Duration = Duration(10.0)
    idleTimeout: Duration = Duration(10.0)
    maxConnections: Int = 10
    allowExitOnIdle: Bool = True
): PgPool {
    UnsafeJs.throwIfCancelled()
    let js = UnsafeJs.jsSystem()
    let pg = UnsafeJs.import("pg").get("default")
    PgPool(pg.get("Pool").new1(js.object()
        .with("connectionString", connectionString)
        .with("connectionTimeoutMillis", connectionTimeout.seconds * 1000)
        .with("idleTimeoutMillis", idleTimeout.seconds * 1000)
        .with("max", maxConnections)
        .with("allowExitOnIdle", allowExitOnIdle)
    ))
}

extend self: PgPool {

    connect(): PgConnection {
        UnsafeJs.throwIfCancelled()
        PgConnection(UnsafeJs.await { self.jsValue.call0("connect") })
    }

    close(): Unit {
        UnsafeJs.await { self.jsValue.call0("end") }
    }

    connectionCount(): Int {
        self.jsValue.get("totalCount").expectInt()
    }

    idleCount(): Int {
        self.jsValue.get("idleCount").expectInt()
    }

    waitingCount(): Int {
        self.jsValue.get("waitingCount").expectInt()
    }

    transaction[T](body: PgConnection => T, level: PgLevel = PgReadCommitted): T {
        let connection = self.connect()
        mutable done = False
        try {
            connection.statement("begin").run()
            level.{
                | PgReadCommitted => 0 // Default level in PostgreSQL
                | PgRepeatableRead => connection.statement("set transaction isolation level repeatable read").run()
                | PgSerializable => connection.statement("set transaction isolation level serializable").run()
            }
            let result = body(connection)
            done = True
            connection.statement("commit").run()
            result
        } finally {
            if(!done) {connection.statement("rollback").run()}
            connection.release()
        } expect()
    }

}

extend self: PgConnection {

    release(): Unit {
        if(UnsafeJs.cancelled()) {
            self.jsValue.call1("release", True)
        } else {
            self.jsValue.call0("release")
        }
    }

    statement(sql: String): PgStatement {
        PgStatement(sql, [].toMap(), Some(self))
    }

    batchRun(statements: List[PgStatement]): List[Int] {
        internalBatchStatements(self, statements, None, None)
    }

    batchAll(statements: List[PgStatement], body: PgRow => Bool): List[Bool] {
        internalBatchStatements(self, statements, Some(body), None).map {_ == 1}
    }

    batchAny(statements: List[PgStatement], body: PgRow => Bool): List[Bool] {
        self.batchAll(statements, {!body(_)}).map {!_}
    }

    batchEach(statements: List[PgStatement], body: PgRow => Unit): Unit {
        self.batchAll(statements, {body(_); True})
    }

    batchMap[T](statements: List[PgStatement], body: PgRow => T): List[List[T]] {
        mutable results = []
        mutable result = []
        internalBatchStatements(self, statements, Some({row =>
            result = [body(row), ...result]
            True
        }), Some({
            results = [result.reverse(), ...results]
        }))
        results.reverse()
    }

}

extend self: PgStatement {

    withBool(name: String, value: Bool): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBool(name: String, value: Option[Bool]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withInt(name: String, value: Int): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableInt(name: String, value: Option[Int]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withFloat(name: String, value: Float): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableFloat(name: String, value: Option[Float]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withString(name: String, value: String): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableString(name: String, value: Option[String]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withInstant(name: String, value: Instant): PgStatement {
        let jsDate = UnsafeJs.jsSystem().global().get("Date")
        function toJsDate(instant: Instant): JsValue {
            jsDate.new1(instant.since1970.seconds * 1000.0)
        }
        let p = toJsDate(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableInstant(name: String, value: Option[Instant]): PgStatement {
        let jsDate = UnsafeJs.jsSystem().global().get("Date")
        function toJsDate(instant: Instant): JsValue {
            jsDate.new1(instant.since1970.seconds * 1000.0)
        }
        let p = value.map(toJsDate).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withBuffer(name: String, value: Buffer): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBuffer(name: String, value: Option[Buffer]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withBoolTable(name: String, value: Table[Bool]): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBoolTable(name: String, value: Option[Table[Bool]]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withIntTable(name: String, value: Table[Int]): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableIntTable(name: String, value: Option[Table[Int]]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withFloatTable(name: String, value: Table[Float]): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableFloatTable(name: String, value: Option[Table[Float]]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withStringTable(name: String, value: Table[String]): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableStringTable(name: String, value: Option[Table[String]]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withInstantTable(name: String, value: Table[Instant]): PgStatement {
        let jsDate = UnsafeJs.jsSystem().global().get("Date")
        function toJsDate(instant: Instant): JsValue {
            jsDate.new1(instant.since1970.seconds * 1000.0)
        }
        let p = UnsafeJs.jsSystem().value(value.map(toJsDate))
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableInstantTable(name: String, value: Option[Table[Instant]]): PgStatement {
        let jsDate = UnsafeJs.jsSystem().global().get("Date")
        function toJsDate(instant: Instant): JsValue {
            jsDate.new1(instant.since1970.seconds * 1000.0)
        }
        let p = value.map {_.map(toJsDate)}.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withBufferTable(name: String, value: Table[Buffer]): PgStatement {
        let p = UnsafeJs.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBufferTable(name: String, value: Option[Table[Buffer]]): PgStatement {
        let p = value.map(UnsafeJs.jsSystem().value).else {UnsafeJs.jsSystem().null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    run(): Int {
        internalRunStatement(self, None)
    }

    all(body: PgRow => Bool): Bool {
        internalRunStatement(self, Some(body)) == 1
    }

    any(body: PgRow => Bool): Bool {
        !self.all { row =>
            !body(row)
        }
    }

    each(body: PgRow => Unit): Unit {
        self.all { row =>
            body(row)
            True
        }
    }

    map[T](body: PgRow => T): List[T] {
        mutable result = []
        self.each { row =>
            result = [body(row), ...result]
        }
        result.reverse()
    }

}

extend self: PgRow {

    getBool(name: String, lower: Bool = True): Option[Bool] {
        internalGet(self, name, lower) {(_.expectBool() && True) || False}
    }

    getInt(name: String, lower: Bool = True): Option[Int] {
        internalGet(self, name, lower) {_.expectInt() * 1}
    }

    getFloat(name: String, lower: Bool = True): Option[Float] {
        internalGet(self, name, lower) {_.expectFloat() * 1.0}
    }

    getString(name: String, lower: Bool = True): Option[String] {
        internalGet(self, name, lower) {"" + _.expectString()}
    }

    getInstant(name: String, lower: Bool = True): Option[Instant] {
        internalGet(self, name, lower) {Instant(Duration(_.call0("getTime").expectInt() * 0.001))}
    }

    getBuffer(name: String, lower: Bool = True): Option[Buffer] {
        internalGet(self, name, lower) {_.expectBuffer()}
    }

    getBoolTable(name: String, lower: Bool = True): Option[Table[Bool]] {
        internalGet(self, name, lower) {_.expectTable().map {(_.expectBool() && True) || False}}
    }

    getIntTable(name: String, lower: Bool = True): Option[Table[Int]] {
        internalGet(self, name, lower) {_.expectTable().map {_.expectInt() * 1}}
    }

    getFloatTable(name: String, lower: Bool = True): Option[Table[Float]] {
        internalGet(self, name, lower) {_.expectTable().map {_.expectFloat() * 1.0}}
    }

    getStringTable(name: String, lower: Bool = True): Option[Table[String]] {
        internalGet(self, name, lower) {_.expectTable().map {"" + _.expectString()}}
    }

    getInstantTable(name: String, lower: Bool = True): Option[Table[Instant]] {
        internalGet(self, name, lower) {_.expectTable().map {Instant(Duration(_.call0("getTime").expectInt() * 0.001))}}
    }

    getBufferTable(name: String, lower: Bool = True): Option[Table[Buffer]] {
        internalGet(self, name, lower) {_.expectTable().map {_.expectBuffer()}}
    }

}

internalGet[T](row: PgRow, name: String, lower: Bool, body: JsValue => T): Option[T] {
    let n = if(lower) {name.lower()} else {name}
    if(!row.jsValue.hasOwn(n)) {panic("Column not found in result: " + n)}
    let value = row.jsValue.get(n)
    if(!value.isNull()) {Some(body(value))} else {None}
}

internalRunStatement(statement: PgStatement, body: Option[PgRow => Bool]): Int {
    UnsafeJs.throwIfCancelled()
    let pair = internalParseParameters(statement.sql)
    let parameters = internalCheckParameters(pair.second, statement.parameters)
    let result = UnsafeJs.await { statement.connection.expect().jsValue.call2("query", pair.first, parameters) }
    body.{
        | None =>
            result.get("rowCount").expectInt()
        | Some(f) =>
            let all = result.get("rows").expectTable().toList().all { row =>
                f(PgRow(row))
            }
            if(all) {1} else {0}
    }
}

internalBatchStatements(
    connection: PgConnection,
    statements: List[PgStatement],
    body: Option[PgRow => Bool],
    endBody: Option[() => Unit]
): List[Int] {
    let sqlCache = statements.map {s => Pair(s.sql, s.sql)}.group().map {sql, list =>
        let pair = internalParseParameters(sql)
        let prepared = if(list.size() >= 10) {
            let hash = UnsafeJs.import("crypto")
                .call1("createHash", "md5")
                .call1("update", pair.first)
                .call1("update", "ffpgps")
                .call1("digest", "hex")
            "ffpgps" + hash.expectString()
        }
        Pair(sql, (newSql = pair.first, parameterNames = pair.second, prepared = prepared))
    }
    let promises = statements.map { statement =>
        UnsafeJs.throwIfCancelled()
        let record = sqlCache.expect(statement.sql)
        let parameters = internalCheckParameters(record.parameterNames, statement.parameters)
        let query = UnsafeJs.jsSystem().object()
            .with("text", record.newSql)
            .with("values", parameters)
        connection.jsValue.call1("query", record.prepared.map {query.with("name", _)}.else {query})
    }
    let results = promises.map { promise =>
        UnsafeJs.throwIfCancelled()
        let result = UnsafeJs.await { promise }
        UnsafeJs.throwIfCancelled()
        body.{
            | None =>
                result.get("rowCount").expectInt()
            | Some(f) =>
                let all = result.get("rows").expectTable().toList().all { row =>
                    f(PgRow(row))
                }
                endBody.each {_()}
                if(all) {1} else {0}
        }
    }
    results
}

internalCheckParameters(parameterNames: List[String], parameters: Map[String, JsValue]): Table[JsValue] {
    let arguments = parameterNames.map { name =>
        parameters.get(name).else {
            panic("No value for parameter: " + name)
        }
    }.toTable()
    let unusedParameters = parameters.keys().removeAll(parameterNames.toSet())
    if(unusedParameters.size() > 0) {
        panic("Unused parameters: " + unusedParameters.toList().join(", "))
    }
    arguments
}

internalParseParameters(statementSql: String): Pair[String, List[String]] {
    mutable parameters = []
    mutable parameterIndexes = [].toMap()
    mutable i = 0
    mutable last = 0
    mutable sql = ""
    while {i < statementSql.size()} {
        if(statementSql.expect(i) == '$') {
            sql = sql + statementSql.slice(last, i)
            i += 1
            last = i
            if(statementSql.expect(i) == '$') {
                i += 1
            } else {
                while {i < statementSql.size() && statementSql.expect(i).isAsciiLetterOrDigit()} {
                    i += 1
                }
                let name = statementSql.slice(last, i)
                if(name != "") {
                    let index = parameterIndexes.get(name).else {
                        let newIndex = parameterIndexes.size() + 1
                        parameterIndexes = parameterIndexes.add(name, newIndex)
                        parameters = [name, ...parameters]
                        newIndex
                    }
                    sql = sql + "$" + index
                    last = i
                }
            }
        } else {
            i += 1
        }
    }
    sql = sql + statementSql.slice(last, i)
    Pair(sql, parameters.reverse())
}

main(system: NodeSystem): Unit {

    let pool = makePool(
        system = system
        host = system.arguments().expect(0)
        database = system.arguments().expect(1)
        user = system.arguments().expect(2)
        password = {system.arguments().expect(3)}
    )

    pool.transaction {connection =>
        let parties = connection.statement("""
            select name, listCode, entityId
            from election."PartyRow"
            where entityId < $maxEntityId
        """)
            .withInt("maxEntityId", 200)
            .map {row =>
                (
                    name = row.getString("name").expect()
                    listCode = row.getString("listCode").expect()
                    entityId = row.getInt("entityId").expect()
                )
            }

        connection.batchMap(
            parties.map {item =>
                connection.statement("""
                    select id
                    from election."PartyRow"
                    where name = $name and listCode = $listCode and entityId = $entityId
                """)
                    .withString("name", item.name)
                    .withString("listCode", item.listCode)
                    .withInt("entityId", item.entityId)
            }
        ) {row =>
            //Log.debug(row)
        }

    }
}
