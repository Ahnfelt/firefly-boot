capability PgPool(jsValue: JsValue)
capability PgConnection(jsValue: JsValue)
capability PgRow(jsValue: JsValue) // TODO: Should be a sync class, make deriver not touch those
capability PgStatement(sql: String, parameters: Map[String, JsValue], connection: Option[PgConnection])
data PgLevel {
    PgReadCommitted
    PgRepeatableRead
    PgSerializable
}

newPool(
    system: NodeSystem
    user: String
    host: String
    database: String
    password: () => String
    port: Int = 5432
    connectionTimeout: Duration = Duration(10.0)
    idleTimeout: Duration = Duration(10.0)
    maxConnections: Int = 10
    allowExitOnIdle: Bool = True
): PgPool {
    Js.throwIfCancelled()
    let pg = Js.import("pg").get("default")
    PgPool(pg.get("Pool").new1(Js.object()
        .with("user", user)
        .with("host", host)
        .with("database", database)
        .with("password", Js.function0(password))
        .with("port", port)
        .with("connectionTimeoutMillis", connectionTimeout.seconds * 1000)
        .with("idleTimeoutMillis", idleTimeout.seconds * 1000)
        .with("max", maxConnections)
        .with("allowExitOnIdle", allowExitOnIdle)
    ))
}

newPoolFromConnectionString(
    system: NodeSystem
    connectionString: String
    connectionTimeout: Duration = Duration(10.0)
    idleTimeout: Duration = Duration(10.0)
    maxConnections: Int = 10
    allowExitOnIdle: Bool = True
): PgPool {
    Js.throwIfCancelled()
    let pg = Js.import("pg").get("default")
    PgPool(pg.get("Pool").new1(Js.object()
        .with("connectionString", connectionString)
        .with("connectionTimeoutMillis", connectionTimeout.seconds * 1000)
        .with("idleTimeoutMillis", idleTimeout.seconds * 1000)
        .with("max", maxConnections)
        .with("allowExitOnIdle", allowExitOnIdle)
    ))
}

extend self: PgPool {

    connect(): PgConnection {
        Js.throwIfCancelled()
        PgConnection(Js.await(self.jsValue->connect()))
    }

    close(): Unit {
        Js.await(self.jsValue->end())
    }

    connectionCount(): Int {
        self.jsValue->totalCount.grabInt()
    }

    idleCount(): Int {
        self.jsValue->idleCount.grabInt()
    }

    waitingCount(): Int {
        self.jsValue->waitingCount.grabInt()
    }

    transaction[T](body: PgConnection => T, level: PgLevel = PgReadCommitted): T {
        let connection = self.connect()
        mutable done = False
        try {
            connection.statement("begin").run()
            level.{
                | PgReadCommitted => 0 // Default level in PostgreSQL
                | PgRepeatableRead => connection.statement("set transaction isolation level repeatable read").run()
                | PgSerializable => connection.statement("set transaction isolation level serializable").run()
            }
            let result = body(connection)
            done = True
            connection.statement("commit").run()
            result
        } finally {
            if(!done) {connection.statement("rollback").run()}
            connection.release()
        }
    }

}

extend self: PgConnection {

    release(): Unit {
        if(Js.cancelled()) {
            self.jsValue->release(True)
        } else {
            self.jsValue->release()
        }
    }

    statement(sql: String): PgStatement {
        PgStatement(sql, [].toMap(), Some(self))
    }

    batchRun(statements: List[PgStatement]): List[Int] {
        internalBatchStatements(self, statements, None, None)
    }

    batchAll(statements: List[PgStatement], body: PgRow => Bool): List[Bool] {
        internalBatchStatements(self, statements, Some(body), None).map {_ == 1}
    }

    batchAny(statements: List[PgStatement], body: PgRow => Bool): List[Bool] {
        self.batchAll(statements, {!body(_)}).map {!_}
    }

    batchEach(statements: List[PgStatement], body: PgRow => Unit): Unit {
        self.batchAll(statements, {body(_); True})
    }

    batchMap[T](statements: List[PgStatement], body: PgRow => T): List[List[T]] {
        mutable results = []
        mutable result = []
        internalBatchStatements(self, statements, Some({row =>
            result = [body(row), ...result]
            True
        }), Some({
            results = [result.reverse(), ...results]
        }))
        results.reverse()
    }

}

extend self: PgStatement {

    withBool(name: String, value: Bool): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBool(name: String, value: Option[Bool]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withInt(name: String, value: Int): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableInt(name: String, value: Option[Int]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withFloat(name: String, value: Float): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableFloat(name: String, value: Option[Float]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withString(name: String, value: String): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableString(name: String, value: Option[String]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withBuffer(name: String, value: Buffer): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBuffer(name: String, value: Option[Buffer]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withBoolArray(name: String, value: List[Bool]): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBoolArray(name: String, value: Option[List[Bool]]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withIntArray(name: String, value: List[Int]): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableIntArray(name: String, value: Option[List[Int]]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withFloatArray(name: String, value: List[Float]): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableFloatArray(name: String, value: Option[List[Float]]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withStringArray(name: String, value: List[String]): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableStringArray(name: String, value: Option[List[String]]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withBufferArray(name: String, value: List[Buffer]): PgStatement {
        let p = Js.jsSystem().value(value)
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    withNullableBufferArray(name: String, value: Option[List[Buffer]]): PgStatement {
        let p = value.map(Js.jsSystem().value).else {Js.null()}
        self.PgStatement(parameters = self.parameters.add(name, p))
    }

    run(): Int {
        internalRunStatement(self, None)
    }

    all(body: PgRow => Bool): Bool {
        internalRunStatement(self, Some(body)) == 1
    }

    any(body: PgRow => Bool): Bool {
        !self.all {row =>
            !body(row)
        }
    }

    each(body: PgRow => Unit): Unit {
        self.all {row =>
            body(row)
            True
        }
    }

    map[T](body: PgRow => T): List[T] {
        mutable result = []
        self.each {row =>
            result = [body(row), ...result]
        }
        result.reverse()
    }

}

extend self: PgRow {

    getBool(name: String, lower: Bool = True): Option[Bool] {
        internalGet(self, name, lower) {(_.grabBool() && True) || False}
    }

    getInt(name: String, lower: Bool = True): Option[Int] {
        internalGet(self, name, lower) {_.grabInt() * 1}
    }

    getFloat(name: String, lower: Bool = True): Option[Float] {
        internalGet(self, name, lower) {_.grabFloat() * 1.0}
    }

    getString(name: String, lower: Bool = True): Option[String] {
        internalGet(self, name, lower) {"" + _.grabString()}
    }

    getInstant(name: String, lower: Bool = True): Option[Instant] {
        internalGet(self, name, lower) {Instant(Duration(_.call0("getTime").grabInt() * 0.001))}
    }

    getBuffer(name: String, lower: Bool = True): Option[Buffer] {
        internalGet(self, name, lower) {_.grabBuffer()}
    }

    getBoolArray(name: String, lower: Bool = True): Option[List[Bool]] {
        internalGet(self, name, lower) {_.grabArray().map {(_.grabBool() && True) || False}}
    }

    getIntArray(name: String, lower: Bool = True): Option[List[Int]] {
        internalGet(self, name, lower) {_.grabArray().map {_.grabInt() * 1}}
    }

    getFloatArray(name: String, lower: Bool = True): Option[List[Float]] {
        internalGet(self, name, lower) {_.grabArray().map {_.grabFloat() * 1.0}}
    }

    getStringArray(name: String, lower: Bool = True): Option[List[String]] {
        internalGet(self, name, lower) {_.grabArray().map {"" + _.grabString()}}
    }

    getInstantArray(name: String, lower: Bool = True): Option[List[Instant]] {
        internalGet(self, name, lower) {_.grabArray().map {Instant(Duration(_.call0("getTime").grabInt() * 0.001))}}
    }

    getBufferArray(name: String, lower: Bool = True): Option[List[Buffer]] {
        internalGet(self, name, lower) {_.grabArray().map {_.grabBuffer()}}
    }

}

internalGet[T](row: PgRow, name: String, lower: Bool, body: JsValue => T): Option[T] {
    let n = if(lower) {name.lower()} else {name}
    if(!row.jsValue.hasOwn(n)) {panic("Column not found in result: " + n)}
    let value = row.jsValue.get(n)
    if(!value.isNull()) {Some(body(value))} else {None}
}

internalRunStatement(statement: PgStatement, body: Option[PgRow => Bool]): Int {
    Js.throwIfCancelled()
    let pair = internalParseParameters(statement.sql)
    let parameters = internalCheckParameters(pair.second, statement.parameters)
    let result = Js.await(statement.connection.grab().jsValue->query(pair.first, parameters))
    body.{
        | None =>
            result.get("rowCount").grabInt()
        | Some(f) =>
            let all = result.get("rows").grabArray().all {row =>
                f(PgRow(row))
            }
            if(all) {1} else {0}
    }
}

internalBatchStatements(
    connection: PgConnection
    statements: List[PgStatement]
    body: Option[PgRow => Bool]
    endBody: Option[() => Unit]
): List[Int] {
    let sqlCache = statements.map {s => Pair(s.sql, s.sql)}.group().map {sql, list =>
        let pair = internalParseParameters(sql)
        let prepared = if(list.size() >= 10) {
            let hash = Js.import("crypto")
                .call1("createHash", "md5")
                .call1("update", pair.first)
                .call1("update", "ffpgps")
                .call1("digest", "hex")
            "ffpgps" + hash.grabString()
        }
        Pair(sql, (newSql = pair.first, parameterNames = pair.second, prepared = prepared))
    }
    let promises = statements.map {statement =>
        Js.throwIfCancelled()
        let record = sqlCache.grab(statement.sql)
        let parameters = internalCheckParameters(record.parameterNames, statement.parameters)
        let query = Js.object()
            .with("text", record.newSql)
            .with("values", parameters)
        connection.jsValue->query(record.prepared.map {query.with("name", _)}.else {query})
    }
    let results = promises.map {promise =>
        Js.throwIfCancelled()
        let result = Js.await(promise)
        Js.throwIfCancelled()
        body.{
            | None =>
                result.get("rowCount").grabInt()
            | Some(f) =>
                let all = result.get("rows").grabArray().all {row =>
                    f(PgRow(row))
                }
                endBody.each {_()}
                if(all) {1} else {0}
        }
    }
    results
}

internalCheckParameters(parameterNames: List[String], parameters: Map[String, JsValue]): List[JsValue] {
    let arguments = parameterNames.map {name =>
        parameters.get(name).else {
            panic("No value for parameter: " + name)
        }
    }
    let unusedParameters = parameters.keys().removeAll(parameterNames.toSet())
    if(unusedParameters.size() > 0) {
        panic("Unused parameters: " + unusedParameters.toList().join(", "))
    }
    arguments
}

internalParseParameters(statementSql: String): Pair[String, List[String]] {
    mutable parameters = []
    mutable parameterIndexes = [].toMap()
    mutable i = 0
    mutable last = 0
    mutable sql = ""
    while {i < statementSql.size()} {
        if(statementSql.grab(i) == '$') {
            sql = sql + statementSql.slice(last, i)
            i += 1
            last = i
            if(statementSql.grab(i) == '$') {
                i += 1
            } else {
                while {i < statementSql.size() && statementSql.grab(i).isAsciiLetterOrDigit()} {
                    i += 1
                }
                let name = statementSql.slice(last, i)
                if(name != "") {
                    let index = parameterIndexes.get(name).else {
                        let newIndex = parameterIndexes.size() + 1
                        parameterIndexes = parameterIndexes.add(name, newIndex)
                        parameters = [name, ...parameters]
                        newIndex
                    }
                    sql = sql + "$" + index
                    last = i
                }
            }
        } else {
            i += 1
        }
    }
    sql = sql + statementSql.slice(last, i)
    Pair(sql, parameters.reverse())
}

main(system: NodeSystem): Unit {

    let pool = newPool(
        system = system
        host = system.arguments().grab(0)
        database = system.arguments().grab(1)
        user = system.arguments().grab(2)
        password = {system.arguments().grab(3)}
    )

    pool.transaction {connection =>
        let parties = connection.statement("""
            select name, listCode, entityId
            from election."PartyRow"
            where entityId < $maxEntityId
        """)
            .withInt("maxEntityId", 200)
            .map {row =>
                (
                    name = row.getString("name").grab()
                    listCode = row.getString("listCode").grab()
                    entityId = row.getInt("entityId").grab()
                )
            }

        connection.batchMap(
            parties.map {item =>
                connection.statement("""
                    select id
                    from election."PartyRow"
                    where name = $name and listCode = $listCode and entityId = $entityId
                """)
                    .withString("name", item.name)
                    .withString("listCode", item.listCode)
                    .withInt("entityId", item.entityId)
            }
        ) {row =>
            //Log.debug(row)
        }

    }
}
