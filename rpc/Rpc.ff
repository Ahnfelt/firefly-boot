trait I: Rpc[O] {}

capability RpcServer[I, O, C](
    handlers: StringMap[(C, I) => O]
)

newServer[I, O, C](): RpcServer[I, O, C] {
    RpcServer(StringMap.new())
}

extend self[I, O, C]: RpcServer[I, O, C] {
    handle(name: String, context: C, input: I): Option[O] {
        self.handlers.get(name).map {handler =>
            handler(context, input)
        }
    }
    
    addCustom(
        handler: (C, I) => O
    ): Unit {
        let name = "TODO"
        self.handlers.set(name) {context, input =>
            handler(context, input)
        }
    }
}

extend self[C]: RpcServer[Buffer, Buffer, C] {
    add[I: Rpc[O]: HasAnyTag: Serializable, O: Serializable](
        handler: (C, I) => O
    ): Unit {
        let name = Any.anyTag[I]().show()
        self.handlers.set(name) {context, message =>
            let input = Serializable.deserialize(message)
            let output = handler(context, input)
            Serializable.serialize(output)
        }
    }
}

capability RpcClient(
    binaryCall: (String, Buffer) => Buffer
)

extend self: RpcClient {
    call[I: Rpc[O]: HasAnyTag: Serializable, O: Serializable](
        message: I
    ): O {
        let name = Any.anyTag[I]().show()
        let input = Serializable.serialize(message)
        let response = self.binaryCall(name, input)
        Serializable.deserialize(response)
    }
}

newClient(
    httpClient: HttpClient
    prefix: String
    method: String = "POST"
): RpcClient {
    RpcClient {name, buffer =>
        httpClient.fetch(
            method = method
            url = prefix + name
            headers = Map.new()
            payload = Some(buffer)
            options = FetchOptions()
        ) {_.readBuffer()}
    }
}
