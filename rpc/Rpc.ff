trait I: Rpc[O] {}

capability RpcHandlers[I, O, C](
    handlers: StringMap[(C, I) => O]
)

make[I, O, C](): RpcHandlers[I, O, C] {
    RpcHandlers(StringMap.make())
}

extend self[I, O, C]: RpcHandlers[I, O, C] {
    handle(name: String, context: C, input: I): Option[O] {
        self.handlers.get(name).map {handler =>
            handler(context, input)
        }
    }
    
    addCustom(
        handler: (C, I) => O
    ): Unit {
        let name = "TODO"
        self.handlers.set(name) {context, input =>
            handler(context, input)
        }
    }
}

extend self[C]: RpcHandlers[Buffer, Buffer, C] {
    add[I: Rpc[O]: Serializable, O: Serializable](
        handler: (C, I) => O
    ): Unit {
        let name = "TODO"
        self.handlers.set(name) {context, message =>
            let input = Serializable.deserialize(message)
            let output = handler(context, input)
            Serializable.serialize(output)
        }
    }
}

capability RpcClient(
    binaryCall: (String, Buffer) => Buffer
)

extend self: RpcClient {
    call[I: Rpc[O]: Serializable, O: Serializable](
        message: I
    ): O {
        let name = "TODO"
        let input = Serializable.serialize(message)
        let response = self.binaryCall(name, input)
        Serializable.deserialize(response)
    }
}

makeClient(
    httpClient: HttpClient
    prefix: String
    method: String = "POST"
): RpcClient {
    RpcClient {name, buffer =>
        let response = httpClient.fetch(
            url = prefix + name, 
            method = method, 
            body = Some(HttpClient.bodyBuffer(buffer))
        )
        response.readBuffer()
    }
}
