import WebServer from ff:webserver
import Lux from ff:lux
import Pg from ff:postgresql
import Rpc

nodeMain(system: NodeSystem): Unit {
    let rpcServer = Rpc.makeServer()
    rpcServer.add {helloRpc(_, _)}
    
    WebServer.make(system, "localhost", 8080).listen {request =>
        if(request.readPath() == "/") {
            request.writeHeader("Content-Type", "text/html; charset=UTF-8")
            request.writeText("<!doctype html>")
            request.writeText("<div id='main'></div>")
            request.writeText("<script type='module' src='/js/ff/rpc/WebApp.mjs'></script>")
        } elseIf {request.readPath().startsWith("/rpc/")} {
            let name = request.readPath().dropFirst("/rpc/".size())
            let output = rpcServer.handle(name, throw(""), request.readBuffer()).grab()
            request.writeHeader("Content-Type", "application/octet-stream")
            request.writeBuffer(output)
        } elseIf {request.readPath().startsWith("/js/") && !request.readPath().contains("..")} {
            request.writeHeader("Content-Type", "text/javascript; charset=UTF-8")
            request.writeText(system.assets().readText(request.readPath()))
        } else {
            request.writeStatus("404 Not found")
        }
    }
}

buildMain(system: BuildSystem) {
    let browser = system.compileForBrowser("WebApp.ff")
    let assets = AssetSystem.create().addAssets("/js", browser.assets())
    system.setAssets(assets)
}


browserMain(system: BrowserSystem): Unit {
    let rpc = Rpc.makeClient(system.httpClient(), "/rpc/")
    Lux.renderById(system, "main") {lux =>
        renderHello(lux, rpc)
    }
}

renderHello(lux: Lux, rpc: RpcClient) {
    lux.div {
        lux.useSuspense {
            lux.div {
                lux.text("Loading...")
            }
        } {lux =>
            let greeting = rpc.call(HelloRpc(userId = 42))
            lux.div {
                lux.text(greeting)
            }
        }
    }
}

data HelloRpc(userId: Int)
instance HelloRpc: Rpc[String] {}

helloRpc(pool: PgPool, message: HelloRpc): String {
    let name = pool.transaction {transaction =>
        transaction.statement(
            "select name from users where id = $id"
        ).withInt("id", message.userId).map {row =>
            row.getString("name").grab()
        }.grabFirst()
    }
    "Hello from the server, " + name
}

