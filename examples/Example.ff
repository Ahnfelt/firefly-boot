trait Show[T] {
    show(value: T): String
}

instance Show[List[T: Show]] {
    show(value: List[T]) {
        value.map { show(_) }.join(", ")
    }
}

map[A, B](list: List[A], body: A => B): List[B] {
    | Empty, _ => Empty
    | Link(head, tail), _ => Link(body(head), map(tail, body))
}

type Stack {
    EmptyStack
    PushStack(value: Int, stack: Stack)
}

Stack_map(list: Stack, body: Int => Int): Stack {
    | EmptyStack, _ => EmptyStack
    | PushStack s, _ => PushStack(body(s.value), map(s.stack, body))
}

user: (name: String, email: String) = (name = "Joe", email = "jj@example.com")

load(files: FileSystem, file1: String, file2: String): String {
    try {
        files.readText(file1) ++
        files.readText(file2)
    } catch[FileException] {
        | Exception(FileNotFound _) => ""
        | e => throw e
    }
}

type FileException(file: String) {
    FileNotFound
    AccessDenied
}

instance Exceptional[FileException]
