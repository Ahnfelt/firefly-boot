trait Component[C, E](customName: Option[String] = None) {
    name(): String { generate c, e =>
        Generate.string(customName.else { c.typeConstructorName })
    }
    render(self: C, emit: E => Unit): View
}


type Action {
    Increment
    Decrement
}

type Counter(value: Int)

instance Component[Counter, Action] {
    render(self: Counter, emit: Action => Unit) {
        R_view: R_divT(
            R_buttonT(R_click {emit(Decrement)}, R_text("-"))
            R_text(self.value.show)
            R_buttonT(R_click {emit(Increment)}, R_text("+"))
        )
    }
}


type App()

instance Component[App, Never] {
    render(self: Counter, emit: Action => Never) {
        R_useState(0): value, setValue =>
        R_view: R_of(Counter(0)) {
            | Increment => setValue(value - 1)
            | Decrement => setValue(value + 1)
        }
    }
}
